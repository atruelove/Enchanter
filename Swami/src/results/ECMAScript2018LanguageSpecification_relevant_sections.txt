############# BEGIN ## 1 ###########################
ID= 6.2.3.4
Summary= UpdateEmpty ( completionRecord, value )
Description= The abstract operation UpdateEmpty with arguments completionRecord and value performs the following steps:
*0*Assert: If VARcompletionRecord.[[VARType]] is either return or throw, then VARcompletionRecord.[[VARValue]] is not empty. 
*0*If VARcompletionRecord.[[VARValue]] is not empty, return FUNCCompletion(VARcompletionRecord). 
*0*Return Completion { [[VARType]]: VARcompletionRecord.[[VARType]], [[VARValue]]: VARvalue, [[VARTarget]]: VARcompletionRecord.[[VARTarget]] }.     

#############  END  ## 1 ###########################
############# BEGIN ## 2 ###########################
ID= 6.2.4.1
Summary= GetBase ( V )
Description= None
*0*Assert: FUNCType(VARV) is Reference. 
*0*Return the base value component of VARV.     

#############  END  ## 2 ###########################
############# BEGIN ## 3 ###########################
ID= 6.2.4.2
Summary= GetReferencedName ( V )
Description= None
*0*Assert: FUNCType(VARV) is Reference. 
*0*Return the referenced name component of VARV.     

#############  END  ## 3 ###########################
############# BEGIN ## 4 ###########################
ID= 6.2.4.3
Summary= IsStrictReference ( V )
Description= None
*0*Assert: FUNCType(VARV) is Reference. 
*0*Return the strict reference flag of VARV.     

#############  END  ## 4 ###########################
############# BEGIN ## 5 ###########################
ID= 6.2.4.4
Summary= HasPrimitiveBase ( V )
Description= None
*0*Assert: FUNCType(VARV) is Reference. 
*0*If FUNCType(VARV's base value component) is Boolean, String, Symbol, or Number, return true; otherwise return false.     

#############  END  ## 5 ###########################
############# BEGIN ## 6 ###########################
ID= 6.2.4.5
Summary= IsPropertyReference ( V )
Description= None
*0*Assert: FUNCType(VARV) is Reference. 
*0*If either the base value component of VARV is an Object or FUNCHasPrimitiveBase(VARV) is true, return true; otherwise return false.     

#############  END  ## 6 ###########################
############# BEGIN ## 7 ###########################
ID= 6.2.4.6
Summary= IsUnresolvableReference ( V )
Description= None
*0*Assert: FUNCType(VARV) is Reference. 
*0*If the base value component of VARV is undefined, return true; otherwise return false.     

#############  END  ## 7 ###########################
############# BEGIN ## 8 ###########################
ID= 6.2.4.7
Summary= IsSuperReference ( V )
Description= None
*0*Assert: FUNCType(VARV) is Reference. 
*0*If VARV has a thisValue component, return true; otherwise return false.     

#############  END  ## 8 ###########################
############# BEGIN ## 9 ###########################
ID= 6.2.4.8
Summary= GetValue ( V )
Description= The object that may be created in step 5.a.ii is not accessible outside of the above abstract operation and the ordinary object [[Get]] internal method. An implementation might choose to avoid the actual creation of the object.
*0*FUNCReturnIfAbrupt(VARV). 
*0*If FUNCType(VARV) is not Reference, return VARV. 
*0*Let VARbase be FUNCGetBase(VARV). 
*0*If FUNCIsUnresolvableReference(VARV) is true, throw a ReferenceError exception. 
*0*If FUNCIsPropertyReference(VARV) is true, then
*1*If FUNCHasPrimitiveBase(VARV) is true, then
*2*Assert: In this case, VARbase will never be undefined or null. 
*2*Set VARbase to ! FUNCToObject(VARbase). 
*1*Return ? VARbase.[[VARGet]](FUNCGetReferencedName(VARV), FUNCGetThisValue(VARV)). 
*0*Else VARbase must be an Environment Record,
*1*Return ? VARbase.GetBindingValue(FUNCGetReferencedName(VARV), FUNCIsStrictReference(VARV)) (see 8.1.1).     

#############  END  ## 9 ###########################
############# BEGIN ## 10 ###########################
ID= 6.2.4.9
Summary= PutValue ( V, W )
Description= The object that may be created in step 6.a.ii is not accessible outside of the above algorithm and the ordinary object [[Set]] internal method. An implementation might choose to avoid the actual creation of that object.
*0*FUNCReturnIfAbrupt(VARV). 
*0*FUNCReturnIfAbrupt(VARW). 
*0*If FUNCType(VARV) is not Reference, throw a ReferenceError exception. 
*0*Let VARbase be FUNCGetBase(VARV). 
*0*If FUNCIsUnresolvableReference(VARV) is true, then
*1*If FUNCIsStrictReference(VARV) is true, then
*2*Throw a ReferenceError exception. 
*1*Let VARglobalObj be FUNCGetGlobalObject(). 
*1*Return ? FUNCSet(VARglobalObj, FUNCGetReferencedName(VARV), VARW, false). 
*0*Else if FUNCIsPropertyReference(VARV) is true, then
*1*If FUNCHasPrimitiveBase(VARV) is true, then
*2*Assert: In this case, VARbase will never be undefined or null. 
*2*Set VARbase to ! FUNCToObject(VARbase). 
*1*Let VARsucceeded be ? VARbase.[[VARSet]](FUNCGetReferencedName(VARV), VARW, FUNCGetThisValue(VARV)). 
*1*If VARsucceeded is false and FUNCIsStrictReference(VARV) is true, throw a TypeError exception. 
*1*Return. 
*0*Else VARbase must be an Environment Record,
*1*Return ? VARbase.SetMutableBinding(FUNCGetReferencedName(VARV), VARW, FUNCIsStrictReference(VARV)) (see 8.1.1).     

#############  END  ## 10 ###########################
############# BEGIN ## 11 ###########################
ID= 6.2.4.10
Summary= GetThisValue ( V )
Description= None
*0*Assert: FUNCIsPropertyReference(VARV) is true. 
*0*If FUNCIsSuperReference(VARV) is true, then
*1*Return the value of the thisValue component of the reference VARV. 
*0*Return FUNCGetBase(VARV).     

#############  END  ## 11 ###########################
############# BEGIN ## 12 ###########################
ID= 6.2.4.11
Summary= InitializeReferencedBinding ( V, W )
Description= None
*0*FUNCReturnIfAbrupt(VARV). 
*0*FUNCReturnIfAbrupt(VARW). 
*0*Assert: FUNCType(VARV) is Reference. 
*0*Assert: FUNCIsUnresolvableReference(VARV) is false. 
*0*Let VARbase be FUNCGetBase(VARV). 
*0*Assert: VARbase is an Environment Record. 
*0*Return VARbase.InitializeBinding(FUNCGetReferencedName(VARV), VARW).     

#############  END  ## 12 ###########################
############# BEGIN ## 13 ###########################
ID= 6.2.5.1
Summary= IsAccessorDescriptor ( Desc )
Description= When the abstract operation IsAccessorDescriptor is called with Property Descriptor Desc, the following steps are taken:
*0*If VARDesc is undefined, return false. 
*0*If both VARDesc.[[VARGet]] and VARDesc.[[VARSet]] are absent, return false. 
*0*Return true.     

#############  END  ## 13 ###########################
############# BEGIN ## 14 ###########################
ID= 6.2.5.2
Summary= IsDataDescriptor ( Desc )
Description= When the abstract operation IsDataDescriptor is called with Property Descriptor Desc, the following steps are taken:
*0*If VARDesc is undefined, return false. 
*0*If both VARDesc.[[VARValue]] and VARDesc.[[VARWritable]] are absent, return false. 
*0*Return true.     

#############  END  ## 14 ###########################
############# BEGIN ## 15 ###########################
ID= 6.2.5.3
Summary= IsGenericDescriptor ( Desc )
Description= When the abstract operation IsGenericDescriptor is called with Property Descriptor Desc, the following steps are taken:
*0*If VARDesc is undefined, return false. 
*0*If FUNCIsAccessorDescriptor(VARDesc) and FUNCIsDataDescriptor(VARDesc) are both false, return true. 
*0*Return false.     

#############  END  ## 15 ###########################
############# BEGIN ## 16 ###########################
ID= 6.2.5.4
Summary= FromPropertyDescriptor ( Desc )
Description= When the abstract operation FromPropertyDescriptor is called with Property Descriptor Desc, the following steps are taken:
*0*If VARDesc is undefined, return undefined. 
*0*Let VARobj be FUNCObjectCreate(%ObjectPrototype%). 
*0*Assert: VARobj is an extensible ordinary object with no own properties. 
*0*If VARDesc has a [[VARValue]] field, then
*1*Perform FUNCCreateDataProperty(VARobj, "value", VARDesc.[[VARValue]]). 
*0*If VARDesc has a [[VARWritable]] field, then
*1*Perform FUNCCreateDataProperty(VARobj, "writable", VARDesc.[[VARWritable]]). 
*0*If VARDesc has a [[VARGet]] field, then
*1*Perform FUNCCreateDataProperty(VARobj, "get", VARDesc.[[VARGet]]). 
*0*If VARDesc has a [[VARSet]] field, then
*1*Perform FUNCCreateDataProperty(VARobj, "set", VARDesc.[[VARSet]]). 
*0*If VARDesc has an [[VAREnumerable]] field, then
*1*Perform FUNCCreateDataProperty(VARobj, "enumerable", VARDesc.[[VAREnumerable]]). 
*0*If VARDesc has a [[VARConfigurable]] field, then
*1*Perform FUNCCreateDataProperty(VARobj, "configurable", VARDesc.[[VARConfigurable]]). 
*0*Assert: All of the above CreateDataProperty operations return true. 
*0*Return VARobj.     

#############  END  ## 16 ###########################
############# BEGIN ## 17 ###########################
ID= 6.2.5.5
Summary= ToPropertyDescriptor ( Obj )
Description= When the abstract operation ToPropertyDescriptor is called with object Obj, the following steps are taken:
*0*If FUNCType(VARObj) is not Object, throw a TypeError exception. 
*0*Let VARdesc be a new Property Descriptor that initially has no fields. 
*0*Let VARhasEnumerable be ? FUNCHasProperty(VARObj, "enumerable"). 
*0*If VARhasEnumerable is true, then
*1*Let VARenum be FUNCToBoolean(? FUNCGet(VARObj, "enumerable")). 
*1*Set VARdesc.[[VAREnumerable]] to VARenum. 
*0*Let VARhasConfigurable be ? FUNCHasProperty(VARObj, "configurable"). 
*0*If VARhasConfigurable is true, then
*1*Let VARconf be FUNCToBoolean(? FUNCGet(VARObj, "configurable")). 
*1*Set VARdesc.[[VARConfigurable]] to VARconf. 
*0*Let VARhasValue be ? FUNCHasProperty(VARObj, "value"). 
*0*If VARhasValue is true, then
*1*Let VARvalue be ? FUNCGet(VARObj, "value"). 
*1*Set VARdesc.[[VARValue]] to VARvalue. 
*0*Let VARhasWritable be ? FUNCHasProperty(VARObj, "writable"). 
*0*If VARhasWritable is true, then
*1*Let VARwritable be FUNCToBoolean(? FUNCGet(VARObj, "writable")). 
*1*Set VARdesc.[[VARWritable]] to VARwritable. 
*0*Let VARhasGet be ? FUNCHasProperty(VARObj, "get"). 
*0*If VARhasGet is true, then
*1*Let VARgetter be ? FUNCGet(VARObj, "get"). 
*1*If FUNCIsCallable(VARgetter) is false and VARgetter is not undefined, throw a TypeError exception. 
*1*Set VARdesc.[[VARGet]] to VARgetter. 
*0*Let VARhasSet be ? FUNCHasProperty(VARObj, "set"). 
*0*If VARhasSet is true, then
*1*Let VARsetter be ? FUNCGet(VARObj, "set"). 
*1*If FUNCIsCallable(VARsetter) is false and VARsetter is not undefined, throw a TypeError exception. 
*1*Set VARdesc.[[VARSet]] to VARsetter. 
*0*If VARdesc.[[VARGet]] is present or VARdesc.[[VARSet]] is present, then
*1*If VARdesc.[[VARValue]] is present or VARdesc.[[VARWritable]] is present, throw a TypeError exception. 
*0*Return VARdesc.     

#############  END  ## 17 ###########################
############# BEGIN ## 18 ###########################
ID= 6.2.5.6
Summary= CompletePropertyDescriptor ( Desc )
Description= When the abstract operation CompletePropertyDescriptor is called with Property Descriptor Desc, the following steps are taken:
*0*Assert: VARDesc is a Property Descriptor. 
*0*Let VARlike be Record { [[VARValue]]: undefined, [[VARWritable]]: false, [[VARGet]]: undefined, [[VARSet]]: undefined, [[VAREnumerable]]: false, [[VARConfigurable]]: false }. 
*0*If FUNCIsGenericDescriptor(VARDesc) is true or FUNCIsDataDescriptor(VARDesc) is true, then
*1*If VARDesc does not have a [[VARValue]] field, set VARDesc.[[VARValue]] to VARlike.[[VARValue]]. 
*1*If VARDesc does not have a [[VARWritable]] field, set VARDesc.[[VARWritable]] to VARlike.[[VARWritable]]. 
*0*Else,
*1*If VARDesc does not have a [[VARGet]] field, set VARDesc.[[VARGet]] to VARlike.[[VARGet]]. 
*1*If VARDesc does not have a [[VARSet]] field, set VARDesc.[[VARSet]] to VARlike.[[VARSet]]. 
*0*If VARDesc does not have an [[VAREnumerable]] field, set VARDesc.[[VAREnumerable]] to VARlike.[[VAREnumerable]]. 
*0*If VARDesc does not have a [[VARConfigurable]] field, set VARDesc.[[VARConfigurable]] to VARlike.[[VARConfigurable]]. 
*0*Return VARDesc.     

#############  END  ## 18 ###########################
############# BEGIN ## 19 ###########################
ID= 6.2.7.1
Summary= CreateByteDataBlock ( size )
Description= When the abstract operation CreateByteDataBlock is called with integer argument size, the following steps are taken:
*0*Assert: VARsize≥0. 
*0*Let VARdb be a new Data Block value consisting of VARsize bytes. If it is impossible to create such a Data Block, throw a RangeError exception. 
*0*Set all of the bytes of VARdb to 0. 
*0*Return VARdb.     

#############  END  ## 19 ###########################
############# BEGIN ## 20 ###########################
ID= 6.2.7.2
Summary= CreateSharedByteDataBlock ( size )
Description= When the abstract operation CreateSharedByteDataBlock is called with integer argument size, the following steps are taken:
*0*Assert: VARsize≥0. 
*0*Let VARdb be a new Shared Data Block value consisting of VARsize bytes. If it is impossible to create such a Shared Data Block, throw a RangeError exception. 
*0*Let VARexecution be the [[VARCandidateExecution]] field of the surrounding agent's Agent Record. 
*0*Let VAReventList be the [[VAREventList]] field of the element in VARexecution.[[VAREventLists]] whose [[VARAgentSignifier]] is FUNCAgentSignifier(). 
*0*Let VARzero be « 0 ». 
*0*For each index VARi of VARdb, do
*1*Append WriteSharedMemory { [[VAROrder]]: "Init", [[VARNoTear]]: true, [[VARBlock]]: VARdb, [[VARByteIndex]]: VARi, [[VARElementSize]]: 1, [[VARPayload]]: VARzero } to VAReventList. 
*0*Return VARdb.     

#############  END  ## 20 ###########################
############# BEGIN ## 21 ###########################
ID= 6.2.7.3
Summary= CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )
Description= When the abstract operation CopyDataBlockBytes is called, the following steps are taken:
*0*Assert: VARfromBlock and VARtoBlock are distinct Data Block or Shared Data Block values. 
*0*Assert: VARfromIndex, VARtoIndex, and VARcount are integer values ≥ 0. 
*0*Let VARfromSize be the number of bytes in VARfromBlock. 
*0*Assert: VARfromIndex+VARcount ≤ VARfromSize. 
*0*Let VARtoSize be the number of bytes in VARtoBlock. 
*0*Assert: VARtoIndex+VARcount ≤ VARtoSize. 
*0*Repeat, while VARcount&gt;0
*1*If VARfromBlock is a Shared Data Block, then
*2*Let VARexecution be the [[VARCandidateExecution]] field of the surrounding agent's Agent Record. 
*2*Let VAReventList be the [[VAREventList]] field of the element in VARexecution.[[VAREventLists]] whose [[VARAgentSignifier]] is FUNCAgentSignifier(). 
*2*Let VARbytes be a List of length 1 that contains a nondeterministically chosen byte value. 
*2*NOTE: In implementations, VARbytes is the result of a non-atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency. 
*2*Let VARreadEvent be ReadSharedMemory { [[VAROrder]]: "Unordered", [[VARNoTear]]: true, [[VARBlock]]: VARfromBlock, [[VARByteIndex]]: VARfromIndex, [[VARElementSize]]: 1 }. 
*2*Append VARreadEvent to VAReventList. 
*2*Append Chosen Value Record { [[VAREvent]]: VARreadEvent, [[VARChosenValue]]: VARbytes } to VARexecution.[[VARChosenValues]]. 
*2*If VARtoBlock is a Shared Data Block, then
*3*Append WriteSharedMemory { [[VAROrder]]: "Unordered", [[VARNoTear]]: true, [[VARBlock]]: VARtoBlock, [[VARByteIndex]]: VARtoIndex, [[VARElementSize]]: 1, [[VARPayload]]: VARbytes } to VAReventList. 
*2*Else,
*3*Set VARtoBlock[VARtoIndex] to VARbytes[0]. 
*1*Else,
*2*Assert: VARtoBlock is not a Shared Data Block. 
*2*Set VARtoBlock[VARtoIndex] to VARfromBlock[VARfromIndex]. 
*1*Increment VARtoIndex and VARfromIndex each by 1. 
*1*Decrement VARcount by 1. 
*0*Return FUNCNormalCompletion(empty).     

#############  END  ## 21 ###########################
############# BEGIN ## 22 ###########################
ID= 7.1.1
Summary= ToPrimitive ( input [ , PreferredType ] )
Description= The abstract operation ToPrimitive takes an input argument and an optional argument PreferredType. The abstract operation ToPrimitive converts its input argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint PreferredType to favour that type. Conversion occurs according to the following algorithm:
*0*Assert: VARinput is an ECMAScript language value. 
*0*If FUNCType(VARinput) is Object, then
*1*If VARPreferredType is not present, then
*2*Let VARhint be "default". 
*1*Else,
*2*if VARPreferredType is hint String, then
*3*Let VARhint be "string".
*1*Else,
*2*VARPreferredType is hint Number, let VARhint be "number".
*1*Let VARexoticToPrim be ? FUNCGetMethod(VARinput, @@toPrimitive). 
*1*If VARexoticToPrim is not undefined, then
*2*Let VARresult be ? FUNCCall(VARexoticToPrim, VARinput, « VARhint »). 
*2*If FUNCType(VARresult) is not Object, return VARresult. 
*2*Throw a TypeError exception. 
*1*If VARhint is "default", set VARhint to "number". 
*1*Return ? FUNCOrdinaryToPrimitive(VARinput, VARhint). 
*0*Return VARinput.    

#############  END  ## 22 ###########################
############# BEGIN ## 23 ###########################
ID= 7.1.1.1
Summary= OrdinaryToPrimitive ( O, hint )
Description= When the abstract operation OrdinaryToPrimitive is called with arguments O and hint, the following steps are taken:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCType(VARhint) is String and its value is either "string" or "number". 
*0*If VARhint is "string", then
*1*Let VARmethodNames be « "toString", "valueOf" ». 
*0*Else,
*1*Let VARmethodNames be « "valueOf", "toString" ». 
*0*For each VARname in VARmethodNames in List order, do
*1*Let VARmethod be ? FUNCGet(VARO, VARname). 
*1*If FUNCIsCallable(VARmethod) is true, then
*2*Let VARresult be ? FUNCCall(VARmethod, VARO). 
*2*If FUNCType(VARresult) is not Object, return VARresult. 
*0*Throw a TypeError exception.     

#############  END  ## 23 ###########################
############# BEGIN ## 24 ###########################
ID= 7.1.3
Summary= ToNumber ( argument )
Description= The abstract operation ToNumber converts argument to a value of type Number according to  Table 10:
*0*Let VARprimValue be ? FUNCToPrimitive(VARargument, hint Number). 
*0*Return ? FUNCToNumber(VARprimValue).        

#############  END  ## 24 ###########################
############# BEGIN ## 25 ###########################
ID= 7.1.4
Summary= ToInteger ( argument )
Description= The abstract operation ToInteger converts argument to an integral numeric value. This abstract operation functions as follows:
*0*Let VARnumber be ? FUNCToNumber(VARargument). 
*0*If VARnumber is NaN, return +0. 
*0*If VARnumber is +0, -0, +∞, or -∞, return VARnumber. 
*0*Return the number value that is the same sign as VARnumber and whose magnitude is floor(abs(VARnumber)).    

#############  END  ## 25 ###########################
############# BEGIN ## 26 ###########################
ID= 7.1.5
Summary= ToInt32 ( argument )
Description= The abstract operation ToInt32 converts argument to one of 232 integer values in the range  -231 through  231-1, inclusive. This abstract operation functions as follows:
*0*Let VARnumber be ? FUNCToNumber(VARargument). 
*0*If VARnumber is NaN, +0, -0, +∞, or -∞, return +0. 
*0*Let VARint be the mathematical value that is the same sign as VARnumber and whose magnitude is floor(abs(VARnumber)). 
*0*Let VARint32bit be VARint modulo 2--EXP0--32--EXP1--. 
*0*If VARint32bit ≥ 2--EXP0--31--EXP1--, return VARint32bit - 2--EXP0--32--EXP1--; otherwise return VARint32bit.    

#############  END  ## 26 ###########################
############# BEGIN ## 27 ###########################
ID= 7.1.6
Summary= ToUint32 ( argument )
Description= The abstract operation ToUint32 converts argument to one of 232 integer values in the range 0 through  232-1, inclusive. This abstract operation functions as follows:
*0*Let VARnumber be ? FUNCToNumber(VARargument). 
*0*If VARnumber is NaN, +0, -0, +∞, or -∞, return +0. 
*0*Let VARint be the mathematical value that is the same sign as VARnumber and whose magnitude is floor(abs(VARnumber)). 
*0*Let VARint32bit be VARint modulo 2--EXP0--32--EXP1--. 
*0*Return VARint32bit.    

#############  END  ## 27 ###########################
############# BEGIN ## 28 ###########################
ID= 7.1.7
Summary= ToInt16 ( argument )
Description= The abstract operation ToInt16 converts argument to one of 216 integer values in the range -32768 through 32767, inclusive. This abstract operation functions as follows:
*0*Let VARnumber be ? FUNCToNumber(VARargument). 
*0*If VARnumber is NaN, +0, -0, +∞, or -∞, return +0. 
*0*Let VARint be the mathematical value that is the same sign as VARnumber and whose magnitude is floor(abs(VARnumber)). 
*0*Let VARint16bit be VARint modulo 2--EXP0--16--EXP1--. 
*0*If VARint16bit ≥ 2--EXP0--15--EXP1--, return VARint16bit - 2--EXP0--16--EXP1--; otherwise return VARint16bit.    

#############  END  ## 28 ###########################
############# BEGIN ## 29 ###########################
ID= 7.1.8
Summary= ToUint16 ( argument )
Description= The abstract operation ToUint16 converts argument to one of 216 integer values in the range 0 through  216-1, inclusive. This abstract operation functions as follows:
*0*Let VARnumber be ? FUNCToNumber(VARargument). 
*0*If VARnumber is NaN, +0, -0, +∞, or -∞, return +0. 
*0*Let VARint be the mathematical value that is the same sign as VARnumber and whose magnitude is floor(abs(VARnumber)). 
*0*Let VARint16bit be VARint modulo 2--EXP0--16--EXP1--. 
*0*Return VARint16bit.    

#############  END  ## 29 ###########################
############# BEGIN ## 30 ###########################
ID= 7.1.9
Summary= ToInt8 ( argument )
Description= The abstract operation ToInt8 converts argument to one of 28 integer values in the range -128 through 127, inclusive. This abstract operation functions as follows:
*0*Let VARnumber be ? FUNCToNumber(VARargument). 
*0*If VARnumber is NaN, +0, -0, +∞, or -∞, return +0. 
*0*Let VARint be the mathematical value that is the same sign as VARnumber and whose magnitude is floor(abs(VARnumber)). 
*0*Let VARint8bit be VARint modulo 2--EXP0--8--EXP1--. 
*0*If VARint8bit ≥ 2--EXP0--7--EXP1--, return VARint8bit - 2--EXP0--8--EXP1--; otherwise return VARint8bit.    

#############  END  ## 30 ###########################
############# BEGIN ## 31 ###########################
ID= 7.1.10
Summary= ToUint8 ( argument )
Description= The abstract operation ToUint8 converts argument to one of 28 integer values in the range 0 through 255, inclusive. This abstract operation functions as follows:
*0*Let VARnumber be ? FUNCToNumber(VARargument). 
*0*If VARnumber is NaN, +0, -0, +∞, or -∞, return +0. 
*0*Let VARint be the mathematical value that is the same sign as VARnumber and whose magnitude is floor(abs(VARnumber)). 
*0*Let VARint8bit be VARint modulo 2--EXP0--8--EXP1--. 
*0*Return VARint8bit.    

#############  END  ## 31 ###########################
############# BEGIN ## 32 ###########################
ID= 7.1.11
Summary= ToUint8Clamp ( argument )
Description= The abstract operation ToUint8Clamp converts argument to one of 28 integer values in the range 0 through 255, inclusive. This abstract operation functions as follows:
*0*Let VARnumber be ? FUNCToNumber(VARargument). 
*0*If VARnumber is NaN, return +0. 
*0*If VARnumber ≤ 0, return +0. 
*0*If VARnumber ≥ 255, return 255. 
*0*Let VARf be floor(VARnumber). 
*0*If VARf + 0.5 &lt; VARnumber, return VARf + 1. 
*0*If VARnumber &lt; VARf + 0.5, return VARf. 
*0*If VARf is odd, return VARf + 1. 
*0*Return VARf.    

#############  END  ## 32 ###########################
############# BEGIN ## 33 ###########################
ID= 7.1.12
Summary= ToString ( argument )
Description= The abstract operation ToString converts argument to a value of type String according to  Table 11:
*0*Let VARprimValue be ? FUNCToPrimitive(VARargument, hint String). 
*0*Return ? FUNCToString(VARprimValue).        

#############  END  ## 33 ###########################
############# BEGIN ## 34 ###########################
ID= 7.1.12.1
Summary= NumberToString ( m )
Description= The abstract operation NumberToString converts a Number m to String format as follows:
*0*If VARm is NaN, return the String "NaN". 
*0*If VARm is +0 or -0, return the String "0". 
*0*If VARm is less than zero, return the FUNCstring-concatenation of "-" and ! NumberToString(-VARm). 
*0*If VARm is +∞, return the String "Infinity". 
*0*Otherwise, let VARn, VARk, and VARs be integers such that VARk ≥ 1, 10--EXP0--VARk-1--EXP1-- ≤ VARs &lt; 10--EXP0--VARk--EXP1--, the Number value for VARs × 10--EXP0--VARn-VARk--EXP1-- is VARm, and VARk is as small as possible. Note that VARk is the number of digits in the decimal representation of VARs, that VARs is not divisible by 10, and that the least significant digit of VARs is not necessarily uniquely determined by these criteria. 
*0*If VARk ≤ VARn ≤ 21, return the string-concatenation of:the code units of the VARk digits of the decimal representation of VARs (in order, with no leading zeroes) VARn-VARk occurrences of the code unit 0x0030 (DIGIT ZERO) 
*0*If 0 &lt; VARn ≤ 21, return the string-concatenation of:the code units of the most significant VARn digits of the decimal representation of VARs the code unit 0x002E (FULL STOP) the code units of the remaining VARk-VARn digits of the decimal representation of VARs 
*0*If -6 &lt; VARn ≤ 0, return the string-concatenation of:the code unit 0x0030 (DIGIT ZERO) the code unit 0x002E (FULL STOP) -VARn occurrences of the code unit 0x0030 (DIGIT ZERO) the code units of the VARk digits of the decimal representation of VARs 
*0*Otherwise, if VARk = 1, return the FUNCstring-concatenation of:the code unit of the single digit of VARsthe code unit 0x0065 (LATIN SMALL LETTER E)the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether VARn-1 is positive or negativethe code units of the decimal representation of the integer abs(VARn-1) (with no leading zeroes) 
*0*Return the FUNCstring-concatenation of:the code units of the most significant digit of the decimal representation of VARsthe code unit 0x002E (FULL STOP)the code units of the remaining VARk-1 digits of the decimal representation of VARsthe code unit 0x0065 (LATIN SMALL LETTER E)the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether VARn-1 is positive or negativethe code units of the decimal representation of the integer abs(VARn-1) (with no leading zeroes)     

#############  END  ## 34 ###########################
############# BEGIN ## 35 ###########################
ID= 7.1.14
Summary= ToPropertyKey ( argument )
Description= The abstract operation ToPropertyKey converts argument to a value that can be used as a property key by performing the following steps:
*0*Let VARkey be ? FUNCToPrimitive(VARargument, hint String). 
*0*If FUNCType(VARkey) is Symbol, then
*1*Return VARkey. 
*0*Return ! FUNCToString(VARkey).    

#############  END  ## 35 ###########################
############# BEGIN ## 36 ###########################
ID= 7.1.15
Summary= ToLength ( argument )
Description= The abstract operation ToLength converts argument to an integer suitable for use as the length of an array-like object. It performs the following steps:
*0*Let VARlen be ? FUNCToInteger(VARargument). 
*0*If VARlen ≤ +0, return +0. 
*0*Return min(VARlen, 2--EXP0--53--EXP1---1).    

#############  END  ## 36 ###########################
############# BEGIN ## 37 ###########################
ID= 7.1.16
Summary= CanonicalNumericIndexString ( argument )
Description= The abstract operation CanonicalNumericIndexString returns argument converted to a numeric value if it is a String representation of a Number that would be produced by ToString, or the string "-0". Otherwise, it returns undefined. This abstract operation functions as follows:
*0*Assert: FUNCType(VARargument) is String. 
*0*If VARargument is "-0", return -0. 
*0*Let VARn be ! FUNCToNumber(VARargument). 
*0*If FUNCSameValue(! FUNCToString(VARn), VARargument) is false, return undefined. 
*0*Return VARn.    

#############  END  ## 37 ###########################
############# BEGIN ## 38 ###########################
ID= 7.1.17
Summary= ToIndex ( value )
Description= The abstract operation ToIndex returns value argument converted to a numeric value if it is a valid integer index value. This abstract operation functions as follows:
*0*If VARvalue is undefined, then
*1*Let VARindex be 0. 
*0*Else,
*1*Let VARintegerIndex be ? FUNCToInteger(VARvalue). 
*1*If VARintegerIndex &lt; 0, throw a RangeError exception. 
*1*Let VARindex be ! FUNCToLength(VARintegerIndex). 
*1*If FUNCSameValueZero(VARintegerIndex, VARindex) is false, throw a RangeError exception. 
*0*Return VARindex.    

#############  END  ## 38 ###########################
############# BEGIN ## 39 ###########################
ID= 7.2.2
Summary= IsArray ( argument )
Description= The abstract operation IsArray takes one argument argument, and performs the following steps:
*0*If FUNCType(VARargument) is not Object, return false. 
*0*If VARargument is an Array exotic object, return true. 
*0*If VARargument is a Proxy exotic object, then
*1*If VARargument.[[VARProxyHandler]] is null, throw a TypeError exception. 
*1*Let VARtarget be VARargument.[[VARProxyTarget]]. 
*1*Return ? FUNCIsArray(VARtarget). 
*0*Return false.    

#############  END  ## 39 ###########################
############# BEGIN ## 40 ###########################
ID= 7.2.3
Summary= IsCallable ( argument )
Description= The abstract operation IsCallable determines if argument, which must be an ECMAScript language value, is a callable function with a [[Call]] internal method.
*0*If FUNCType(VARargument) is not Object, return false. 
*0*If VARargument has a [[VARCall]] internal method, return true. 
*0*Return false.    

#############  END  ## 40 ###########################
############# BEGIN ## 41 ###########################
ID= 7.2.4
Summary= IsConstructor ( argument )
Description= The abstract operation IsConstructor determines if argument, which must be an ECMAScript language value, is a function object with a [[Construct]] internal method.
*0*If FUNCType(VARargument) is not Object, return false. 
*0*If VARargument has a [[VARConstruct]] internal method, return true. 
*0*Return false.    

#############  END  ## 41 ###########################
############# BEGIN ## 42 ###########################
ID= 7.2.5
Summary= IsExtensible ( O )
Description= The abstract operation IsExtensible is used to determine whether additional properties can be added to the object that is O. A Boolean value is returned. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Return ? VARO.[[VARIsExtensible]]().    

#############  END  ## 42 ###########################
############# BEGIN ## 43 ###########################
ID= 7.2.6
Summary= IsInteger ( argument )
Description= The abstract operation IsInteger determines if argument is a finite integer numeric value.
*0*If FUNCType(VARargument) is not Number, return false. 
*0*If VARargument is NaN, +∞, or -∞, return false. 
*0*If floor(abs(VARargument)) ≠ abs(VARargument), return false. 
*0*Return true.    

#############  END  ## 43 ###########################
############# BEGIN ## 44 ###########################
ID= 7.2.7
Summary= IsPropertyKey ( argument )
Description= The abstract operation IsPropertyKey determines if argument, which must be an ECMAScript language value, is a value that may be used as a property key.
*0*If FUNCType(VARargument) is String, return true. 
*0*If FUNCType(VARargument) is Symbol, return true. 
*0*Return false.    

#############  END  ## 44 ###########################
############# BEGIN ## 45 ###########################
ID= 7.2.8
Summary= IsRegExp ( argument )
Description= The abstract operation IsRegExp with argument argument performs the following steps:
*0*If FUNCType(VARargument) is not Object, return false. 
*0*Let VARmatcher be ? FUNCGet(VARargument, @@match). 
*0*If VARmatcher is not undefined, return FUNCToBoolean(VARmatcher). 
*0*If VARargument has a [[VARRegExpMatcher]] internal slot, return true. 
*0*Return false.    

#############  END  ## 45 ###########################
############# BEGIN ## 46 ###########################
ID= 7.2.9
Summary= IsStringPrefix ( p, q )
Description= The abstract operation IsStringPrefix determines if String p is a prefix of String q.
*0*Assert: FUNCType(VARp) is String. 
*0*Assert: FUNCType(VARq) is String. 
*0*If VARq can be the string-concatenation of VARp and some other String VARr, return true. Otherwise, return false. 
*0*NOTE: Any String is a prefix of itself, because VARr may be the empty String.    

#############  END  ## 46 ###########################
############# BEGIN ## 47 ###########################
ID= 7.2.10
Summary= SameValue ( x, y )
Description= The internal comparison abstract operation SameValue(x, y), where x and y are ECMAScript language values, produces true or false. Such a comparison is performed as follows:
*0*If FUNCType(VARx) is different from FUNCType(VARy), return false. 
*0*If FUNCType(VARx) is Number, then
*1*If VARx is NaN and VARy is NaN, return true. 
*1*If VARx is +0 and VARy is -0, return false. 
*1*If VARx is -0 and VARy is +0, return false. 
*1*If VARx is the same Number value as VARy, return true. 
*1*Return false. 
*0*Return FUNCSameValueNonNumber(VARx, VARy).    

#############  END  ## 47 ###########################
############# BEGIN ## 48 ###########################
ID= 7.2.11
Summary= SameValueZero ( x, y )
Description= The internal comparison abstract operation SameValueZero(x, y), where x and y are ECMAScript language values, produces true or false. Such a comparison is performed as follows:
*0*If FUNCType(VARx) is different from FUNCType(VARy), return false. 
*0*If FUNCType(VARx) is Number, then
*1*If VARx is NaN and VARy is NaN, return true. 
*1*If VARx is +0 and VARy is -0, return true. 
*1*If VARx is -0 and VARy is +0, return true. 
*1*If VARx is the same Number value as VARy, return true. 
*1*Return false. 
*0*Return FUNCSameValueNonNumber(VARx, VARy).    

#############  END  ## 48 ###########################
############# BEGIN ## 49 ###########################
ID= 7.2.12
Summary= SameValueNonNumber ( x, y )
Description= The internal comparison abstract operation SameValueNonNumber(x, y), where neither x nor y are Number values, produces true or false. Such a comparison is performed as follows:
*0*Assert: FUNCType(VARx) is not Number. 
*0*Assert: FUNCType(VARx) is the same as FUNCType(VARy). 
*0*If FUNCType(VARx) is Undefined, return true. 
*0*If FUNCType(VARx) is Null, return true. 
*0*If FUNCType(VARx) is String, then
*1*If VARx and VARy are exactly the same sequence of code units (same length and same code units at corresponding indices), return true; otherwise, return false. 
*0*If FUNCType(VARx) is Boolean, then
*1*If VARx and VARy are both true or both false, return true; otherwise, return false. 
*0*If FUNCType(VARx) is Symbol, then
*1*If VARx and VARy are both the same Symbol value, return true; otherwise, return false. 
*0*If VARx and VARy are the same Object value, return true. Otherwise, return false.    

#############  END  ## 49 ###########################
############# BEGIN ## 50 ###########################
ID= 7.3.1
Summary= Get ( O, P )
Description= The abstract operation Get is used to retrieve the value of a specific property of an object. The operation is called with arguments O and P where O is the object and P is the property key. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Return ? VARO.[[VARGet]](VARP, VARO).    

#############  END  ## 50 ###########################
############# BEGIN ## 51 ###########################
ID= 7.3.2
Summary= GetV ( V, P )
Description= The abstract operation GetV is used to retrieve the value of a specific property of an ECMAScript language value. If the value is not an object, the property lookup is performed using a wrapper object appropriate for the type of the value. The operation is called with arguments V and P where V is the value and P is the property key. This abstract operation performs the following steps:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARO be ? FUNCToObject(VARV). 
*0*Return ? VARO.[[VARGet]](VARP, VARV).    

#############  END  ## 51 ###########################
############# BEGIN ## 52 ###########################
ID= 7.3.3
Summary= Set ( O, P, V, Throw )
Description= The abstract operation Set is used to set the value of a specific property of an object. The operation is called with arguments O, P, V, and Throw where O is the object, P is the property key, V is the new value for the property and Throw is a Boolean flag. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Assert: FUNCType(VARThrow) is Boolean. 
*0*Let VARsuccess be ? VARO.[[VARSet]](VARP, VARV, VARO). 
*0*If VARsuccess is false and VARThrow is true, throw a TypeError exception. 
*0*Return VARsuccess.    

#############  END  ## 52 ###########################
############# BEGIN ## 53 ###########################
ID= 7.3.4
Summary= CreateDataProperty ( O, P, V )
Description= The abstract operation CreateDataProperty is used to create a new own property of an object. The operation is called with arguments O, P, and V where O is the object, P is the property key, and V is the value for the property. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARnewDesc be the PropertyDescriptor { [[VARValue]]: VARV, [[VARWritable]]: true, [[VAREnumerable]]: true, [[VARConfigurable]]: true }. 
*0*Return ? VARO.[[VARDefineOwnProperty]](VARP, VARnewDesc).    

#############  END  ## 53 ###########################
############# BEGIN ## 54 ###########################
ID= 7.3.5
Summary= CreateMethodProperty ( O, P, V )
Description= The abstract operation CreateMethodProperty is used to create a new own property of an object. The operation is called with arguments O, P, and V where O is the object, P is the property key, and V is the value for the property. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARnewDesc be the PropertyDescriptor { [[VARValue]]: VARV, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: true }. 
*0*Return ? VARO.[[VARDefineOwnProperty]](VARP, VARnewDesc).    

#############  END  ## 54 ###########################
############# BEGIN ## 55 ###########################
ID= 7.3.6
Summary= CreateDataPropertyOrThrow ( O, P, V )
Description= The abstract operation CreateDataPropertyOrThrow is used to create a new own property of an object. It throws a TypeError exception if the requested property update cannot be performed. The operation is called with arguments O, P, and V where O is the object, P is the property key, and V is the value for the property. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARsuccess be ? FUNCCreateDataProperty(VARO, VARP, VARV). 
*0*If VARsuccess is false, throw a TypeError exception. 
*0*Return VARsuccess.    

#############  END  ## 55 ###########################
############# BEGIN ## 56 ###########################
ID= 7.3.7
Summary= DefinePropertyOrThrow ( O, P, desc )
Description= The abstract operation DefinePropertyOrThrow is used to call the [[DefineOwnProperty]] internal method of an object in a manner that will throw a TypeError exception if the requested property update cannot be performed. The operation is called with arguments O, P, and desc where O is the object, P is the property key, and desc is the Property Descriptor for the property. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARsuccess be ? VARO.[[VARDefineOwnProperty]](VARP, VARdesc). 
*0*If VARsuccess is false, throw a TypeError exception. 
*0*Return VARsuccess.    

#############  END  ## 56 ###########################
############# BEGIN ## 57 ###########################
ID= 7.3.8
Summary= DeletePropertyOrThrow ( O, P )
Description= The abstract operation DeletePropertyOrThrow is used to remove a specific own property of an object. It throws an exception if the property is not configurable. The operation is called with arguments O and P where O is the object and P is the property key. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARsuccess be ? VARO.[[VARDelete]](VARP). 
*0*If VARsuccess is false, throw a TypeError exception. 
*0*Return VARsuccess.    

#############  END  ## 57 ###########################
############# BEGIN ## 58 ###########################
ID= 7.3.9
Summary= GetMethod ( V, P )
Description= The abstract operation GetMethod is used to get the value of a specific property of an ECMAScript language value when the value of the property is expected to be a function. The operation is called with arguments V and P where V is the ECMAScript language value, P is the property key. This abstract operation performs the following steps:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARfunc be ? FUNCGetV(VARV, VARP). 
*0*If VARfunc is either undefined or null, return undefined. 
*0*If FUNCIsCallable(VARfunc) is false, throw a TypeError exception. 
*0*Return VARfunc.    

#############  END  ## 58 ###########################
############# BEGIN ## 59 ###########################
ID= 7.3.10
Summary= HasProperty ( O, P )
Description= The abstract operation HasProperty is used to determine whether an object has a property with the specified property key. The property may be either an own or inherited. A Boolean value is returned. The operation is called with arguments O and P where O is the object and P is the property key. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Return ? VARO.[[VARHasProperty]](VARP).    

#############  END  ## 59 ###########################
############# BEGIN ## 60 ###########################
ID= 7.3.11
Summary= HasOwnProperty ( O, P )
Description= The abstract operation HasOwnProperty is used to determine whether an object has an own property with the specified property key. A Boolean value is returned. The operation is called with arguments O and P where O is the object and P is the property key. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARdesc be ? VARO.[[VARGetOwnProperty]](VARP). 
*0*If VARdesc is undefined, return false. 
*0*Return true.    

#############  END  ## 60 ###########################
############# BEGIN ## 61 ###########################
ID= 7.3.12
Summary= Call ( F, V [ , argumentsList ] )
Description= The abstract operation Call is used to call the [[Call]] internal method of a function object. The operation is called with arguments F, V, and optionally argumentsList where F is the function object, V is an ECMAScript language value that is the this value of the [[Call]], and argumentsList is the value passed to the corresponding argument of the internal method. If argumentsList is not present, a new empty List is used as its value. This abstract operation performs the following steps:
*0*If VARargumentsList is not present, set VARargumentsList to a new empty List. 
*0*If FUNCIsCallable(VARF) is false, throw a TypeError exception. 
*0*Return ? VARF.[[VARCall]](VARV, VARargumentsList).    

#############  END  ## 61 ###########################
############# BEGIN ## 62 ###########################
ID= 7.3.13
Summary= Construct ( F [ , argumentsList [ , newTarget ]] )
Description= The abstract operation Construct is used to call the [[Construct]] internal method of a function object. The operation is called with arguments F, and optionally argumentsList, and newTarget where F is the function object. argumentsList and newTarget are the values to be passed as the corresponding arguments of the internal method. If argumentsList is not present, a new empty List is used as its value. If newTarget is not present, F is used as its value. This abstract operation performs the following steps:
*0*If VARnewTarget is not present, set VARnewTarget to VARF. 
*0*If VARargumentsList is not present, set VARargumentsList to a new empty List. 
*0*Assert: FUNCIsConstructor(VARF) is true. 
*0*Assert: FUNCIsConstructor(VARnewTarget) is true. 
*0*Return ? VARF.[[VARConstruct]](VARargumentsList, VARnewTarget).    

#############  END  ## 62 ###########################
############# BEGIN ## 63 ###########################
ID= 7.3.14
Summary= SetIntegrityLevel ( O, level )
Description= The abstract operation SetIntegrityLevel is used to fix the set of own properties of an object. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: VARlevel is either "sealed" or "frozen". 
*0*Let VARstatus be ? VARO.[[VARPreventExtensions]](). 
*0*If VARstatus is false, return false. 
*0*Let VARkeys be ? VARO.[[VAROwnPropertyKeys]](). 
*0*If VARlevel is "sealed", then
*1*For each element VARk of VARkeys, do
*2*Perform ? FUNCDefinePropertyOrThrow(VARO, VARk, PropertyDescriptor { [[VARConfigurable]]: false }). 
*0*Else VARlevel is "frozen",
*1*For each element VARk of VARkeys, do
*2*Let VARcurrentDesc be ? VARO.[[VARGetOwnProperty]](VARk). 
*2*If VARcurrentDesc is not undefined, then
*3*If FUNCIsAccessorDescriptor(VARcurrentDesc) is true, then
*4*Let VARdesc be the PropertyDescriptor { [[VARConfigurable]]: false }. 
*3*Else,
*4*Let VARdesc be the PropertyDescriptor { [[VARConfigurable]]: false, [[VARWritable]]: false }. 
*3*Perform ? FUNCDefinePropertyOrThrow(VARO, VARk, VARdesc). 
*0*Return true.    

#############  END  ## 63 ###########################
############# BEGIN ## 64 ###########################
ID= 7.3.15
Summary= TestIntegrityLevel ( O, level )
Description= The abstract operation TestIntegrityLevel is used to determine if the set of own properties of an object are fixed. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: VARlevel is either "sealed" or "frozen". 
*0*Let VARstatus be ? FUNCIsExtensible(VARO). 
*0*If VARstatus is true, return false. 
*0*NOTE: If the object is extensible, none of its properties are examined. 
*0*Let VARkeys be ? VARO.[[VAROwnPropertyKeys]](). 
*0*For each element VARk of VARkeys, do
*1*Let VARcurrentDesc be ? VARO.[[VARGetOwnProperty]](VARk). 
*1*If VARcurrentDesc is not undefined, then
*2*If VARcurrentDesc.[[VARConfigurable]] is true, return false. 
*2*If VARlevel is "frozen" and FUNCIsDataDescriptor(VARcurrentDesc) is true, then
*3*If VARcurrentDesc.[[VARWritable]] is true, return false. 
*0*Return true.    

#############  END  ## 64 ###########################
############# BEGIN ## 65 ###########################
ID= 7.3.16
Summary= CreateArrayFromList ( elements )
Description= The abstract operation CreateArrayFromList is used to create an Array object whose elements are provided by a List. This abstract operation performs the following steps:
*0*Assert: VARelements is a List whose elements are all ECMAScript language values. 
*0*Let VARarray be ! FUNCArrayCreate(0). 
*0*Let VARn be 0. 
*0*For each element VARe of VARelements, do
*1*Let VARstatus be FUNCCreateDataProperty(VARarray, ! FUNCToString(VARn), VARe). 
*1*Assert: VARstatus is true. 
*1*Increment VARn by 1. 
*0*Return VARarray.    

#############  END  ## 65 ###########################
############# BEGIN ## 66 ###########################
ID= 7.3.17
Summary= CreateListFromArrayLike ( obj [ , elementTypes ] )
Description= The abstract operation CreateListFromArrayLike is used to create a List value whose elements are provided by the indexed properties of an array-like object, obj. The optional argument elementTypes is a List containing the names of ECMAScript Language Types that are allowed for element values of the List that is created. This abstract operation performs the following steps:
*0*If VARelementTypes is not present, set VARelementTypes to « Undefined, Null, Boolean, String, Symbol, Number, Object ». 
*0*If FUNCType(VARobj) is not Object, throw a TypeError exception. 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARobj, "length")). 
*0*Let VARlist be a new empty List. 
*0*Let VARindex be 0. 
*0*Repeat, while VARindex &lt; VARlen
*1*Let VARindexName be ! FUNCToString(VARindex). 
*1*Let VARnext be ? FUNCGet(VARobj, VARindexName). 
*1*If FUNCType(VARnext) is not an element of VARelementTypes, throw a TypeError exception. 
*1*Append VARnext as the last element of VARlist. 
*1*Set VARindex to VARindex + 1. 
*0*Return VARlist.    

#############  END  ## 66 ###########################
############# BEGIN ## 67 ###########################
ID= 7.3.18
Summary= Invoke ( V, P [ , argumentsList ] )
Description= The abstract operation Invoke is used to call a method property of an ECMAScript language value. The operation is called with arguments V, P, and optionally argumentsList where V serves as both the lookup point for the property and the this value of the call, P is the property key, and argumentsList is the list of arguments values passed to the method. If argumentsList is not present, a new empty List is used as its value. This abstract operation performs the following steps:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*If VARargumentsList is not present, set VARargumentsList to a new empty List. 
*0*Let VARfunc be ? FUNCGetV(VARV, VARP). 
*0*Return ? FUNCCall(VARfunc, VARV, VARargumentsList).    

#############  END  ## 67 ###########################
############# BEGIN ## 68 ###########################
ID= 7.3.19
Summary= OrdinaryHasInstance ( C, O )
Description= The abstract operation OrdinaryHasInstance implements the default algorithm for determining if an object O inherits from the instance object inheritance path provided by constructor C. This abstract operation performs the following steps:
*0*If FUNCIsCallable(VARC) is false, return false. 
*0*If VARC has a [[VARBoundTargetFunction]] internal slot, then
*1*Let VARBC be VARC.[[VARBoundTargetFunction]]. 
*1*Return ? FUNCInstanceofOperator(VARO, VARBC). 
*0*If FUNCType(VARO) is not Object, return false. 
*0*Let VARP be ? FUNCGet(VARC, "prototype"). 
*0*If FUNCType(VARP) is not Object, throw a TypeError exception. 
*0*Repeat,
*1*Set VARO to ? VARO.[[VARGetPrototypeOf]](). 
*1*If VARO is null, return false. 
*1*If FUNCSameValue(VARP, VARO) is true, return true.    

#############  END  ## 68 ###########################
############# BEGIN ## 69 ###########################
ID= 7.3.20
Summary= SpeciesConstructor ( O, defaultConstructor )
Description= The abstract operation SpeciesConstructor is used to retrieve the constructor that should be used to create new objects that are derived from the argument object O. The defaultConstructor argument is the constructor to use if a constructor @@species property cannot be found starting from O. This abstract operation performs the following steps:
*0*Assert: FUNCType(VARO) is Object. 
*0*Let VARC be ? FUNCGet(VARO, "constructor"). 
*0*If VARC is undefined, return VARdefaultConstructor. 
*0*If FUNCType(VARC) is not Object, throw a TypeError exception. 
*0*Let VARS be ? FUNCGet(VARC, @@species). 
*0*If VARS is either undefined or null, return VARdefaultConstructor. 
*0*If FUNCIsConstructor(VARS) is true, return VARS. 
*0*Throw a TypeError exception.    

#############  END  ## 69 ###########################
############# BEGIN ## 70 ###########################
ID= 7.3.21
Summary= EnumerableOwnPropertyNames ( O, kind )
Description= When the abstract operation EnumerableOwnPropertyNames is called with Object O and String kind the following steps are taken:
*0*Assert: FUNCType(VARO) is Object. 
*0*Let VARownKeys be ? VARO.[[VAROwnPropertyKeys]](). 
*0*Let VARproperties be a new empty List. 
*0*For each element VARkey of VARownKeys in List order, do
*1*If FUNCType(VARkey) is String, then
*2*Let VARdesc be ? VARO.[[VARGetOwnProperty]](VARkey). 
*2*If VARdesc is not undefined and VARdesc.[[VAREnumerable]] is true, then
*3*If VARkind is "key", append VARkey to VARproperties. 
*3*Else,
*4*Let VARvalue be ? FUNCGet(VARO, VARkey). 
*4*If VARkind is "value", append VARvalue to VARproperties. 
*4*Else,
*5*Assert: VARkind is "key+value". 
*5*Let VARentry be FUNCCreateArrayFromList(« VARkey, VARvalue »). 
*5*Append VARentry to VARproperties. 
*0*Order the elements of VARproperties so they are in the same relative order as would be produced by the Iterator that would be returned if the EnumerateObjectProperties internal method were invoked with VARO. 
*0*Return VARproperties.    

#############  END  ## 70 ###########################
############# BEGIN ## 71 ###########################
ID= 7.3.22
Summary= GetFunctionRealm ( obj )
Description= The abstract operation GetFunctionRealm with argument obj performs the following steps:
*0*Assert: VARobj is a callable object. 
*0*If VARobj has a [[VARRealm]] internal slot, then
*1*Return VARobj.[[VARRealm]]. 
*0*If VARobj is a Bound Function exotic object, then
*1*Let VARtarget be VARobj.[[VARBoundTargetFunction]]. 
*1*Return ? FUNCGetFunctionRealm(VARtarget). 
*0*If VARobj is a Proxy exotic object, then
*1*If VARobj.[[VARProxyHandler]] is null, throw a TypeError exception. 
*1*Let VARproxyTarget be VARobj.[[VARProxyTarget]]. 
*1*Return ? FUNCGetFunctionRealm(VARproxyTarget). 
*0*Return the current Realm Record.    

#############  END  ## 71 ###########################
############# BEGIN ## 72 ###########################
ID= 7.3.23
Summary= CopyDataProperties ( target, source, excludedItems )
Description= When the abstract operation CopyDataProperties is called with arguments target, source, and excludedItems, the following steps are taken:
*0*Assert: FUNCType(VARtarget) is Object. 
*0*Assert: VARexcludedItems is a List of property keys. 
*0*If VARsource is undefined or null, return VARtarget. 
*0*Let VARfrom be ! FUNCToObject(VARsource). 
*0*Let VARkeys be ? VARfrom.[[VAROwnPropertyKeys]](). 
*0*For each element VARnextKey of VARkeys in List order, do
*1*Let VARexcluded be false. 
*1*For each element VARe of VARexcludedItems in List order, do
*2*If FUNCSameValue(VARe, VARnextKey) is true, then
*3*Set VARexcluded to true. 
*1*If VARexcluded is false, then
*2*Let VARdesc be ? VARfrom.[[VARGetOwnProperty]](VARnextKey). 
*2*If VARdesc is not undefined and VARdesc.[[VAREnumerable]] is true, then
*3*Let VARpropValue be ? FUNCGet(VARfrom, VARnextKey). 
*3*Perform ! FUNCCreateDataProperty(VARtarget, VARnextKey, VARpropValue). 
*0*Return VARtarget.    

#############  END  ## 72 ###########################
############# BEGIN ## 73 ###########################
ID= 7.4.1
Summary= GetIterator ( obj [ , hint [ , method ] ] )
Description= The abstract operation GetIterator with argument obj and optional arguments hint and method performs the following steps:
*0*If VARhint is not present, set VARhint to sync. 
*0*Assert: VARhint is either sync or async. 
*0*If VARmethod is not present, then
*1*If VARhint is async, then
*2*Set VARmethod to ? FUNCGetMethod(VARobj, @@asyncIterator). 
*2*If VARmethod is undefined, then
*3*Let VARsyncMethod be ? FUNCGetMethod(VARobj, @@iterator). 
*3*Let VARsyncIteratorRecord be ? FUNCGetIterator(VARobj, sync, VARsyncMethod). 
*3*Return ? FUNCCreateAsyncFromSyncIterator(VARsyncIteratorRecord). 
*1*Otherwise, set VARmethod to ? FUNCGetMethod(VARobj, @@iterator). 
*0*Let VARiterator be ? FUNCCall(VARmethod, VARobj). 
*0*If FUNCType(VARiterator) is not Object, throw a TypeError exception. 
*0*Let VARnextMethod be ? FUNCGetV(VARiterator, "next"). 
*0*Let VARiteratorRecord be Record { [[VARIterator]]: VARiterator, [[VARNextMethod]]: VARnextMethod, [[VARDone]]: false }. 
*0*Return VARiteratorRecord.    

#############  END  ## 73 ###########################
############# BEGIN ## 74 ###########################
ID= 7.4.2
Summary= IteratorNext ( iteratorRecord [ , value ] )
Description= The abstract operation IteratorNext with argument iteratorRecord and optional argument value performs the following steps:
*0*If VARvalue is not present, then
*1*Let VARresult be ? FUNCCall(VARiteratorRecord.[[VARNextMethod]], VARiteratorRecord.[[VARIterator]], « »). 
*0*Else,
*1*Let VARresult be ? FUNCCall(VARiteratorRecord.[[VARNextMethod]], VARiteratorRecord.[[VARIterator]], « VARvalue »). 
*0*If FUNCType(VARresult) is not Object, throw a TypeError exception. 
*0*Return VARresult.    

#############  END  ## 74 ###########################
############# BEGIN ## 75 ###########################
ID= 7.4.3
Summary= IteratorComplete ( iterResult )
Description= The abstract operation IteratorComplete with argument iterResult performs the following steps:
*0*Assert: FUNCType(VARiterResult) is Object. 
*0*Return FUNCToBoolean(? FUNCGet(VARiterResult, "done")).    

#############  END  ## 75 ###########################
############# BEGIN ## 76 ###########################
ID= 7.4.4
Summary= IteratorValue ( iterResult )
Description= The abstract operation IteratorValue with argument iterResult performs the following steps:
*0*Assert: FUNCType(VARiterResult) is Object. 
*0*Return ? FUNCGet(VARiterResult, "value").    

#############  END  ## 76 ###########################
############# BEGIN ## 77 ###########################
ID= 7.4.5
Summary= IteratorStep ( iteratorRecord )
Description= The abstract operation IteratorStep with argument iteratorRecord requests the next value from iteratorRecord.[[Iterator]] by calling iteratorRecord.[[NextMethod]] and returns either false indicating that the iterator has reached its end or the IteratorResult object if a next value is available. IteratorStep performs the following steps:
*0*Let VARresult be ? FUNCIteratorNext(VARiteratorRecord). 
*0*Let VARdone be ? FUNCIteratorComplete(VARresult). 
*0*If VARdone is true, return false. 
*0*Return VARresult.    

#############  END  ## 77 ###########################
############# BEGIN ## 78 ###########################
ID= 7.4.6
Summary= IteratorClose ( iteratorRecord, completion )
Description= The abstract operation IteratorClose with arguments iteratorRecord and completion is used to notify an iterator that it should perform any actions it would normally perform when it has reached its completed state:
*0*Assert: FUNCType(VARiteratorRecord.[[VARIterator]]) is Object. 
*0*Assert: VARcompletion is a Completion Record. 
*0*Let VARiterator be VARiteratorRecord.[[VARIterator]]. 
*0*Let VARreturn be ? FUNCGetMethod(VARiterator, "return"). 
*0*If VARreturn is undefined, return FUNCCompletion(VARcompletion). 
*0*Let VARinnerResult be FUNCCall(VARreturn, VARiterator, « »). 
*0*If VARcompletion.[[VARType]] is throw, return FUNCCompletion(VARcompletion). 
*0*If VARinnerResult.[[VARType]] is throw, return FUNCCompletion(VARinnerResult). 
*0*If FUNCType(VARinnerResult.[[VARValue]]) is not Object, throw a TypeError exception. 
*0*Return FUNCCompletion(VARcompletion).    

#############  END  ## 78 ###########################
############# BEGIN ## 79 ###########################
ID= 7.4.7
Summary= AsyncIteratorClose ( iteratorRecord, completion )
Description= The abstract operation AsyncIteratorClose with arguments iteratorRecord and completion is used to notify an async iterator that it should perform any actions it would normally perform when it has reached its completed state:
*0*Assert: FUNCType(VARiteratorRecord.[[VARIterator]]) is Object. 
*0*Assert: VARcompletion is a Completion Record. 
*0*Let VARiterator be VARiteratorRecord.[[VARIterator]]. 
*0*Let VARreturn be ? FUNCGetMethod(VARiterator, "return"). 
*0*If VARreturn is undefined, return FUNCCompletion(VARcompletion). 
*0*Let VARinnerResult be FUNCCall(VARreturn, VARiterator, « »). 
*0*If VARinnerResult.[[VARType]] is normal, set VARinnerResult to Await(VARinnerResult.[[VARValue]]). 
*0*If VARcompletion.[[VARType]] is throw, return FUNCCompletion(VARcompletion). 
*0*If VARinnerResult.[[VARType]] is throw, return FUNCCompletion(VARinnerResult). 
*0*If FUNCType(VARinnerResult.[[VARValue]]) is not Object, throw a TypeError exception. 
*0*Return FUNCCompletion(VARcompletion).    

#############  END  ## 79 ###########################
############# BEGIN ## 80 ###########################
ID= 7.4.8
Summary= CreateIterResultObject ( value, done )
Description= The abstract operation CreateIterResultObject with arguments value and done creates an object that supports the IteratorResult interface by performing the following steps:
*0*Assert: FUNCType(VARdone) is Boolean. 
*0*Let VARobj be FUNCObjectCreate(%ObjectPrototype%). 
*0*Perform FUNCCreateDataProperty(VARobj, "value", VARvalue). 
*0*Perform FUNCCreateDataProperty(VARobj, "done", VARdone). 
*0*Return VARobj.    

#############  END  ## 80 ###########################
############# BEGIN ## 81 ###########################
ID= 7.4.9
Summary= CreateListIteratorRecord ( list )
Description= The abstract operation CreateListIteratorRecord with argument list creates an Iterator (25.1.1.2) object record whose next method returns the successive elements of list. It performs the following steps:
*0*Let VARiterator be FUNCObjectCreate(%IteratorPrototype%, « [[VARIteratedList]], [[VARListIteratorNextIndex]] »). 
*0*Set VARiterator.[[VARIteratedList]] to VARlist. 
*0*Set VARiterator.[[VARListIteratorNextIndex]] to 0. 
*0*Let VARsteps be the algorithm steps defined in ListIterator next (7.4.9.1). 
*0*Let VARnext be FUNCCreateBuiltinFunction(VARsteps, « »). 
*0*Return Record { [[VARIterator]]: VARiterator, [[VARNextMethod]]: VARnext, [[VARDone]]: false }.    

#############  END  ## 81 ###########################
############# BEGIN ## 82 ###########################
ID= 7.4.9.1
Summary= ListIterator next ( )
Description= The ListIterator next method is a standard built-in function object (clause  17) that performs the following steps:
*0*Let VARO be the this value. 
*0*Assert: FUNCType(VARO) is Object. 
*0*Assert: VARO has an [[VARIteratedList]] internal slot. 
*0*Let VARlist be VARO.[[VARIteratedList]]. 
*0*Let VARindex be VARO.[[VARListIteratorNextIndex]]. 
*0*Let VARlen be the number of elements of VARlist. 
*0*If VARindex ≥ VARlen, then
*1*Return FUNCCreateIterResultObject(undefined, true). 
*0*Set VARO.[[VARListIteratorNextIndex]] to VARindex+1. 
*0*Return FUNCCreateIterResultObject(VARlist[VARindex], false).     

#############  END  ## 82 ###########################
############# BEGIN ## 83 ###########################
ID= 8.1.1.1.1
Summary= HasBinding ( N )
Description= The concrete Environment Record method HasBinding for declarative Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:
*0*Let VARenvRec be the declarative Environment Record for which the method was invoked. 
*0*If VARenvRec has a binding for the name that is the value of VARN, return true. 
*0*Return false.      

#############  END  ## 83 ###########################
############# BEGIN ## 84 ###########################
ID= 8.1.1.1.2
Summary= CreateMutableBinding ( N, D )
Description= The concrete Environment Record method CreateMutableBinding for declarative Environment Records creates a new mutable binding for the name N that is uninitialized. A binding must not already exist in this Environment Record for N. If Boolean argument D has the value true the new binding is marked as being subject to deletion.
*0*Let VARenvRec be the declarative Environment Record for which the method was invoked. 
*0*Assert: VARenvRec does not already have a binding for VARN. 
*0*Create a mutable binding in VARenvRec for VARN and record that it is uninitialized. If VARD is true, record that the newly created binding may be deleted by a subsequent DeleteBinding call. 
*0*Return FUNCNormalCompletion(empty).      

#############  END  ## 84 ###########################
############# BEGIN ## 85 ###########################
ID= 8.1.1.1.3
Summary= CreateImmutableBinding ( N, S )
Description= The concrete Environment Record method CreateImmutableBinding for declarative Environment Records creates a new immutable binding for the name N that is uninitialized. A binding must not already exist in this Environment Record for N. If the Boolean argument S has the value true the new binding is marked as a strict binding.
*0*Let VARenvRec be the declarative Environment Record for which the method was invoked. 
*0*Assert: VARenvRec does not already have a binding for VARN. 
*0*Create an immutable binding in VARenvRec for VARN and record that it is uninitialized. If VARS is true, record that the newly created binding is a strict binding. 
*0*Return FUNCNormalCompletion(empty).      

#############  END  ## 85 ###########################
############# BEGIN ## 86 ###########################
ID= 8.1.1.1.4
Summary= InitializeBinding ( N, V )
Description= The concrete Environment Record method InitializeBinding for declarative Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. An uninitialized binding for N must already exist.
*0*Let VARenvRec be the declarative Environment Record for which the method was invoked. 
*0*Assert: VARenvRec must have an uninitialized binding for VARN. 
*0*Set the bound value for VARN in VARenvRec to VARV. 
*0*Record that the binding for VARN in VARenvRec has been initialized. 
*0*Return FUNCNormalCompletion(empty).      

#############  END  ## 86 ###########################
############# BEGIN ## 87 ###########################
ID= 8.1.1.1.5
Summary= SetMutableBinding ( N, V, S )
Description= The concrete Environment Record method SetMutableBinding for declarative Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. A binding for N normally already exists, but in rare cases it may not. If the binding is an immutable binding, a TypeError is thrown if S is true.
*0*Let VARenvRec be the declarative Environment Record for which the method was invoked. 
*0*If VARenvRec does not have a binding for VARN, then
*1*If VARS is true, throw a ReferenceError exception. 
*1*Perform VARenvRec.CreateMutableBinding(VARN, true). 
*1*Perform VARenvRec.InitializeBinding(VARN, VARV). 
*1*Return FUNCNormalCompletion(empty). 
*0*If the binding for VARN in VARenvRec is a strict binding, set VARS to true. 
*0*If the binding for VARN in VARenvRec has not yet been initialized, throw a ReferenceError exception. 
*0*Else,
*1*if the binding for VARN in VARenvRec is a mutable binding, change its bound value to VARV.
*0*Else,
*1*Assert: This is an attempt to change the value of an immutable binding. 
*1*If VARS is true, throw a TypeError exception. 
*0*Return FUNCNormalCompletion(empty).      

#############  END  ## 87 ###########################
############# BEGIN ## 88 ###########################
ID= 8.1.1.1.6
Summary= GetBindingValue ( N, S )
Description= The concrete Environment Record method GetBindingValue for declarative Environment Records simply returns the value of its bound identifier whose name is the value of the argument N. If the binding exists but is uninitialized a ReferenceError is thrown, regardless of the value of S.
*0*Let VARenvRec be the declarative Environment Record for which the method was invoked. 
*0*Assert: VARenvRec has a binding for VARN. 
*0*If the binding for VARN in VARenvRec is an uninitialized binding, throw a ReferenceError exception. 
*0*Return the value currently bound to VARN in VARenvRec.      

#############  END  ## 88 ###########################
############# BEGIN ## 89 ###########################
ID= 8.1.1.1.7
Summary= DeleteBinding ( N )
Description= The concrete Environment Record method DeleteBinding for declarative Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.
*0*Let VARenvRec be the declarative Environment Record for which the method was invoked. 
*0*Assert: VARenvRec has a binding for the name that is the value of VARN. 
*0*If the binding for VARN in VARenvRec cannot be deleted, return false. 
*0*Remove the binding for VARN from VARenvRec. 
*0*Return true.      

#############  END  ## 89 ###########################
############# BEGIN ## 90 ###########################
ID= 8.1.1.1.8
Summary= HasThisBinding ( )
Description= Regular declarative Environment Records do not provide a this binding.
*0*Return false.      

#############  END  ## 90 ###########################
############# BEGIN ## 91 ###########################
ID= 8.1.1.1.9
Summary= HasSuperBinding ( )
Description= Regular declarative Environment Records do not provide a super binding.
*0*Return false.      

#############  END  ## 91 ###########################
############# BEGIN ## 92 ###########################
ID= 8.1.1.1.10
Summary= WithBaseObject ( )
Description= Declarative Environment Records always return undefined as their WithBaseObject.
*0*Return undefined.      

#############  END  ## 92 ###########################
############# BEGIN ## 93 ###########################
ID= 8.1.1.2.1
Summary= HasBinding ( N )
Description= The concrete Environment Record method HasBinding for object Environment Records determines if its associated binding object has a property whose name is the value of the argument N:
*0*Let VARenvRec be the object Environment Record for which the method was invoked. 
*0*Let VARbindings be the binding object for VARenvRec. 
*0*Let VARfoundBinding be ? FUNCHasProperty(VARbindings, VARN). 
*0*If VARfoundBinding is false, return false. 
*0*If the VARwithEnvironment flag of VARenvRec is false, return true. 
*0*Let VARunscopables be ? FUNCGet(VARbindings, @@unscopables). 
*0*If FUNCType(VARunscopables) is Object, then
*1*Let VARblocked be FUNCToBoolean(? FUNCGet(VARunscopables, VARN)). 
*1*If VARblocked is true, return false. 
*0*Return true.      

#############  END  ## 93 ###########################
############# BEGIN ## 94 ###########################
ID= 8.1.1.2.2
Summary= CreateMutableBinding ( N, D )
Description= The concrete Environment Record method CreateMutableBinding for object Environment Records creates in an Environment Record's associated binding object a property whose name is the String value and initializes it to the value undefined. If Boolean argument D has the value true the new property's [[Configurable]] attribute is set to true; otherwise it is set to false.
*0*Let VARenvRec be the object Environment Record for which the method was invoked. 
*0*Let VARbindings be the binding object for VARenvRec. 
*0*Return ? FUNCDefinePropertyOrThrow(VARbindings, VARN, PropertyDescriptor { [[VARValue]]: undefined, [[VARWritable]]: true, [[VAREnumerable]]: true, [[VARConfigurable]]: VARD }).      

#############  END  ## 94 ###########################
############# BEGIN ## 95 ###########################
ID= 8.1.1.2.4
Summary= InitializeBinding ( N, V )
Description= The concrete Environment Record method InitializeBinding for object Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. An uninitialized binding for N must already exist.
*0*Let VARenvRec be the object Environment Record for which the method was invoked. 
*0*Assert: VARenvRec must have an uninitialized binding for VARN. 
*0*Record that the binding for VARN in VARenvRec has been initialized. 
*0*Return ? VARenvRec.SetMutableBinding(VARN, VARV, false).      

#############  END  ## 95 ###########################
############# BEGIN ## 96 ###########################
ID= 8.1.1.2.5
Summary= SetMutableBinding ( N, V, S )
Description= The concrete Environment Record method SetMutableBinding for object Environment Records attempts to set the value of the Environment Record's associated binding object's property whose name is the value of the argument N to the value of argument V. A property named N normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument S.
*0*Let VARenvRec be the object Environment Record for which the method was invoked. 
*0*Let VARbindings be the binding object for VARenvRec. 
*0*Return ? FUNCSet(VARbindings, VARN, VARV, VARS).      

#############  END  ## 96 ###########################
############# BEGIN ## 97 ###########################
ID= 8.1.1.2.6
Summary= GetBindingValue ( N, S )
Description= The concrete Environment Record method GetBindingValue for object Environment Records returns the value of its associated binding object's property whose name is the String value of the argument identifier N. The property should already exist but if it does not the result depends upon the value of the S argument:
*0*Let VARenvRec be the object Environment Record for which the method was invoked. 
*0*Let VARbindings be the binding object for VARenvRec. 
*0*Let VARvalue be ? FUNCHasProperty(VARbindings, VARN). 
*0*If VARvalue is false, then
*1*If VARS is false, return the value undefined; otherwise throw a ReferenceError exception. 
*0*Return ? FUNCGet(VARbindings, VARN).      

#############  END  ## 97 ###########################
############# BEGIN ## 98 ###########################
ID= 8.1.1.2.7
Summary= DeleteBinding ( N )
Description= The concrete Environment Record method DeleteBinding for object Environment Records can only delete bindings that correspond to properties of the environment object whose [[Configurable]] attribute have the value true.
*0*Let VARenvRec be the object Environment Record for which the method was invoked. 
*0*Let VARbindings be the binding object for VARenvRec. 
*0*Return ? VARbindings.[[VARDelete]](VARN).      

#############  END  ## 98 ###########################
############# BEGIN ## 99 ###########################
ID= 8.1.1.2.8
Summary= HasThisBinding ( )
Description= Regular object Environment Records do not provide a this binding.
*0*Return false.      

#############  END  ## 99 ###########################
############# BEGIN ## 100 ###########################
ID= 8.1.1.2.9
Summary= HasSuperBinding ( )
Description= Regular object Environment Records do not provide a super binding.
*0*Return false.      

#############  END  ## 100 ###########################
############# BEGIN ## 101 ###########################
ID= 8.1.1.2.10
Summary= WithBaseObject ( )
Description= Object Environment Records return undefined as their WithBaseObject unless their withEnvironment flag is true.
*0*Let VARenvRec be the object Environment Record for which the method was invoked. 
*0*If the VARwithEnvironment flag of VARenvRec is true, return the binding object for VARenvRec. 
*0*Otherwise, return undefined.      

#############  END  ## 101 ###########################
############# BEGIN ## 102 ###########################
ID= 8.1.1.3.1
Summary= BindThisValue ( V )
Description= None
*0*Let VARenvRec be the function Environment Record for which the method was invoked. 
*0*Assert: VARenvRec.[[VARThisBindingStatus]] is not "lexical". 
*0*If VARenvRec.[[VARThisBindingStatus]] is "initialized", throw a ReferenceError exception. 
*0*Set VARenvRec.[[VARThisValue]] to VARV. 
*0*Set VARenvRec.[[VARThisBindingStatus]] to "initialized". 
*0*Return VARV.      

#############  END  ## 102 ###########################
############# BEGIN ## 103 ###########################
ID= 8.1.1.3.2
Summary= HasThisBinding ( )
Description= None
*0*Let VARenvRec be the function Environment Record for which the method was invoked. 
*0*If VARenvRec.[[VARThisBindingStatus]] is "lexical", return false; otherwise, return true.      

#############  END  ## 103 ###########################
############# BEGIN ## 104 ###########################
ID= 8.1.1.3.3
Summary= HasSuperBinding ( )
Description= None
*0*Let VARenvRec be the function Environment Record for which the method was invoked. 
*0*If VARenvRec.[[VARThisBindingStatus]] is "lexical", return false. 
*0*If VARenvRec.[[VARHomeObject]] has the value undefined, return false; otherwise, return true.      

#############  END  ## 104 ###########################
############# BEGIN ## 105 ###########################
ID= 8.1.1.3.4
Summary= GetThisBinding ( )
Description= None
*0*Let VARenvRec be the function Environment Record for which the method was invoked. 
*0*Assert: VARenvRec.[[VARThisBindingStatus]] is not "lexical". 
*0*If VARenvRec.[[VARThisBindingStatus]] is "uninitialized", throw a ReferenceError exception. 
*0*Return VARenvRec.[[VARThisValue]].      

#############  END  ## 105 ###########################
############# BEGIN ## 106 ###########################
ID= 8.1.1.3.5
Summary= GetSuperBase ( )
Description= None
*0*Let VARenvRec be the function Environment Record for which the method was invoked. 
*0*Let VARhome be VARenvRec.[[VARHomeObject]]. 
*0*If VARhome has the value undefined, return undefined. 
*0*Assert: FUNCType(VARhome) is Object. 
*0*Return ? VARhome.[[VARGetPrototypeOf]]().      

#############  END  ## 106 ###########################
############# BEGIN ## 107 ###########################
ID= 8.1.1.4.1
Summary= HasBinding ( N )
Description= The concrete Environment Record method HasBinding for global Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARDclRec be VARenvRec.[[VARDeclarativeRecord]]. 
*0*If VARDclRec.HasBinding(VARN) is true, return true. 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Return ? VARObjRec.HasBinding(VARN).      

#############  END  ## 107 ###########################
############# BEGIN ## 108 ###########################
ID= 8.1.1.4.2
Summary= CreateMutableBinding ( N, D )
Description= The concrete Environment Record method CreateMutableBinding for global Environment Records creates a new mutable binding for the name N that is uninitialized. The binding is created in the associated DeclarativeRecord. A binding for N must not already exist in the DeclarativeRecord. If Boolean argument D has the value true the new binding is marked as being subject to deletion.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARDclRec be VARenvRec.[[VARDeclarativeRecord]]. 
*0*If VARDclRec.HasBinding(VARN) is true, throw a TypeError exception. 
*0*Return VARDclRec.CreateMutableBinding(VARN, VARD).      

#############  END  ## 108 ###########################
############# BEGIN ## 109 ###########################
ID= 8.1.1.4.3
Summary= CreateImmutableBinding ( N, S )
Description= The concrete Environment Record method CreateImmutableBinding for global Environment Records creates a new immutable binding for the name N that is uninitialized. A binding must not already exist in this Environment Record for N. If the Boolean argument S has the value true the new binding is marked as a strict binding.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARDclRec be VARenvRec.[[VARDeclarativeRecord]]. 
*0*If VARDclRec.HasBinding(VARN) is true, throw a TypeError exception. 
*0*Return VARDclRec.CreateImmutableBinding(VARN, VARS).      

#############  END  ## 109 ###########################
############# BEGIN ## 110 ###########################
ID= 8.1.1.4.4
Summary= InitializeBinding ( N, V )
Description= The concrete Environment Record method InitializeBinding for global Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. An uninitialized binding for N must already exist.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARDclRec be VARenvRec.[[VARDeclarativeRecord]]. 
*0*If VARDclRec.HasBinding(VARN) is true, then
*1*Return VARDclRec.InitializeBinding(VARN, VARV). 
*0*Assert: If the binding exists, it must be in the object Environment Record. 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Return ? VARObjRec.InitializeBinding(VARN, VARV).      

#############  END  ## 110 ###########################
############# BEGIN ## 111 ###########################
ID= 8.1.1.4.5
Summary= SetMutableBinding ( N, V, S )
Description= The concrete Environment Record method SetMutableBinding for global Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument N to the value of argument V. If the binding is an immutable binding, a TypeError is thrown if S is true. A property named N normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument S.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARDclRec be VARenvRec.[[VARDeclarativeRecord]]. 
*0*If VARDclRec.HasBinding(VARN) is true, then
*1*Return VARDclRec.SetMutableBinding(VARN, VARV, VARS). 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Return ? VARObjRec.SetMutableBinding(VARN, VARV, VARS).      

#############  END  ## 111 ###########################
############# BEGIN ## 112 ###########################
ID= 8.1.1.4.6
Summary= GetBindingValue ( N, S )
Description= The concrete Environment Record method GetBindingValue for global Environment Records returns the value of its bound identifier whose name is the value of the argument N. If the binding is an uninitialized binding throw a ReferenceError exception. A property named N normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument S.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARDclRec be VARenvRec.[[VARDeclarativeRecord]]. 
*0*If VARDclRec.HasBinding(VARN) is true, then
*1*Return VARDclRec.GetBindingValue(VARN, VARS). 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Return ? VARObjRec.GetBindingValue(VARN, VARS).      

#############  END  ## 112 ###########################
############# BEGIN ## 113 ###########################
ID= 8.1.1.4.7
Summary= DeleteBinding ( N )
Description= The concrete Environment Record method DeleteBinding for global Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARDclRec be VARenvRec.[[VARDeclarativeRecord]]. 
*0*If VARDclRec.HasBinding(VARN) is true, then
*1*Return VARDclRec.DeleteBinding(VARN). 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Let VARglobalObject be the binding object for VARObjRec. 
*0*Let VARexistingProp be ? FUNCHasOwnProperty(VARglobalObject, VARN). 
*0*If VARexistingProp is true, then
*1*Let VARstatus be ? VARObjRec.DeleteBinding(VARN). 
*1*If VARstatus is true, then
*2*Let VARvarNames be VARenvRec.[[VARVarNames]]. 
*2*If VARN is an element of VARvarNames, remove that element from the VARvarNames. 
*1*Return VARstatus. 
*0*Return true.      

#############  END  ## 113 ###########################
############# BEGIN ## 114 ###########################
ID= 8.1.1.4.8
Summary= HasThisBinding ( )
Description= None
*0*Return true.      

#############  END  ## 114 ###########################
############# BEGIN ## 115 ###########################
ID= 8.1.1.4.9
Summary= HasSuperBinding ( )
Description= None
*0*Return false.      

#############  END  ## 115 ###########################
############# BEGIN ## 116 ###########################
ID= 8.1.1.4.10
Summary= WithBaseObject ( )
Description= Global Environment Records always return undefined as their WithBaseObject.
*0*Return undefined.      

#############  END  ## 116 ###########################
############# BEGIN ## 117 ###########################
ID= 8.1.1.4.11
Summary= GetThisBinding ( )
Description= None
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Return VARenvRec.[[VARGlobalThisValue]].      

#############  END  ## 117 ###########################
############# BEGIN ## 118 ###########################
ID= 8.1.1.4.12
Summary= HasVarDeclaration ( N )
Description= The concrete Environment Record method HasVarDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a VariableStatement or a FunctionDeclaration:
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARvarDeclaredNames be VARenvRec.[[VARVarNames]]. 
*0*If VARvarDeclaredNames contains VARN, return true. 
*0*Return false.      

#############  END  ## 118 ###########################
############# BEGIN ## 119 ###########################
ID= 8.1.1.4.13
Summary= HasLexicalDeclaration ( N )
Description= The concrete Environment Record method HasLexicalDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a lexical declaration such as a LexicalDeclaration or a ClassDeclaration:
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARDclRec be VARenvRec.[[VARDeclarativeRecord]]. 
*0*Return VARDclRec.HasBinding(VARN).      

#############  END  ## 119 ###########################
############# BEGIN ## 120 ###########################
ID= 8.1.1.4.14
Summary= HasRestrictedGlobalProperty ( N )
Description= The concrete Environment Record method HasRestrictedGlobalProperty for global Environment Records determines if the argument identifier is the name of a property of the global object that must not be shadowed by a global lexical binding:
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Let VARglobalObject be the binding object for VARObjRec. 
*0*Let VARexistingProp be ? VARglobalObject.[[VARGetOwnProperty]](VARN). 
*0*If VARexistingProp is undefined, return false. 
*0*If VARexistingProp.[[VARConfigurable]] is true, return false. 
*0*Return true.      

#############  END  ## 120 ###########################
############# BEGIN ## 121 ###########################
ID= 8.1.1.4.15
Summary= CanDeclareGlobalVar ( N )
Description= The concrete Environment Record method CanDeclareGlobalVar for global Environment Records determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument N. Redundant var declarations and var declarations for pre-existing global object properties are allowed.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Let VARglobalObject be the binding object for VARObjRec. 
*0*Let VARhasProperty be ? FUNCHasOwnProperty(VARglobalObject, VARN). 
*0*If VARhasProperty is true, return true. 
*0*Return ? FUNCIsExtensible(VARglobalObject).      

#############  END  ## 121 ###########################
############# BEGIN ## 122 ###########################
ID= 8.1.1.4.16
Summary= CanDeclareGlobalFunction ( N )
Description= The concrete Environment Record method CanDeclareGlobalFunction for global Environment Records determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument N.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Let VARglobalObject be the binding object for VARObjRec. 
*0*Let VARexistingProp be ? VARglobalObject.[[VARGetOwnProperty]](VARN). 
*0*If VARexistingProp is undefined, return ? FUNCIsExtensible(VARglobalObject). 
*0*If VARexistingProp.[[VARConfigurable]] is true, return true. 
*0*If FUNCIsDataDescriptor(VARexistingProp) is true and VARexistingProp has attribute values { [[VARWritable]]: true, [[VAREnumerable]]: true }, return true. 
*0*Return false.      

#############  END  ## 122 ###########################
############# BEGIN ## 123 ###########################
ID= 8.1.1.4.17
Summary= CreateGlobalVarBinding ( N, D )
Description= The concrete Environment Record method CreateGlobalVarBinding for global Environment Records creates and initializes a mutable binding in the associated object Environment Record and records the bound name in the associated [[VarNames]] List. If a binding already exists, it is reused and assumed to be initialized.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Let VARglobalObject be the binding object for VARObjRec. 
*0*Let VARhasProperty be ? FUNCHasOwnProperty(VARglobalObject, VARN). 
*0*Let VARextensible be ? FUNCIsExtensible(VARglobalObject). 
*0*If VARhasProperty is false and VARextensible is true, then
*1*Perform ? VARObjRec.CreateMutableBinding(VARN, VARD). 
*1*Perform ? VARObjRec.InitializeBinding(VARN, undefined). 
*0*Let VARvarDeclaredNames be VARenvRec.[[VARVarNames]]. 
*0*If VARvarDeclaredNames does not contain VARN, then
*1*Append VARN to VARvarDeclaredNames. 
*0*Return FUNCNormalCompletion(empty).      

#############  END  ## 123 ###########################
############# BEGIN ## 124 ###########################
ID= 8.1.1.4.18
Summary= CreateGlobalFunctionBinding ( N, V, D )
Description= The concrete Environment Record method CreateGlobalFunctionBinding for global Environment Records creates and initializes a mutable binding in the associated object Environment Record and records the bound name in the associated [[VarNames]] List. If a binding already exists, it is replaced.
*0*Let VARenvRec be the global Environment Record for which the method was invoked. 
*0*Let VARObjRec be VARenvRec.[[VARObjectRecord]]. 
*0*Let VARglobalObject be the binding object for VARObjRec. 
*0*Let VARexistingProp be ? VARglobalObject.[[VARGetOwnProperty]](VARN). 
*0*If VARexistingProp is undefined or VARexistingProp.[[VARConfigurable]] is true, then
*1*Let VARdesc be the PropertyDescriptor { [[VARValue]]: VARV, [[VARWritable]]: true, [[VAREnumerable]]: true, [[VARConfigurable]]: VARD }. 
*0*Else,
*1*Let VARdesc be the PropertyDescriptor { [[VARValue]]: VARV }. 
*0*Perform ? FUNCDefinePropertyOrThrow(VARglobalObject, VARN, VARdesc). 
*0*Record that the binding for VARN in VARObjRec has been initialized. 
*0*Perform ? FUNCSet(VARglobalObject, VARN, VARV, false). 
*0*Let VARvarDeclaredNames be VARenvRec.[[VARVarNames]]. 
*0*If VARvarDeclaredNames does not contain VARN, then
*1*Append VARN to VARvarDeclaredNames. 
*0*Return FUNCNormalCompletion(empty).      

#############  END  ## 124 ###########################
############# BEGIN ## 125 ###########################
ID= 8.1.1.5.1
Summary= GetBindingValue ( N, S )
Description= The concrete Environment Record method GetBindingValue for module Environment Records returns the value of its bound identifier whose name is the value of the argument N. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a ReferenceError is thrown.
*0*Assert: VARS is true. 
*0*Let VARenvRec be the module Environment Record for which the method was invoked. 
*0*Assert: VARenvRec has a binding for VARN. 
*0*If the binding for VARN is an indirect binding, then
*1*Let VARM and VARN2 be the indirection values provided when this binding for VARN was created. 
*1*Let VARtargetEnv be VARM.[[VAREnvironment]]. 
*1*If VARtargetEnv is undefined, throw a ReferenceError exception. 
*1*Let VARtargetER be VARtargetEnv's EnvironmentRecord. 
*1*Return ? VARtargetER.GetBindingValue(VARN2, true). 
*0*If the binding for VARN in VARenvRec is an uninitialized binding, throw a ReferenceError exception. 
*0*Return the value currently bound to VARN in VARenvRec.      

#############  END  ## 125 ###########################
############# BEGIN ## 126 ###########################
ID= 8.1.1.5.2
Summary= DeleteBinding ( N )
Description= The concrete Environment Record method DeleteBinding for module Environment Records refuses to delete bindings.
*0*Assert: This method is never invoked. See 12.5.3.1.      

#############  END  ## 126 ###########################
############# BEGIN ## 127 ###########################
ID= 8.1.1.5.3
Summary= HasThisBinding ( )
Description= Module Environment Records provide a this binding.
*0*Return true.      

#############  END  ## 127 ###########################
############# BEGIN ## 128 ###########################
ID= 8.1.1.5.4
Summary= GetThisBinding ( )
Description= None
*0*Return undefined.      

#############  END  ## 128 ###########################
############# BEGIN ## 129 ###########################
ID= 8.1.1.5.5
Summary= CreateImportBinding ( N, M, N2 )
Description= The concrete Environment Record method CreateImportBinding for module Environment Records creates a new initialized immutable indirect binding for the name N. A binding must not already exist in this Environment Record for N. M is a Module Record, and N2 is the name of a binding that exists in M's module Environment Record. Accesses to the value of the new binding will indirectly access the bound value of the target binding.
*0*Let VARenvRec be the module Environment Record for which the method was invoked. 
*0*Assert: VARenvRec does not already have a binding for VARN. 
*0*Assert: VARM is a Module Record. 
*0*Assert: When VARM.[[VAREnvironment]] is instantiated it will have a direct binding for VARN2. 
*0*Create an immutable indirect binding in VARenvRec for VARN that references VARM and VARN2 as its target binding and record that the binding is initialized. 
*0*Return FUNCNormalCompletion(empty).      

#############  END  ## 129 ###########################
############# BEGIN ## 130 ###########################
ID= 8.1.2.1
Summary= GetIdentifierReference ( lex, name, strict )
Description= The abstract operation GetIdentifierReference is called with a Lexical Environment lex, a String name, and a Boolean flag strict. The value of lex may be null. When called, the following steps are performed:
*0*If VARlex is the value null, then
*1*Return a value of type Reference whose base value component is undefined, whose referenced name component is VARname, and whose strict reference flag is VARstrict. 
*0*Let VARenvRec be VARlex's EnvironmentRecord. 
*0*Let VARexists be ? VARenvRec.HasBinding(VARname). 
*0*If VARexists is true, then
*1*Return a value of type Reference whose base value component is VARenvRec, whose referenced name component is VARname, and whose strict reference flag is VARstrict. 
*0*Else,
*1*Let VARouter be the value of VARlex's outer environment reference. 
*1*Return ? FUNCGetIdentifierReference(VARouter, VARname, VARstrict).     

#############  END  ## 130 ###########################
############# BEGIN ## 131 ###########################
ID= 8.1.2.2
Summary= NewDeclarativeEnvironment ( E )
Description= When the abstract operation NewDeclarativeEnvironment is called with a Lexical Environment as argument E the following steps are performed:
*0*Let VARenv be a new Lexical Environment. 
*0*Let VARenvRec be a new declarative Environment Record containing no bindings. 
*0*Set VARenv's EnvironmentRecord to VARenvRec. 
*0*Set the outer lexical environment reference of VARenv to VARE. 
*0*Return VARenv.     

#############  END  ## 131 ###########################
############# BEGIN ## 132 ###########################
ID= 8.1.2.3
Summary= NewObjectEnvironment ( O, E )
Description= When the abstract operation NewObjectEnvironment is called with an Object O and a Lexical Environment E as arguments, the following steps are performed:
*0*Let VARenv be a new Lexical Environment. 
*0*Let VARenvRec be a new object Environment Record containing VARO as the binding object. 
*0*Set VARenv's EnvironmentRecord to VARenvRec. 
*0*Set the outer lexical environment reference of VARenv to VARE. 
*0*Return VARenv.     

#############  END  ## 132 ###########################
############# BEGIN ## 133 ###########################
ID= 8.1.2.4
Summary= NewFunctionEnvironment ( F, newTarget )
Description= When the abstract operation NewFunctionEnvironment is called with arguments F and newTarget the following steps are performed:
*0*Assert: VARF is an ECMAScript function. 
*0*Assert: FUNCType(VARnewTarget) is Undefined or Object. 
*0*Let VARenv be a new Lexical Environment. 
*0*Let VARenvRec be a new function Environment Record containing no bindings. 
*0*Set VARenvRec.[[VARFunctionObject]] to VARF. 
*0*If VARF.[[VARThisMode]] is lexical, set VARenvRec.[[VARThisBindingStatus]] to "lexical". 
*0*Else,
*1*set VARenvRec.[[VARVARThisBindingStatus]] to "uninitialized".
*0*Let VARhome be VARF.[[VARHomeObject]]. 
*0*Set VARenvRec.[[VARHomeObject]] to VARhome. 
*0*Set VARenvRec.[[VARNewTarget]] to VARnewTarget. 
*0*Set VARenv's EnvironmentRecord to VARenvRec. 
*0*Set the outer lexical environment reference of VARenv to VARF.[[VAREnvironment]]. 
*0*Return VARenv.     

#############  END  ## 133 ###########################
############# BEGIN ## 134 ###########################
ID= 8.1.2.5
Summary= NewGlobalEnvironment ( G, thisValue )
Description= When the abstract operation NewGlobalEnvironment is called with arguments G and thisValue, the following steps are performed:
*0*Let VARenv be a new Lexical Environment. 
*0*Let VARobjRec be a new object Environment Record containing VARG as the binding object. 
*0*Let VARdclRec be a new declarative Environment Record containing no bindings. 
*0*Let VARglobalRec be a new global Environment Record. 
*0*Set VARglobalRec.[[VARObjectRecord]] to VARobjRec. 
*0*Set VARglobalRec.[[VARGlobalThisValue]] to VARthisValue. 
*0*Set VARglobalRec.[[VARDeclarativeRecord]] to VARdclRec. 
*0*Set VARglobalRec.[[VARVarNames]] to a new empty List. 
*0*Set VARenv's EnvironmentRecord to VARglobalRec. 
*0*Set the outer lexical environment reference of VARenv to null. 
*0*Return VARenv.     

#############  END  ## 134 ###########################
############# BEGIN ## 135 ###########################
ID= 8.1.2.6
Summary= NewModuleEnvironment ( E )
Description= When the abstract operation NewModuleEnvironment is called with a Lexical Environment argument E the following steps are performed:
*0*Let VARenv be a new Lexical Environment. 
*0*Let VARenvRec be a new module Environment Record containing no bindings. 
*0*Set VARenv's EnvironmentRecord to VARenvRec. 
*0*Set the outer lexical environment reference of VARenv to VARE. 
*0*Return VARenv.     

#############  END  ## 135 ###########################
############# BEGIN ## 136 ###########################
ID= 8.2.1
Summary= CreateRealm ( )
Description= The abstract operation CreateRealm with no arguments performs the following steps:
*0*Let VARrealmRec be a new Realm Record. 
*0*Perform FUNCCreateIntrinsics(VARrealmRec). 
*0*Set VARrealmRec.[[VARGlobalObject]] to undefined. 
*0*Set VARrealmRec.[[VARGlobalEnv]] to undefined. 
*0*Set VARrealmRec.[[VARTemplateMap]] to a new empty List. 
*0*Return VARrealmRec.    

#############  END  ## 136 ###########################
############# BEGIN ## 137 ###########################
ID= 8.2.2
Summary= CreateIntrinsics ( realmRec )
Description= The abstract operation CreateIntrinsics with argument realmRec performs the following steps:
*0*Let VARintrinsics be a new Record. 
*0*Set VARrealmRec.[[VARIntrinsics]] to VARintrinsics. 
*0*Let VARobjProto be FUNCObjectCreate(null). 
*0*Set VARintrinsics.[[VAR%ObjectPrototype%]] to VARobjProto. 
*0*Let VARthrowerSteps be the algorithm steps specified in 9.2.9.1 for the %ThrowTypeError% function. 
*0*Let VARthrower be FUNCCreateBuiltinFunction(VARthrowerSteps, « », VARrealmRec, null). 
*0*Set VARintrinsics.[[VAR%ThrowTypeError%]] to VARthrower. 
*0*Let VARnoSteps be an empty sequence of algorithm steps. 
*0*Let VARfuncProto be FUNCCreateBuiltinFunction(VARnoSteps, « », VARrealmRec, VARobjProto). 
*0*Set VARintrinsics.[[VAR%FunctionPrototype%]] to VARfuncProto. 
*0*Call VARthrower.[[VARSetPrototypeOf]](VARfuncProto). 
*0*Perform FUNCAddRestrictedFunctionProperties(VARfuncProto, VARrealmRec). 
*0*Set fields of VARintrinsics with the values listed in Table 7 that have not already been handled above. The field names are the names listed in column one of the table. The value of each field is a new object value fully and recursively populated with property values as defined by the specification of each object in clauses 18-26. All object property values are newly created object values. All values that are built-in function objects are created by performing FUNCCreateBuiltinFunction(&lt;steps&gt;, &lt;slots&gt;, VARrealmRec, &lt;prototype&gt;) where &lt;steps&gt; is the definition of that function provided by this specification, &lt;slots&gt; is a list of the names, if any, of the function's specified internal slots, and &lt;prototype&gt; is the specified value of the function's [[VARPrototype]] internal slot. The creation of the intrinsics and their properties must be ordered to avoid any dependencies upon objects that have not yet been created. 
*0*Return VARintrinsics.    

#############  END  ## 137 ###########################
############# BEGIN ## 138 ###########################
ID= 8.2.3
Summary= SetRealmGlobalObject ( realmRec, globalObj, thisValue )
Description= The abstract operation SetRealmGlobalObject with arguments realmRec, globalObj, and thisValue performs the following steps:
*0*If VARglobalObj is undefined, then
*1*Let VARintrinsics be VARrealmRec.[[VARIntrinsics]]. 
*1*Set VARglobalObj to FUNCObjectCreate(VARintrinsics.[[VAR%ObjectPrototype%]]). 
*0*Assert: FUNCType(VARglobalObj) is Object. 
*0*If VARthisValue is undefined, set VARthisValue to VARglobalObj. 
*0*Set VARrealmRec.[[VARGlobalObject]] to VARglobalObj. 
*0*Let VARnewGlobalEnv be FUNCNewGlobalEnvironment(VARglobalObj, VARthisValue). 
*0*Set VARrealmRec.[[VARGlobalEnv]] to VARnewGlobalEnv. 
*0*Return VARrealmRec.    

#############  END  ## 138 ###########################
############# BEGIN ## 139 ###########################
ID= 8.2.4
Summary= SetDefaultGlobalBindings ( realmRec )
Description= The abstract operation SetDefaultGlobalBindings with argument realmRec performs the following steps:
*0*Let VARglobal be VARrealmRec.[[VARGlobalObject]]. 
*0*For each property of the Global Object specified in clause 18, do
*1*Let VARname be the String value of the property name. 
*1*Let VARdesc be the fully populated data property descriptor for the property containing the specified attributes for the property. For properties listed in 18.2, 18.3, or 18.4 the value of the [[VARValue]] attribute is the corresponding intrinsic object from VARrealmRec. 
*1*Perform ? FUNCDefinePropertyOrThrow(VARglobal, VARname, VARdesc). 
*0*Return VARglobal.    

#############  END  ## 139 ###########################
############# BEGIN ## 140 ###########################
ID= 8.3.1
Summary= GetActiveScriptOrModule ( )
Description= The GetActiveScriptOrModule abstract operation is used to determine the running script or module, based on the running execution context. GetActiveScriptOrModule performs the following steps:
*0*If the execution context stack is empty, return null. 
*0*Let VARec be the topmost execution context on the execution context stack whose ScriptOrModule component is not null. 
*0*If no such execution context exists, return null. Otherwise, return VARec's ScriptOrModule component.    

#############  END  ## 140 ###########################
############# BEGIN ## 141 ###########################
ID= 8.3.2
Summary= ResolveBinding ( name [ , env ] )
Description= The ResolveBinding abstract operation is used to determine the binding of name passed as a String value. The optional argument env can be used to explicitly provide the Lexical Environment that is to be searched for the binding. During execution of ECMAScript code, ResolveBinding is performed using the following algorithm:
*0*If VARenv is not present or if VARenv is undefined, then
*1*Set VARenv to the running execution context's LexicalEnvironment. 
*0*Assert: VARenv is a Lexical Environment. 
*0*If the code matching the syntactic production that is being evaluated is contained in strict mode code, then
*1*Let VARstrict be true
*0*Else,
*1*let VARstrict be false.
*0*Return ? FUNCGetIdentifierReference(VARenv, VARname, VARstrict).    

#############  END  ## 141 ###########################
############# BEGIN ## 142 ###########################
ID= 8.3.3
Summary= GetThisEnvironment ( )
Description= The abstract operation GetThisEnvironment finds the Environment Record that currently supplies the binding of the keyword this. GetThisEnvironment performs the following steps:
*0*Let VARlex be the running execution context's LexicalEnvironment. 
*0*Repeat,
*1*Let VARenvRec be VARlex's EnvironmentRecord. 
*1*Let VARexists be VARenvRec.HasThisBinding(). 
*1*If VARexists is true, return VARenvRec. 
*1*Let VARouter be the value of VARlex's outer environment reference. 
*1*Assert: VARouter is not null. 
*1*Set VARlex to VARouter.    

#############  END  ## 142 ###########################
############# BEGIN ## 143 ###########################
ID= 8.3.4
Summary= ResolveThisBinding ( )
Description= The abstract operation ResolveThisBinding determines the binding of the keyword this using the LexicalEnvironment of the running execution context. ResolveThisBinding performs the following steps:
*0*Let VARenvRec be FUNCGetThisEnvironment(). 
*0*Return ? VARenvRec.GetThisBinding().    

#############  END  ## 143 ###########################
############# BEGIN ## 144 ###########################
ID= 8.3.5
Summary= GetNewTarget ( )
Description= The abstract operation GetNewTarget determines the NewTarget value using the LexicalEnvironment of the running execution context. GetNewTarget performs the following steps:
*0*Let VARenvRec be FUNCGetThisEnvironment(). 
*0*Assert: VARenvRec has a [[VARNewTarget]] field. 
*0*Return VARenvRec.[[VARNewTarget]].    

#############  END  ## 144 ###########################
############# BEGIN ## 145 ###########################
ID= 8.3.6
Summary= GetGlobalObject ( )
Description= The abstract operation GetGlobalObject returns the global object used by the currently running execution context. GetGlobalObject performs the following steps:
*0*Let VARctx be the running execution context. 
*0*Let VARcurrentRealm be VARctx's Realm. 
*0*Return VARcurrentRealm.[[VARGlobalObject]].    

#############  END  ## 145 ###########################
############# BEGIN ## 146 ###########################
ID= 8.4.1
Summary= EnqueueJob ( queueName, job, arguments )
Description= The EnqueueJob abstract operation requires three arguments: queueName, job, and arguments. It performs the following steps:
*0*Assert: FUNCType(VARqueueName) is String and its value is the name of a Job Queue recognized by this implementation. 
*0*Assert: VARjob is the name of a Job. 
*0*Assert: VARarguments is a List that has the same number of elements as the number of parameters required by VARjob. 
*0*Let VARcallerContext be the running execution context. 
*0*Let VARcallerRealm be VARcallerContext's Realm. 
*0*Let VARcallerScriptOrModule be VARcallerContext's ScriptOrModule. 
*0*Let VARpending be PendingJob { [[VARJob]]: VARjob, [[VARArguments]]: VARarguments, [[VARRealm]]: VARcallerRealm, [[VARScriptOrModule]]: VARcallerScriptOrModule, [[VARHostDefined]]: undefined }. 
*0*Perform any implementation or host environment defined processing of VARpending. This may include modifying the [[VARHostDefined]] field or any other field of VARpending. 
*0*Add VARpending at the back of the Job Queue named by VARqueueName. 
*0*Return FUNCNormalCompletion(empty).    

#############  END  ## 146 ###########################
############# BEGIN ## 147 ###########################
ID= 8.5
Summary= InitializeHostDefinedRealm ( )
Description= The abstract operation InitializeHostDefinedRealm performs the following steps:
*0*Let VARrealm be FUNCCreateRealm(). 
*0*Let VARnewContext be a new execution context. 
*0*Set the Function of VARnewContext to null. 
*0*Set the Realm of VARnewContext to VARrealm. 
*0*Set the ScriptOrModule of VARnewContext to null. 
*0*Push VARnewContext onto the execution context stack; VARnewContext is now the running execution context. 
*0*If the host requires use of an exotic object to serve as VARrealm's global object, then
*1*Let VARglobal be such an object created in an implementation-defined manner. Otherwise, then
*0*If the host requires that the this binding in VARrealm's global scope return an object other than the global object, then
*1*Let VARthisValue be such an object created in an implementation-defined manner. Otherwise, then
*0*Perform FUNCSetRealmGlobalObject(VARrealm, VARglobal, VARthisValue). 
*0*Let VARglobalObj be ? FUNCSetDefaultGlobalBindings(VARrealm). 
*0*Create any implementation-defined global object properties on VARglobalObj. 
*0*Return FUNCNormalCompletion(empty).   

#############  END  ## 147 ###########################
############# BEGIN ## 148 ###########################
ID= 8.6
Summary= RunJobs ( )
Description= The abstract operation RunJobs performs the following steps:
*0*Perform ? FUNCInitializeHostDefinedRealm(). 
*0*In an implementation-dependent manner, obtain the ECMAScript source texts (see clause 10) and any associated host-defined values for zero or more ECMAScript scripts and/or ECMAScript modules. For each such VARsourceText and VARhostDefined, do
*1*If VARsourceText is the source code of a script, then
*2*Perform FUNCEnqueueJob("ScriptJobs", ScriptEvaluationJob, « VARsourceText, VARhostDefined »). 
*1*Else VARsourceText is the source code of a module,
*2*Perform FUNCEnqueueJob("ScriptJobs", TopLevelModuleEvaluationJob, « VARsourceText, VARhostDefined »). 
*0*Repeat,
*1*Suspend the running execution context and remove it from the execution context stack. 
*1*Assert: The execution context stack is now empty. 
*1*Let VARnextQueue be a non-empty Job Queue chosen in an implementation-defined manner. If all Job Queues are empty, the result is implementation-defined. 
*1*Let VARnextPending be the PendingJob record at the front of VARnextQueue. Remove that record from VARnextQueue. 
*1*Let VARnewContext be a new execution context. 
*1*Set VARnewContext's Function to null. 
*1*Set VARnewContext's Realm to VARnextPending.[[VARRealm]]. 
*1*Set VARnewContext's ScriptOrModule to VARnextPending.[[VARScriptOrModule]]. 
*1*Push VARnewContext onto the execution context stack; VARnewContext is now the running execution context. 
*1*Perform any implementation or host environment defined job initialization using VARnextPending. 
*1*Let VARresult be the result of performing the abstract operation named by VARnextPending.[[VARJob]] using the elements of VARnextPending.[[VARArguments]] as its arguments. 
*1*If VARresult is an FUNCabrupt completion, perform HostReportErrors(« VARresult.[[VARValue]] »).   

#############  END  ## 148 ###########################
############# BEGIN ## 149 ###########################
ID= 8.7.1
Summary= AgentSignifier ( )
Description= The abstract operation AgentSignifier takes no arguments. It performs the following steps:
*0*Let VARAR be the Agent Record of the surrounding agent. 
*0*Return VARAR.[[VARSignifier]].    

#############  END  ## 149 ###########################
############# BEGIN ## 150 ###########################
ID= 8.7.2
Summary= AgentCanSuspend ( )
Description= The abstract operation AgentCanSuspend takes no arguments. It performs the following steps:
*0*Let VARAR be the Agent Record of the surrounding agent. 
*0*Return VARAR.[[VARCanBlock]].    

#############  END  ## 150 ###########################
############# BEGIN ## 151 ###########################
ID= 9.1.1
Summary= [[GetPrototypeOf]] ( )
Description= When the [[GetPrototypeOf]] internal method of O is called, the following steps are taken:
*0*Return ! FUNCOrdinaryGetPrototypeOf(VARO).    

#############  END  ## 151 ###########################
############# BEGIN ## 152 ###########################
ID= 9.1.1.1
Summary= OrdinaryGetPrototypeOf ( O )
Description= When the abstract operation OrdinaryGetPrototypeOf is called with Object O, the following steps are taken:
*0*Return VARO.[[VARPrototype]].     

#############  END  ## 152 ###########################
############# BEGIN ## 153 ###########################
ID= 9.1.2
Summary= [[SetPrototypeOf]] ( V )
Description= When the [[SetPrototypeOf]] internal method of O is called with argument V, the following steps are taken:
*0*Return ! FUNCOrdinarySetPrototypeOf(VARO, VARV).    

#############  END  ## 153 ###########################
############# BEGIN ## 154 ###########################
ID= 9.1.2.1
Summary= OrdinarySetPrototypeOf ( O, V )
Description= When the abstract operation OrdinarySetPrototypeOf is called with Object O and value V, the following steps are taken:
*0*Assert: Either FUNCType(VARV) is Object or FUNCType(VARV) is Null. 
*0*Let VARextensible be VARO.[[VARExtensible]]. 
*0*Let VARcurrent be VARO.[[VARPrototype]]. 
*0*If FUNCSameValue(VARV, VARcurrent) is true, return true. 
*0*If VARextensible is false, return false. 
*0*Let VARp be VARV. 
*0*Let VARdone be false. 
*0*Repeat, while VARdone is false,
*1*If VARp is null, set VARdone to true. 
*1*Else,
*2*if FUNCSameValue(VARp, VARO) is true, return false.
*1*Else,
*2*If VARp.[[VARGetPrototypeOf]] is not the ordinary object internal method defined in 9.1.1, set VARdone to true. 
*2*Else,
*3*set VARp to VARp.[[VARVARPrototype]].
*0*Set VARO.[[VARPrototype]] to VARV. 
*0*Return true.     

#############  END  ## 154 ###########################
############# BEGIN ## 155 ###########################
ID= 9.1.3
Summary= [[IsExtensible]] ( )
Description= When the [[IsExtensible]] internal method of O is called, the following steps are taken:
*0*Return ! FUNCOrdinaryIsExtensible(VARO).    

#############  END  ## 155 ###########################
############# BEGIN ## 156 ###########################
ID= 9.1.3.1
Summary= OrdinaryIsExtensible ( O )
Description= When the abstract operation OrdinaryIsExtensible is called with Object O, the following steps are taken:
*0*Return VARO.[[VARExtensible]].     

#############  END  ## 156 ###########################
############# BEGIN ## 157 ###########################
ID= 9.1.4
Summary= [[PreventExtensions]] ( )
Description= When the [[PreventExtensions]] internal method of O is called, the following steps are taken:
*0*Return ! FUNCOrdinaryPreventExtensions(VARO).    

#############  END  ## 157 ###########################
############# BEGIN ## 158 ###########################
ID= 9.1.4.1
Summary= OrdinaryPreventExtensions ( O )
Description= When the abstract operation OrdinaryPreventExtensions is called with Object O, the following steps are taken:
*0*Set VARO.[[VARExtensible]] to false. 
*0*Return true.     

#############  END  ## 158 ###########################
############# BEGIN ## 159 ###########################
ID= 9.1.5
Summary= [[GetOwnProperty]] ( P )
Description= When the [[GetOwnProperty]] internal method of O is called with property key P, the following steps are taken:
*0*Return ! FUNCOrdinaryGetOwnProperty(VARO, VARP).    

#############  END  ## 159 ###########################
############# BEGIN ## 160 ###########################
ID= 9.1.5.1
Summary= OrdinaryGetOwnProperty ( O, P )
Description= When the abstract operation OrdinaryGetOwnProperty is called with Object O and with property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*If VARO does not have an own property with key VARP, return undefined. 
*0*Let VARD be a newly created Property Descriptor with no fields. 
*0*Let VARX be VARO's own property whose key is VARP. 
*0*If VARX is a data property, then
*1*Set VARD.[[VARValue]] to the value of VARX's [[VARValue]] attribute. 
*1*Set VARD.[[VARWritable]] to the value of VARX's [[VARWritable]] attribute. 
*0*Else VARX is an accessor property,
*1*Set VARD.[[VARGet]] to the value of VARX's [[VARGet]] attribute. 
*1*Set VARD.[[VARSet]] to the value of VARX's [[VARSet]] attribute. 
*0*Set VARD.[[VAREnumerable]] to the value of VARX's [[VAREnumerable]] attribute. 
*0*Set VARD.[[VARConfigurable]] to the value of VARX's [[VARConfigurable]] attribute. 
*0*Return VARD.     

#############  END  ## 160 ###########################
############# BEGIN ## 161 ###########################
ID= 9.1.6
Summary= [[DefineOwnProperty]] ( P, Desc )
Description= When the [[DefineOwnProperty]] internal method of O is called with property key P and Property Descriptor Desc, the following steps are taken:
*0*Return ? FUNCOrdinaryDefineOwnProperty(VARO, VARP, VARDesc).    

#############  END  ## 161 ###########################
############# BEGIN ## 162 ###########################
ID= 9.1.6.1
Summary= OrdinaryDefineOwnProperty ( O, P, Desc )
Description= When the abstract operation OrdinaryDefineOwnProperty is called with Object O, property key P, and Property Descriptor Desc, the following steps are taken:
*0*Let VARcurrent be ? VARO.[[VARGetOwnProperty]](VARP). 
*0*Let VARextensible be VARO.[[VARExtensible]]. 
*0*Return FUNCValidateAndApplyPropertyDescriptor(VARO, VARP, VARextensible, VARDesc, VARcurrent).     

#############  END  ## 162 ###########################
############# BEGIN ## 163 ###########################
ID= 9.1.6.2
Summary= IsCompatiblePropertyDescriptor ( Extensible, Desc, Current )
Description= When the abstract operation IsCompatiblePropertyDescriptor is called with Boolean value Extensible, and Property Descriptors Desc, and Current, the following steps are taken:
*0*Return FUNCValidateAndApplyPropertyDescriptor(undefined, undefined, VARExtensible, VARDesc, VARCurrent).     

#############  END  ## 163 ###########################
############# BEGIN ## 164 ###########################
ID= 9.1.6.3
Summary= ValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )
Description= When the abstract operation ValidateAndApplyPropertyDescriptor is called with Object O, property key P, Boolean value extensible, and Property Descriptors Desc, and current, the following steps are taken:
*0*Assert: If VARO is not undefined, then FUNCIsPropertyKey(VARP) is true. 
*0*If VARcurrent is undefined, then
*1*If VARextensible is false, return false. 
*1*Assert: VARextensible is true. 
*1*If FUNCIsGenericDescriptor(VARDesc) is true or FUNCIsDataDescriptor(VARDesc) is true, then
*2*If VARO is not undefined, create an own data property named VARP of object VARO whose [[VARValue]], [[VARWritable]], [[VAREnumerable]] and [[VARConfigurable]] attribute values are described by VARDesc. If the value of an attribute field of VARDesc is absent, the attribute of the newly created property is set to its default value. 
*1*Else VARDesc must be an accessor Property Descriptor,
*2*If VARO is not undefined, create an own accessor property named VARP of object VARO whose [[VARGet]], [[VARSet]], [[VAREnumerable]] and [[VARConfigurable]] attribute values are described by VARDesc. If the value of an attribute field of VARDesc is absent, the attribute of the newly created property is set to its default value. 
*1*Return true. 
*0*If every field in VARDesc is absent, return true. 
*0*If VARcurrent.[[VARConfigurable]] is false, then
*1*If VARDesc.[[VARConfigurable]] is present and its value is true, return false. 
*1*If VARDesc.[[VAREnumerable]] is present and the [[VAREnumerable]] fields of VARcurrent and VARDesc are the Boolean negation of each other, return false. 
*0*If FUNCIsGenericDescriptor(VARDesc) is true, no further validation is required. 
*0*Else if FUNCIsDataDescriptor(VARcurrent) and FUNCIsDataDescriptor(VARDesc) have different results, then
*1*If VARcurrent.[[VARConfigurable]] is false, return false. 
*1*If FUNCIsDataDescriptor(VARcurrent) is true, then
*2*If VARO is not undefined, convert the property named VARP of object VARO from a data property to an accessor property. Preserve the existing values of the converted property's [[VARConfigurable]] and [[VAREnumerable]] attributes and set the rest of the property's attributes to their default values. 
*1*Else,
*2*If VARO is not undefined, convert the property named VARP of object VARO from an accessor property to a data property. Preserve the existing values of the converted property's [[VARConfigurable]] and [[VAREnumerable]] attributes and set the rest of the property's attributes to their default values. 
*0*Else if FUNCIsDataDescriptor(VARcurrent) and FUNCIsDataDescriptor(VARDesc) are both true, then
*1*If VARcurrent.[[VARConfigurable]] is false and VARcurrent.[[VARWritable]] is false, then
*2*If VARDesc.[[VARWritable]] is present and VARDesc.[[VARWritable]] is true, return false. 
*2*If VARDesc.[[VARValue]] is present and FUNCSameValue(VARDesc.[[VARValue]], VARcurrent.[[VARValue]]) is false, return false. 
*2*Return true. 
*0*Else FUNCIsAccessorDescriptor(VARcurrent) and FUNCIsAccessorDescriptor(VARDesc) are both true,
*1*If VARcurrent.[[VARConfigurable]] is false, then
*2*If VARDesc.[[VARSet]] is present and FUNCSameValue(VARDesc.[[VARSet]], VARcurrent.[[VARSet]]) is false, return false. 
*2*If VARDesc.[[VARGet]] is present and FUNCSameValue(VARDesc.[[VARGet]], VARcurrent.[[VARGet]]) is false, return false. 
*2*Return true. 
*0*If VARO is not undefined, then
*1*For each field of VARDesc that is present, set the corresponding attribute of the property named VARP of object VARO to the value of the field. 
*0*Return true.     

#############  END  ## 164 ###########################
############# BEGIN ## 165 ###########################
ID= 9.1.7
Summary= [[HasProperty]] ( P )
Description= When the [[HasProperty]] internal method of O is called with property key P, the following steps are taken:
*0*Return ? FUNCOrdinaryHasProperty(VARO, VARP).    

#############  END  ## 165 ###########################
############# BEGIN ## 166 ###########################
ID= 9.1.7.1
Summary= OrdinaryHasProperty ( O, P )
Description= When the abstract operation OrdinaryHasProperty is called with Object O and with property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARhasOwn be ? VARO.[[VARGetOwnProperty]](VARP). 
*0*If VARhasOwn is not undefined, return true. 
*0*Let VARparent be ? VARO.[[VARGetPrototypeOf]](). 
*0*If VARparent is not null, then
*1*Return ? VARparent.[[VARHasProperty]](VARP). 
*0*Return false.     

#############  END  ## 166 ###########################
############# BEGIN ## 167 ###########################
ID= 9.1.8
Summary= [[Get]] ( P, Receiver )
Description= When the [[Get]] internal method of O is called with property key P and ECMAScript language value Receiver, the following steps are taken:
*0*Return ? FUNCOrdinaryGet(VARO, VARP, VARReceiver).    

#############  END  ## 167 ###########################
############# BEGIN ## 168 ###########################
ID= 9.1.8.1
Summary= OrdinaryGet ( O, P, Receiver )
Description= When the abstract operation OrdinaryGet is called with Object O, property key P, and ECMAScript language value Receiver, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARdesc be ? VARO.[[VARGetOwnProperty]](VARP). 
*0*If VARdesc is undefined, then
*1*Let VARparent be ? VARO.[[VARGetPrototypeOf]](). 
*1*If VARparent is null, return undefined. 
*1*Return ? VARparent.[[VARGet]](VARP, VARReceiver). 
*0*If FUNCIsDataDescriptor(VARdesc) is true, return VARdesc.[[VARValue]]. 
*0*Assert: FUNCIsAccessorDescriptor(VARdesc) is true. 
*0*Let VARgetter be VARdesc.[[VARGet]]. 
*0*If VARgetter is undefined, return undefined. 
*0*Return ? FUNCCall(VARgetter, VARReceiver).     

#############  END  ## 168 ###########################
############# BEGIN ## 169 ###########################
ID= 9.1.9
Summary= [[Set]] ( P, V, Receiver )
Description= When the [[Set]] internal method of O is called with property key P, value V, and ECMAScript language value Receiver, the following steps are taken:
*0*Return ? FUNCOrdinarySet(VARO, VARP, VARV, VARReceiver).    

#############  END  ## 169 ###########################
############# BEGIN ## 170 ###########################
ID= 9.1.9.1
Summary= OrdinarySet ( O, P, V, Receiver )
Description= When the abstract operation OrdinarySet is called with Object O, property key P, value V, and ECMAScript language value Receiver, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARownDesc be ? VARO.[[VARGetOwnProperty]](VARP). 
*0*Return FUNCOrdinarySetWithOwnDescriptor(VARO, VARP, VARV, VARReceiver, VARownDesc).     

#############  END  ## 170 ###########################
############# BEGIN ## 171 ###########################
ID= 9.1.9.2
Summary= OrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )
Description= When the abstract operation OrdinarySetWithOwnDescriptor is called with Object O, property key P, value V, ECMAScript language value Receiver, and Property Descriptor (or undefined) ownDesc, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*If VARownDesc is undefined, then
*1*Let VARparent be ? VARO.[[VARGetPrototypeOf]](). 
*1*If VARparent is not null, then
*2*Return ? VARparent.[[VARSet]](VARP, VARV, VARReceiver). 
*1*Else,
*2*Set VARownDesc to the PropertyDescriptor { [[VARValue]]: undefined, [[VARWritable]]: true, [[VAREnumerable]]: true, [[VARConfigurable]]: true }. 
*0*If FUNCIsDataDescriptor(VARownDesc) is true, then
*1*If VARownDesc.[[VARWritable]] is false, return false. 
*1*If FUNCType(VARReceiver) is not Object, return false. 
*1*Let VARexistingDescriptor be ? VARReceiver.[[VARGetOwnProperty]](VARP). 
*1*If VARexistingDescriptor is not undefined, then
*2*If FUNCIsAccessorDescriptor(VARexistingDescriptor) is true, return false. 
*2*If VARexistingDescriptor.[[VARWritable]] is false, return false. 
*2*Let VARvalueDesc be the PropertyDescriptor { [[VARValue]]: VARV }. 
*2*Return ? VARReceiver.[[VARDefineOwnProperty]](VARP, VARvalueDesc). 
*1*Else VARReceiver does not currently have a property VARP,
*2*Return ? FUNCCreateDataProperty(VARReceiver, VARP, VARV). 
*0*Assert: FUNCIsAccessorDescriptor(VARownDesc) is true. 
*0*Let VARsetter be VARownDesc.[[VARSet]]. 
*0*If VARsetter is undefined, return false. 
*0*Perform ? FUNCCall(VARsetter, VARReceiver, « VARV »). 
*0*Return true.     

#############  END  ## 171 ###########################
############# BEGIN ## 172 ###########################
ID= 9.1.10
Summary= [[Delete]] ( P )
Description= When the [[Delete]] internal method of O is called with property key P, the following steps are taken:
*0*Return ? FUNCOrdinaryDelete(VARO, VARP).    

#############  END  ## 172 ###########################
############# BEGIN ## 173 ###########################
ID= 9.1.10.1
Summary= OrdinaryDelete ( O, P )
Description= When the abstract operation OrdinaryDelete is called with Object O and property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARdesc be ? VARO.[[VARGetOwnProperty]](VARP). 
*0*If VARdesc is undefined, return true. 
*0*If VARdesc.[[VARConfigurable]] is true, then
*1*Remove the own property with name VARP from VARO. 
*1*Return true. 
*0*Return false.     

#############  END  ## 173 ###########################
############# BEGIN ## 174 ###########################
ID= 9.1.11
Summary= [[OwnPropertyKeys]] ( )
Description= When the [[OwnPropertyKeys]] internal method of O is called, the following steps are taken:
*0*Return ! FUNCOrdinaryOwnPropertyKeys(VARO).    

#############  END  ## 174 ###########################
############# BEGIN ## 175 ###########################
ID= 9.1.11.1
Summary= OrdinaryOwnPropertyKeys ( O )
Description= When the abstract operation OrdinaryOwnPropertyKeys is called with Object O, the following steps are taken:
*0*Let VARkeys be a new empty List. 
*0*For each own property key VARP of VARO that is an integer index, in ascending numeric index order, do
*1*Add VARP as the last element of VARkeys. 
*0*For each own property key VARP of VARO that is a String but is not an integer index, in ascending chronological order of property creation, do
*1*Add VARP as the last element of VARkeys. 
*0*For each own property key VARP of VARO that is a Symbol, in ascending chronological order of property creation, do
*1*Add VARP as the last element of VARkeys. 
*0*Return VARkeys.     

#############  END  ## 175 ###########################
############# BEGIN ## 176 ###########################
ID= 9.1.12
Summary= ObjectCreate ( proto [ , internalSlotsList ] )
Description= The abstract operation ObjectCreate with argument proto (an object or null) is used to specify the runtime creation of new ordinary objects. The optional argument internalSlotsList is a List of the names of additional internal slots that must be defined as part of the object. If the list is not provided, a new empty List is used. This abstract operation performs the following steps:
*0*If VARinternalSlotsList is not present, set VARinternalSlotsList to a new empty List. 
*0*Let VARobj be a newly created object with an internal slot for each name in VARinternalSlotsList. 
*0*Set VARobj's essential internal methods to the default ordinary object definitions specified in 9.1. 
*0*Set VARobj.[[VARPrototype]] to VARproto. 
*0*Set VARobj.[[VARExtensible]] to true. 
*0*Return VARobj.    

#############  END  ## 176 ###########################
############# BEGIN ## 177 ###########################
ID= 9.1.13
Summary= OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )
Description= The abstract operation OrdinaryCreateFromConstructor creates an ordinary object whose [[Prototype]] value is retrieved from a constructor's prototype property, if it exists. Otherwise the intrinsic named by intrinsicDefaultProto is used for [[Prototype]]. The optional internalSlotsList is a List of the names of additional internal slots that must be defined as part of the object. If the list is not provided, a new empty List is used. This abstract operation performs the following steps:
*0*Assert: VARintrinsicDefaultProto is a String value that is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[VARPrototype]] value of an object. 
*0*Let VARproto be ? FUNCGetPrototypeFromConstructor(VARconstructor, VARintrinsicDefaultProto). 
*0*Return FUNCObjectCreate(VARproto, VARinternalSlotsList).    

#############  END  ## 177 ###########################
############# BEGIN ## 178 ###########################
ID= 9.1.14
Summary= GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )
Description= The abstract operation GetPrototypeFromConstructor determines the [[Prototype]] value that should be used to create an object corresponding to a specific constructor. The value is retrieved from the constructor's prototype property, if it exists. Otherwise the intrinsic named by intrinsicDefaultProto is used for [[Prototype]]. This abstract operation performs the following steps:
*0*Assert: VARintrinsicDefaultProto is a String value that is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[VARPrototype]] value of an object. 
*0*Assert: FUNCIsCallable(VARconstructor) is true. 
*0*Let VARproto be ? FUNCGet(VARconstructor, "prototype"). 
*0*If FUNCType(VARproto) is not Object, then
*1*Let VARrealm be ? FUNCGetFunctionRealm(VARconstructor). 
*1*Set VARproto to VARrealm's intrinsic object named VARintrinsicDefaultProto. 
*0*Return VARproto.    

#############  END  ## 178 ###########################
############# BEGIN ## 179 ###########################
ID= 9.2.1
Summary= [[Call]] ( thisArgument, argumentsList )
Description= The [[Call]] internal method for an ECMAScript function object F is called with parameters thisArgument and argumentsList, a List of ECMAScript language values. The following steps are taken:
*0*Assert: VARF is an ECMAScript function object. 
*0*If VARF.[[VARFunctionKind]] is "classConstructor", throw a TypeError exception. 
*0*Let VARcallerContext be the running execution context. 
*0*Let VARcalleeContext be FUNCPrepareForOrdinaryCall(VARF, undefined). 
*0*Assert: VARcalleeContext is now the running execution context. 
*0*Perform FUNCOrdinaryCallBindThis(VARF, VARcalleeContext, VARthisArgument). 
*0*Let VARresult be FUNCOrdinaryCallEvaluateBody(VARF, VARargumentsList). 
*0*Remove VARcalleeContext from the execution context stack and restore VARcallerContext as the running execution context. 
*0*If VARresult.[[VARType]] is return, return FUNCNormalCompletion(VARresult.[[VARValue]]). 
*0*FUNCReturnIfAbrupt(VARresult). 
*0*Return FUNCNormalCompletion(undefined).    

#############  END  ## 179 ###########################
############# BEGIN ## 180 ###########################
ID= 9.2.1.1
Summary= PrepareForOrdinaryCall ( F, newTarget )
Description= When the abstract operation PrepareForOrdinaryCall is called with function object F and ECMAScript language value newTarget, the following steps are taken:
*0*Assert: FUNCType(VARnewTarget) is Undefined or Object. 
*0*Let VARcallerContext be the running execution context. 
*0*Let VARcalleeContext be a new ECMAScript code execution context. 
*0*Set the Function of VARcalleeContext to VARF. 
*0*Let VARcalleeRealm be VARF.[[VARRealm]]. 
*0*Set the Realm of VARcalleeContext to VARcalleeRealm. 
*0*Set the ScriptOrModule of VARcalleeContext to VARF.[[VARScriptOrModule]]. 
*0*Let VARlocalEnv be FUNCNewFunctionEnvironment(VARF, VARnewTarget). 
*0*Set the LexicalEnvironment of VARcalleeContext to VARlocalEnv. 
*0*Set the VariableEnvironment of VARcalleeContext to VARlocalEnv. 
*0*If VARcallerContext is not already suspended, suspend VARcallerContext. 
*0*Push VARcalleeContext onto the execution context stack; VARcalleeContext is now the running execution context. 
*0*NOTE: Any exception objects produced after this point are associated with VARcalleeRealm. 
*0*Return VARcalleeContext.     

#############  END  ## 180 ###########################
############# BEGIN ## 181 ###########################
ID= 9.2.1.2
Summary= OrdinaryCallBindThis ( F, calleeContext, thisArgument )
Description= When the abstract operation OrdinaryCallBindThis is called with function object F, execution context calleeContext, and ECMAScript value thisArgument, the following steps are taken:
*0*Let VARthisMode be VARF.[[VARThisMode]]. 
*0*If VARthisMode is lexical, return FUNCNormalCompletion(undefined). 
*0*Let VARcalleeRealm be VARF.[[VARRealm]]. 
*0*Let VARlocalEnv be the LexicalEnvironment of VARcalleeContext. 
*0*If VARthisMode is strict, then
*1*Let VARthisValue be VARthisArgument. 
*0*Else,
*1*If VARthisArgument is undefined or null, then
*2*Let VARglobalEnv be VARcalleeRealm.[[VARGlobalEnv]]. 
*2*Let VARglobalEnvRec be VARglobalEnv's EnvironmentRecord. 
*2*Assert: VARglobalEnvRec is a global Environment Record. 
*2*Let VARthisValue be VARglobalEnvRec.[[VARGlobalThisValue]]. 
*1*Else,
*2*Let VARthisValue be ! FUNCToObject(VARthisArgument). 
*2*NOTE: ToObject produces wrapper objects using VARcalleeRealm. 
*0*Let VARenvRec be VARlocalEnv's EnvironmentRecord. 
*0*Assert: VARenvRec is a function Environment Record. 
*0*Assert: The next step never returns an abrupt completion because VARenvRec.[[VARThisBindingStatus]] is not "initialized". 
*0*Return VARenvRec.BindThisValue(VARthisValue).     

#############  END  ## 181 ###########################
############# BEGIN ## 182 ###########################
ID= 9.2.1.3
Summary= OrdinaryCallEvaluateBody ( F, argumentsList )
Description= When the abstract operation OrdinaryCallEvaluateBody is called with function object F and List argumentsList, the following steps are taken:
*0*Return the result of EvaluateBody of the parsed code that is VARF.[[VARECMAScriptCode]] passing VARF and VARargumentsList as the arguments.     

#############  END  ## 182 ###########################
############# BEGIN ## 183 ###########################
ID= 9.2.2
Summary= [[Construct]] ( argumentsList, newTarget )
Description= The [[Construct]] internal method for an ECMAScript function object F is called with parameters argumentsList and newTarget. argumentsList is a possibly empty List of ECMAScript language values. The following steps are taken:
*0*Assert: VARF is an ECMAScript function object. 
*0*Assert: FUNCType(VARnewTarget) is Object. 
*0*Let VARcallerContext be the running execution context. 
*0*Let VARkind be VARF.[[VARConstructorKind]]. 
*0*If VARkind is "base", then
*1*Let VARthisArgument be ? FUNCOrdinaryCreateFromConstructor(VARnewTarget, "%ObjectPrototype%"). 
*0*Let VARcalleeContext be FUNCPrepareForOrdinaryCall(VARF, VARnewTarget). 
*0*Assert: VARcalleeContext is now the running execution context. 
*0*If VARkind is "base", perform FUNCOrdinaryCallBindThis(VARF, VARcalleeContext, VARthisArgument). 
*0*Let VARconstructorEnv be the LexicalEnvironment of VARcalleeContext. 
*0*Let VARenvRec be VARconstructorEnv's EnvironmentRecord. 
*0*Let VARresult be FUNCOrdinaryCallEvaluateBody(VARF, VARargumentsList). 
*0*Remove VARcalleeContext from the execution context stack and restore VARcallerContext as the running execution context. 
*0*If VARresult.[[VARType]] is return, then
*1*If FUNCType(VARresult.[[VARValue]]) is Object, return FUNCNormalCompletion(VARresult.[[VARValue]]). 
*1*If VARkind is "base", return FUNCNormalCompletion(VARthisArgument). 
*1*If VARresult.[[VARValue]] is not undefined, throw a TypeError exception. 
*0*Else,
*1*FUNCReturnIfAbrupt(VARresult).
*0*Return ? VARenvRec.GetThisBinding().    

#############  END  ## 183 ###########################
############# BEGIN ## 184 ###########################
ID= 9.2.3
Summary= FunctionAllocate ( functionPrototype, strict, functionKind )
Description= The abstract operation FunctionAllocate requires the three arguments functionPrototype, strict and functionKind. FunctionAllocate performs the following steps:
*0*Assert: FUNCType(VARfunctionPrototype) is Object. 
*0*Assert: VARfunctionKind is either "normal", "non-constructor", "generator", "async", or "async generator". 
*0*If VARfunctionKind is "normal", then
*1*Let VARneedsConstruct be true. 
*0*Else,
*1*let VARneedsConstruct be false.
*0*If VARfunctionKind is "non-constructor", set VARfunctionKind to "normal". 
*0*Let VARF be a newly created ECMAScript function object with the internal slots listed in Table 27. All of those internal slots are initialized to undefined. 
*0*Set VARF's essential internal methods to the default ordinary object definitions specified in 9.1. 
*0*Set VARF.[[VARCall]] to the definition specified in 9.2.1. 
*0*If VARneedsConstruct is true, then
*1*Set VARF.[[VARConstruct]] to the definition specified in 9.2.2. 
*1*Set VARF.[[VARConstructorKind]] to "base". 
*0*Set VARF.[[VARStrict]] to VARstrict. 
*0*Set VARF.[[VARFunctionKind]] to VARfunctionKind. 
*0*Set VARF.[[VARPrototype]] to VARfunctionPrototype. 
*0*Set VARF.[[VARExtensible]] to true. 
*0*Set VARF.[[VARRealm]] to the current Realm Record. 
*0*Return VARF.    

#############  END  ## 184 ###########################
############# BEGIN ## 185 ###########################
ID= 9.2.4
Summary= FunctionInitialize ( F, kind, ParameterList, Body, Scope )
Description= The abstract operation FunctionInitialize requires the arguments: a function object F, kind which is one of (Normal, Method, Arrow), a parameter list Parse Node specified by ParameterList, a body Parse Node specified by Body, a Lexical Environment specified by Scope. FunctionInitialize performs the following steps:
*0*Let VARlen be the ExpectedArgumentCount of VARParameterList. 
*0*Perform ! FUNCSetFunctionLength(VARF, VARlen). 
*0*Let VARStrict be VARF.[[VARStrict]]. 
*0*Set VARF.[[VAREnvironment]] to VARScope. 
*0*Set VARF.[[VARFormalParameters]] to VARParameterList. 
*0*Set VARF.[[VARECMAScriptCode]] to VARBody. 
*0*Set VARF.[[VARScriptOrModule]] to FUNCGetActiveScriptOrModule(). 
*0*If VARkind is Arrow, set VARF.[[VARThisMode]] to lexical. 
*0*Else,
*1*if VARStrict is true, set VARF.[[VARVARThisMode]] to strict.
*0*Else,
*1*set VARF.[[VARVARThisMode]] to global.
*0*Return VARF.    

#############  END  ## 185 ###########################
############# BEGIN ## 186 ###########################
ID= 9.2.5
Summary= FunctionCreate ( kind, ParameterList, Body, Scope, Strict [ , prototype ] )
Description= The abstract operation FunctionCreate requires the arguments: kind which is one of (Normal, Method, Arrow), a parameter list Parse Node specified by ParameterList, a body Parse Node specified by Body, a Lexical Environment specified by Scope, a Boolean flag Strict, and optionally, an object prototype. FunctionCreate performs the following steps:
*0*If VARprototype is not present, then
*1*Set VARprototype to the intrinsic object %FunctionPrototype%. 
*0*If VARkind is not Normal, then
*1*Let VARallocKind be "non-constructor". 
*0*Else,
*1*let VARallocKind be "normal".
*0*Let VARF be FUNCFunctionAllocate(VARprototype, VARStrict, VARallocKind). 
*0*Return FUNCFunctionInitialize(VARF, VARkind, VARParameterList, VARBody, VARScope).    

#############  END  ## 186 ###########################
############# BEGIN ## 187 ###########################
ID= 9.2.6
Summary= GeneratorFunctionCreate ( kind, ParameterList, Body, Scope, Strict )
Description= The abstract operation GeneratorFunctionCreate requires the arguments: kind which is one of (Normal, Method), a parameter list Parse Node specified by ParameterList, a body Parse Node specified by Body, a Lexical Environment specified by Scope, and a Boolean flag Strict. GeneratorFunctionCreate performs the following steps:
*0*Let VARfunctionPrototype be the intrinsic object %Generator%. 
*0*Let VARF be FUNCFunctionAllocate(VARfunctionPrototype, VARStrict, "generator"). 
*0*Return FUNCFunctionInitialize(VARF, VARkind, VARParameterList, VARBody, VARScope).    

#############  END  ## 187 ###########################
############# BEGIN ## 188 ###########################
ID= 9.2.7
Summary= AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope, Strict )
Description= The abstract operation AsyncGeneratorFunctionCreate requires the arguments: kind which is one of (Normal, Method), a parameter list Parse Node specified by ParameterList, a body Parse Node specified by Body, a Lexical Environment specified by Scope, and a Boolean flag Strict. AsyncGeneratorFunctionCreate performs the following steps:
*0*Let VARfunctionPrototype be the intrinsic object %AsyncGenerator%. 
*0*Let VARF be ! FUNCFunctionAllocate(VARfunctionPrototype, VARStrict, "generator"). 
*0*Return ! FUNCFunctionInitialize(VARF, VARkind, VARParameterList, VARBody, VARScope).    

#############  END  ## 188 ###########################
############# BEGIN ## 189 ###########################
ID= 9.2.8
Summary= AsyncFunctionCreate ( kind, parameters, body, Scope, Strict )
Description= The abstract operation AsyncFunctionCreate requires the arguments: kind which is one of (Normal, Method, Arrow), a parameter list Parse Node specified by parameters, a body Parse Node specified by body, a Lexical Environment specified by Scope, and a Boolean flag Strict. AsyncFunctionCreate performs the following steps:
*0*Let VARfunctionPrototype be the intrinsic object %AsyncFunctionPrototype%. 
*0*Let VARF be ! FUNCFunctionAllocate(VARfunctionPrototype, VARStrict, "async"). 
*0*Return ! FUNCFunctionInitialize(VARF, VARkind, VARparameters, VARbody, VARScope).    

#############  END  ## 189 ###########################
############# BEGIN ## 190 ###########################
ID= 9.2.9
Summary= AddRestrictedFunctionProperties ( F, realm )
Description= The abstract operation AddRestrictedFunctionProperties is called with a function object F and Realm Record realm as its argument. It performs the following steps:
*0*Assert: VARrealm.[[VARIntrinsics]].[[VAR%ThrowTypeError%]] exists and has been initialized. 
*0*Let VARthrower be VARrealm.[[VARIntrinsics]].[[VAR%ThrowTypeError%]]. 
*0*Perform ! FUNCDefinePropertyOrThrow(VARF, "caller", PropertyDescriptor { [[VARGet]]: VARthrower, [[VARSet]]: VARthrower, [[VAREnumerable]]: false, [[VARConfigurable]]: true }). 
*0*Return ! FUNCDefinePropertyOrThrow(VARF, "arguments", PropertyDescriptor { [[VARGet]]: VARthrower, [[VARSet]]: VARthrower, [[VAREnumerable]]: false, [[VARConfigurable]]: true }).    

#############  END  ## 190 ###########################
############# BEGIN ## 191 ###########################
ID= 9.2.9.1
Summary= %ThrowTypeError% ( )
Description= The  %ThrowTypeError% intrinsic is an anonymous built-in function object that is defined once for each realm. When %ThrowTypeError% is called it performs the following steps:
*0*Throw a TypeError exception.     

#############  END  ## 191 ###########################
############# BEGIN ## 192 ###########################
ID= 9.2.10
Summary= MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )
Description= The abstract operation MakeConstructor requires a Function argument F and optionally, a Boolean writablePrototype and an object prototype. If prototype is provided it is assumed to already contain, if needed, a "constructor" property whose value is F. This operation converts F into a constructor by performing the following steps:
*0*Assert: VARF is an ECMAScript function object. 
*0*Assert: FUNCIsConstructor(VARF) is true. 
*0*Assert: VARF is an extensible object that does not have a prototype own property. 
*0*If VARwritablePrototype is not present, set VARwritablePrototype to true. 
*0*If VARprototype is not present, then
*1*Set VARprototype to FUNCObjectCreate(%ObjectPrototype%). 
*1*Perform ! FUNCDefinePropertyOrThrow(VARprototype, "constructor", PropertyDescriptor { [[VARValue]]: VARF, [[VARWritable]]: VARwritablePrototype, [[VAREnumerable]]: false, [[VARConfigurable]]: true }). 
*0*Perform ! FUNCDefinePropertyOrThrow(VARF, "prototype", PropertyDescriptor { [[VARValue]]: VARprototype, [[VARWritable]]: VARwritablePrototype, [[VAREnumerable]]: false, [[VARConfigurable]]: false }). 
*0*Return FUNCNormalCompletion(undefined).    

#############  END  ## 192 ###########################
############# BEGIN ## 193 ###########################
ID= 9.2.11
Summary= MakeClassConstructor ( F )
Description= The abstract operation MakeClassConstructor with argument F performs the following steps:
*0*Assert: VARF is an ECMAScript function object. 
*0*Assert: VARF.[[VARFunctionKind]] is "normal". 
*0*Set VARF.[[VARFunctionKind]] to "classConstructor". 
*0*Return FUNCNormalCompletion(undefined).    

#############  END  ## 193 ###########################
############# BEGIN ## 194 ###########################
ID= 9.2.12
Summary= MakeMethod ( F, homeObject )
Description= The abstract operation MakeMethod with arguments F and homeObject configures F as a method by performing the following steps:
*0*Assert: VARF is an ECMAScript function object. 
*0*Assert: FUNCType(VARhomeObject) is Object. 
*0*Set VARF.[[VARHomeObject]] to VARhomeObject. 
*0*Return FUNCNormalCompletion(undefined).    

#############  END  ## 194 ###########################
############# BEGIN ## 195 ###########################
ID= 9.2.13
Summary= SetFunctionName ( F, name [ , prefix ] )
Description= The abstract operation SetFunctionName requires a Function argument F, a String or Symbol argument name and optionally a String argument prefix. This operation adds a name property to F by performing the following steps:
*0*Assert: VARF is an extensible object that does not have a name own property. 
*0*Assert: FUNCType(VARname) is either Symbol or String. 
*0*Assert: If VARprefix is present, then FUNCType(VARprefix) is String. 
*0*If FUNCType(VARname) is Symbol, then
*1*Let VARdescription be VARname's [[VARDescription]] value. 
*1*If VARdescription is undefined, set VARname to the empty String. 
*1*Else,
*2*set VARname to the string-concatenation of "[", VARdescription, and "]".
*0*If VARprefix is present, then
*1*Set VARname to the string-concatenation of VARprefix, the code unit 0x0020 (SPACE), and VARname. 
*0*Return ! FUNCDefinePropertyOrThrow(VARF, "name", PropertyDescriptor { [[VARValue]]: VARname, [[VARWritable]]: false, [[VAREnumerable]]: false, [[VARConfigurable]]: true }).    

#############  END  ## 195 ###########################
############# BEGIN ## 196 ###########################
ID= 9.2.14
Summary= SetFunctionLength ( F, length )
Description= The abstract operation SetFunctionLength requires a Function argument F and a Number argument length. This operation adds a length property to F by performing the following steps:
*0*Assert: VARF is an extensible object that does not have a length own property. 
*0*Assert: FUNCType(VARlength) is Number. 
*0*Assert: VARlength ≥ 0 and ! FUNCToInteger(VARlength) is equal to VARlength. 
*0*Return ! FUNCDefinePropertyOrThrow(VARF, "length", PropertyDescriptor { [[VARValue]]: VARlength, [[VARWritable]]: false, [[VAREnumerable]]: false, [[VARConfigurable]]: true }).    

#############  END  ## 196 ###########################
############# BEGIN ## 197 ###########################
ID= 9.2.15
Summary= FunctionDeclarationInstantiation ( func, argumentsList )
Description= When an execution context is established for evaluating an ECMAScript function a new function Environment Record is created and bindings for each formal parameter are instantiated in that Environment Record. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same Environment Record as the parameters. If default value parameter initializers exist, a second Environment Record is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.
*0*Let VARcalleeContext be the running execution context. 
*0*Let VARenv be the LexicalEnvironment of VARcalleeContext. 
*0*Let VARenvRec be VARenv's EnvironmentRecord. 
*0*Let VARcode be VARfunc.[[VARECMAScriptCode]]. 
*0*Let VARstrict be VARfunc.[[VARStrict]]. 
*0*Let VARformals be VARfunc.[[VARFormalParameters]]. 
*0*Let VARparameterNames be the BoundNames of VARformals. 
*0*If VARparameterNames has any duplicate entries, then
*1*Let VARhasDuplicates be true. Otherwise, then
*0*Let VARsimpleParameterList be IsSimpleParameterList of VARformals. 
*0*Let VARhasParameterExpressions be ContainsExpression of VARformals. 
*0*Let VARvarNames be the VarDeclaredNames of VARcode. 
*0*Let VARvarDeclarations be the VarScopedDeclarations of VARcode. 
*0*Let VARlexicalNames be the LexicallyDeclaredNames of VARcode. 
*0*Let VARfunctionNames be a new empty List. 
*0*Let VARfunctionsToInitialize be a new empty List. 
*0*For each VARd in VARvarDeclarations, in reverse list order, do
*1*If VARd is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, then
*2*Assert: VARd is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration. 
*2*Let VARfn be the sole element of the BoundNames of VARd. 
*2*If VARfn is not an element of VARfunctionNames, then
*3*Insert VARfn as the first element of VARfunctionNames. 
*3*NOTE: If there are multiple function declarations for the same name, the last declaration is used. 
*3*Insert VARd as the first element of VARfunctionsToInitialize. 
*0*Let VARargumentsObjectNeeded be true. 
*0*If VARfunc.[[VARThisMode]] is lexical, then
*1*NOTE: Arrow functions never have an arguments objects. 
*1*Set VARargumentsObjectNeeded to false. 
*0*Else if "arguments" is an element of VARparameterNames, then
*1*Set VARargumentsObjectNeeded to false. 
*0*Else if VARhasParameterExpressions is false, then
*1*If "arguments" is an element of VARfunctionNames or if "arguments" is an element of VARlexicalNames, then
*2*Set VARargumentsObjectNeeded to false. 
*0*For each String VARparamName in VARparameterNames, do
*1*Let VARalreadyDeclared be VARenvRec.HasBinding(VARparamName). 
*1*NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters. 
*1*If VARalreadyDeclared is false, then
*2*Perform ! VARenvRec.CreateMutableBinding(VARparamName, false). 
*2*If VARhasDuplicates is true, then
*3*Perform ! VARenvRec.InitializeBinding(VARparamName, undefined). 
*0*If VARargumentsObjectNeeded is true, then
*1*If VARstrict is true or if VARsimpleParameterList is false, then
*2*Let VARao be FUNCCreateUnmappedArgumentsObject(VARargumentsList). 
*1*Else,
*2*NOTE: mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters. 
*2*Let VARao be FUNCCreateMappedArgumentsObject(VARfunc, VARformals, VARargumentsList, VARenvRec). 
*1*If VARstrict is true, then
*2*Perform ! VARenvRec.CreateImmutableBinding("arguments", false). 
*1*Else,
*2*Perform ! VARenvRec.CreateMutableBinding("arguments", false). 
*1*Call VARenvRec.InitializeBinding("arguments", VARao). 
*1*Let VARparameterBindings be a new List of VARparameterNames with "arguments" appended. 
*0*Else,
*1*Let VARparameterBindings be VARparameterNames. 
*0*Let VARiteratorRecord be FUNCCreateListIteratorRecord(VARargumentsList). 
*0*If VARhasDuplicates is true, then
*1*Perform ? IteratorBindingInitialization for VARformals with VARiteratorRecord and undefined as arguments. 
*0*Else,
*1*Perform ? IteratorBindingInitialization for VARformals with VARiteratorRecord and VARenv as arguments. 
*0*If VARhasParameterExpressions is false, then
*1*NOTE: Only a single lexical environment is needed for the parameters and top-level vars. 
*1*Let VARinstantiatedVarNames be a copy of the List VARparameterBindings. 
*1*For each VARn in VARvarNames, do
*2*If VARn is not an element of VARinstantiatedVarNames, then
*3*Append VARn to VARinstantiatedVarNames. 
*3*Perform ! VARenvRec.CreateMutableBinding(VARn, false). 
*3*Call VARenvRec.InitializeBinding(VARn, undefined). 
*1*Let VARvarEnv be VARenv. 
*1*Let VARvarEnvRec be VARenvRec. 
*0*Else,
*1*NOTE: A separate Environment Record is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body. 
*1*Let VARvarEnv be FUNCNewDeclarativeEnvironment(VARenv). 
*1*Let VARvarEnvRec be VARvarEnv's EnvironmentRecord. 
*1*Set the VariableEnvironment of VARcalleeContext to VARvarEnv. 
*1*Let VARinstantiatedVarNames be a new empty List. 
*1*For each VARn in VARvarNames, do
*2*If VARn is not an element of VARinstantiatedVarNames, then
*3*Append VARn to VARinstantiatedVarNames. 
*3*Perform ! VARvarEnvRec.CreateMutableBinding(VARn, false). 
*3*If VARn is not an element of VARparameterBindings or if VARn is an element of VARfunctionNames, then
*4*Let VARinitialValue be undefined. 
*3*Else,
*4*Let VARinitialValue be ! VARenvRec.GetBindingValue(VARn, false). 
*3*Call VARvarEnvRec.InitializeBinding(VARn, VARinitialValue). 
*3*NOTE: vars whose names are the same as a formal parameter, initially have the same value as the corresponding initialized parameter. 
*0*NOTE: Annex B.3.3.1 adds additional steps at this point. 
*0*If VARstrict is false, then
*1*Let VARlexEnv be FUNCNewDeclarativeEnvironment(VARvarEnv). 
*1*NOTE: Non-strict functions use a separate lexical Environment Record for top-level lexical declarations so that a direct eval can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict direct eval always places all declarations into a new Environment Record. 
*0*Else,
*1*let VARlexEnv be VARvarEnv.
*0*Let VARlexEnvRec be VARlexEnv's EnvironmentRecord. 
*0*Set the LexicalEnvironment of VARcalleeContext to VARlexEnv. 
*0*Let VARlexDeclarations be the LexicallyScopedDeclarations of VARcode. 
*0*For each element VARd in VARlexDeclarations, do
*1*NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized. 
*1*For each element VARdn of the BoundNames of VARd, do
*2*If IsConstantDeclaration of VARd is true, then
*3*Perform ! VARlexEnvRec.CreateImmutableBinding(VARdn, true). 
*2*Else,
*3*Perform ! VARlexEnvRec.CreateMutableBinding(VARdn, false). 
*0*For each Parse Node VARf in VARfunctionsToInitialize, do
*1*Let VARfn be the sole element of the BoundNames of VARf. 
*1*Let VARfo be the result of performing InstantiateFunctionObject for VARf with argument VARlexEnv. 
*1*Perform ! VARvarEnvRec.SetMutableBinding(VARfn, VARfo, false). 
*0*Return FUNCNormalCompletion(empty).    

#############  END  ## 197 ###########################
############# BEGIN ## 198 ###########################
ID= 9.3.1
Summary= [[Call]] ( thisArgument, argumentsList )
Description= The [[Call]] internal method for a built-in function object F is called with parameters thisArgument and argumentsList, a List of ECMAScript language values. The following steps are taken:
*0*Let VARcallerContext be the running execution context. 
*0*If VARcallerContext is not already suspended, suspend VARcallerContext. 
*0*Let VARcalleeContext be a new ECMAScript code execution context. 
*0*Set the Function of VARcalleeContext to VARF. 
*0*Let VARcalleeRealm be VARF.[[VARRealm]]. 
*0*Set the Realm of VARcalleeContext to VARcalleeRealm. 
*0*Set the ScriptOrModule of VARcalleeContext to VARF.[[VARScriptOrModule]]. 
*0*Perform any necessary implementation-defined initialization of VARcalleeContext. 
*0*Push VARcalleeContext onto the execution context stack; VARcalleeContext is now the running execution context. 
*0*Let VARresult be the Completion Record that is the result of evaluating VARF in an implementation-defined manner that conforms to the specification of VARF. VARthisArgument is the this value, VARargumentsList provides the named parameters, and the NewTarget value is undefined. 
*0*Remove VARcalleeContext from the execution context stack and restore VARcallerContext as the running execution context. 
*0*Return VARresult.    

#############  END  ## 198 ###########################
############# BEGIN ## 199 ###########################
ID= 9.3.2
Summary= [[Construct]] ( argumentsList, newTarget )
Description= The [[Construct]] internal method for built-in function object F is called with parameters argumentsList and newTarget. The steps performed are the same as [[Call]] (see  9.3.1) except that step 10 is replaced by:
*0*Let VARresult be the Completion Record that is the result of evaluating VARF in an implementation-defined manner that conforms to the specification of VARF. The this value is uninitialized, VARargumentsList provides the named parameters, and VARnewTarget provides the NewTarget value.    

#############  END  ## 199 ###########################
############# BEGIN ## 200 ###########################
ID= 9.3.3
Summary= CreateBuiltinFunction ( steps, internalSlotsList [ , realm [ , prototype ] ] )
Description= The abstract operation CreateBuiltinFunction takes arguments steps, internalSlotsList, realm, and prototype. The argument internalSlotsList is a List of the names of additional internal slots that must be defined as part of the object. CreateBuiltinFunction returns a built-in function object created by the following steps:
*0*Assert: VARsteps is either a set of algorithm steps or other definition of a function's behaviour provided in this specification. 
*0*If VARrealm is not present, set VARrealm to the current Realm Record. 
*0*Assert: VARrealm is a Realm Record. 
*0*If VARprototype is not present, set VARprototype to VARrealm.[[VARIntrinsics]].[[VAR%FunctionPrototype%]]. 
*0*Let VARfunc be a new built-in function object that when called performs the action described by VARsteps. The new function object has internal slots whose names are the elements of VARinternalSlotsList. The initial value of each of those internal slots is undefined. 
*0*Set VARfunc.[[VARRealm]] to VARrealm. 
*0*Set VARfunc.[[VARPrototype]] to VARprototype. 
*0*Set VARfunc.[[VARExtensible]] to true. 
*0*Set VARfunc.[[VARScriptOrModule]] to null. 
*0*Return VARfunc.    

#############  END  ## 200 ###########################
############# BEGIN ## 201 ###########################
ID= 9.4.1.1
Summary= [[Call]] ( thisArgument, argumentsList )
Description= When the [[Call]] internal method of a bound function exotic object, F, which was created using the bind function is called with parameters thisArgument and argumentsList, a List of ECMAScript language values, the following steps are taken:
*0*Let VARtarget be VARF.[[VARBoundTargetFunction]]. 
*0*Let VARboundThis be VARF.[[VARBoundThis]]. 
*0*Let VARboundArgs be VARF.[[VARBoundArguments]]. 
*0*Let VARargs be a new list containing the same values as the list VARboundArgs in the same order followed by the same values as the list VARargumentsList in the same order. 
*0*Return ? FUNCCall(VARtarget, VARboundThis, VARargs).     

#############  END  ## 201 ###########################
############# BEGIN ## 202 ###########################
ID= 9.4.1.2
Summary= [[Construct]] ( argumentsList, newTarget )
Description= When the [[Construct]] internal method of a bound function exotic object, F that was created using the bind function is called with a list of arguments argumentsList and newTarget, the following steps are taken:
*0*Let VARtarget be VARF.[[VARBoundTargetFunction]]. 
*0*Assert: FUNCIsConstructor(VARtarget) is true. 
*0*Let VARboundArgs be VARF.[[VARBoundArguments]]. 
*0*Let VARargs be a new list containing the same values as the list VARboundArgs in the same order followed by the same values as the list VARargumentsList in the same order. 
*0*If FUNCSameValue(VARF, VARnewTarget) is true, set VARnewTarget to VARtarget. 
*0*Return ? FUNCConstruct(VARtarget, VARargs, VARnewTarget).     

#############  END  ## 202 ###########################
############# BEGIN ## 203 ###########################
ID= 9.4.1.3
Summary= BoundFunctionCreate ( targetFunction, boundThis, boundArgs )
Description= The abstract operation BoundFunctionCreate with arguments targetFunction, boundThis and boundArgs is used to specify the creation of new Bound Function exotic objects. It performs the following steps:
*0*Assert: FUNCType(VARtargetFunction) is Object. 
*0*Let VARproto be ? VARtargetFunction.[[VARGetPrototypeOf]](). 
*0*Let VARobj be a newly created object. 
*0*Set VARobj's essential internal methods to the default ordinary object definitions specified in 9.1. 
*0*Set VARobj.[[VARCall]] as described in 9.4.1.1. 
*0*If FUNCIsConstructor(VARtargetFunction) is true, then
*1*Set VARobj.[[VARConstruct]] as described in 9.4.1.2. 
*0*Set VARobj.[[VARPrototype]] to VARproto. 
*0*Set VARobj.[[VARExtensible]] to true. 
*0*Set VARobj.[[VARBoundTargetFunction]] to VARtargetFunction. 
*0*Set VARobj.[[VARBoundThis]] to VARboundThis. 
*0*Set VARobj.[[VARBoundArguments]] to VARboundArgs. 
*0*Return VARobj.     

#############  END  ## 203 ###########################
############# BEGIN ## 204 ###########################
ID= 9.4.2.1
Summary= [[DefineOwnProperty]] ( P, Desc )
Description= When the [[DefineOwnProperty]] internal method of an Array exotic object A is called with property key P, and Property Descriptor Desc, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*If VARP is "length", then
*1*Return ? FUNCArraySetLength(VARA, VARDesc). 
*0*Else if VARP is an array index, then
*1*Let VARoldLenDesc be FUNCOrdinaryGetOwnProperty(VARA, "length"). 
*1*Assert: VARoldLenDesc will never be undefined or an accessor descriptor because Array objects are created with a length data property that cannot be deleted or reconfigured. 
*1*Let VARoldLen be VARoldLenDesc.[[VARValue]]. 
*1*Let VARindex be ! FUNCToUint32(VARP). 
*1*If VARindex ≥ VARoldLen and VARoldLenDesc.[[VARWritable]] is false, return false. 
*1*Let VARsucceeded be ! FUNCOrdinaryDefineOwnProperty(VARA, VARP, VARDesc). 
*1*If VARsucceeded is false, return false. 
*1*If VARindex ≥ VARoldLen, then
*2*Set VARoldLenDesc.[[VARValue]] to VARindex + 1. 
*2*Let VARsucceeded be FUNCOrdinaryDefineOwnProperty(VARA, "length", VARoldLenDesc). 
*2*Assert: VARsucceeded is true. 
*1*Return true. 
*0*Return FUNCOrdinaryDefineOwnProperty(VARA, VARP, VARDesc).     

#############  END  ## 204 ###########################
############# BEGIN ## 205 ###########################
ID= 9.4.2.2
Summary= ArrayCreate ( length [ , proto ] )
Description= The abstract operation ArrayCreate with argument length (either 0 or a positive integer) and optional argument proto is used to specify the creation of new Array exotic objects. It performs the following steps:
*0*Assert: VARlength is an integer Number ≥ 0. 
*0*If VARlength is -0, set VARlength to +0. 
*0*If VARlength&gt;2--EXP0--32--EXP1---1, throw a RangeError exception. 
*0*If VARproto is not present, set VARproto to the intrinsic object %ArrayPrototype%. 
*0*Let VARA be a newly created Array exotic object. 
*0*Set VARA's essential internal methods except for [[VARDefineOwnProperty]] to the default ordinary object definitions specified in 9.1. 
*0*Set VARA.[[VARDefineOwnProperty]] as specified in 9.4.2.1. 
*0*Set VARA.[[VARPrototype]] to VARproto. 
*0*Set VARA.[[VARExtensible]] to true. 
*0*Perform ! FUNCOrdinaryDefineOwnProperty(VARA, "length", PropertyDescriptor { [[VARValue]]: VARlength, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: false }). 
*0*Return VARA.     

#############  END  ## 205 ###########################
############# BEGIN ## 206 ###########################
ID= 9.4.2.3
Summary= ArraySpeciesCreate ( originalArray, length )
Description= The abstract operation ArraySpeciesCreate with arguments originalArray and length is used to specify the creation of a new Array object using a constructor function that is derived from originalArray. It performs the following steps:
*0*Assert: VARlength is an integer Number ≥ 0. 
*0*If VARlength is -0, set VARlength to +0. 
*0*Let VARisArray be ? FUNCIsArray(VARoriginalArray). 
*0*If VARisArray is false, return ? FUNCArrayCreate(VARlength). 
*0*Let VARC be ? FUNCGet(VARoriginalArray, "constructor"). 
*0*If FUNCIsConstructor(VARC) is true, then
*1*Let VARthisRealm be the current Realm Record. 
*1*Let VARrealmC be ? FUNCGetFunctionRealm(VARC). 
*1*If VARthisRealm and VARrealmC are not the same Realm Record, then
*2*If FUNCSameValue(VARC, VARrealmC.[[VARIntrinsics]].[[VAR%Array%]]) is true, set VARC to undefined. 
*0*If FUNCType(VARC) is Object, then
*1*Set VARC to ? FUNCGet(VARC, @@species). 
*1*If VARC is null, set VARC to undefined. 
*0*If VARC is undefined, return ? FUNCArrayCreate(VARlength). 
*0*If FUNCIsConstructor(VARC) is false, throw a TypeError exception. 
*0*Return ? FUNCConstruct(VARC, « VARlength »).     

#############  END  ## 206 ###########################
############# BEGIN ## 207 ###########################
ID= 9.4.2.4
Summary= ArraySetLength ( A, Desc )
Description= When the abstract operation ArraySetLength is called with an Array exotic object A, and Property Descriptor Desc, the following steps are taken:
*0*If VARDesc.[[VARValue]] is absent, then
*1*Return FUNCOrdinaryDefineOwnProperty(VARA, "length", VARDesc). 
*0*Let VARnewLenDesc be a copy of VARDesc. 
*0*Let VARnewLen be ? FUNCToUint32(VARDesc.[[VARValue]]). 
*0*Let VARnumberLen be ? FUNCToNumber(VARDesc.[[VARValue]]). 
*0*If VARnewLen ≠ VARnumberLen, throw a RangeError exception. 
*0*Set VARnewLenDesc.[[VARValue]] to VARnewLen. 
*0*Let VARoldLenDesc be FUNCOrdinaryGetOwnProperty(VARA, "length"). 
*0*Assert: VARoldLenDesc will never be undefined or an accessor descriptor because Array objects are created with a length data property that cannot be deleted or reconfigured. 
*0*Let VARoldLen be VARoldLenDesc.[[VARValue]]. 
*0*If VARnewLen ≥ VARoldLen, then
*1*Return FUNCOrdinaryDefineOwnProperty(VARA, "length", VARnewLenDesc). 
*0*If VARoldLenDesc.[[VARWritable]] is false, return false. 
*0*If VARnewLenDesc.[[VARWritable]] is absent or has the value true, then
*1*Let VARnewWritable be true. 
*0*Else,
*1*Need to defer setting the [[VARWritable]] attribute to false in case any elements cannot be deleted. 
*1*Let VARnewWritable be false. 
*1*Set VARnewLenDesc.[[VARWritable]] to true. 
*0*Let VARsucceeded be ! FUNCOrdinaryDefineOwnProperty(VARA, "length", VARnewLenDesc). 
*0*If VARsucceeded is false, return false. 
*0*Repeat, while VARnewLen &lt; VARoldLen,
*1*Set VARoldLen to VARoldLen - 1. 
*1*Let VARdeleteSucceeded be ! VARA.[[VARDelete]](! FUNCToString(VARoldLen)). 
*1*If VARdeleteSucceeded is false, then
*2*Set VARnewLenDesc.[[VARValue]] to VARoldLen + 1. 
*2*If VARnewWritable is false, set VARnewLenDesc.[[VARWritable]] to false. 
*2*Perform ! FUNCOrdinaryDefineOwnProperty(VARA, "length", VARnewLenDesc). 
*2*Return false. 
*0*If VARnewWritable is false, then
*1*Return FUNCOrdinaryDefineOwnProperty(VARA, "length", PropertyDescriptor { [[VARWritable]]: false }). This call will always return true. 
*0*Return true.     

#############  END  ## 207 ###########################
############# BEGIN ## 208 ###########################
ID= 9.4.3.1
Summary= [[GetOwnProperty]] ( P )
Description= When the [[GetOwnProperty]] internal method of a String exotic object S is called with property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARdesc be FUNCOrdinaryGetOwnProperty(VARS, VARP). 
*0*If VARdesc is not undefined, return VARdesc. 
*0*Return ! FUNCStringGetOwnProperty(VARS, VARP).     

#############  END  ## 208 ###########################
############# BEGIN ## 209 ###########################
ID= 9.4.3.2
Summary= [[DefineOwnProperty]] ( P, Desc )
Description= When the [[DefineOwnProperty]] internal method of a String exotic object S is called with property key P, and Property Descriptor Desc, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARstringDesc be ! FUNCStringGetOwnProperty(VARS, VARP). 
*0*If VARstringDesc is not undefined, then
*1*Let VARextensible be VARS.[[VARExtensible]]. 
*1*Return ! FUNCIsCompatiblePropertyDescriptor(VARextensible, VARDesc, VARstringDesc). 
*0*Return ! FUNCOrdinaryDefineOwnProperty(VARS, VARP, VARDesc).     

#############  END  ## 209 ###########################
############# BEGIN ## 210 ###########################
ID= 9.4.3.3
Summary= [[OwnPropertyKeys]] ( )
Description= When the [[OwnPropertyKeys]] internal method of a String exotic object O is called, the following steps are taken:
*0*Let VARkeys be a new empty List. 
*0*Let VARstr be the String value of VARO.[[VARStringData]]. 
*0*Let VARlen be the length of VARstr. 
*0*For each integer VARi starting with 0 such that VARi &lt; VARlen, in ascending order, do
*1*Add ! FUNCToString(VARi) as the last element of VARkeys. 
*0*For each own property key VARP of VARO such that VARP is an integer index and FUNCToInteger(VARP) ≥ VARlen, in ascending numeric index order, do
*1*Add VARP as the last element of VARkeys. 
*0*For each own property key VARP of VARO such that FUNCType(VARP) is String and VARP is not an integer index, in ascending chronological order of property creation, do
*1*Add VARP as the last element of VARkeys. 
*0*For each own property key VARP of VARO such that FUNCType(VARP) is Symbol, in ascending chronological order of property creation, do
*1*Add VARP as the last element of VARkeys. 
*0*Return VARkeys.     

#############  END  ## 210 ###########################
############# BEGIN ## 211 ###########################
ID= 9.4.3.4
Summary= StringCreate ( value, prototype )
Description= The abstract operation StringCreate with arguments value and prototype is used to specify the creation of new String exotic objects. It performs the following steps:
*0*Assert: FUNCType(VARvalue) is String. 
*0*Let VARS be a newly created String exotic object. 
*0*Set VARS.[[VARStringData]] to VARvalue. 
*0*Set VARS's essential internal methods to the default ordinary object definitions specified in 9.1. 
*0*Set VARS.[[VARGetOwnProperty]] as specified in 9.4.3.1. 
*0*Set VARS.[[VARDefineOwnProperty]] as specified in 9.4.3.2. 
*0*Set VARS.[[VAROwnPropertyKeys]] as specified in 9.4.3.3. 
*0*Set VARS.[[VARPrototype]] to VARprototype. 
*0*Set VARS.[[VARExtensible]] to true. 
*0*Let VARlength be the number of code unit elements in VARvalue. 
*0*Perform ! FUNCDefinePropertyOrThrow(VARS, "length", PropertyDescriptor { [[VARValue]]: VARlength, [[VARWritable]]: false, [[VAREnumerable]]: false, [[VARConfigurable]]: false }). 
*0*Return VARS.     

#############  END  ## 211 ###########################
############# BEGIN ## 212 ###########################
ID= 9.4.3.5
Summary= StringGetOwnProperty ( S, P )
Description= The abstract operation StringGetOwnProperty called with arguments S and P performs the following steps:
*0*Assert: VARS is an Object that has a [[VARStringData]] internal slot. 
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*If FUNCType(VARP) is not String, return undefined. 
*0*Let VARindex be ! FUNCCanonicalNumericIndexString(VARP). 
*0*If VARindex is undefined, return undefined. 
*0*If FUNCIsInteger(VARindex) is false, return undefined. 
*0*If VARindex = -0, return undefined. 
*0*Let VARstr be the String value of VARS.[[VARStringData]]. 
*0*Let VARlen be the length of VARstr. 
*0*If VARindex &lt; 0 or VARlen ≤ VARindex, return undefined. 
*0*Let VARresultStr be the String value of length 1, containing one code unit from VARstr, specifically the code unit at index VARindex. 
*0*Return a PropertyDescriptor { [[VARValue]]: VARresultStr, [[VARWritable]]: false, [[VAREnumerable]]: true, [[VARConfigurable]]: false }.     

#############  END  ## 212 ###########################
############# BEGIN ## 213 ###########################
ID= 9.4.4.1
Summary= [[GetOwnProperty]] ( P )
Description= The [[GetOwnProperty]] internal method of an arguments exotic object when called with a property key P performs the following steps:
*0*Let VARargs be the arguments object. 
*0*Let VARdesc be FUNCOrdinaryGetOwnProperty(VARargs, VARP). 
*0*If VARdesc is undefined, return VARdesc. 
*0*Let VARmap be VARargs.[[VARParameterMap]]. 
*0*Let VARisMapped be ! FUNCHasOwnProperty(VARmap, VARP). 
*0*If VARisMapped is true, then
*1*Set VARdesc.[[VARValue]] to FUNCGet(VARmap, VARP). 
*0*Return VARdesc.     

#############  END  ## 213 ###########################
############# BEGIN ## 214 ###########################
ID= 9.4.4.2
Summary= [[DefineOwnProperty]] ( P, Desc )
Description= The [[DefineOwnProperty]] internal method of an arguments exotic object when called with a property key P and Property Descriptor Desc performs the following steps:
*0*Let VARargs be the arguments object. 
*0*Let VARmap be VARargs.[[VARParameterMap]]. 
*0*Let VARisMapped be FUNCHasOwnProperty(VARmap, VARP). 
*0*Let VARnewArgDesc be VARDesc. 
*0*If VARisMapped is true and FUNCIsDataDescriptor(VARDesc) is true, then
*1*If VARDesc.[[VARValue]] is not present and VARDesc.[[VARWritable]] is present and its value is false, then
*2*Set VARnewArgDesc to a copy of VARDesc. 
*2*Set VARnewArgDesc.[[VARValue]] to FUNCGet(VARmap, VARP). 
*0*Let VARallowed be ? FUNCOrdinaryDefineOwnProperty(VARargs, VARP, VARnewArgDesc). 
*0*If VARallowed is false, return false. 
*0*If VARisMapped is true, then
*1*If FUNCIsAccessorDescriptor(VARDesc) is true, then
*2*Call VARmap.[[VARDelete]](VARP). 
*1*Else,
*2*If VARDesc.[[VARValue]] is present, then
*3*Let VARsetStatus be FUNCSet(VARmap, VARP, VARDesc.[[VARValue]], false). 
*3*Assert: VARsetStatus is true because formal parameters mapped by argument objects are always writable. 
*2*If VARDesc.[[VARWritable]] is present and its value is false, then
*3*Call VARmap.[[VARDelete]](VARP). 
*0*Return true.     

#############  END  ## 214 ###########################
############# BEGIN ## 215 ###########################
ID= 9.4.4.3
Summary= [[Get]] ( P, Receiver )
Description= The [[Get]] internal method of an arguments exotic object when called with a property key P and ECMAScript language value Receiver performs the following steps:
*0*Let VARargs be the arguments object. 
*0*Let VARmap be VARargs.[[VARParameterMap]]. 
*0*Let VARisMapped be ! FUNCHasOwnProperty(VARmap, VARP). 
*0*If VARisMapped is false, then
*1*Return ? FUNCOrdinaryGet(VARargs, VARP, VARReceiver). 
*0*Else VARmap contains a formal parameter mapping for VARP,
*1*Return FUNCGet(VARmap, VARP).     

#############  END  ## 215 ###########################
############# BEGIN ## 216 ###########################
ID= 9.4.4.4
Summary= [[Set]] ( P, V, Receiver )
Description= The [[Set]] internal method of an arguments exotic object when called with property key P, value V, and ECMAScript language value Receiver performs the following steps:
*0*Let VARargs be the arguments object. 
*0*If FUNCSameValue(VARargs, VARReceiver) is false, then
*1*Let VARisMapped be false. 
*0*Else,
*1*Let VARmap be VARargs.[[VARParameterMap]]. 
*1*Let VARisMapped be ! FUNCHasOwnProperty(VARmap, VARP). 
*0*If VARisMapped is true, then
*1*Let VARsetStatus be FUNCSet(VARmap, VARP, VARV, false). 
*1*Assert: VARsetStatus is true because formal parameters mapped by argument objects are always writable. 
*0*Return ? FUNCOrdinarySet(VARargs, VARP, VARV, VARReceiver).     

#############  END  ## 216 ###########################
############# BEGIN ## 217 ###########################
ID= 9.4.4.5
Summary= [[Delete]] ( P )
Description= The [[Delete]] internal method of an arguments exotic object when called with a property key P performs the following steps:
*0*Let VARargs be the arguments object. 
*0*Let VARmap be VARargs.[[VARParameterMap]]. 
*0*Let VARisMapped be ! FUNCHasOwnProperty(VARmap, VARP). 
*0*Let VARresult be ? FUNCOrdinaryDelete(VARargs, VARP). 
*0*If VARresult is true and VARisMapped is true, then
*1*Call VARmap.[[VARDelete]](VARP). 
*0*Return VARresult.     

#############  END  ## 217 ###########################
############# BEGIN ## 218 ###########################
ID= 9.4.4.6
Summary= CreateUnmappedArgumentsObject ( argumentsList )
Description= The abstract operation CreateUnmappedArgumentsObject called with an argument argumentsList performs the following steps:
*0*Let VARlen be the number of elements in VARargumentsList. 
*0*Let VARobj be FUNCObjectCreate(%ObjectPrototype%, « [[VARParameterMap]] »). 
*0*Set VARobj.[[VARParameterMap]] to undefined. 
*0*Perform FUNCDefinePropertyOrThrow(VARobj, "length", PropertyDescriptor { [[VARValue]]: VARlen, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: true }). 
*0*Let VARindex be 0. 
*0*Repeat, while VARindex &lt; VARlen,
*1*Let VARval be VARargumentsList[VARindex]. 
*1*Perform FUNCCreateDataProperty(VARobj, ! FUNCToString(VARindex), VARval). 
*1*Let VARindex be VARindex + 1. 
*0*Perform ! FUNCDefinePropertyOrThrow(VARobj, @@iterator, PropertyDescriptor { [[VARValue]]: %ArrayProto_values%, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: true }). 
*0*Perform ! FUNCDefinePropertyOrThrow(VARobj, "callee", PropertyDescriptor { [[VARGet]]: %ThrowTypeError%, [[VARSet]]: %ThrowTypeError%, [[VAREnumerable]]: false, [[VARConfigurable]]: false }). 
*0*Return VARobj.     

#############  END  ## 218 ###########################
############# BEGIN ## 219 ###########################
ID= 9.4.4.7
Summary= CreateMappedArgumentsObject ( func, formals, argumentsList, env )
Description= The abstract operation CreateMappedArgumentsObject is called with object func, Parse Node formals, List argumentsList, and Environment Record env. The following steps are performed:
*0*Assert: VARformals does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers. 
*0*Let VARlen be the number of elements in VARargumentsList. 
*0*Let VARobj be a newly created arguments exotic object with a [[VARParameterMap]] internal slot. 
*0*Set VARobj.[[VARGetOwnProperty]] as specified in 9.4.4.1. 
*0*Set VARobj.[[VARDefineOwnProperty]] as specified in 9.4.4.2. 
*0*Set VARobj.[[VARGet]] as specified in 9.4.4.3. 
*0*Set VARobj.[[VARSet]] as specified in 9.4.4.4. 
*0*Set VARobj.[[VARDelete]] as specified in 9.4.4.5. 
*0*Set the remainder of VARobj's essential internal methods to the default ordinary object definitions specified in 9.1. 
*0*Set VARobj.[[VARPrototype]] to %ObjectPrototype%. 
*0*Set VARobj.[[VARExtensible]] to true. 
*0*Let VARmap be FUNCObjectCreate(null). 
*0*Set VARobj.[[VARParameterMap]] to VARmap. 
*0*Let VARparameterNames be the BoundNames of VARformals. 
*0*Let VARnumberOfParameters be the number of elements in VARparameterNames. 
*0*Let VARindex be 0. 
*0*Repeat, while VARindex &lt; VARlen,
*1*Let VARval be VARargumentsList[VARindex]. 
*1*Perform FUNCCreateDataProperty(VARobj, ! FUNCToString(VARindex), VARval). 
*1*Let VARindex be VARindex + 1. 
*0*Perform FUNCDefinePropertyOrThrow(VARobj, "length", PropertyDescriptor { [[VARValue]]: VARlen, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: true }). 
*0*Let VARmappedNames be a new empty List. 
*0*Let VARindex be VARnumberOfParameters - 1. 
*0*Repeat, while VARindex ≥ 0,
*1*Let VARname be VARparameterNames[VARindex]. 
*1*If VARname is not an element of VARmappedNames, then
*2*Add VARname as an element of the list VARmappedNames. 
*2*If VARindex &lt; VARlen, then
*3*Let VARg be FUNCMakeArgGetter(VARname, VARenv). 
*3*Let VARp be FUNCMakeArgSetter(VARname, VARenv). 
*3*Perform VARmap.[[VARDefineOwnProperty]](! FUNCToString(VARindex), PropertyDescriptor { [[VARSet]]: VARp, [[VARGet]]: VARg, [[VAREnumerable]]: false, [[VARConfigurable]]: true }). 
*1*Let VARindex be VARindex - 1. 
*0*Perform ! FUNCDefinePropertyOrThrow(VARobj, @@iterator, PropertyDescriptor { [[VARValue]]: %ArrayProto_values%, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: true }). 
*0*Perform ! FUNCDefinePropertyOrThrow(VARobj, "callee", PropertyDescriptor { [[VARValue]]: VARfunc, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: true }). 
*0*Return VARobj.     

#############  END  ## 219 ###########################
############# BEGIN ## 220 ###########################
ID= 9.4.4.7.1
Summary= MakeArgGetter ( name, env )
Description= The abstract operation MakeArgGetter called with String name and Environment Record env creates a built-in function object that when executed returns the value bound for name in env. It performs the following steps:
*0*Let VARsteps be the steps of an ArgGetter function as specified below. 
*0*Let VARgetter be FUNCCreateBuiltinFunction(VARsteps, « [[VARName]], [[VAREnv]] »). 
*0*Set VARgetter.[[VARName]] to VARname. 
*0*Set VARgetter.[[VAREnv]] to VARenv. 
*0*Return VARgetter.      

#############  END  ## 220 ###########################
############# BEGIN ## 221 ###########################
ID= 9.4.4.7.2
Summary= MakeArgSetter ( name, env )
Description= The abstract operation MakeArgSetter called with String name and Environment Record env creates a built-in function object that when executed sets the value bound for name in env. It performs the following steps:
*0*Let VARsteps be the steps of an ArgSetter function as specified below. 
*0*Let VARsetter be FUNCCreateBuiltinFunction(VARsteps, « [[VARName]], [[VAREnv]] »). 
*0*Set VARsetter.[[VARName]] to VARname. 
*0*Set VARsetter.[[VAREnv]] to VARenv. 
*0*Return VARsetter.      

#############  END  ## 221 ###########################
############# BEGIN ## 222 ###########################
ID= 9.4.5.1
Summary= [[GetOwnProperty]] ( P )
Description= When the [[GetOwnProperty]] internal method of an Integer-Indexed exotic object O is called with property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Assert: VARO is an Object that has a [[VARViewedArrayBuffer]] internal slot. 
*0*If FUNCType(VARP) is String, then
*1*Let VARnumericIndex be ! FUNCCanonicalNumericIndexString(VARP). 
*1*If VARnumericIndex is not undefined, then
*2*Let VARvalue be ? FUNCIntegerIndexedElementGet(VARO, VARnumericIndex). 
*2*If VARvalue is undefined, return undefined. 
*2*Return a PropertyDescriptor { [[VARValue]]: VARvalue, [[VARWritable]]: true, [[VAREnumerable]]: true, [[VARConfigurable]]: false }. 
*0*Return FUNCOrdinaryGetOwnProperty(VARO, VARP).     

#############  END  ## 222 ###########################
############# BEGIN ## 223 ###########################
ID= 9.4.5.2
Summary= [[HasProperty]] ( P )
Description= When the [[HasProperty]] internal method of an Integer-Indexed exotic object O is called with property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Assert: VARO is an Object that has a [[VARViewedArrayBuffer]] internal slot. 
*0*If FUNCType(VARP) is String, then
*1*Let VARnumericIndex be ! FUNCCanonicalNumericIndexString(VARP). 
*1*If VARnumericIndex is not undefined, then
*2*Let VARbuffer be VARO.[[VARViewedArrayBuffer]]. 
*2*If FUNCIsDetachedBuffer(VARbuffer) is true, throw a TypeError exception. 
*2*If FUNCIsInteger(VARnumericIndex) is false, return false. 
*2*If VARnumericIndex = -0, return false. 
*2*If VARnumericIndex &lt; 0, return false. 
*2*If VARnumericIndex ≥ VARO.[[VARArrayLength]], return false. 
*2*Return true. 
*0*Return ? FUNCOrdinaryHasProperty(VARO, VARP).     

#############  END  ## 223 ###########################
############# BEGIN ## 224 ###########################
ID= 9.4.5.3
Summary= [[DefineOwnProperty]] ( P, Desc )
Description= When the [[DefineOwnProperty]] internal method of an Integer-Indexed exotic object O is called with property key P, and Property Descriptor Desc, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Assert: VARO is an Object that has a [[VARViewedArrayBuffer]] internal slot. 
*0*If FUNCType(VARP) is String, then
*1*Let VARnumericIndex be ! FUNCCanonicalNumericIndexString(VARP). 
*1*If VARnumericIndex is not undefined, then
*2*If FUNCIsInteger(VARnumericIndex) is false, return false. 
*2*If VARnumericIndex = -0, return false. 
*2*If VARnumericIndex &lt; 0, return false. 
*2*Let VARlength be VARO.[[VARArrayLength]]. 
*2*If VARnumericIndex ≥ VARlength, return false. 
*2*If FUNCIsAccessorDescriptor(VARDesc) is true, return false. 
*2*If VARDesc has a [[VARConfigurable]] field and if VARDesc.[[VARConfigurable]] is true, return false. 
*2*If VARDesc has an [[VAREnumerable]] field and if VARDesc.[[VAREnumerable]] is false, return false. 
*2*If VARDesc has a [[VARWritable]] field and if VARDesc.[[VARWritable]] is false, return false. 
*2*If VARDesc has a [[VARValue]] field, then
*3*Let VARvalue be VARDesc.[[VARValue]]. 
*3*Return ? FUNCIntegerIndexedElementSet(VARO, VARnumericIndex, VARvalue). 
*2*Return true. 
*0*Return ! FUNCOrdinaryDefineOwnProperty(VARO, VARP, VARDesc).     

#############  END  ## 224 ###########################
############# BEGIN ## 225 ###########################
ID= 9.4.5.4
Summary= [[Get]] ( P, Receiver )
Description= When the [[Get]] internal method of an Integer-Indexed exotic object O is called with property key P and ECMAScript language value Receiver, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*If FUNCType(VARP) is String, then
*1*Let VARnumericIndex be ! FUNCCanonicalNumericIndexString(VARP). 
*1*If VARnumericIndex is not undefined, then
*2*Return ? FUNCIntegerIndexedElementGet(VARO, VARnumericIndex). 
*0*Return ? FUNCOrdinaryGet(VARO, VARP, VARReceiver).     

#############  END  ## 225 ###########################
############# BEGIN ## 226 ###########################
ID= 9.4.5.5
Summary= [[Set]] ( P, V, Receiver )
Description= When the [[Set]] internal method of an Integer-Indexed exotic object O is called with property key P, value V, and ECMAScript language value Receiver, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*If FUNCType(VARP) is String, then
*1*Let VARnumericIndex be ! FUNCCanonicalNumericIndexString(VARP). 
*1*If VARnumericIndex is not undefined, then
*2*Return ? FUNCIntegerIndexedElementSet(VARO, VARnumericIndex, VARV). 
*0*Return ? FUNCOrdinarySet(VARO, VARP, VARV, VARReceiver).     

#############  END  ## 226 ###########################
############# BEGIN ## 227 ###########################
ID= 9.4.5.6
Summary= [[OwnPropertyKeys]] ( )
Description= When the [[OwnPropertyKeys]] internal method of an Integer-Indexed exotic object O is called, the following steps are taken:
*0*Let VARkeys be a new empty List. 
*0*Assert: VARO is an Object that has [[VARViewedArrayBuffer]], [[VARArrayLength]], [[VARByteOffset]], and [[VARTypedArrayName]] internal slots. 
*0*Let VARlen be VARO.[[VARArrayLength]]. 
*0*For each integer VARi starting with 0 such that VARi &lt; VARlen, in ascending order, do
*1*Add ! FUNCToString(VARi) as the last element of VARkeys. 
*0*For each own property key VARP of VARO such that FUNCType(VARP) is String and VARP is not an integer index, in ascending chronological order of property creation, do
*1*Add VARP as the last element of VARkeys. 
*0*For each own property key VARP of VARO such that FUNCType(VARP) is Symbol, in ascending chronological order of property creation, do
*1*Add VARP as the last element of VARkeys. 
*0*Return VARkeys.     

#############  END  ## 227 ###########################
############# BEGIN ## 228 ###########################
ID= 9.4.5.7
Summary= IntegerIndexedObjectCreate ( prototype, internalSlotsList )
Description= The abstract operation IntegerIndexedObjectCreate with arguments prototype and internalSlotsList is used to specify the creation of new  Integer-Indexed exotic objects. The argument internalSlotsList is a List of the names of additional internal slots that must be defined as part of the object. IntegerIndexedObjectCreate performs the following steps:
*0*Assert: VARinternalSlotsList contains the names [[VARViewedArrayBuffer]], [[VARArrayLength]], [[VARByteOffset]], and [[VARTypedArrayName]]. 
*0*Let VARA be a newly created object with an internal slot for each name in VARinternalSlotsList. 
*0*Set VARA's essential internal methods to the default ordinary object definitions specified in 9.1. 
*0*Set VARA.[[VARGetOwnProperty]] as specified in 9.4.5.1. 
*0*Set VARA.[[VARHasProperty]] as specified in 9.4.5.2. 
*0*Set VARA.[[VARDefineOwnProperty]] as specified in 9.4.5.3. 
*0*Set VARA.[[VARGet]] as specified in 9.4.5.4. 
*0*Set VARA.[[VARSet]] as specified in 9.4.5.5. 
*0*Set VARA.[[VAROwnPropertyKeys]] as specified in 9.4.5.6. 
*0*Set VARA.[[VARPrototype]] to VARprototype. 
*0*Set VARA.[[VARExtensible]] to true. 
*0*Return VARA.     

#############  END  ## 228 ###########################
############# BEGIN ## 229 ###########################
ID= 9.4.5.8
Summary= IntegerIndexedElementGet ( O, index )
Description= The abstract operation IntegerIndexedElementGet with arguments O and index performs the following steps:
*0*Assert: FUNCType(VARindex) is Number. 
*0*Assert: VARO is an Object that has [[VARViewedArrayBuffer]], [[VARArrayLength]], [[VARByteOffset]], and [[VARTypedArrayName]] internal slots. 
*0*Let VARbuffer be VARO.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARbuffer) is true, throw a TypeError exception. 
*0*If FUNCIsInteger(VARindex) is false, return undefined. 
*0*If VARindex = -0, return undefined. 
*0*Let VARlength be VARO.[[VARArrayLength]]. 
*0*If VARindex &lt; 0 or VARindex ≥ VARlength, return undefined. 
*0*Let VARoffset be VARO.[[VARByteOffset]]. 
*0*Let VARarrayTypeName be the String value of VARO.[[VARTypedArrayName]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for VARarrayTypeName. 
*0*Let VARindexedPosition be (VARindex × VARelementSize) + VARoffset. 
*0*Let VARelementType be the String value of the Element Type value in Table 56 for VARarrayTypeName. 
*0*Return FUNCGetValueFromBuffer(VARbuffer, VARindexedPosition, VARelementType, true, "Unordered").     

#############  END  ## 229 ###########################
############# BEGIN ## 230 ###########################
ID= 9.4.5.9
Summary= IntegerIndexedElementSet ( O, index, value )
Description= The abstract operation IntegerIndexedElementSet with arguments O, index, and value performs the following steps:
*0*Assert: FUNCType(VARindex) is Number. 
*0*Assert: VARO is an Object that has [[VARViewedArrayBuffer]], [[VARArrayLength]], [[VARByteOffset]], and [[VARTypedArrayName]] internal slots. 
*0*Let VARnumValue be ? FUNCToNumber(VARvalue). 
*0*Let VARbuffer be VARO.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARbuffer) is true, throw a TypeError exception. 
*0*If FUNCIsInteger(VARindex) is false, return false. 
*0*If VARindex = -0, return false. 
*0*Let VARlength be VARO.[[VARArrayLength]]. 
*0*If VARindex &lt; 0 or VARindex ≥ VARlength, return false. 
*0*Let VARoffset be VARO.[[VARByteOffset]]. 
*0*Let VARarrayTypeName be the String value of VARO.[[VARTypedArrayName]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for VARarrayTypeName. 
*0*Let VARindexedPosition be (VARindex × VARelementSize) + VARoffset. 
*0*Let VARelementType be the String value of the Element Type value in Table 56 for VARarrayTypeName. 
*0*Perform FUNCSetValueInBuffer(VARbuffer, VARindexedPosition, VARelementType, VARnumValue, true, "Unordered"). 
*0*Return true.     

#############  END  ## 230 ###########################
############# BEGIN ## 231 ###########################
ID= 9.4.6.1
Summary= [[SetPrototypeOf]] ( V )
Description= When the [[SetPrototypeOf]] internal method of a module namespace exotic object O is called with argument V, the following steps are taken:
*0*Return ? FUNCSetImmutablePrototype(VARO, VARV).     

#############  END  ## 231 ###########################
############# BEGIN ## 232 ###########################
ID= 9.4.6.2
Summary= [[IsExtensible]] ( )
Description= When the [[IsExtensible]] internal method of a module namespace exotic object O is called, the following steps are taken:
*0*Return false.     

#############  END  ## 232 ###########################
############# BEGIN ## 233 ###########################
ID= 9.4.6.3
Summary= [[PreventExtensions]] ( )
Description= When the [[PreventExtensions]] internal method of a module namespace exotic object O is called, the following steps are taken:
*0*Return true.     

#############  END  ## 233 ###########################
############# BEGIN ## 234 ###########################
ID= 9.4.6.4
Summary= [[GetOwnProperty]] ( P )
Description= When the [[GetOwnProperty]] internal method of a module namespace exotic object O is called with property key P, the following steps are taken:
*0*If FUNCType(VARP) is Symbol, return FUNCOrdinaryGetOwnProperty(VARO, VARP). 
*0*Let VARexports be VARO.[[VARExports]]. 
*0*If VARP is not an element of VARexports, return undefined. 
*0*Let VARvalue be ? VARO.[[VARGet]](VARP, VARO). 
*0*Return PropertyDescriptor { [[VARValue]]: VARvalue, [[VARWritable]]: true, [[VAREnumerable]]: true, [[VARConfigurable]]: false }.     

#############  END  ## 234 ###########################
############# BEGIN ## 235 ###########################
ID= 9.4.6.5
Summary= [[DefineOwnProperty]] ( P, Desc )
Description= When the [[DefineOwnProperty]] internal method of a module namespace exotic object O is called with property key P and Property Descriptor Desc, the following steps are taken:
*0*Return false.     

#############  END  ## 235 ###########################
############# BEGIN ## 236 ###########################
ID= 9.4.6.6
Summary= [[HasProperty]] ( P )
Description= When the [[HasProperty]] internal method of a module namespace exotic object O is called with property key P, the following steps are taken:
*0*If FUNCType(VARP) is Symbol, return FUNCOrdinaryHasProperty(VARO, VARP). 
*0*Let VARexports be VARO.[[VARExports]]. 
*0*If VARP is an element of VARexports, return true. 
*0*Return false.     

#############  END  ## 236 ###########################
############# BEGIN ## 237 ###########################
ID= 9.4.6.7
Summary= [[Get]] ( P, Receiver )
Description= When the [[Get]] internal method of a module namespace exotic object O is called with property key P and ECMAScript language value Receiver, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*If FUNCType(VARP) is Symbol, then
*1*Return ? FUNCOrdinaryGet(VARO, VARP, VARReceiver). 
*0*Let VARexports be VARO.[[VARExports]]. 
*0*If VARP is not an element of VARexports, return undefined. 
*0*Let VARm be VARO.[[VARModule]]. 
*0*Let VARbinding be ! VARm.ResolveExport(VARP, « »). 
*0*Assert: VARbinding is a ResolvedBinding Record. 
*0*Let VARtargetModule be VARbinding.[[VARModule]]. 
*0*Assert: VARtargetModule is not undefined. 
*0*Let VARtargetEnv be VARtargetModule.[[VAREnvironment]]. 
*0*If VARtargetEnv is undefined, throw a ReferenceError exception. 
*0*Let VARtargetEnvRec be VARtargetEnv's EnvironmentRecord. 
*0*Return ? VARtargetEnvRec.GetBindingValue(VARbinding.[[VARBindingName]], true).     

#############  END  ## 237 ###########################
############# BEGIN ## 238 ###########################
ID= 9.4.6.8
Summary= [[Set]] ( P, V, Receiver )
Description= When the [[Set]] internal method of a module namespace exotic object O is called with property key P, value V, and ECMAScript language value Receiver, the following steps are taken:
*0*Return false.     

#############  END  ## 238 ###########################
############# BEGIN ## 239 ###########################
ID= 9.4.6.9
Summary= [[Delete]] ( P )
Description= When the [[Delete]] internal method of a module namespace exotic object O is called with property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*If FUNCType(VARP) is Symbol, then
*1*Return ? FUNCOrdinaryDelete(VARO, VARP). 
*0*Let VARexports be VARO.[[VARExports]]. 
*0*If VARP is an element of VARexports, return false. 
*0*Return true.     

#############  END  ## 239 ###########################
############# BEGIN ## 240 ###########################
ID= 9.4.6.10
Summary= [[OwnPropertyKeys]] ( )
Description= When the [[OwnPropertyKeys]] internal method of a module namespace exotic object O is called, the following steps are taken:
*0*Let VARexports be a copy of VARO.[[VARExports]]. 
*0*Let VARsymbolKeys be ! FUNCOrdinaryOwnPropertyKeys(VARO). 
*0*Append all the entries of VARsymbolKeys to the end of VARexports. 
*0*Return VARexports.     

#############  END  ## 240 ###########################
############# BEGIN ## 241 ###########################
ID= 9.4.6.11
Summary= ModuleNamespaceCreate ( module, exports )
Description= The abstract operation ModuleNamespaceCreate with arguments module, and exports is used to specify the creation of new module namespace exotic objects. It performs the following steps:
*0*Assert: VARmodule is a Module Record. 
*0*Assert: VARmodule.[[VARNamespace]] is undefined. 
*0*Assert: VARexports is a List of String values. 
*0*Let VARM be a newly created object. 
*0*Set VARM's essential internal methods to the definitions specified in 9.4.6. 
*0*Set VARM.[[VARModule]] to VARmodule. 
*0*Let VARsortedExports be a new List containing the same values as the list VARexports where the values are ordered as if an Array of the same values had been sorted using Array.prototype.sort using undefined as VARcomparefn. 
*0*Set VARM.[[VARExports]] to VARsortedExports. 
*0*Create own properties of VARM corresponding to the definitions in 26.3. 
*0*Set VARmodule.[[VARNamespace]] to VARM. 
*0*Return VARM.     

#############  END  ## 241 ###########################
############# BEGIN ## 242 ###########################
ID= 9.4.7.1
Summary= [[SetPrototypeOf]] ( V )
Description= When the [[SetPrototypeOf]] internal method of an immutable prototype exotic object O is called with argument V, the following steps are taken:
*0*Return ? FUNCSetImmutablePrototype(VARO, VARV).     

#############  END  ## 242 ###########################
############# BEGIN ## 243 ###########################
ID= 9.4.7.2
Summary= SetImmutablePrototype ( O, V )
Description= When the SetImmutablePrototype abstract operation is called with arguments O and V, the following steps are taken:
*0*Assert: Either FUNCType(VARV) is Object or FUNCType(VARV) is Null. 
*0*Let VARcurrent be ? VARO.[[VARGetPrototypeOf]](). 
*0*If FUNCSameValue(VARV, VARcurrent) is true, return true. 
*0*Return false.     

#############  END  ## 243 ###########################
############# BEGIN ## 244 ###########################
ID= 9.5.1
Summary= [[GetPrototypeOf]] ( )
Description= When the [[GetPrototypeOf]] internal method of a Proxy exotic object O is called, the following steps are taken:
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "getPrototypeOf"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARGetPrototypeOf]](). 
*0*Let VARhandlerProto be ? FUNCCall(VARtrap, VARhandler, « VARtarget »). 
*0*If FUNCType(VARhandlerProto) is neither Object nor Null, throw a TypeError exception. 
*0*Let VARextensibleTarget be ? FUNCIsExtensible(VARtarget). 
*0*If VARextensibleTarget is true, return VARhandlerProto. 
*0*Let VARtargetProto be ? VARtarget.[[VARGetPrototypeOf]](). 
*0*If FUNCSameValue(VARhandlerProto, VARtargetProto) is false, throw a TypeError exception. 
*0*Return VARhandlerProto.    

#############  END  ## 244 ###########################
############# BEGIN ## 245 ###########################
ID= 9.5.2
Summary= [[SetPrototypeOf]] ( V )
Description= When the [[SetPrototypeOf]] internal method of a Proxy exotic object O is called with argument V, the following steps are taken:
*0*Assert: Either FUNCType(VARV) is Object or FUNCType(VARV) is Null. 
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "setPrototypeOf"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARSetPrototypeOf]](VARV). 
*0*Let VARbooleanTrapResult be FUNCToBoolean(? FUNCCall(VARtrap, VARhandler, « VARtarget, VARV »)). 
*0*If VARbooleanTrapResult is false, return false. 
*0*Let VARextensibleTarget be ? FUNCIsExtensible(VARtarget). 
*0*If VARextensibleTarget is true, return true. 
*0*Let VARtargetProto be ? VARtarget.[[VARGetPrototypeOf]](). 
*0*If FUNCSameValue(VARV, VARtargetProto) is false, throw a TypeError exception. 
*0*Return true.    

#############  END  ## 245 ###########################
############# BEGIN ## 246 ###########################
ID= 9.5.3
Summary= [[IsExtensible]] ( )
Description= When the [[IsExtensible]] internal method of a Proxy exotic object O is called, the following steps are taken:
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "isExtensible"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARIsExtensible]](). 
*0*Let VARbooleanTrapResult be FUNCToBoolean(? FUNCCall(VARtrap, VARhandler, « VARtarget »)). 
*0*Let VARtargetResult be ? VARtarget.[[VARIsExtensible]](). 
*0*If FUNCSameValue(VARbooleanTrapResult, VARtargetResult) is false, throw a TypeError exception. 
*0*Return VARbooleanTrapResult.    

#############  END  ## 246 ###########################
############# BEGIN ## 247 ###########################
ID= 9.5.4
Summary= [[PreventExtensions]] ( )
Description= When the [[PreventExtensions]] internal method of a Proxy exotic object O is called, the following steps are taken:
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "preventExtensions"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARPreventExtensions]](). 
*0*Let VARbooleanTrapResult be FUNCToBoolean(? FUNCCall(VARtrap, VARhandler, « VARtarget »)). 
*0*If VARbooleanTrapResult is true, then
*1*Let VARtargetIsExtensible be ? VARtarget.[[VARIsExtensible]](). 
*1*If VARtargetIsExtensible is true, throw a TypeError exception. 
*0*Return VARbooleanTrapResult.    

#############  END  ## 247 ###########################
############# BEGIN ## 248 ###########################
ID= 9.5.5
Summary= [[GetOwnProperty]] ( P )
Description= When the [[GetOwnProperty]] internal method of a Proxy exotic object O is called with property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "getOwnPropertyDescriptor"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARGetOwnProperty]](VARP). 
*0*Let VARtrapResultObj be ? FUNCCall(VARtrap, VARhandler, « VARtarget, VARP »). 
*0*If FUNCType(VARtrapResultObj) is neither Object nor Undefined, throw a TypeError exception. 
*0*Let VARtargetDesc be ? VARtarget.[[VARGetOwnProperty]](VARP). 
*0*If VARtrapResultObj is undefined, then
*1*If VARtargetDesc is undefined, return undefined. 
*1*If VARtargetDesc.[[VARConfigurable]] is false, throw a TypeError exception. 
*1*Let VARextensibleTarget be ? FUNCIsExtensible(VARtarget). 
*1*Assert: FUNCType(VARextensibleTarget) is Boolean. 
*1*If VARextensibleTarget is false, throw a TypeError exception. 
*1*Return undefined. 
*0*Let VARextensibleTarget be ? FUNCIsExtensible(VARtarget). 
*0*Let VARresultDesc be ? FUNCToPropertyDescriptor(VARtrapResultObj). 
*0*Call FUNCCompletePropertyDescriptor(VARresultDesc). 
*0*Let VARvalid be FUNCIsCompatiblePropertyDescriptor(VARextensibleTarget, VARresultDesc, VARtargetDesc). 
*0*If VARvalid is false, throw a TypeError exception. 
*0*If VARresultDesc.[[VARConfigurable]] is false, then
*1*If VARtargetDesc is undefined or VARtargetDesc.[[VARConfigurable]] is true, then
*2*Throw a TypeError exception. 
*0*Return VARresultDesc.    

#############  END  ## 248 ###########################
############# BEGIN ## 249 ###########################
ID= 9.5.6
Summary= [[DefineOwnProperty]] ( P, Desc )
Description= When the [[DefineOwnProperty]] internal method of a Proxy exotic object O is called with property key P and Property Descriptor Desc, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "defineProperty"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARDefineOwnProperty]](VARP, VARDesc). 
*0*Let VARdescObj be FUNCFromPropertyDescriptor(VARDesc). 
*0*Let VARbooleanTrapResult be FUNCToBoolean(? FUNCCall(VARtrap, VARhandler, « VARtarget, VARP, VARdescObj »)). 
*0*If VARbooleanTrapResult is false, return false. 
*0*Let VARtargetDesc be ? VARtarget.[[VARGetOwnProperty]](VARP). 
*0*Let VARextensibleTarget be ? FUNCIsExtensible(VARtarget). 
*0*If VARDesc has a [[VARConfigurable]] field and if VARDesc.[[VARConfigurable]] is false, then
*1*Let VARsettingConfigFalse be true. 
*0*Else,
*1*let VARsettingConfigFalse be false.
*0*If VARtargetDesc is undefined, then
*1*If VARextensibleTarget is false, throw a TypeError exception. 
*1*If VARsettingConfigFalse is true, throw a TypeError exception. 
*0*Else VARtargetDesc is not undefined,
*1*If FUNCIsCompatiblePropertyDescriptor(VARextensibleTarget, VARDesc, VARtargetDesc) is false, throw a TypeError exception. 
*1*If VARsettingConfigFalse is true and VARtargetDesc.[[VARConfigurable]] is true, throw a TypeError exception. 
*0*Return true.    

#############  END  ## 249 ###########################
############# BEGIN ## 250 ###########################
ID= 9.5.7
Summary= [[HasProperty]] ( P )
Description= When the [[HasProperty]] internal method of a Proxy exotic object O is called with property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "has"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARHasProperty]](VARP). 
*0*Let VARbooleanTrapResult be FUNCToBoolean(? FUNCCall(VARtrap, VARhandler, « VARtarget, VARP »)). 
*0*If VARbooleanTrapResult is false, then
*1*Let VARtargetDesc be ? VARtarget.[[VARGetOwnProperty]](VARP). 
*1*If VARtargetDesc is not undefined, then
*2*If VARtargetDesc.[[VARConfigurable]] is false, throw a TypeError exception. 
*2*Let VARextensibleTarget be ? FUNCIsExtensible(VARtarget). 
*2*If VARextensibleTarget is false, throw a TypeError exception. 
*0*Return VARbooleanTrapResult.    

#############  END  ## 250 ###########################
############# BEGIN ## 251 ###########################
ID= 9.5.8
Summary= [[Get]] ( P, Receiver )
Description= When the [[Get]] internal method of a Proxy exotic object O is called with property key P and ECMAScript language value Receiver, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "get"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARGet]](VARP, VARReceiver). 
*0*Let VARtrapResult be ? FUNCCall(VARtrap, VARhandler, « VARtarget, VARP, VARReceiver »). 
*0*Let VARtargetDesc be ? VARtarget.[[VARGetOwnProperty]](VARP). 
*0*If VARtargetDesc is not undefined and VARtargetDesc.[[VARConfigurable]] is false, then
*1*If FUNCIsDataDescriptor(VARtargetDesc) is true and VARtargetDesc.[[VARWritable]] is false, then
*2*If FUNCSameValue(VARtrapResult, VARtargetDesc.[[VARValue]]) is false, throw a TypeError exception. 
*1*If FUNCIsAccessorDescriptor(VARtargetDesc) is true and VARtargetDesc.[[VARGet]] is undefined, then
*2*If VARtrapResult is not undefined, throw a TypeError exception. 
*0*Return VARtrapResult.    

#############  END  ## 251 ###########################
############# BEGIN ## 252 ###########################
ID= 9.5.9
Summary= [[Set]] ( P, V, Receiver )
Description= When the [[Set]] internal method of a Proxy exotic object O is called with property key P, value V, and ECMAScript language value Receiver, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "set"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARSet]](VARP, VARV, VARReceiver). 
*0*Let VARbooleanTrapResult be FUNCToBoolean(? FUNCCall(VARtrap, VARhandler, « VARtarget, VARP, VARV, VARReceiver »)). 
*0*If VARbooleanTrapResult is false, return false. 
*0*Let VARtargetDesc be ? VARtarget.[[VARGetOwnProperty]](VARP). 
*0*If VARtargetDesc is not undefined and VARtargetDesc.[[VARConfigurable]] is false, then
*1*If FUNCIsDataDescriptor(VARtargetDesc) is true and VARtargetDesc.[[VARWritable]] is false, then
*2*If FUNCSameValue(VARV, VARtargetDesc.[[VARValue]]) is false, throw a TypeError exception. 
*1*If FUNCIsAccessorDescriptor(VARtargetDesc) is true, then
*2*If VARtargetDesc.[[VARSet]] is undefined, throw a TypeError exception. 
*0*Return true.    

#############  END  ## 252 ###########################
############# BEGIN ## 253 ###########################
ID= 9.5.10
Summary= [[Delete]] ( P )
Description= When the [[Delete]] internal method of a Proxy exotic object O is called with property key P, the following steps are taken:
*0*Assert: FUNCIsPropertyKey(VARP) is true. 
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "deleteProperty"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VARDelete]](VARP). 
*0*Let VARbooleanTrapResult be FUNCToBoolean(? FUNCCall(VARtrap, VARhandler, « VARtarget, VARP »)). 
*0*If VARbooleanTrapResult is false, return false. 
*0*Let VARtargetDesc be ? VARtarget.[[VARGetOwnProperty]](VARP). 
*0*If VARtargetDesc is undefined, return true. 
*0*If VARtargetDesc.[[VARConfigurable]] is false, throw a TypeError exception. 
*0*Return true.    

#############  END  ## 253 ###########################
############# BEGIN ## 254 ###########################
ID= 9.5.11
Summary= [[OwnPropertyKeys]] ( )
Description= When the [[OwnPropertyKeys]] internal method of a Proxy exotic object O is called, the following steps are taken:
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "ownKeys"). 
*0*If VARtrap is undefined, then
*1*Return ? VARtarget.[[VAROwnPropertyKeys]](). 
*0*Let VARtrapResultArray be ? FUNCCall(VARtrap, VARhandler, « VARtarget »). 
*0*Let VARtrapResult be ? FUNCCreateListFromArrayLike(VARtrapResultArray, « String, Symbol »). 
*0*If VARtrapResult contains any duplicate entries, throw a TypeError exception. 
*0*Let VARextensibleTarget be ? FUNCIsExtensible(VARtarget). 
*0*Let VARtargetKeys be ? VARtarget.[[VAROwnPropertyKeys]](). 
*0*Assert: VARtargetKeys is a List containing only String and Symbol values. 
*0*Assert: VARtargetKeys contains no duplicate entries. 
*0*Let VARtargetConfigurableKeys be a new empty List. 
*0*Let VARtargetNonconfigurableKeys be a new empty List. 
*0*For each element VARkey of VARtargetKeys, do
*1*Let VARdesc be ? VARtarget.[[VARGetOwnProperty]](VARkey). 
*1*If VARdesc is not undefined and VARdesc.[[VARConfigurable]] is false, then
*2*Append VARkey as an element of VARtargetNonconfigurableKeys. 
*1*Else,
*2*Append VARkey as an element of VARtargetConfigurableKeys. 
*0*If VARextensibleTarget is true and VARtargetNonconfigurableKeys is empty, then
*1*Return VARtrapResult. 
*0*Let VARuncheckedResultKeys be a new List which is a copy of VARtrapResult. 
*0*For each VARkey that is an element of VARtargetNonconfigurableKeys, do
*1*If VARkey is not an element of VARuncheckedResultKeys, throw a TypeError exception. 
*1*Remove VARkey from VARuncheckedResultKeys. 
*0*If VARextensibleTarget is true, return VARtrapResult. 
*0*For each VARkey that is an element of VARtargetConfigurableKeys, do
*1*If VARkey is not an element of VARuncheckedResultKeys, throw a TypeError exception. 
*1*Remove VARkey from VARuncheckedResultKeys. 
*0*If VARuncheckedResultKeys is not empty, throw a TypeError exception. 
*0*Return VARtrapResult.    

#############  END  ## 254 ###########################
############# BEGIN ## 255 ###########################
ID= 9.5.12
Summary= [[Call]] ( thisArgument, argumentsList )
Description= The [[Call]] internal method of a Proxy exotic object O is called with parameters thisArgument and argumentsList, a List of ECMAScript language values. The following steps are taken:
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "apply"). 
*0*If VARtrap is undefined, then
*1*Return ? FUNCCall(VARtarget, VARthisArgument, VARargumentsList). 
*0*Let VARargArray be FUNCCreateArrayFromList(VARargumentsList). 
*0*Return ? FUNCCall(VARtrap, VARhandler, « VARtarget, VARthisArgument, VARargArray »).    

#############  END  ## 255 ###########################
############# BEGIN ## 256 ###########################
ID= 9.5.13
Summary= [[Construct]] ( argumentsList, newTarget )
Description= The [[Construct]] internal method of a Proxy exotic object O is called with parameters argumentsList which is a possibly empty List of ECMAScript language values and newTarget. The following steps are taken:
*0*Let VARhandler be VARO.[[VARProxyHandler]]. 
*0*If VARhandler is null, throw a TypeError exception. 
*0*Assert: FUNCType(VARhandler) is Object. 
*0*Let VARtarget be VARO.[[VARProxyTarget]]. 
*0*Let VARtrap be ? FUNCGetMethod(VARhandler, "construct"). 
*0*If VARtrap is undefined, then
*1*Assert: FUNCIsConstructor(VARtarget) is true. 
*1*Return ? FUNCConstruct(VARtarget, VARargumentsList, VARnewTarget). 
*0*Let VARargArray be FUNCCreateArrayFromList(VARargumentsList). 
*0*Let VARnewObj be ? FUNCCall(VARtrap, VARhandler, « VARtarget, VARargArray, VARnewTarget »). 
*0*If FUNCType(VARnewObj) is not Object, throw a TypeError exception. 
*0*Return VARnewObj.    

#############  END  ## 256 ###########################
############# BEGIN ## 257 ###########################
ID= 9.5.14
Summary= ProxyCreate ( target, handler )
Description= The abstract operation ProxyCreate with arguments target and handler is used to specify the creation of new Proxy exotic objects. It performs the following steps:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*If VARtarget is a Proxy exotic object and VARtarget.[[VARProxyHandler]] is null, throw a TypeError exception. 
*0*If FUNCType(VARhandler) is not Object, throw a TypeError exception. 
*0*If VARhandler is a Proxy exotic object and VARhandler.[[VARProxyHandler]] is null, throw a TypeError exception. 
*0*Let VARP be a newly created object. 
*0*Set VARP's essential internal methods (except for [[VARCall]] and [[VARConstruct]]) to the definitions specified in 9.5. 
*0*If FUNCIsCallable(VARtarget) is true, then
*1*Set VARP.[[VARCall]] as specified in 9.5.12. 
*1*If FUNCIsConstructor(VARtarget) is true, then
*2*Set VARP.[[VARConstruct]] as specified in 9.5.13. 
*0*Set VARP.[[VARProxyTarget]] to VARtarget. 
*0*Set VARP.[[VARProxyHandler]] to VARhandler. 
*0*Return VARP.    

#############  END  ## 257 ###########################
############# BEGIN ## 258 ###########################
ID= 10.1.1
Summary= Static Semantics: UTF16Encoding ( cp )
Description= The UTF16Encoding of a numeric code point value, cp, is determined as follows:
*0*Assert: 0 ≤ VARcp ≤ 0x10FFFF. 
*0*If VARcp ≤ 0xFFFF, return VARcp. 
*0*Let VARcu1 be floor((VARcp - 0x10000) / 0x400) + 0xD800. 
*0*Let VARcu2 be ((VARcp - 0x10000) modulo 0x400) + 0xDC00. 
*0*Return the code unit sequence consisting of VARcu1 followed by VARcu2.    

#############  END  ## 258 ###########################
############# BEGIN ## 259 ###########################
ID= 10.1.2
Summary= Static Semantics: UTF16Decode ( lead, trail )
Description= Two code units, lead and trail, that form a UTF-16  surrogate pair are converted to a code point by performing the following steps:
*0*Assert: VARlead is a leading surrogate and VARtrail is a trailing surrogate. 
*0*Let VARcp be (VARlead - 0xD800) × 0x400 + (VARtrail - 0xDC00) + 0x10000. 
*0*Return the code point VARcp.    

#############  END  ## 259 ###########################
############# BEGIN ## 260 ###########################
ID= 12.1.5.1
Summary= Runtime Semantics: InitializeBoundName ( name, value, environment )
Description= None
*0*Assert: FUNCType(VARname) is String. 
*0*If VARenvironment is not undefined, then
*1*Let VARenv be the EnvironmentRecord component of VARenvironment. 
*1*Perform VARenv.InitializeBinding(VARname, VARvalue). 
*1*Return FUNCNormalCompletion(undefined). 
*0*Else,
*1*Let VARlhs be FUNCResolveBinding(VARname). 
*1*Return ? FUNCPutValue(VARlhs, VARvalue).     

#############  END  ## 260 ###########################
############# BEGIN ## 261 ###########################
ID= 12.2.9.4
Summary= Runtime Semantics: GetTemplateObject ( templateLiteral )
Description= The abstract operation GetTemplateObject is called with a Parse Node, templateLiteral, as an argument. It performs the following steps:
*0*Let VARrawStrings be TemplateStrings of VARtemplateLiteral with argument true. 
*0*Let VARrealm be the current Realm Record. 
*0*Let VARtemplateRegistry be VARrealm.[[VARTemplateMap]]. 
*0*For each element VARe of VARtemplateRegistry, do
*1*If VARe.[[VARSite]] is the same Parse Node as VARtemplateLiteral, then
*2*Return VARe.[[VARArray]]. 
*0*Let VARcookedStrings be TemplateStrings of VARtemplateLiteral with argument false. 
*0*Let VARcount be the number of elements in the List VARcookedStrings. 
*0*Assert: VARcount ≤ 2--EXP0--32--EXP1---1. 
*0*Let VARtemplate be ! FUNCArrayCreate(VARcount). 
*0*Let VARrawObj be ! FUNCArrayCreate(VARcount). 
*0*Let VARindex be 0. 
*0*Repeat, while VARindex &lt; VARcount
*1*Let VARprop be ! FUNCToString(VARindex). 
*1*Let VARcookedValue be the String value VARcookedStrings[VARindex]. 
*1*Call VARtemplate.[[VARDefineOwnProperty]](VARprop, PropertyDescriptor { [[VARValue]]: VARcookedValue, [[VARWritable]]: false, [[VAREnumerable]]: true, [[VARConfigurable]]: false }). 
*1*Let VARrawValue be the String value VARrawStrings[VARindex]. 
*1*Call VARrawObj.[[VARDefineOwnProperty]](VARprop, PropertyDescriptor { [[VARValue]]: VARrawValue, [[VARWritable]]: false, [[VAREnumerable]]: true, [[VARConfigurable]]: false }). 
*1*Let VARindex be VARindex+1. 
*0*Perform FUNCSetIntegrityLevel(VARrawObj, "frozen"). 
*0*Call VARtemplate.[[VARDefineOwnProperty]]("raw", PropertyDescriptor { [[VARValue]]: VARrawObj, [[VARWritable]]: false, [[VAREnumerable]]: false, [[VARConfigurable]]: false }). 
*0*Perform FUNCSetIntegrityLevel(VARtemplate, "frozen"). 
*0*Append the Record { [[VARSite]]: VARtemplateLiteral, [[VARArray]]: VARtemplate } to VARtemplateRegistry. 
*0*Return VARtemplate.     

#############  END  ## 261 ###########################
############# BEGIN ## 262 ###########################
ID= 12.3.3.1.1
Summary= Runtime Semantics: EvaluateNew ( constructExpr, arguments )
Description= The abstract operation EvaluateNew with arguments constructExpr, and arguments performs the following steps:
*0*Assert: VARconstructExpr is either a NewExpression or a MemberExpression. 
*0*Assert: VARarguments is either empty or an Arguments. 
*0*Let VARref be the result of evaluating VARconstructExpr. 
*0*Let VARconstructor be ? FUNCGetValue(VARref). 
*0*If VARarguments is empty, then
*1*Let VARargList be a new empty List. 
*0*Else,
*1*Let VARargList be ArgumentListEvaluation of VARarguments. 
*1*FUNCReturnIfAbrupt(VARargList). 
*0*If FUNCIsConstructor(VARconstructor) is false, throw a TypeError exception. 
*0*Return ? FUNCConstruct(VARconstructor, VARargList).      

#############  END  ## 262 ###########################
############# BEGIN ## 263 ###########################
ID= 12.3.4.2
Summary= Runtime Semantics: EvaluateCall ( func, ref, arguments, tailPosition )
Description= The abstract operation EvaluateCall takes as arguments a value func, a value ref, a Parse Node arguments, and a Boolean argument tailPosition. It performs the following steps:
*0*If FUNCType(VARref) is Reference, then
*1*If FUNCIsPropertyReference(VARref) is true, then
*2*Let VARthisValue be FUNCGetThisValue(VARref). 
*1*Else the base of VARref is an Environment Record,
*2*Let VARrefEnv be FUNCGetBase(VARref). 
*2*Let VARthisValue be VARrefEnv.WithBaseObject(). 
*0*Else FUNCType(VARref) is not Reference,
*1*Let VARthisValue be undefined. 
*0*Let VARargList be ArgumentListEvaluation of VARarguments. 
*0*FUNCReturnIfAbrupt(VARargList). 
*0*If FUNCType(VARfunc) is not Object, throw a TypeError exception. 
*0*If FUNCIsCallable(VARfunc) is false, throw a TypeError exception. 
*0*If VARtailPosition is true, perform FUNCPrepareForTailCall(). 
*0*Let VARresult be FUNCCall(VARfunc, VARthisValue, VARargList). 
*0*Assert: If VARtailPosition is true, the above call will not return here, but instead evaluation will continue as if the following return has already occurred. 
*0*Assert: If VARresult is not an FUNCabrupt completion, then Type(VARresult) is an ECMAScript language type. 
*0*Return VARresult.     

#############  END  ## 263 ###########################
############# BEGIN ## 264 ###########################
ID= 12.3.5.2
Summary= Runtime Semantics: GetSuperConstructor ( )
Description= The abstract operation GetSuperConstructor performs the following steps:
*0*Let VARenvRec be FUNCGetThisEnvironment(). 
*0*Assert: VARenvRec is a function Environment Record. 
*0*Let VARactiveFunction be VARenvRec.[[VARFunctionObject]]. 
*0*Assert: VARactiveFunction is an ECMAScript function object. 
*0*Let VARsuperConstructor be ! VARactiveFunction.[[VARGetPrototypeOf]](). 
*0*If FUNCIsConstructor(VARsuperConstructor) is false, throw a TypeError exception. 
*0*Return VARsuperConstructor.     

#############  END  ## 264 ###########################
############# BEGIN ## 265 ###########################
ID= 12.3.5.3
Summary= Runtime Semantics: MakeSuperPropertyReference ( propertyKey, strict )
Description= The abstract operation MakeSuperPropertyReference with arguments propertyKey and strict performs the following steps:
*0*Let VARenv be FUNCGetThisEnvironment(). 
*0*Assert: VARenv.HasSuperBinding() is true. 
*0*Let VARactualThis be ? VARenv.GetThisBinding(). 
*0*Let VARbaseValue be ? VARenv.GetSuperBase(). 
*0*Let VARbv be ? FUNCRequireObjectCoercible(VARbaseValue). 
*0*Return a value of type Reference that is a Super Reference whose base value component is VARbv, whose referenced name component is VARpropertyKey, whose thisValue component is VARactualThis, and whose strict reference flag is VARstrict.     

#############  END  ## 265 ###########################
############# BEGIN ## 266 ###########################
ID= 12.5.8
Summary= Bitwise NOT Operator ( ~ )
Description= None
*0*Let VARexpr be the result of evaluating UnaryExpression. 
*0*Let VARoldValue be ? FUNCToInt32(? FUNCGetValue(VARexpr)). 
*0*Return the result of applying bitwise complement to VARoldValue. The result is a signed 32-bit integer.     

#############  END  ## 266 ###########################
############# BEGIN ## 267 ###########################
ID= 12.5.9
Summary= Logical NOT Operator ( ! )
Description= None
*0*Let VARexpr be the result of evaluating UnaryExpression. 
*0*Let VARoldValue be FUNCToBoolean(? FUNCGetValue(VARexpr)). 
*0*If VARoldValue is true, return false. 
*0*Return true.     

#############  END  ## 267 ###########################
############# BEGIN ## 268 ###########################
ID= 12.8.3
Summary= The Addition Operator ( + )
Description= The addition operator either performs string concatenation or numeric addition.
*0*Let VARlref be the result of evaluating AdditiveExpression. 
*0*Let VARlval be ? FUNCGetValue(VARlref). 
*0*Let VARrref be the result of evaluating MultiplicativeExpression. 
*0*Let VARrval be ? FUNCGetValue(VARrref). 
*0*Let VARlprim be ? FUNCToPrimitive(VARlval). 
*0*Let VARrprim be ? FUNCToPrimitive(VARrval). 
*0*If FUNCType(VARlprim) is String or FUNCType(VARrprim) is String, then
*1*Let VARlstr be ? FUNCToString(VARlprim). 
*1*Let VARrstr be ? FUNCToString(VARrprim). 
*1*Return the string-concatenation of VARlstr and VARrstr. 
*0*Let VARlnum be ? FUNCToNumber(VARlprim). 
*0*Let VARrnum be ? FUNCToNumber(VARrprim). 
*0*Return the result of applying the addition operation to VARlnum and VARrnum. See the Note below 12.8.5.     

#############  END  ## 268 ###########################
############# BEGIN ## 269 ###########################
ID= 12.8.4
Summary= The Subtraction Operator ( - )
Description= None
*0*Let VARlref be the result of evaluating AdditiveExpression. 
*0*Let VARlval be ? FUNCGetValue(VARlref). 
*0*Let VARrref be the result of evaluating MultiplicativeExpression. 
*0*Let VARrval be ? FUNCGetValue(VARrref). 
*0*Let VARlnum be ? FUNCToNumber(VARlval). 
*0*Let VARrnum be ? FUNCToNumber(VARrval). 
*0*Return the result of applying the subtraction operation to VARlnum and VARrnum. See the note below 12.8.5.     

#############  END  ## 269 ###########################
############# BEGIN ## 270 ###########################
ID= 12.9.3
Summary= The Left Shift Operator ( &lt;&lt; )
Description= Performs a bitwise left shift operation on the left operand by the amount specified by the right operand.
*0*Let VARlref be the result of evaluating ShiftExpression. 
*0*Let VARlval be ? FUNCGetValue(VARlref). 
*0*Let VARrref be the result of evaluating AdditiveExpression. 
*0*Let VARrval be ? FUNCGetValue(VARrref). 
*0*Let VARlnum be ? FUNCToInt32(VARlval). 
*0*Let VARrnum be ? FUNCToUint32(VARrval). 
*0*Let VARshiftCount be the result of masking out all but the least significant 5 bits of VARrnum, that is, compute VARrnum &amp; 0x1F. 
*0*Return the result of left shifting VARlnum by VARshiftCount bits. The result is a signed 32-bit integer.     

#############  END  ## 270 ###########################
############# BEGIN ## 271 ###########################
ID= 12.9.4
Summary= The Signed Right Shift Operator ( &gt;&gt; )
Description= Performs a sign-filling bitwise right shift operation on the left operand by the amount specified by the right operand.
*0*Let VARlref be the result of evaluating ShiftExpression. 
*0*Let VARlval be ? FUNCGetValue(VARlref). 
*0*Let VARrref be the result of evaluating AdditiveExpression. 
*0*Let VARrval be ? FUNCGetValue(VARrref). 
*0*Let VARlnum be ? FUNCToInt32(VARlval). 
*0*Let VARrnum be ? FUNCToUint32(VARrval). 
*0*Let VARshiftCount be the result of masking out all but the least significant 5 bits of VARrnum, that is, compute VARrnum &amp; 0x1F. 
*0*Return the result of performing a sign-extending right shift of VARlnum by VARshiftCount bits. The most significant bit is propagated. The result is a signed 32-bit integer.     

#############  END  ## 271 ###########################
############# BEGIN ## 272 ###########################
ID= 12.9.5
Summary= The Unsigned Right Shift Operator ( &gt;&gt;&gt; )
Description= Performs a zero-filling bitwise right shift operation on the left operand by the amount specified by the right operand.
*0*Let VARlref be the result of evaluating ShiftExpression. 
*0*Let VARlval be ? FUNCGetValue(VARlref). 
*0*Let VARrref be the result of evaluating AdditiveExpression. 
*0*Let VARrval be ? FUNCGetValue(VARrref). 
*0*Let VARlnum be ? FUNCToUint32(VARlval). 
*0*Let VARrnum be ? FUNCToUint32(VARrval). 
*0*Let VARshiftCount be the result of masking out all but the least significant 5 bits of VARrnum, that is, compute VARrnum &amp; 0x1F. 
*0*Return the result of performing a zero-filling right shift of VARlnum by VARshiftCount bits. Vacated bits are filled with zero. The result is an unsigned 32-bit integer.     

#############  END  ## 272 ###########################
############# BEGIN ## 273 ###########################
ID= 12.10.4
Summary= Runtime Semantics: InstanceofOperator ( V, target )
Description= The abstract operation InstanceofOperator(V, target) implements the generic algorithm for determining if  ECMAScript value V is an instance of object target either by consulting target's @@hasinstance method or, if absent, determining whether the value of target's prototype property is present in V's prototype chain. This abstract operation performs the following steps:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Let VARinstOfHandler be ? FUNCGetMethod(VARtarget, @@hasInstance). 
*0*If VARinstOfHandler is not undefined, then
*1*Return FUNCToBoolean(? FUNCCall(VARinstOfHandler, VARtarget, « VARV »)). 
*0*If FUNCIsCallable(VARtarget) is false, throw a TypeError exception. 
*0*Return ? FUNCOrdinaryHasInstance(VARtarget, VARV).    

#############  END  ## 273 ###########################
############# BEGIN ## 274 ###########################
ID= 12.14
Summary= Conditional Operator ( ? : )
Description= The grammar for a ConditionalExpression in ECMAScript is slightly different from that in C and Java, which each allow the second subexpression to be an Expression but restrict the third expression to be a ConditionalExpression. The motivation for this difference in ECMAScript is to allow an assignment expression to be governed by either arm of a conditional and to eliminate the confusing and fairly useless case of a comma expression as the centre expression.
*0*Return false.    

#############  END  ## 274 ###########################
############# BEGIN ## 275 ###########################
ID= 12.16
Summary= Comma Operator ( , )
Description= GetValue must be called even though its value is not used because it may have observable side-effects.
*0*Return false.    

#############  END  ## 275 ###########################
############# BEGIN ## 276 ###########################
ID= 13.2.14
Summary= Runtime Semantics: BlockDeclarationInstantiation ( code, env )
Description= When a Block or CaseBlock is evaluated a new declarative Environment Record is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the Environment Record.
*0*Let VARenvRec be VARenv's EnvironmentRecord. 
*0*Assert: VARenvRec is a declarative Environment Record. 
*0*Let VARdeclarations be the LexicallyScopedDeclarations of VARcode. 
*0*For each element VARd in VARdeclarations, do
*1*For each element VARdn of the BoundNames of VARd, do
*2*If IsConstantDeclaration of VARd is true, then
*3*Perform ! VARenvRec.CreateImmutableBinding(VARdn, true). 
*2*Else,
*3*Perform ! VARenvRec.CreateMutableBinding(VARdn, false). 
*1*If VARd is a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration, then
*2*Let VARfn be the sole element of the BoundNames of VARd. 
*2*Let VARfo be the result of performing InstantiateFunctionObject for VARd with argument VARenv. 
*2*Perform VARenvRec.InitializeBinding(VARfn, VARfo).    

#############  END  ## 276 ###########################
############# BEGIN ## 277 ###########################
ID= 13.7.1.2
Summary= Runtime Semantics: LoopContinues ( completion, labelSet )
Description= The abstract operation LoopContinues with arguments completion and labelSet is defined by the following steps:
*0*If VARcompletion.[[VARType]] is normal, return true. 
*0*If VARcompletion.[[VARType]] is not continue, return false. 
*0*If VARcompletion.[[VARTarget]] is empty, return true. 
*0*If VARcompletion.[[VARTarget]] is an element of VARlabelSet, return true. 
*0*Return false.     

#############  END  ## 277 ###########################
############# BEGIN ## 278 ###########################
ID= 13.7.4.8
Summary= Runtime Semantics: ForBodyEvaluation ( test, increment, stmt, perIterationBindings, labelSet )
Description= The abstract operation ForBodyEvaluation with arguments test, increment, stmt, perIterationBindings, and labelSet is performed as follows:
*0*Let VARV be undefined. 
*0*Perform ? FUNCCreatePerIterationEnvironment(VARperIterationBindings). 
*0*Repeat,
*1*If VARtest is not [empty], then
*2*Let VARtestRef be the result of evaluating VARtest. 
*2*Let VARtestValue be ? FUNCGetValue(VARtestRef). 
*2*If FUNCToBoolean(VARtestValue) is false, return FUNCNormalCompletion(VARV). 
*1*Let VARresult be the result of evaluating VARstmt. 
*1*If FUNCLoopContinues(VARresult, VARlabelSet) is false, return FUNCCompletion(FUNCUpdateEmpty(VARresult, VARV)). 
*1*If VARresult.[[VARValue]] is not empty, set VARV to VARresult.[[VARValue]]. 
*1*Perform ? FUNCCreatePerIterationEnvironment(VARperIterationBindings). 
*1*If VARincrement is not [empty], then
*2*Let VARincRef be the result of evaluating VARincrement. 
*2*Perform ? FUNCGetValue(VARincRef).     

#############  END  ## 278 ###########################
############# BEGIN ## 279 ###########################
ID= 13.7.4.9
Summary= Runtime Semantics: CreatePerIterationEnvironment ( perIterationBindings )
Description= The abstract operation CreatePerIterationEnvironment with argument perIterationBindings is performed as follows:
*0*If VARperIterationBindings has any elements, then
*1*Let VARlastIterationEnv be the running execution context's LexicalEnvironment. 
*1*Let VARlastIterationEnvRec be VARlastIterationEnv's EnvironmentRecord. 
*1*Let VARouter be VARlastIterationEnv's outer environment reference. 
*1*Assert: VARouter is not null. 
*1*Let VARthisIterationEnv be FUNCNewDeclarativeEnvironment(VARouter). 
*1*Let VARthisIterationEnvRec be VARthisIterationEnv's EnvironmentRecord. 
*1*For each element VARbn of VARperIterationBindings, do
*2*Perform ! VARthisIterationEnvRec.CreateMutableBinding(VARbn, false). 
*2*Let VARlastValue be ? VARlastIterationEnvRec.GetBindingValue(VARbn, true). 
*2*Perform VARthisIterationEnvRec.InitializeBinding(VARbn, VARlastValue). 
*1*Set the running execution context's LexicalEnvironment to VARthisIterationEnv. 
*0*Return undefined.     

#############  END  ## 279 ###########################
############# BEGIN ## 280 ###########################
ID= 13.7.5.12
Summary= Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr, iterationKind )
Description= The abstract operation ForIn/OfHeadEvaluation is called with arguments TDZnames, expr, and iterationKind. The value of iterationKind is either enumerate, iterate, or async-iterate.
*0*Let VARoldEnv be the running execution context's LexicalEnvironment. 
*0*If VARTDZnames is not an empty List, then
*1*Assert: VARTDZnames has no duplicate entries. 
*1*Let VARTDZ be FUNCNewDeclarativeEnvironment(VARoldEnv). 
*1*Let VARTDZEnvRec be VARTDZ's EnvironmentRecord. 
*1*For each string VARname in VARTDZnames, do
*2*Perform ! VARTDZEnvRec.CreateMutableBinding(VARname, false). 
*1*Set the running execution context's LexicalEnvironment to VARTDZ. 
*0*Let VARexprRef be the result of evaluating VARexpr. 
*0*Set the running execution context's LexicalEnvironment to VARoldEnv. 
*0*Let VARexprValue be ? FUNCGetValue(VARexprRef). 
*0*If VARiterationKind is enumerate, then
*1*If VARexprValue is undefined or null, then
*2*Return Completion { [[VARType]]: break, [[VARValue]]: empty, [[VARTarget]]: empty }. 
*1*Let VARobj be ! FUNCToObject(VARexprValue). 
*1*Return ? FUNCEnumerateObjectProperties(VARobj). 
*0*Else,
*1*Assert: VARiterationKind is iterate. 
*1*If VARiterationKind is async-iterate, then
*2*Let VARiteratorHint be async. 
*1*Else,
*2*let VARiteratorHint be sync.
*1*Return ? FUNCGetIterator(VARexprValue, VARiteratorHint).     

#############  END  ## 280 ###########################
############# BEGIN ## 281 ###########################
ID= 13.7.5.13
Summary= Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )
Description= The abstract operation ForIn/OfBodyEvaluation is called with arguments lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet, and optional argument iteratorKind. The value of lhsKind is either assignment, varBinding or lexicalBinding. The value of iteratorKind is either sync or async.
*0*If VARiteratorKind is not present, set VARiteratorKind to sync. 
*0*Let VARoldEnv be the running execution context's LexicalEnvironment. 
*0*Let VARV be undefined. 
*0*Let VARdestructuring be IsDestructuring of VARlhs. 
*0*If VARdestructuring is true and if VARlhsKind is assignment, then
*1*Assert: VARlhs is a LeftHandSideExpression. 
*1*Let VARassignmentPattern be the AssignmentPattern that is covered by VARlhs. 
*0*Repeat,
*1*Let VARnextResult be ? FUNCCall(VARiteratorRecord.[[VARNextMethod]], VARiteratorRecord.[[VARIterator]], « »). 
*1*If VARiteratorKind is async, then set VARnextResult to ? Await(VARnextResult). 
*1*If FUNCType(VARnextResult) is not Object, throw a TypeError exception. 
*1*Let VARnextValue be ? FUNCIteratorValue(VARnextResult). 
*1*If VARlhsKind is either assignment or varBinding, then
*2*If VARdestructuring is false, then
*3*Let VARlhsRef be the result of evaluating VARlhs. (It may be evaluated repeatedly.) 
*1*Else,
*2*Assert: VARlhsKind is lexicalBinding. 
*2*Assert: VARlhs is a ForDeclaration. 
*2*Let VARiterationEnv be FUNCNewDeclarativeEnvironment(VARoldEnv). 
*2*Perform BindingInstantiation for VARlhs passing VARiterationEnv as the argument. 
*2*Set the running execution context's LexicalEnvironment to VARiterationEnv. 
*2*If VARdestructuring is false, then
*3*Assert: VARlhs binds a single name. 
*3*Let VARlhsName be the sole element of BoundNames of VARlhs. 
*3*Let VARlhsRef be ! FUNCResolveBinding(VARlhsName). 
*1*If VARdestructuring is false, then
*2*If VARlhsRef is an abrupt completion, then
*3*Let VARstatus be VARlhsRef. 
*2*Else if VARlhsKind is lexicalBinding, then
*3*Let VARstatus be FUNCInitializeReferencedBinding(VARlhsRef, VARnextValue). 
*2*Else,
*3*Let VARstatus be FUNCPutValue(VARlhsRef, VARnextValue). 
*1*Else,
*2*If VARlhsKind is assignment, then
*3*Let VARstatus be the result of performing DestructuringAssignmentEvaluation of VARassignmentPattern using VARnextValue as the argument. 
*2*Else if VARlhsKind is varBinding, then
*3*Assert: VARlhs is a ForBinding. 
*3*Let VARstatus be the result of performing BindingInitialization for VARlhs passing VARnextValue and undefined as the arguments. 
*2*Else,
*3*Assert: VARlhsKind is lexicalBinding. 
*3*Assert: VARlhs is a ForDeclaration. 
*3*Let VARstatus be the result of performing BindingInitialization for VARlhs passing VARnextValue and VARiterationEnv as arguments. 
*1*If VARstatus is an abrupt completion, then
*2*Set the running execution context's LexicalEnvironment to VARoldEnv. 
*2*If VARiteratorKind is async, return ? FUNCAsyncIteratorClose(VARiteratorRecord, VARstatus). 
*2*If VARiterationKind is enumerate, then
*3*Return VARstatus. 
*2*Else,
*3*Assert: VARiterationKind is iterate. 
*3*Return ? FUNCIteratorClose(VARiteratorRecord, VARstatus). 
*1*Let VARresult be the result of evaluating VARstmt. 
*1*Set the running execution context's LexicalEnvironment to VARoldEnv. 
*1*If FUNCLoopContinues(VARresult, VARlabelSet) is false, then
*2*If VARiterationKind is enumerate, then
*3*Return FUNCCompletion(FUNCUpdateEmpty(VARresult, VARV)). 
*2*Else,
*3*Assert: VARiterationKind is iterate. 
*3*Set VARstatus to FUNCUpdateEmpty(VARresult, VARV). 
*3*If VARiteratorKind is async, return ? FUNCAsyncIteratorClose(VARiteratorRecord, VARstatus). 
*3*Return ? FUNCIteratorClose(VARiteratorRecord, VARstatus). 
*1*If VARresult.[[VARValue]] is not empty, set VARV to VARresult.[[VARValue]].     

#############  END  ## 281 ###########################
############# BEGIN ## 282 ###########################
ID= 13.7.5.15
Summary= EnumerateObjectProperties ( O )
Description= When the abstract operation EnumerateObjectProperties is called with argument O, the following steps are taken:
*0*Assert: FUNCType(VARO) is Object. 
*0*Return an Iterator object (25.1.1.2) whose next method iterates over all the String-valued keys of enumerable properties of VARO. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.     

#############  END  ## 282 ###########################
############# BEGIN ## 283 ###########################
ID= 13.12.10
Summary= Runtime Semantics: CaseClauseIsSelected ( C, input )
Description= The abstract operation CaseClauseIsSelected, given CaseClause C and value input, determines whether C matches input.
*0*Assert: VARC is an instance of the production CaseClause:caseExpression:StatementListopt. 
*0*Let VARexprRef be the result of evaluating the Expression of VARC. 
*0*Let VARclauseSelector be ? FUNCGetValue(VARexprRef). 
*0*Return the result of performing Strict Equality Comparison VARinput === VARclauseSelector.    

#############  END  ## 283 ###########################
############# BEGIN ## 284 ###########################
ID= 13.13.5
Summary= Static Semantics: IsLabelledFunction ( stmt )
Description= The abstract operation IsLabelledFunction with argument stmt performs the following steps:
*0*If VARstmt is not a LabelledStatement, return false. 
*0*Let VARitem be the LabelledItem of VARstmt. 
*0*If VARitem is LabelledItem:FunctionDeclaration , return true. 
*0*Let VARsubStmt be the Statement of VARitem. 
*0*Return FUNCIsLabelledFunction(VARsubStmt).    

#############  END  ## 284 ###########################
############# BEGIN ## 285 ###########################
ID= 14.1.10
Summary= Static Semantics: IsAnonymousFunctionDefinition ( expr )
Description= The abstract operation IsAnonymousFunctionDefinition determines if its argument is a function definition that does not bind a name. The argument expr is the result of parsing an AssignmentExpression or Initializer. The following steps are taken:
*0*If IsFunctionDefinition of VARexpr is false, return false. 
*0*Let VARhasName be the result of HasName of VARexpr. 
*0*If VARhasName is true, return false. 
*0*Return true.    

#############  END  ## 285 ###########################
############# BEGIN ## 286 ###########################
ID= 14.9.1
Summary= Static Semantics: IsInTailPosition ( call )
Description= The abstract operation IsInTailPosition with argument call performs the following steps:
*0*Assert: VARcall is a Parse Node. 
*0*If the source code matching VARcall is non-strict code, return false. 
*0*If VARcall is not contained within a FunctionBody, ConciseBody, or AsyncConciseBody, return false. 
*0*Let VARbody be the FunctionBody, ConciseBody, or AsyncConciseBody that most closely contains VARcall. 
*0*If VARbody is the FunctionBody of a GeneratorBody, return false. 
*0*If VARbody is the FunctionBody of an AsyncFunctionBody, return false. 
*0*If VARbody is the FunctionBody of an AsyncGeneratorBody, return false. 
*0*If VARbody is an AsyncConciseBody, return false. 
*0*Return the result of HasCallInTailPosition of VARbody with argument VARcall.    

#############  END  ## 286 ###########################
############# BEGIN ## 287 ###########################
ID= 14.9.3
Summary= Runtime Semantics: PrepareForTailCall ( )
Description= The abstract operation PrepareForTailCall performs the following steps:
*0*Let VARleafContext be the running execution context. 
*0*Suspend VARleafContext. 
*0*Pop VARleafContext from the execution context stack. The execution context now on the top of the stack becomes the running execution context. 
*0*Assert: VARleafContext has no further use. It will never be activated as the running execution context.    

#############  END  ## 287 ###########################
############# BEGIN ## 288 ###########################
ID= 15.1.9
Summary= ParseScript ( sourceText, realm, hostDefined )
Description= The abstract operation ParseScript with arguments sourceText, realm, and hostDefined creates a Script Record based upon the result of parsing sourceText as a Script. ParseScript performs the following steps:
*0*Assert: VARsourceText is an ECMAScript source text (see clause 10). 
*0*Parse VARsourceText using Script as the goal symbol and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let VARbody be the resulting parse tree. Otherwise, let VARbody be a List of one or more SyntaxError or ReferenceError objects representing the parsing errors and/or early errors. Parsing and early error detection may be interweaved in an implementation-dependent manner. If more than one parsing error or early error is present, the number and ordering of error objects in the list is implementation-dependent, but at least one must be present. 
*0*If VARbody is a List of errors, return VARbody. 
*0*Return Script Record { [[VARRealm]]: VARrealm, [[VAREnvironment]]: undefined, [[VARECMAScriptCode]]: VARbody, [[VARHostDefined]]: VARhostDefined }.    

#############  END  ## 288 ###########################
############# BEGIN ## 289 ###########################
ID= 15.1.10
Summary= ScriptEvaluation ( scriptRecord )
Description= None
*0*Let VARglobalEnv be VARscriptRecord.[[VARRealm]].[[VARGlobalEnv]]. 
*0*Let VARscriptCxt be a new ECMAScript code execution context. 
*0*Set the Function of VARscriptCxt to null. 
*0*Set the Realm of VARscriptCxt to VARscriptRecord.[[VARRealm]]. 
*0*Set the ScriptOrModule of VARscriptCxt to VARscriptRecord. 
*0*Set the VariableEnvironment of VARscriptCxt to VARglobalEnv. 
*0*Set the LexicalEnvironment of VARscriptCxt to VARglobalEnv. 
*0*Suspend the currently running execution context. 
*0*Push VARscriptCxt on to the execution context stack; VARscriptCxt is now the running execution context. 
*0*Let VARscriptBody be VARscriptRecord.[[VARECMAScriptCode]]. 
*0*Let VARresult be FUNCGlobalDeclarationInstantiation(VARscriptBody, VARglobalEnv). 
*0*If VARresult.[[VARType]] is normal, then
*1*Set VARresult to the result of evaluating VARscriptBody. 
*0*If VARresult.[[VARType]] is normal and VARresult.[[VARValue]] is empty, then
*1*Set VARresult to FUNCNormalCompletion(undefined). 
*0*Suspend VARscriptCxt and remove it from the execution context stack. 
*0*Assert: The execution context stack is not empty. 
*0*Resume the context that is now on the top of the execution context stack as the running execution context. 
*0*Return FUNCCompletion(VARresult).    

#############  END  ## 289 ###########################
############# BEGIN ## 290 ###########################
ID= 15.1.11
Summary= Runtime Semantics: GlobalDeclarationInstantiation ( script, env )
Description= When an execution context is established for evaluating scripts, declarations are instantiated in the current global environment. Each global binding declared in the code is instantiated.
*0*Let VARenvRec be VARenv's EnvironmentRecord. 
*0*Assert: VARenvRec is a global Environment Record. 
*0*Let VARlexNames be the LexicallyDeclaredNames of VARscript. 
*0*Let VARvarNames be the VarDeclaredNames of VARscript. 
*0*For each VARname in VARlexNames, do
*1*If VARenvRec.HasVarDeclaration(VARname) is true, throw a SyntaxError exception. 
*1*If VARenvRec.HasLexicalDeclaration(VARname) is true, throw a SyntaxError exception. 
*1*Let VARhasRestrictedGlobal be ? VARenvRec.HasRestrictedGlobalProperty(VARname). 
*1*If VARhasRestrictedGlobal is true, throw a SyntaxError exception. 
*0*For each VARname in VARvarNames, do
*1*If VARenvRec.HasLexicalDeclaration(VARname) is true, throw a SyntaxError exception. 
*0*Let VARvarDeclarations be the VarScopedDeclarations of VARscript. 
*0*Let VARfunctionsToInitialize be a new empty List. 
*0*Let VARdeclaredFunctionNames be a new empty List. 
*0*For each VARd in VARvarDeclarations, in reverse list order, do
*1*If VARd is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, then
*2*Assert: VARd is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration. 
*2*NOTE: If there are multiple function declarations for the same name, the last declaration is used. 
*2*Let VARfn be the sole element of the BoundNames of VARd. 
*2*If VARfn is not an element of VARdeclaredFunctionNames, then
*3*Let VARfnDefinable be ? VARenvRec.CanDeclareGlobalFunction(VARfn). 
*3*If VARfnDefinable is false, throw a TypeError exception. 
*3*Append VARfn to VARdeclaredFunctionNames. 
*3*Insert VARd as the first element of VARfunctionsToInitialize. 
*0*Let VARdeclaredVarNames be a new empty List. 
*0*For each VARd in VARvarDeclarations, do
*1*If VARd is a VariableDeclaration, a ForBinding, or a BindingIdentifier, then
*2*For each String VARvn in the BoundNames of VARd, do
*3*If VARvn is not an element of VARdeclaredFunctionNames, then
*4*Let VARvnDefinable be ? VARenvRec.CanDeclareGlobalVar(VARvn). 
*4*If VARvnDefinable is false, throw a TypeError exception. 
*4*If VARvn is not an element of VARdeclaredVarNames, then
*5*Append VARvn to VARdeclaredVarNames. 
*0*NOTE: No abnormal terminations occur after this algorithm step if the global object is an ordinary object. However, if the global object is a Proxy exotic object it may exhibit behaviours that cause abnormal terminations in some of the following steps. 
*0*NOTE: Annex B.3.3.2 adds additional steps at this point. 
*0*Let VARlexDeclarations be the LexicallyScopedDeclarations of VARscript. 
*0*For each element VARd in VARlexDeclarations, do
*1*NOTE: Lexically declared names are only instantiated here but not initialized. 
*1*For each element VARdn of the BoundNames of VARd, do
*2*If IsConstantDeclaration of VARd is true, then
*3*Perform ? VARenvRec.CreateImmutableBinding(VARdn, true). 
*2*Else,
*3*Perform ? VARenvRec.CreateMutableBinding(VARdn, false). 
*0*For each Parse Node VARf in VARfunctionsToInitialize, do
*1*Let VARfn be the sole element of the BoundNames of VARf. 
*1*Let VARfo be the result of performing InstantiateFunctionObject for VARf with argument VARenv. 
*1*Perform ? VARenvRec.CreateGlobalFunctionBinding(VARfn, VARfo, false). 
*0*For each String VARvn in VARdeclaredVarNames, in list order, do
*1*Perform ? VARenvRec.CreateGlobalVarBinding(VARvn, false). 
*0*Return FUNCNormalCompletion(empty).    

#############  END  ## 290 ###########################
############# BEGIN ## 291 ###########################
ID= 15.1.12
Summary= Runtime Semantics: ScriptEvaluationJob ( sourceText, hostDefined )
Description= The job ScriptEvaluationJob with parameters sourceText and hostDefined parses, validates, and evaluates sourceText as a Script.
*0*Assert: VARsourceText is an ECMAScript source text (see clause 10). 
*0*Let VARrealm be the current Realm Record. 
*0*Let VARs be FUNCParseScript(VARsourceText, VARrealm, VARhostDefined). 
*0*If VARs is a List of errors, then
*1*Perform FUNCHostReportErrors(VARs). 
*1*Return FUNCNormalCompletion(undefined). 
*0*Return ? FUNCScriptEvaluation(VARs).    

#############  END  ## 291 ###########################
############# BEGIN ## 292 ###########################
ID= 15.2.1.9
Summary= Static Semantics: ImportedLocalNames ( importEntries )
Description= The abstract operation ImportedLocalNames with argument importEntries creates a List of all of the local name bindings defined by a List of ImportEntry Records (see  Table 40). ImportedLocalNames performs the following steps:
*0*Let VARlocalNames be a new empty List. 
*0*For each ImportEntry Record VARi in VARimportEntries, do
*1*Append VARi.[[VARLocalName]] to VARlocalNames. 
*0*Return VARlocalNames.     

#############  END  ## 292 ###########################
############# BEGIN ## 293 ###########################
ID= 15.2.1.16.1
Summary= ParseModule ( sourceText, realm, hostDefined )
Description= The abstract operation ParseModule with arguments sourceText, realm, and hostDefined creates a Source Text Module Record based upon the result of parsing sourceText as a Module. ParseModule performs the following steps:
*0*Assert: VARsourceText is an ECMAScript source text (see clause 10). 
*0*Parse VARsourceText using Module as the goal symbol and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let VARbody be the resulting parse tree. Otherwise, let VARbody be a List of one or more SyntaxError or ReferenceError objects representing the parsing errors and/or early errors. Parsing and early error detection may be interweaved in an implementation-dependent manner. If more than one parsing error or early error is present, the number and ordering of error objects in the list is implementation-dependent, but at least one must be present. 
*0*If VARbody is a List of errors, return VARbody. 
*0*Let VARrequestedModules be the ModuleRequests of VARbody. 
*0*Let VARimportEntries be ImportEntries of VARbody. 
*0*Let VARimportedBoundNames be FUNCImportedLocalNames(VARimportEntries). 
*0*Let VARindirectExportEntries be a new empty List. 
*0*Let VARlocalExportEntries be a new empty List. 
*0*Let VARstarExportEntries be a new empty List. 
*0*Let VARexportEntries be ExportEntries of VARbody. 
*0*For each ExportEntry Record VARee in VARexportEntries, do
*1*If VARee.[[VARModuleRequest]] is null, then
*2*If VARee.[[VARLocalName]] is not an element of VARimportedBoundNames, then
*3*Append VARee to VARlocalExportEntries. 
*2*Else,
*3*Let VARie be the element of VARimportEntries whose [[VARLocalName]] is the same as VARee.[[VARLocalName]]. 
*3*If VARie.[[VARImportName]] is "*", then
*4*Assert: This is a re-export of an imported module namespace object. 
*4*Append VARee to VARlocalExportEntries. 
*3*Else this is a re-export of a single name,
*4*Append the ExportEntry Record { [[VARModuleRequest]]: VARie.[[VARModuleRequest]], [[VARImportName]]: VARie.[[VARImportName]], [[VARLocalName]]: null, [[VARExportName]]: VARee.[[VARExportName]] } to VARindirectExportEntries. 
*1*Else if VARee.[[VARImportName]] is "*", then
*2*Append VARee to VARstarExportEntries. 
*1*Else,
*2*Append VARee to VARindirectExportEntries. 
*0*Return Source Text Module Record { [[VARRealm]]: VARrealm, [[VAREnvironment]]: undefined, [[VARNamespace]]: undefined, [[VARStatus]]: "uninstantiated", [[VAREvaluationError]]: undefined, [[VARHostDefined]]: VARhostDefined, [[VARECMAScriptCode]]: VARbody, [[VARRequestedModules]]: VARrequestedModules, [[VARImportEntries]]: VARimportEntries, [[VARLocalExportEntries]]: VARlocalExportEntries, [[VARIndirectExportEntries]]: VARindirectExportEntries, [[VARStarExportEntries]]: VARstarExportEntries, [[VARDFSIndex]]: undefined, [[VARDFSAncestorIndex]]: undefined }.      

#############  END  ## 293 ###########################
############# BEGIN ## 294 ###########################
ID= 15.2.1.16.4.1
Summary= InnerModuleInstantiation ( module, stack, index )
Description= The InnerModuleInstantiation abstract operation is used by Instantiate to perform the actual instantiation process for the Source Text Module Record module, as well as recursively on all other modules in the dependency graph. The stack and index parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to "instantiated" together.
*0*If VARmodule is not a Source Text Module Record, then
*1*Perform ? VARmodule.Instantiate(). 
*1*Return VARindex. 
*0*If VARmodule.[[VARStatus]] is "instantiating", "instantiated", or "evaluated", then
*1*Return VARindex. 
*0*Assert: VARmodule.[[VARStatus]] is "uninstantiated". 
*0*Set VARmodule.[[VARStatus]] to "instantiating". 
*0*Set VARmodule.[[VARDFSIndex]] to VARindex. 
*0*Set VARmodule.[[VARDFSAncestorIndex]] to VARindex. 
*0*Set VARindex to VARindex + 1. 
*0*Append VARmodule to VARstack. 
*0*For each String VARrequired that is an element of VARmodule.[[VARRequestedModules]], do
*1*Let VARrequiredModule be ? FUNCHostResolveImportedModule(VARmodule, VARrequired). 
*1*Set VARindex to ? FUNCInnerModuleInstantiation(VARrequiredModule, VARstack, VARindex). 
*1*Assert: VARrequiredModule.[[VARStatus]] is either "instantiating", "instantiated", or "evaluated". 
*1*Assert: VARrequiredModule.[[VARStatus]] is "instantiating" if and only if VARrequiredModule is in VARstack. 
*1*If VARrequiredModule.[[VARStatus]] is "instantiating", then
*2*Assert: VARrequiredModule is a Source Text Module Record. 
*2*Set VARmodule.[[VARDFSAncestorIndex]] to min(VARmodule.[[VARDFSAncestorIndex]], VARrequiredModule.[[VARDFSAncestorIndex]]). 
*0*Perform ? FUNCModuleDeclarationEnvironmentSetup(VARmodule). 
*0*Assert: VARmodule occurs exactly once in VARstack. 
*0*Assert: VARmodule.[[VARDFSAncestorIndex]] is less than or equal to VARmodule.[[VARDFSIndex]]. 
*0*If VARmodule.[[VARDFSAncestorIndex]] equals VARmodule.[[VARDFSIndex]], then
*1*Let VARdone be false. 
*1*Repeat, while VARdone is false,
*2*Let VARrequiredModule be the last element in VARstack. 
*2*Remove the last element of VARstack. 
*2*Set VARrequiredModule.[[VARStatus]] to "instantiated". 
*2*If VARrequiredModule and VARmodule are the same Module Record, set VARdone to true. 
*0*Return VARindex.       

#############  END  ## 294 ###########################
############# BEGIN ## 295 ###########################
ID= 15.2.1.16.4.2
Summary= ModuleDeclarationEnvironmentSetup ( module )
Description= The ModuleDeclarationEnvironmentSetup abstract operation is used by InnerModuleInstantiation to initialize the Lexical Environment of the module, including resolving all imported bindings.
*0*For each ExportEntry Record VARe in VARmodule.[[VARIndirectExportEntries]], do
*1*Let VARresolution be ? VARmodule.ResolveExport(VARe.[[VARExportName]], « »). 
*1*If VARresolution is null or "ambiguous", throw a SyntaxError exception. 
*1*Assert: VARresolution is a ResolvedBinding Record. 
*0*Assert: All named exports from VARmodule are resolvable. 
*0*Let VARrealm be VARmodule.[[VARRealm]]. 
*0*Assert: VARrealm is not undefined. 
*0*Let VARenv be FUNCNewModuleEnvironment(VARrealm.[[VARGlobalEnv]]). 
*0*Set VARmodule.[[VAREnvironment]] to VARenv. 
*0*Let VARenvRec be VARenv's EnvironmentRecord. 
*0*For each ImportEntry Record VARin in VARmodule.[[VARImportEntries]], do
*1*Let VARimportedModule be ! FUNCHostResolveImportedModule(VARmodule, VARin.[[VARModuleRequest]]). 
*1*NOTE: The above call cannot fail because imported module requests are a subset of VARmodule.[[VARRequestedModules]], and these have been resolved earlier in this algorithm. 
*1*If VARin.[[VARImportName]] is "*", then
*2*Let VARnamespace be ? FUNCGetModuleNamespace(VARimportedModule). 
*2*Perform ! VARenvRec.CreateImmutableBinding(VARin.[[VARLocalName]], true). 
*2*Call VARenvRec.InitializeBinding(VARin.[[VARLocalName]], VARnamespace). 
*1*Else,
*2*Let VARresolution be ? VARimportedModule.ResolveExport(VARin.[[VARImportName]], « »). 
*2*If VARresolution is null or "ambiguous", throw a SyntaxError exception. 
*2*Call VARenvRec.CreateImportBinding(VARin.[[VARLocalName]], VARresolution.[[VARModule]], VARresolution.[[VARBindingName]]). 
*0*Let VARcode be VARmodule.[[VARECMAScriptCode]]. 
*0*Let VARvarDeclarations be the VarScopedDeclarations of VARcode. 
*0*Let VARdeclaredVarNames be a new empty List. 
*0*For each element VARd in VARvarDeclarations, do
*1*For each element VARdn of the BoundNames of VARd, do
*2*If VARdn is not an element of VARdeclaredVarNames, then
*3*Perform ! VARenvRec.CreateMutableBinding(VARdn, false). 
*3*Call VARenvRec.InitializeBinding(VARdn, undefined). 
*3*Append VARdn to VARdeclaredVarNames. 
*0*Let VARlexDeclarations be the LexicallyScopedDeclarations of VARcode. 
*0*For each element VARd in VARlexDeclarations, do
*1*For each element VARdn of the BoundNames of VARd, do
*2*If IsConstantDeclaration of VARd is true, then
*3*Perform ! VARenvRec.CreateImmutableBinding(VARdn, true). 
*2*Else,
*3*Perform ! VARenvRec.CreateMutableBinding(VARdn, false). 
*2*If VARd is a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration, then
*3*Let VARfo be the result of performing InstantiateFunctionObject for VARd with argument VARenv. 
*3*Call VARenvRec.InitializeBinding(VARdn, VARfo).       

#############  END  ## 295 ###########################
############# BEGIN ## 296 ###########################
ID= 15.2.1.16.5.1
Summary= InnerModuleEvaluation ( module, stack, index )
Description= The InnerModuleEvaluation abstract operation is used by Evaluate to perform the actual evaluation process for the Source Text Module Record module, as well as recursively on all other modules in the dependency graph. The stack and index parameters, as well as module's [[DFSIndex]] and [[DFSAncestoreIndex]] fields, are used the same way as in InnerModuleInstantiation.
*0*If VARmodule is not a Source Text Module Record, then
*1*Perform ? VARmodule.Evaluate(). 
*1*Return VARindex. 
*0*If VARmodule.[[VARStatus]] is "evaluated", then
*1*If VARmodule.[[VAREvaluationError]] is undefined, return VARindex. 
*1*Otherwise return VARmodule.[[VAREvaluationError]]. 
*0*If VARmodule.[[VARStatus]] is "evaluating", return VARindex. 
*0*Assert: VARmodule.[[VARStatus]] is "instantiated". 
*0*Set VARmodule.[[VARStatus]] to "evaluating". 
*0*Set VARmodule.[[VARDFSIndex]] to VARindex. 
*0*Set VARmodule.[[VARDFSAncestorIndex]] to VARindex. 
*0*Set VARindex to VARindex + 1. 
*0*Append VARmodule to VARstack. 
*0*For each String VARrequired that is an element of VARmodule.[[VARRequestedModules]], do
*1*Let VARrequiredModule be ! FUNCHostResolveImportedModule(VARmodule, VARrequired). 
*1*NOTE: Instantiate must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully. 
*1*Set VARindex to ? FUNCInnerModuleEvaluation(VARrequiredModule, VARstack, VARindex). 
*1*Assert: VARrequiredModule.[[VARStatus]] is either "evaluating" or "evaluated". 
*1*Assert: VARrequiredModule.[[VARStatus]] is "evaluating" if and only if VARrequiredModule is in VARstack. 
*1*If VARrequiredModule.[[VARStatus]] is "evaluating", then
*2*Assert: VARrequiredModule is a Source Text Module Record. 
*2*Set VARmodule.[[VARDFSAncestorIndex]] to min(VARmodule.[[VARDFSAncestorIndex]], VARrequiredModule.[[VARDFSAncestorIndex]]). 
*0*Perform ? FUNCModuleExecution(VARmodule). 
*0*Assert: VARmodule occurs exactly once in VARstack. 
*0*Assert: VARmodule.[[VARDFSAncestorIndex]] is less than or equal to VARmodule.[[VARDFSIndex]]. 
*0*If VARmodule.[[VARDFSAncestorIndex]] equals VARmodule.[[VARDFSIndex]], then
*1*Let VARdone be false. 
*1*Repeat, while VARdone is false,
*2*Let VARrequiredModule be the last element in VARstack. 
*2*Remove the last element of VARstack. 
*2*Set VARrequiredModule.[[VARStatus]] to "evaluated". 
*2*If VARrequiredModule and VARmodule are the same Module Record, set VARdone to true. 
*0*Return VARindex.       

#############  END  ## 296 ###########################
############# BEGIN ## 297 ###########################
ID= 15.2.1.16.5.2
Summary= ModuleExecution ( module )
Description= The ModuleExecution abstract operation is used by InnerModuleEvaluation to initialize the execution context of the module and evaluate the module's code within it.
*0*Let VARmoduleCxt be a new ECMAScript code execution context. 
*0*Set the Function of VARmoduleCxt to null. 
*0*Assert: VARmodule.[[VARRealm]] is not undefined. 
*0*Set the Realm of VARmoduleCxt to VARmodule.[[VARRealm]]. 
*0*Set the ScriptOrModule of VARmoduleCxt to VARmodule. 
*0*Assert: VARmodule has been linked and declarations in its module environment have been instantiated. 
*0*Set the VariableEnvironment of VARmoduleCxt to VARmodule.[[VAREnvironment]]. 
*0*Set the LexicalEnvironment of VARmoduleCxt to VARmodule.[[VAREnvironment]]. 
*0*Suspend the currently running execution context. 
*0*Push VARmoduleCxt on to the execution context stack; VARmoduleCxt is now the running execution context. 
*0*Let VARresult be the result of evaluating VARmodule.[[VARECMAScriptCode]]. 
*0*Suspend VARmoduleCxt and remove it from the execution context stack. 
*0*Resume the context that is now on the top of the execution context stack as the running execution context. 
*0*Return FUNCCompletion(VARresult).       

#############  END  ## 297 ###########################
############# BEGIN ## 298 ###########################
ID= 15.2.1.18
Summary= Runtime Semantics: GetModuleNamespace ( module )
Description= The GetModuleNamespace abstract operation retrieves the Module Namespace Exotic object representing module's exports, lazily creating it the first time it was requested, and storing it in module.[[Namespace]] for future retrieval.
*0*Assert: VARmodule is an instance of a concrete subclass of Module Record. 
*0*Assert: VARmodule.[[VARStatus]] is not "uninstantiated". 
*0*Assert: If VARmodule.[[VARStatus]] is "evaluated", VARmodule.[[VAREvaluationError]] is undefined. 
*0*Let VARnamespace be VARmodule.[[VARNamespace]]. 
*0*If VARnamespace is undefined, then
*1*Let VARexportedNames be ? VARmodule.GetExportedNames(« »). 
*1*Let VARunambiguousNames be a new empty List. 
*1*For each VARname that is an element of VARexportedNames, do
*2*Let VARresolution be ? VARmodule.ResolveExport(VARname, « »). 
*2*If VARresolution is a ResolvedBinding Record, append VARname to VARunambiguousNames. 
*1*Set VARnamespace to FUNCModuleNamespaceCreate(VARmodule, VARunambiguousNames). 
*0*Return VARnamespace.     

#############  END  ## 298 ###########################
############# BEGIN ## 299 ###########################
ID= 15.2.1.19
Summary= Runtime Semantics: TopLevelModuleEvaluationJob ( sourceText, hostDefined )
Description= A TopLevelModuleEvaluationJob with parameters sourceText and hostDefined is a job that parses, validates, and evaluates sourceText as a Module.
*0*Assert: VARsourceText is an ECMAScript source text (see clause 10). 
*0*Let VARrealm be the current Realm Record. 
*0*Let VARm be FUNCParseModule(VARsourceText, VARrealm, VARhostDefined). 
*0*If VARm is a List of errors, then
*1*Perform FUNCHostReportErrors(VARm). 
*1*Return FUNCNormalCompletion(undefined). 
*0*Perform ? VARm.Instantiate(). 
*0*Assert: All dependencies of VARm have been transitively resolved and VARm is ready for evaluation. 
*0*Return ? VARm.Evaluate().     

#############  END  ## 299 ###########################
############# BEGIN ## 300 ###########################
ID= 18.2.1
Summary= eval ( x )
Description= The eval function is the  %eval% intrinsic object. When the eval function is called with one argument x, the following steps are taken:
*0*Assert: The execution context stack has at least two elements. 
*0*Let VARcallerContext be the second to top element of the execution context stack. 
*0*Let VARcallerRealm be VARcallerContext's Realm. 
*0*Let VARcalleeRealm be the current Realm Record. 
*0*Perform ? FUNCHostEnsureCanCompileStrings(VARcallerRealm, VARcalleeRealm). 
*0*Return ? FUNCPerformEval(VARx, VARcalleeRealm, false, false).    

#############  END  ## 300 ###########################
############# BEGIN ## 301 ###########################
ID= 18.2.1.1
Summary= Runtime Semantics: PerformEval ( x, evalRealm, strictCaller, direct )
Description= The abstract operation PerformEval with arguments x, evalRealm, strictCaller, and direct performs the following steps:
*0*Assert: If VARdirect is false, then VARstrictCaller is also false. 
*0*If FUNCType(VARx) is not String, return VARx. 
*0*Let VARthisEnvRec be ! FUNCGetThisEnvironment(). 
*0*If VARthisEnvRec is a function Environment Record, then
*1*Let VARF be VARthisEnvRec.[[VARFunctionObject]]. 
*1*Let VARinFunction be true. 
*1*Let VARinMethod be VARthisEnvRec.HasSuperBinding(). 
*1*If VARF.[[VARConstructorKind]] is "derived", then
*2*Let VARinDerivedConstructor be true; otherwise, then
*0*Else,
*1*Let VARinFunction be false. 
*1*Let VARinMethod be false. 
*1*Let VARinDerivedConstructor be false. 
*0*Let VARscript be the ECMAScript code that is the result of parsing VARx, interpreted as UTF-16 encoded Unicode text as described in 6.1.4, for the goal symbol Script. If VARinFunction is false, additional early error rules from 18.2.1.1.1 are applied. If VARinMethod is false, additional early error rules from 18.2.1.1.2 are applied. If VARinDerivedConstructor is false, additional early error rules from 18.2.1.1.3 are applied. If the parse fails, throw a SyntaxError exception. If any early errors are detected, throw a SyntaxError or a ReferenceError exception, depending on the type of the error (but see also clause 16). Parsing and early error detection may be interweaved in an implementation-dependent manner. 
*0*If VARscript Contains ScriptBody is false, return undefined. 
*0*Let VARbody be the ScriptBody of VARscript. 
*0*If VARstrictCaller is true, then
*1*Let VARstrictEval be true. 
*0*Else,
*1*let VARstrictEval be IsStrict of VARscript.
*0*Let VARctx be the running execution context. 
*0*NOTE: If VARdirect is true, VARctx will be the execution context that performed the direct eval. If VARdirect is false, VARctx will be the execution context for the invocation of the eval function. 
*0*If VARdirect is true, then
*1*Let VARlexEnv be FUNCNewDeclarativeEnvironment(VARctx's LexicalEnvironment). 
*1*Let VARvarEnv be VARctx's VariableEnvironment. 
*0*Else,
*1*Let VARlexEnv be FUNCNewDeclarativeEnvironment(VARevalRealm.[[VARGlobalEnv]]). 
*1*Let VARvarEnv be VARevalRealm.[[VARGlobalEnv]]. 
*0*If VARstrictEval is true, set VARvarEnv to VARlexEnv. 
*0*If VARctx is not already suspended, suspend VARctx. 
*0*Let VARevalCxt be a new ECMAScript code execution context. 
*0*Set the VARevalCxt's Function to null. 
*0*Set the VARevalCxt's Realm to VARevalRealm. 
*0*Set the VARevalCxt's ScriptOrModule to VARctx's ScriptOrModule. 
*0*Set the VARevalCxt's VariableEnvironment to VARvarEnv. 
*0*Set the VARevalCxt's LexicalEnvironment to VARlexEnv. 
*0*Push VARevalCxt on to the execution context stack; VARevalCxt is now the running execution context. 
*0*Let VARresult be FUNCEvalDeclarationInstantiation(VARbody, VARvarEnv, VARlexEnv, VARstrictEval). 
*0*If VARresult.[[VARType]] is normal, then
*1*Set VARresult to the result of evaluating VARbody. 
*0*If VARresult.[[VARType]] is normal and VARresult.[[VARValue]] is empty, then
*1*Set VARresult to FUNCNormalCompletion(undefined). 
*0*Suspend VARevalCxt and remove it from the execution context stack. 
*0*Resume the context that is now on the top of the execution context stack as the running execution context. 
*0*Return FUNCCompletion(VARresult).     

#############  END  ## 301 ###########################
############# BEGIN ## 302 ###########################
ID= 18.2.1.3
Summary= Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )
Description= When the abstract operation EvalDeclarationInstantiation is called with arguments body, varEnv, lexEnv, and strict, the following steps are taken:
*0*Let VARvarNames be the VarDeclaredNames of VARbody. 
*0*Let VARvarDeclarations be the VarScopedDeclarations of VARbody. 
*0*Let VARlexEnvRec be VARlexEnv's EnvironmentRecord. 
*0*Let VARvarEnvRec be VARvarEnv's EnvironmentRecord. 
*0*If VARstrict is false, then
*1*If VARvarEnvRec is a global Environment Record, then
*2*For each VARname in VARvarNames, do
*3*If VARvarEnvRec.HasLexicalDeclaration(VARname) is true, throw a SyntaxError exception. 
*3*NOTE: eval will not create a global var declaration that would be shadowed by a global lexical declaration. 
*1*Let VARthisLex be VARlexEnv. 
*1*Assert: The following loop will terminate. 
*1*Repeat, while VARthisLex is not the same as VARvarEnv,
*2*Let VARthisEnvRec be VARthisLex's EnvironmentRecord. 
*2*If VARthisEnvRec is not an object Environment Record, then
*3*NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts. 
*3*For each VARname in VARvarNames, do
*4*If VARthisEnvRec.HasBinding(VARname) is true, then
*5*Throw a SyntaxError exception. 
*5*NOTE: Annex B.3.5 defines alternate semantics for the above step. 
*4*NOTE: A direct eval will not hoist var declaration over a like-named lexical declaration. 
*2*Set VARthisLex to VARthisLex's outer environment reference. 
*0*Let VARfunctionsToInitialize be a new empty List. 
*0*Let VARdeclaredFunctionNames be a new empty List. 
*0*For each VARd in VARvarDeclarations, in reverse list order, do
*1*If VARd is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, then
*2*Assert: VARd is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration. 
*2*NOTE: If there are multiple function declarations for the same name, the last declaration is used. 
*2*Let VARfn be the sole element of the BoundNames of VARd. 
*2*If VARfn is not an element of VARdeclaredFunctionNames, then
*3*If VARvarEnvRec is a global Environment Record, then
*4*Let VARfnDefinable be ? VARvarEnvRec.CanDeclareGlobalFunction(VARfn). 
*4*If VARfnDefinable is false, throw a TypeError exception. 
*3*Append VARfn to VARdeclaredFunctionNames. 
*3*Insert VARd as the first element of VARfunctionsToInitialize. 
*0*NOTE: Annex B.3.3.3 adds additional steps at this point. 
*0*Let VARdeclaredVarNames be a new empty List. 
*0*For each VARd in VARvarDeclarations, do
*1*If VARd is a VariableDeclaration, a ForBinding, or a BindingIdentifier, then
*2*For each String VARvn in the BoundNames of VARd, do
*3*If VARvn is not an element of VARdeclaredFunctionNames, then
*4*If VARvarEnvRec is a global Environment Record, then
*5*Let VARvnDefinable be ? VARvarEnvRec.CanDeclareGlobalVar(VARvn). 
*5*If VARvnDefinable is false, throw a TypeError exception. 
*4*If VARvn is not an element of VARdeclaredVarNames, then
*5*Append VARvn to VARdeclaredVarNames. 
*0*NOTE: No abnormal terminations occur after this algorithm step unless VARvarEnvRec is a global Environment Record and the global object is a Proxy exotic object. 
*0*Let VARlexDeclarations be the LexicallyScopedDeclarations of VARbody. 
*0*For each element VARd in VARlexDeclarations, do
*1*NOTE: Lexically declared names are only instantiated here but not initialized. 
*1*For each element VARdn of the BoundNames of VARd, do
*2*If IsConstantDeclaration of VARd is true, then
*3*Perform ? VARlexEnvRec.CreateImmutableBinding(VARdn, true). 
*2*Else,
*3*Perform ? VARlexEnvRec.CreateMutableBinding(VARdn, false). 
*0*For each Parse Node VARf in VARfunctionsToInitialize, do
*1*Let VARfn be the sole element of the BoundNames of VARf. 
*1*Let VARfo be the result of performing InstantiateFunctionObject for VARf with argument VARlexEnv. 
*1*If VARvarEnvRec is a global Environment Record, then
*2*Perform ? VARvarEnvRec.CreateGlobalFunctionBinding(VARfn, VARfo, true). 
*1*Else,
*2*Let VARbindingExists be VARvarEnvRec.HasBinding(VARfn). 
*2*If VARbindingExists is false, then
*3*Let VARstatus be ! VARvarEnvRec.CreateMutableBinding(VARfn, true). 
*3*Assert: VARstatus is not an abrupt completion because of validation preceding step 12. 
*3*Perform ! VARvarEnvRec.InitializeBinding(VARfn, VARfo). 
*2*Else,
*3*Perform ! VARvarEnvRec.SetMutableBinding(VARfn, VARfo, false). 
*0*For each String VARvn in VARdeclaredVarNames, in list order, do
*1*If VARvarEnvRec is a global Environment Record, then
*2*Perform ? VARvarEnvRec.CreateGlobalVarBinding(VARvn, true). 
*1*Else,
*2*Let VARbindingExists be VARvarEnvRec.HasBinding(VARvn). 
*2*If VARbindingExists is false, then
*3*Let VARstatus be ! VARvarEnvRec.CreateMutableBinding(VARvn, true). 
*3*Assert: VARstatus is not an abrupt completion because of validation preceding step 12. 
*3*Perform ! VARvarEnvRec.InitializeBinding(VARvn, undefined). 
*0*Return FUNCNormalCompletion(empty).     

#############  END  ## 302 ###########################
############# BEGIN ## 303 ###########################
ID= 18.2.2
Summary= isFinite ( number )
Description= The isFinite function is the  %isFinite% intrinsic object. When the isFinite function is called with one argument number, the following steps are taken:
*0*Let VARnum be ? FUNCToNumber(VARnumber). 
*0*If VARnum is NaN, +∞, or -∞, return false. 
*0*Otherwise, return true.    

#############  END  ## 303 ###########################
############# BEGIN ## 304 ###########################
ID= 18.2.3
Summary= isNaN ( number )
Description= The isNaN function is the  %isNaN% intrinsic object. When the isNaN function is called with one argument number, the following steps are taken:
*0*Let VARnum be ? FUNCToNumber(VARnumber). 
*0*If VARnum is NaN, return true. 
*0*Otherwise, return false.    

#############  END  ## 304 ###########################
############# BEGIN ## 305 ###########################
ID= 18.2.4
Summary= parseFloat ( string )
Description= The parseFloat function produces a Number value dictated by interpretation of the contents of the string argument as a decimal literal.
*0*Let VARinputString be ? FUNCToString(VARstring). 
*0*Let VARtrimmedString be a substring of VARinputString consisting of the leftmost code unit that is not a StrWhiteSpaceChar and all code units to the right of that code unit. (In other words, remove leading white space.) If VARinputString does not contain any such code units, let VARtrimmedString be the empty string. 
*0*If neither VARtrimmedString nor any prefix of VARtrimmedString satisfies the syntax of a StrDecimalLiteral (see 7.1.3.1), return NaN. 
*0*Let VARnumberString be the longest prefix of VARtrimmedString, which might be VARtrimmedString itself, that satisfies the syntax of a StrDecimalLiteral. 
*0*Let VARmathFloat be MV of VARnumberString. 
*0*If VARmathFloat=0, then
*1*If the first code unit of VARtrimmedString is the code unit 0x002D (HYPHEN-MINUS), return -0. 
*1*Return +0. 
*0*Return the Number value for VARmathFloat.    

#############  END  ## 305 ###########################
############# BEGIN ## 306 ###########################
ID= 18.2.5
Summary= parseInt ( string, radix )
Description= The parseInt function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading white space in string is ignored. If radix is undefined or 0, it is assumed to be 10 except when the number begins with the code unit pairs 0x or 0X, in which case a radix of 16 is assumed. If radix is 16, the number may also optionally begin with the code unit pairs 0x or 0X.
*0*Let VARinputString be ? FUNCToString(VARstring). 
*0*Let VARS be a newly created substring of VARinputString consisting of the first code unit that is not a StrWhiteSpaceChar and all code units following that code unit. (In other words, remove leading white space.) If VARinputString does not contain any such code unit, let VARS be the empty string. 
*0*Let VARsign be 1. 
*0*If VARS is not empty and the first code unit of VARS is the code unit 0x002D (HYPHEN-MINUS), then
*1*Let VARsign be -1. 
*0*If VARS is not empty and the first code unit of VARS is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from VARS. 
*0*Let VARR be ? FUNCToInt32(VARradix). 
*0*Let VARstripPrefix be true. 
*0*If VARR ≠ 0, then
*1*If VARR &lt; 2 or VARR &gt; 36, return NaN. 
*1*If VARR ≠ 16, then
*2*Let VARstripPrefix be false. 
*0*Else VARR = 0,
*1*Let VARR be 10. 
*0*If VARstripPrefix is true, then
*1*If the length of VARS is at least 2 and the first two code units of VARS are either "0x" or "0X", remove the first two code units from VARS and let VARR be 16. 
*0*If VARS contains a code unit that is not a radix-VARR digit, then
*1*Let VARZ be the substring of VARS consisting of all code units before the first such code unit; otherwise, then
*0*If VARZ is empty, return NaN. 
*0*Let VARmathInt be the mathematical integer value that is represented by VARZ in radix-VARR notation, using the letters A-Z and a-z for digits with values 10 through 35. (However, if VARR is 10 and VARZ contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if VARR is not 2, 4, 8, 10, 16, or 32, then VARmathInt may be an implementation-dependent approximation to the mathematical integer value that is represented by VARZ in radix-VARR notation.) 
*0*If VARmathInt = 0, then
*1*If VARsign = -1, return -0. 
*1*Return +0. 
*0*Let VARnumber be the Number value for VARmathInt. 
*0*Return VARsign × VARnumber.    

#############  END  ## 306 ###########################
############# BEGIN ## 307 ###########################
ID= 18.2.6.1.1
Summary= Runtime Semantics: Encode ( string, unescapedSet )
Description= The encoding and escaping process is described by the abstract operation Encode taking two String arguments string and unescapedSet.
*0*Let VARstrLen be the number of code units in VARstring. 
*0*Let VARR be the empty String. 
*0*Let VARk be 0. 
*0*Repeat,
*1*If VARk equals VARstrLen, return VARR. 
*1*Let VARC be the code unit at index VARk within VARstring. 
*1*If VARC is in VARunescapedSet, then
*2*Let VARS be the String value containing only the code unit VARC. 
*2*Set VARR to the string-concatenation of the previous value of VARR and VARS. 
*1*Else VARC is not in VARunescapedSet,
*2*If VARC is a trailing surrogate, throw a URIError exception. 
*2*If VARC is not a leading surrogate, then
*3*Let VARV be the code point with the same numeric value as code unit VARC. 
*2*Else,
*3*Increase VARk by 1. 
*3*If VARk equals VARstrLen, throw a URIError exception. 
*3*Let VARkChar be the code unit at index VARk within VARstring. 
*3*If VARkChar is not a trailing surrogate, throw a URIError exception. 
*3*Let VARV be FUNCUTF16Decode(VARC, VARkChar). 
*2*Let VAROctets be the List of octets resulting by applying the UTF-8 transformation to VARV. 
*2*For each element VARoctet of VAROctets in List order, do
*3*Let VARS be the string-concatenation of:"%" the String representation of VARoctet, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary 
*3*Set VARR to the string-concatenation of the previous value of VARR and VARS. 
*1*Increase VARk by 1.      

#############  END  ## 307 ###########################
############# BEGIN ## 308 ###########################
ID= 18.2.6.1.2
Summary= Runtime Semantics: Decode ( string, reservedSet )
Description= The unescaping and decoding process is described by the abstract operation Decode taking two String arguments string and reservedSet.
*0*Let VARstrLen be the number of code units in VARstring. 
*0*Let VARR be the empty String. 
*0*Let VARk be 0. 
*0*Repeat,
*1*If VARk equals VARstrLen, return VARR. 
*1*Let VARC be the code unit at index VARk within VARstring. 
*1*If VARC is not the code unit 0x0025 (PERCENT SIGN), then
*2*Let VARS be the String value containing only the code unit VARC. 
*1*Else VARC is the code unit 0x0025 (PERCENT SIGN),
*2*Let VARstart be VARk. 
*2*If VARk + 2 is greater than or equal to VARstrLen, throw a URIError exception. 
*2*If the code units at index (VARk + 1) and (VARk + 2) within VARstring do not represent hexadecimal digits, throw a URIError exception. 
*2*Let VARB be the 8-bit value represented by the two hexadecimal digits at index (VARk + 1) and (VARk + 2). 
*2*Increment VARk by 2. 
*2*If the most significant bit in VARB is 0, then
*3*Let VARC be the code unit whose value is VARB. 
*3*If VARC is not in VARreservedSet, then
*4*Let VARS be the String value containing only the code unit VARC. 
*3*Else VARC is in VARreservedSet,
*4*Let VARS be the substring of VARstring from index VARstart to index VARk inclusive. 
*2*Else the most significant bit in VARB is 1,
*3*Let VARn be the smallest nonnegative integer such that (VARB &lt;&lt; VARn) &amp; 0x80 is equal to 0. 
*3*If VARn equals 1 or VARn is greater than 4, throw a URIError exception. 
*3*Let VAROctets be a List of 8-bit integers of size VARn. 
*3*Set VAROctets[0] to VARB. 
*3*If VARk + (3 × (VARn - 1)) is greater than or equal to VARstrLen, throw a URIError exception. 
*3*Let VARj be 1. 
*3*Repeat, while VARj &lt; VARn
*4*Increment VARk by 1. 
*4*If the code unit at index VARk within VARstring is not the code unit 0x0025 (PERCENT SIGN), throw a URIError exception. 
*4*If the code units at index (VARk + 1) and (VARk + 2) within VARstring do not represent hexadecimal digits, throw a URIError exception. 
*4*Let VARB be the 8-bit value represented by the two hexadecimal digits at index (VARk + 1) and (VARk + 2). 
*4*If the two most significant bits in VARB are not 10, throw a URIError exception. 
*4*Increment VARk by 2. 
*4*Set VAROctets[VARj] to VARB. 
*4*Increment VARj by 1. 
*3*If VAROctets does not contain a valid UTF-8 encoding of a Unicode code point, throw a URIError exception. 
*3*Let VARV be the value obtained by applying the UTF-8 transformation to VAROctets, that is, from a List of octets into a 21-bit value. 
*3*Let VARS be the String value whose elements are, in order, the elements in FUNCUTF16Encoding(VARV). 
*1*Set VARR to the string-concatenation of the previous value of VARR and VARS. 
*1*Increase VARk by 1.      

#############  END  ## 308 ###########################
############# BEGIN ## 309 ###########################
ID= 18.2.6.2
Summary= decodeURI ( encodedURI )
Description= The decodeURI function computes a new version of a URI in which each escape sequence and UTF-8 encoding of the sort that might be introduced by the encodeURI function is replaced with the UTF-16 encoding of the code points that it represents. Escape sequences that could not have been introduced by encodeURI are not replaced.
*0*Let VARuriString be ? FUNCToString(VARencodedURI). 
*0*Let VARreservedURISet be a String containing one instance of each code unit valid in uriReserved plus "#". 
*0*Return ? FUNCDecode(VARuriString, VARreservedURISet).     

#############  END  ## 309 ###########################
############# BEGIN ## 310 ###########################
ID= 18.2.6.3
Summary= decodeURIComponent ( encodedURIComponent )
Description= The decodeURIComponent function computes a new version of a URI in which each escape sequence and UTF-8 encoding of the sort that might be introduced by the encodeURIComponent function is replaced with the UTF-16 encoding of the code points that it represents.
*0*Let VARcomponentString be ? FUNCToString(VARencodedURIComponent). 
*0*Let VARreservedURIComponentSet be the empty String. 
*0*Return ? FUNCDecode(VARcomponentString, VARreservedURIComponentSet).     

#############  END  ## 310 ###########################
############# BEGIN ## 311 ###########################
ID= 18.2.6.4
Summary= encodeURI ( uri )
Description= The encodeURI function computes a new version of a UTF-16 encoded (6.1.4) URI in which each instance of certain code points is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the code points.
*0*Let VARuriString be ? FUNCToString(VARuri). 
*0*Let VARunescapedURISet be a String containing one instance of each code unit valid in uriReserved and uriUnescaped plus "#". 
*0*Return ? FUNCEncode(VARuriString, VARunescapedURISet).     

#############  END  ## 311 ###########################
############# BEGIN ## 312 ###########################
ID= 18.2.6.5
Summary= encodeURIComponent ( uriComponent )
Description= The encodeURIComponent function computes a new version of a UTF-16 encoded (6.1.4) URI in which each instance of certain code points is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the code point.
*0*Let VARcomponentString be ? FUNCToString(VARuriComponent). 
*0*Let VARunescapedURIComponentSet be a String containing one instance of each code unit valid in uriUnescaped. 
*0*Return ? FUNCEncode(VARcomponentString, VARunescapedURIComponentSet).     

#############  END  ## 312 ###########################
############# BEGIN ## 313 ###########################
ID= 19.1.1.1
Summary= Object ( [ value ] )
Description= When Object function is called with optional argument value, the following steps are taken:
*0*If NewTarget is neither undefined nor the active function, then
*1*Return ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%ObjectPrototype%"). 
*0*If VARvalue is null, undefined or not supplied, return FUNCObjectCreate(%ObjectPrototype%). 
*0*Return ! FUNCToObject(VARvalue).     

#############  END  ## 313 ###########################
############# BEGIN ## 314 ###########################
ID= 19.1.2.1
Summary= Object.assign ( target, ...sources )
Description= The assign function is used to copy the values of all of the enumerable own properties from one or more source objects to a target object. When the assign function is called, the following steps are taken:
*0*Let VARto be ? FUNCToObject(VARtarget). 
*0*If only one argument was passed, return VARto. 
*0*Let VARsources be the List of argument values starting with the second argument. 
*0*For each element VARnextSource of VARsources, in ascending index order, do
*1*If VARnextSource is undefined or null, then
*2*Let VARkeys be a new empty List. 
*1*Else,
*2*Let VARfrom be ! FUNCToObject(VARnextSource). 
*2*Let VARkeys be ? VARfrom.[[VAROwnPropertyKeys]](). 
*1*For each element VARnextKey of VARkeys in List order, do
*2*Let VARdesc be ? VARfrom.[[VARGetOwnProperty]](VARnextKey). 
*2*If VARdesc is not undefined and VARdesc.[[VAREnumerable]] is true, then
*3*Let VARpropValue be ? FUNCGet(VARfrom, VARnextKey). 
*3*Perform ? FUNCSet(VARto, VARnextKey, VARpropValue, true). 
*0*Return VARto.     

#############  END  ## 314 ###########################
############# BEGIN ## 315 ###########################
ID= 19.1.2.2
Summary= Object.create ( O, Properties )
Description= The create function creates a new object with a specified prototype. When the create function is called, the following steps are taken:
*0*If FUNCType(VARO) is neither Object nor Null, throw a TypeError exception. 
*0*Let VARobj be FUNCObjectCreate(VARO). 
*0*If VARProperties is not undefined, then
*1*Return ? FUNCObjectDefineProperties(VARobj, VARProperties). 
*0*Return VARobj.     

#############  END  ## 315 ###########################
############# BEGIN ## 316 ###########################
ID= 19.1.2.3
Summary= Object.defineProperties ( O, Properties )
Description= The defineProperties function is used to add own properties and/or update the attributes of existing own properties of an object. When the defineProperties function is called, the following steps are taken:
*0*Return ? FUNCObjectDefineProperties(VARO, VARProperties).     

#############  END  ## 316 ###########################
############# BEGIN ## 317 ###########################
ID= 19.1.2.3.1
Summary= Runtime Semantics: ObjectDefineProperties ( O, Properties )
Description= The abstract operation ObjectDefineProperties with arguments O and Properties performs the following steps:
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*Let VARprops be ? FUNCToObject(VARProperties). 
*0*Let VARkeys be ? VARprops.[[VAROwnPropertyKeys]](). 
*0*Let VARdescriptors be a new empty List. 
*0*For each element VARnextKey of VARkeys in List order, do
*1*Let VARpropDesc be ? VARprops.[[VARGetOwnProperty]](VARnextKey). 
*1*If VARpropDesc is not undefined and VARpropDesc.[[VAREnumerable]] is true, then
*2*Let VARdescObj be ? FUNCGet(VARprops, VARnextKey). 
*2*Let VARdesc be ? FUNCToPropertyDescriptor(VARdescObj). 
*2*Append the pair (a two element List) consisting of VARnextKey and VARdesc to the end of VARdescriptors. 
*0*For each VARpair from VARdescriptors in list order, do
*1*Let VARP be the first element of VARpair. 
*1*Let VARdesc be the second element of VARpair. 
*1*Perform ? FUNCDefinePropertyOrThrow(VARO, VARP, VARdesc). 
*0*Return VARO.      

#############  END  ## 317 ###########################
############# BEGIN ## 318 ###########################
ID= 19.1.2.4
Summary= Object.defineProperty ( O, P, Attributes )
Description= The defineProperty function is used to add an own property and/or update the attributes of an existing own property of an object. When the defineProperty function is called, the following steps are taken:
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*Let VARkey be ? FUNCToPropertyKey(VARP). 
*0*Let VARdesc be ? FUNCToPropertyDescriptor(VARAttributes). 
*0*Perform ? FUNCDefinePropertyOrThrow(VARO, VARkey, VARdesc). 
*0*Return VARO.     

#############  END  ## 318 ###########################
############# BEGIN ## 319 ###########################
ID= 19.1.2.5
Summary= Object.entries ( O )
Description= When the entries function is called with argument O, the following steps are taken:
*0*Let VARobj be ? FUNCToObject(VARO). 
*0*Let VARnameList be ? FUNCEnumerableOwnPropertyNames(VARobj, "key+value"). 
*0*Return FUNCCreateArrayFromList(VARnameList).     

#############  END  ## 319 ###########################
############# BEGIN ## 320 ###########################
ID= 19.1.2.6
Summary= Object.freeze ( O )
Description= When the freeze function is called, the following steps are taken:
*0*If FUNCType(VARO) is not Object, return VARO. 
*0*Let VARstatus be ? FUNCSetIntegrityLevel(VARO, "frozen"). 
*0*If VARstatus is false, throw a TypeError exception. 
*0*Return VARO.     

#############  END  ## 320 ###########################
############# BEGIN ## 321 ###########################
ID= 19.1.2.7
Summary= Object.getOwnPropertyDescriptor ( O, P )
Description= When the getOwnPropertyDescriptor function is called, the following steps are taken:
*0*Let VARobj be ? FUNCToObject(VARO). 
*0*Let VARkey be ? FUNCToPropertyKey(VARP). 
*0*Let VARdesc be ? VARobj.[[VARGetOwnProperty]](VARkey). 
*0*Return FUNCFromPropertyDescriptor(VARdesc).     

#############  END  ## 321 ###########################
############# BEGIN ## 322 ###########################
ID= 19.1.2.8
Summary= Object.getOwnPropertyDescriptors ( O )
Description= When the getOwnPropertyDescriptors function is called, the following steps are taken:
*0*Let VARobj be ? FUNCToObject(VARO). 
*0*Let VARownKeys be ? VARobj.[[VAROwnPropertyKeys]](). 
*0*Let VARdescriptors be ! FUNCObjectCreate(%ObjectPrototype%). 
*0*For each element VARkey of VARownKeys in List order, do
*1*Let VARdesc be ? VARobj.[[VARGetOwnProperty]](VARkey). 
*1*Let VARdescriptor be ! FUNCFromPropertyDescriptor(VARdesc). 
*1*If VARdescriptor is not undefined, perform ! FUNCCreateDataProperty(VARdescriptors, VARkey, VARdescriptor). 
*0*Return VARdescriptors.     

#############  END  ## 322 ###########################
############# BEGIN ## 323 ###########################
ID= 19.1.2.9
Summary= Object.getOwnPropertyNames ( O )
Description= When the getOwnPropertyNames function is called, the following steps are taken:
*0*Return ? FUNCGetOwnPropertyKeys(VARO, String).     

#############  END  ## 323 ###########################
############# BEGIN ## 324 ###########################
ID= 19.1.2.10
Summary= Object.getOwnPropertySymbols ( O )
Description= When the getOwnPropertySymbols function is called with argument O, the following steps are taken:
*0*Return ? FUNCGetOwnPropertyKeys(VARO, Symbol).     

#############  END  ## 324 ###########################
############# BEGIN ## 325 ###########################
ID= 19.1.2.10.1
Summary= Runtime Semantics: GetOwnPropertyKeys ( O, Type )
Description= The abstract operation GetOwnPropertyKeys is called with arguments O and Type where O is an Object and Type is one of the ECMAScript specification types String or Symbol. The following steps are taken:
*0*Let VARobj be ? FUNCToObject(VARO). 
*0*Let VARkeys be ? VARobj.[[VAROwnPropertyKeys]](). 
*0*Let VARnameList be a new empty List. 
*0*For each element VARnextKey of VARkeys in List order, do
*1*If FUNCType(VARnextKey) is VARType, then
*2*Append VARnextKey as the last element of VARnameList. 
*0*Return FUNCCreateArrayFromList(VARnameList).      

#############  END  ## 325 ###########################
############# BEGIN ## 326 ###########################
ID= 19.1.2.11
Summary= Object.getPrototypeOf ( O )
Description= When the getPrototypeOf function is called with argument O, the following steps are taken:
*0*Let VARobj be ? FUNCToObject(VARO). 
*0*Return ? VARobj.[[VARGetPrototypeOf]]().     

#############  END  ## 326 ###########################
############# BEGIN ## 327 ###########################
ID= 19.1.2.12
Summary= Object.is ( value1, value2 )
Description= When the is function is called with arguments value1 and value2, the following steps are taken:
*0*Return FUNCSameValue(VARvalue1, VARvalue2).     

#############  END  ## 327 ###########################
############# BEGIN ## 328 ###########################
ID= 19.1.2.13
Summary= Object.isExtensible ( O )
Description= When the isExtensible function is called with argument O, the following steps are taken:
*0*If FUNCType(VARO) is not Object, return false. 
*0*Return ? FUNCIsExtensible(VARO).     

#############  END  ## 328 ###########################
############# BEGIN ## 329 ###########################
ID= 19.1.2.14
Summary= Object.isFrozen ( O )
Description= When the isFrozen function is called with argument O, the following steps are taken:
*0*If FUNCType(VARO) is not Object, return true. 
*0*Return ? FUNCTestIntegrityLevel(VARO, "frozen").     

#############  END  ## 329 ###########################
############# BEGIN ## 330 ###########################
ID= 19.1.2.15
Summary= Object.isSealed ( O )
Description= When the isSealed function is called with argument O, the following steps are taken:
*0*If FUNCType(VARO) is not Object, return true. 
*0*Return ? FUNCTestIntegrityLevel(VARO, "sealed").     

#############  END  ## 330 ###########################
############# BEGIN ## 331 ###########################
ID= 19.1.2.16
Summary= Object.keys ( O )
Description= When the keys function is called with argument O, the following steps are taken:
*0*Let VARobj be ? FUNCToObject(VARO). 
*0*Let VARnameList be ? FUNCEnumerableOwnPropertyNames(VARobj, "key"). 
*0*Return FUNCCreateArrayFromList(VARnameList).     

#############  END  ## 331 ###########################
############# BEGIN ## 332 ###########################
ID= 19.1.2.17
Summary= Object.preventExtensions ( O )
Description= When the preventExtensions function is called, the following steps are taken:
*0*If FUNCType(VARO) is not Object, return VARO. 
*0*Let VARstatus be ? VARO.[[VARPreventExtensions]](). 
*0*If VARstatus is false, throw a TypeError exception. 
*0*Return VARO.     

#############  END  ## 332 ###########################
############# BEGIN ## 333 ###########################
ID= 19.1.2.19
Summary= Object.seal ( O )
Description= When the seal function is called, the following steps are taken:
*0*If FUNCType(VARO) is not Object, return VARO. 
*0*Let VARstatus be ? FUNCSetIntegrityLevel(VARO, "sealed"). 
*0*If VARstatus is false, throw a TypeError exception. 
*0*Return VARO.     

#############  END  ## 333 ###########################
############# BEGIN ## 334 ###########################
ID= 19.1.2.20
Summary= Object.setPrototypeOf ( O, proto )
Description= When the setPrototypeOf function is called with arguments O and proto, the following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(VARO). 
*0*If FUNCType(VARproto) is neither Object nor Null, throw a TypeError exception. 
*0*If FUNCType(VARO) is not Object, return VARO. 
*0*Let VARstatus be ? VARO.[[VARSetPrototypeOf]](VARproto). 
*0*If VARstatus is false, throw a TypeError exception. 
*0*Return VARO.     

#############  END  ## 334 ###########################
############# BEGIN ## 335 ###########################
ID= 19.1.2.21
Summary= Object.values ( O )
Description= When the values function is called with argument O, the following steps are taken:
*0*Let VARobj be ? FUNCToObject(VARO). 
*0*Let VARnameList be ? FUNCEnumerableOwnPropertyNames(VARobj, "value"). 
*0*Return FUNCCreateArrayFromList(VARnameList).     

#############  END  ## 335 ###########################
############# BEGIN ## 336 ###########################
ID= 19.1.3.2
Summary= Object.prototype.hasOwnProperty ( V )
Description= When the hasOwnProperty method is called with argument V, the following steps are taken:
*0*Let VARP be ? FUNCToPropertyKey(VARV). 
*0*Let VARO be ? FUNCToObject(this value). 
*0*Return ? FUNCHasOwnProperty(VARO, VARP).     

#############  END  ## 336 ###########################
############# BEGIN ## 337 ###########################
ID= 19.1.3.3
Summary= Object.prototype.isPrototypeOf ( V )
Description= When the isPrototypeOf method is called with argument V, the following steps are taken:
*0*If FUNCType(VARV) is not Object, return false. 
*0*Let VARO be ? FUNCToObject(this value). 
*0*Repeat,
*1*Let VARV be ? VARV.[[VARGetPrototypeOf]](). 
*1*If VARV is null, return false. 
*1*If FUNCSameValue(VARO, VARV) is true, return true.     

#############  END  ## 337 ###########################
############# BEGIN ## 338 ###########################
ID= 19.1.3.4
Summary= Object.prototype.propertyIsEnumerable ( V )
Description= When the propertyIsEnumerable method is called with argument V, the following steps are taken:
*0*Let VARP be ? FUNCToPropertyKey(VARV). 
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARdesc be ? VARO.[[VARGetOwnProperty]](VARP). 
*0*If VARdesc is undefined, return false. 
*0*Return VARdesc.[[VAREnumerable]].     

#############  END  ## 338 ###########################
############# BEGIN ## 339 ###########################
ID= 19.1.3.5
Summary= Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )
Description= When the toLocaleString method is called, the following steps are taken:
*0*Let VARO be the this value. 
*0*Return ? FUNCInvoke(VARO, "toString").     

#############  END  ## 339 ###########################
############# BEGIN ## 340 ###########################
ID= 19.1.3.6
Summary= Object.prototype.toString ( )
Description= When the toString method is called, the following steps are taken:
*0*If the this value is undefined, return "[object Undefined]". 
*0*If the this value is null, return "[object Null]". 
*0*Let VARO be ! FUNCToObject(this value). 
*0*Let VARisArray be ? FUNCIsArray(VARO). 
*0*If VARisArray is true, then
*1*Let VARbuiltinTag be "Array". 
*0*Else,
*1*if VARO is a String exotic object, then
*2*Let VARbuiltinTag be "String".
*0*Else,
*1*if VARO has a [[VARVARParameterMap]] internal slot, then
*2*Let VARbuiltinTag be "Arguments".
*0*Else,
*1*if VARO has a [[VARVARCall]] internal method, then
*2*Let VARbuiltinTag be "Function".
*0*Else,
*1*if VARO has an [[VARVARErrorData]] internal slot, then
*2*Let VARbuiltinTag be "Error".
*0*Else,
*1*if VARO has a [[VARVARBooleanData]] internal slot, then
*2*Let VARbuiltinTag be "Boolean".
*0*Else,
*1*if VARO has a [[VARVARNumberData]] internal slot, then
*2*Let VARbuiltinTag be "Number".
*0*Else,
*1*if VARO has a [[VARVARDateValue]] internal slot, then
*2*Let VARbuiltinTag be "Date".
*0*Else,
*1*if VARO has a [[VARVARRegExpMatcher]] internal slot, then
*2*Let VARbuiltinTag be "RegExp".
*0*Else,
*1*let VARbuiltinTag be "Object".
*0*Let VARtag be ? FUNCGet(VARO, @@toStringTag). 
*0*If FUNCType(VARtag) is not String, then
*1*Let VARtag be VARbuiltinTag. 
*0*Return the string-concatenation of "[object ", VARtag, and "]".     

#############  END  ## 340 ###########################
############# BEGIN ## 341 ###########################
ID= 19.1.3.7
Summary= Object.prototype.valueOf ( )
Description= When the valueOf method is called, the following steps are taken:
*0*Return ? FUNCToObject(this value).     

#############  END  ## 341 ###########################
############# BEGIN ## 342 ###########################
ID= 19.2.1.1
Summary= Function ( p1, p2, … , pn, body )
Description= The last argument specifies the body (executable code) of a function; any preceding arguments specify formal parameters.
*0*Let VARC be the active function object. 
*0*Let VARargs be the VARargumentsList that was passed to this function by [[VARCall]] or [[VARConstruct]]. 
*0*Return ? FUNCCreateDynamicFunction(VARC, NewTarget, "normal", VARargs).     

#############  END  ## 342 ###########################
############# BEGIN ## 343 ###########################
ID= 19.2.1.1.1
Summary= Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )
Description= The abstract operation CreateDynamicFunction is called with arguments constructor, newTarget, kind, and args. constructor is the constructor function that is performing this action, newTarget is the constructor that new was initially applied to, kind is either "normal", "generator", "async", or "async generator", and args is a List containing the actual argument values that were passed to constructor. The following steps are taken:
*0*Assert: The execution context stack has at least two elements. 
*0*Let VARcallerContext be the second to top element of the execution context stack. 
*0*Let VARcallerRealm be VARcallerContext's Realm. 
*0*Let VARcalleeRealm be the current Realm Record. 
*0*Perform ? FUNCHostEnsureCanCompileStrings(VARcallerRealm, VARcalleeRealm). 
*0*If VARnewTarget is undefined, set VARnewTarget to VARconstructor. 
*0*If VARkind is "normal", then
*1*Let VARgoal be the grammar symbol FunctionBody[~Yield, ~Await]. 
*1*Let VARparameterGoal be the grammar symbol FormalParameters[~Yield, ~Await]. 
*1*Let VARfallbackProto be "%FunctionPrototype%". 
*0*Else if VARkind is "generator", then
*1*Let VARgoal be the grammar symbol GeneratorBody. 
*1*Let VARparameterGoal be the grammar symbol FormalParameters[+Yield, ~Await]. 
*1*Let VARfallbackProto be "%Generator%". 
*0*Else if VARkind is "async", then
*1*Assert: VARkind is "async". 
*1*Let VARgoal be the grammar symbol AsyncFunctionBody. 
*1*Let VARparameterGoal be the grammar symbol FormalParameters[~Yield, +Await]. 
*1*Let VARfallbackProto be "%AsyncFunctionPrototype%". 
*0*Else,
*1*Assert: VARkind is "async generator". 
*1*Let VARgoal be the grammar symbol AsyncGeneratorBody. 
*1*Let VARparameterGoal be the grammar symbol FormalParameters[+Yield, +Await]. 
*1*Let VARfallbackProto be "%AsyncGenerator%". 
*0*Let VARargCount be the number of elements in VARargs. 
*0*Let VARP be the empty String. 
*0*If VARargCount = 0, then
*1*Let VARbodyText be the empty String. 
*0*Else,
*1*if VARargCount = 1, then
*2*Let VARbodyText be VARargs[0].
*0*Else VARargCount &gt; 1,
*1*Let VARfirstArg be VARargs[0]. 
*1*Set VARP to ? FUNCToString(VARfirstArg). 
*1*Let VARk be 1. 
*1*Repeat, while VARk &lt; VARargCount-1
*2*Let VARnextArg be VARargs[VARk]. 
*2*Let VARnextArgString be ? FUNCToString(VARnextArg). 
*2*Set VARP to the string-concatenation of the previous value of VARP, "," (a comma), and VARnextArgString. 
*2*Increase VARk by 1. 
*1*Let VARbodyText be VARargs[VARk]. 
*0*Set VARbodyText to ? FUNCToString(VARbodyText). 
*0*Let VARparameters be the result of parsing VARP, interpreted as UTF-16 encoded Unicode text as described in 6.1.4, using VARparameterGoal as the goal symbol. Throw a SyntaxError exception if the parse fails. 
*0*Let VARbody be the result of parsing VARbodyText, interpreted as UTF-16 encoded Unicode text as described in 6.1.4, using VARgoal as the goal symbol. Throw a SyntaxError exception if the parse fails. 
*0*Let VARstrict be ContainsUseStrict of VARbody. 
*0*If any static semantics errors are detected for VARparameters or VARbody, throw a SyntaxError or a ReferenceError exception, depending on the type of the error. If VARstrict is true, the Early Error rules for UniqueFormalParameters:FormalParameters are applied. Parsing and early error detection may be interweaved in an implementation-dependent manner. 
*0*If VARstrict is true and IsSimpleParameterList of VARparameters is false, throw a SyntaxError exception. 
*0*If any element of the BoundNames of VARparameters also occurs in the LexicallyDeclaredNames of VARbody, throw a SyntaxError exception. 
*0*If VARbody Contains SuperCall is true, throw a SyntaxError exception. 
*0*If VARparameters Contains SuperCall is true, throw a SyntaxError exception. 
*0*If VARbody Contains SuperProperty is true, throw a SyntaxError exception. 
*0*If VARparameters Contains SuperProperty is true, throw a SyntaxError exception. 
*0*If VARkind is "generator" or "async generator", then
*1*If VARparameters Contains YieldExpression is true, throw a SyntaxError exception. 
*0*If VARkind is "async" or "async generator", then
*1*If VARparameters Contains AwaitExpression is true, throw a SyntaxError exception. 
*0*If VARstrict is true, then
*1*If BoundNames of VARparameters contains any duplicate elements, throw a SyntaxError exception. 
*0*Let VARproto be ? FUNCGetPrototypeFromConstructor(VARnewTarget, VARfallbackProto). 
*0*Let VARF be FUNCFunctionAllocate(VARproto, VARstrict, VARkind). 
*0*Let VARrealmF be VARF.[[VARRealm]]. 
*0*Let VARscope be VARrealmF.[[VARGlobalEnv]]. 
*0*Perform FUNCFunctionInitialize(VARF, Normal, VARparameters, VARbody, VARscope). 
*0*If VARkind is "generator", then
*1*Let VARprototype be FUNCObjectCreate(%GeneratorPrototype%). 
*1*Perform FUNCDefinePropertyOrThrow(VARF, "prototype", PropertyDescriptor { [[VARValue]]: VARprototype, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: false }). 
*0*Else if VARkind is "async generator", then
*1*Let VARprototype be FUNCObjectCreate(%AsyncGeneratorPrototype%). 
*1*Perform FUNCDefinePropertyOrThrow(VARF, "prototype", PropertyDescriptor { [[VARValue]]: VARprototype, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: false }). 
*0*Else,
*1*if VARkind is "normal", perform FUNCMakeConstructor(VARF).
*0*NOTE: Async functions are not constructable and do not have a [[VARConstruct]] internal method or a "prototype" property. 
*0*Perform FUNCSetFunctionName(VARF, "anonymous"). 
*0*Return VARF.      

#############  END  ## 343 ###########################
############# BEGIN ## 344 ###########################
ID= 19.2.3.1
Summary= Function.prototype.apply ( thisArg, argArray )
Description= When the apply method is called on an object func with arguments thisArg and argArray, the following steps are taken:
*0*If FUNCIsCallable(VARfunc) is false, throw a TypeError exception. 
*0*If VARargArray is undefined or null, then
*1*Perform FUNCPrepareForTailCall(). 
*1*Return ? FUNCCall(VARfunc, VARthisArg). 
*0*Let VARargList be ? FUNCCreateListFromArrayLike(VARargArray). 
*0*Perform FUNCPrepareForTailCall(). 
*0*Return ? FUNCCall(VARfunc, VARthisArg, VARargList).     

#############  END  ## 344 ###########################
############# BEGIN ## 345 ###########################
ID= 19.2.3.2
Summary= Function.prototype.bind ( thisArg, ...args )
Description= When the bind method is called with argument thisArg and zero or more args, it performs the following steps:
*0*Let VARTarget be the this value. 
*0*If FUNCIsCallable(VARTarget) is false, throw a TypeError exception. 
*0*Let VARargs be a new (possibly empty) List consisting of all of the argument values provided after VARthisArg in order. 
*0*Let VARF be ? FUNCBoundFunctionCreate(VARTarget, VARthisArg, VARargs). 
*0*Let VARtargetHasLength be ? FUNCHasOwnProperty(VARTarget, "length"). 
*0*If VARtargetHasLength is true, then
*1*Let VARtargetLen be ? FUNCGet(VARTarget, "length"). 
*1*If FUNCType(VARtargetLen) is not Number, then
*2*Let VARL be 0. 
*1*Else,
*2*Let VARtargetLen be FUNCToInteger(VARtargetLen). 
*2*Let VARL be the larger of 0 and the result of VARtargetLen minus the number of elements of VARargs. 
*0*Else,
*1*let VARL be 0.
*0*Perform ! FUNCSetFunctionLength(VARF, VARL). 
*0*Let VARtargetName be ? FUNCGet(VARTarget, "name"). 
*0*If FUNCType(VARtargetName) is not String, then
*1*Let VARtargetName be the empty string. 
*0*Perform FUNCSetFunctionName(VARF, VARtargetName, "bound"). 
*0*Return VARF.     

#############  END  ## 345 ###########################
############# BEGIN ## 346 ###########################
ID= 19.2.3.3
Summary= Function.prototype.call ( thisArg, ...args )
Description= When the call method is called on an object func with argument, thisArg and zero or more args, the following steps are taken:
*0*If FUNCIsCallable(VARfunc) is false, throw a TypeError exception. 
*0*Let VARargList be a new empty List. 
*0*If this method was called with more than one argument, then in left to right order, starting with the second argument, append each argument as the last element of VARargList. 
*0*Perform FUNCPrepareForTailCall(). 
*0*Return ? FUNCCall(VARfunc, VARthisArg, VARargList).     

#############  END  ## 346 ###########################
############# BEGIN ## 347 ###########################
ID= 19.2.3.5
Summary= Function.prototype.toString ( )
Description= When the toString method is called on an object func, the following steps are taken:
*0*If VARfunc is a Bound Function exotic object, then
*1*Return an implementation-dependent String source code representation of VARfunc. The representation must conform to the rules below. It is implementation-dependent whether the representation includes bound function information or information about the target function. 
*0*If FUNCType(VARfunc) is Object and is either a built-in function object or has an [[VARECMAScriptCode]] internal slot, then
*1*Return an implementation-dependent String source code representation of VARfunc. The representation must conform to the rules below. 
*0*Throw a TypeError exception.     

#############  END  ## 347 ###########################
############# BEGIN ## 348 ###########################
ID= 19.2.3.6
Summary= Function.prototype [ @@hasInstance ] ( V )
Description= When the @@hasInstance method of an object F is called with value V, the following steps are taken:
*0*Let VARF be the this value. 
*0*Return ? FUNCOrdinaryHasInstance(VARF, VARV).     

#############  END  ## 348 ###########################
############# BEGIN ## 349 ###########################
ID= 19.3.1.1
Summary= Boolean ( value )
Description= When Boolean is called with argument value, the following steps are taken:
*0*Let VARb be FUNCToBoolean(VARvalue). 
*0*If NewTarget is undefined, return VARb. 
*0*Let VARO be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%BooleanPrototype%", « [[VARBooleanData]] »). 
*0*Set VARO.[[VARBooleanData]] to VARb. 
*0*Return VARO.     

#############  END  ## 349 ###########################
############# BEGIN ## 350 ###########################
ID= 19.3.3.2
Summary= Boolean.prototype.toString ( )
Description= The following steps are taken:
*0*Let VARb be ? thisBooleanValue(this value). 
*0*If VARb is true, return "true"
*0*Else,
*1*return "false".

#############  END  ## 350 ###########################
############# BEGIN ## 351 ###########################
ID= 19.3.3.3
Summary= Boolean.prototype.valueOf ( )
Description= The following steps are taken:
*0*Return ? thisBooleanValue(this value).     

#############  END  ## 351 ###########################
############# BEGIN ## 352 ###########################
ID= 19.4.1.1
Summary= Symbol ( [ description ] )
Description= When Symbol is called with optional argument description, the following steps are taken:
*0*If NewTarget is not undefined, throw a TypeError exception. 
*0*If VARdescription is undefined, then
*1*Let VARdescString be undefined. 
*0*Else,
*1*let VARdescString be ? FUNCToString(VARdescription).
*0*Return a new unique Symbol value whose [[VARDescription]] value is VARdescString.     

#############  END  ## 352 ###########################
############# BEGIN ## 353 ###########################
ID= 19.4.2.2
Summary= Symbol.for ( key )
Description= When Symbol.for is called with argument key it performs the following steps:
*0*Let VARstringKey be ? FUNCToString(VARkey). 
*0*For each element VARe of the GlobalSymbolRegistry List, do
*1*If FUNCSameValue(VARe.[[VARKey]], VARstringKey) is true, return VARe.[[VARSymbol]]. 
*0*Assert: GlobalSymbolRegistry does not currently contain an entry for VARstringKey. 
*0*Let VARnewSymbol be a new unique Symbol value whose [[VARDescription]] value is VARstringKey. 
*0*Append the Record { [[VARKey]]: VARstringKey, [[VARSymbol]]: VARnewSymbol } to the GlobalSymbolRegistry List. 
*0*Return VARnewSymbol.     

#############  END  ## 353 ###########################
############# BEGIN ## 354 ###########################
ID= 19.4.2.6
Summary= Symbol.keyFor ( sym )
Description= When Symbol.keyFor is called with argument sym it performs the following steps:
*0*If FUNCType(VARsym) is not Symbol, throw a TypeError exception. 
*0*For each element VARe of the GlobalSymbolRegistry List (see 19.4.2.2), do
*1*If FUNCSameValue(VARe.[[VARSymbol]], VARsym) is true, return VARe.[[VARKey]]. 
*0*Assert: GlobalSymbolRegistry does not currently contain an entry for VARsym. 
*0*Return undefined.     

#############  END  ## 354 ###########################
############# BEGIN ## 355 ###########################
ID= 19.4.3.2
Summary= Symbol.prototype.toString ( )
Description= The following steps are taken:
*0*Let VARsym be ? FUNCthisSymbolValue(this value). 
*0*Return FUNCSymbolDescriptiveString(VARsym).     

#############  END  ## 355 ###########################
############# BEGIN ## 356 ###########################
ID= 19.4.3.2.1
Summary= Runtime Semantics: SymbolDescriptiveString ( sym )
Description= When the abstract operation SymbolDescriptiveString is called with argument sym, the following steps are taken:
*0*Assert: FUNCType(VARsym) is Symbol. 
*0*Let VARdesc be VARsym's [[VARDescription]] value. 
*0*If VARdesc is undefined, then
*1*Let VARdesc be the empty string. 
*0*Assert: FUNCType(VARdesc) is String. 
*0*Return the string-concatenation of "Symbol(", VARdesc, and ")".      

#############  END  ## 356 ###########################
############# BEGIN ## 357 ###########################
ID= 19.4.3.3
Summary= Symbol.prototype.valueOf ( )
Description= The following steps are taken:
*0*Return ? FUNCthisSymbolValue(this value).     

#############  END  ## 357 ###########################
############# BEGIN ## 358 ###########################
ID= 19.4.3.4
Summary= Symbol.prototype [ @@toPrimitive ] ( hint )
Description= This function is called by ECMAScript language operators to convert a Symbol object to a primitive value. The allowed values for hint are "default", "number", and "string".
*0*Return ? FUNCthisSymbolValue(this value).     

#############  END  ## 358 ###########################
############# BEGIN ## 359 ###########################
ID= 19.5.1.1
Summary= Error ( message )
Description= When the Error function is called with argument message, the following steps are taken:
*0*If NewTarget is undefined, then
*1*Let VARnewTarget be the active function object
*0*Else,
*1*let VARnewTarget be NewTarget.
*0*Let VARO be ? FUNCOrdinaryCreateFromConstructor(VARnewTarget, "%ErrorPrototype%", « [[VARErrorData]] »). 
*0*If VARmessage is not undefined, then
*1*Let VARmsg be ? FUNCToString(VARmessage). 
*1*Let VARmsgDesc be the PropertyDescriptor { [[VARValue]]: VARmsg, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: true }. 
*1*Perform ! FUNCDefinePropertyOrThrow(VARO, "message", VARmsgDesc). 
*0*Return VARO.     

#############  END  ## 359 ###########################
############# BEGIN ## 360 ###########################
ID= 19.5.3.4
Summary= Error.prototype.toString ( )
Description= The following steps are taken:
*0*Let VARO be the this value. 
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*Let VARname be ? FUNCGet(VARO, "name"). 
*0*If VARname is undefined, then
*1*Let VARname be "Error"; otherwise let VARname be ? FUNCToString(VARname). 
*0*Let VARmsg be ? FUNCGet(VARO, "message"). 
*0*If VARmsg is undefined, then
*1*Let VARmsg be the empty String; otherwise let VARmsg be ? FUNCToString(VARmsg). 
*0*If VARname is the empty String, return VARmsg. 
*0*If VARmsg is the empty String, return VARname. 
*0*Return the string-concatenation of VARname, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and VARmsg.     

#############  END  ## 360 ###########################
############# BEGIN ## 361 ###########################
ID= 19.5.6.1.1
Summary= NativeError ( message )
Description= When a NativeError function is called with argument message, the following steps are taken:
*0*If NewTarget is undefined, then
*1*Let VARnewTarget be the active function object
*0*Else,
*1*let VARnewTarget be NewTarget.
*0*Let VARO be ? FUNCOrdinaryCreateFromConstructor(VARnewTarget, "%VARNativeErrorPrototype%", « [[VARErrorData]] »). 
*0*If VARmessage is not undefined, then
*1*Let VARmsg be ? FUNCToString(VARmessage). 
*1*Let VARmsgDesc be the PropertyDescriptor { [[VARValue]]: VARmsg, [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: true }. 
*1*Perform ! FUNCDefinePropertyOrThrow(VARO, "message", VARmsgDesc). 
*0*Return VARO.      

#############  END  ## 361 ###########################
############# BEGIN ## 362 ###########################
ID= 20.1.1.1
Summary= Number ( value )
Description= When Number is called with argument value, the following steps are taken:
*0*If no arguments were passed to this function invocation, then
*1*Let VARn be +0. 
*0*Else,
*1*let VARn be ? FUNCToNumber(VARvalue).
*0*If NewTarget is undefined, return VARn. 
*0*Let VARO be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%NumberPrototype%", « [[VARNumberData]] »). 
*0*Set VARO.[[VARNumberData]] to VARn. 
*0*Return VARO.     

#############  END  ## 362 ###########################
############# BEGIN ## 363 ###########################
ID= 20.1.2.2
Summary= Number.isFinite ( number )
Description= When Number.isFinite is called with one argument number, the following steps are taken:
*0*If FUNCType(VARnumber) is not Number, return false. 
*0*If VARnumber is NaN, +∞, or -∞, return false. 
*0*Otherwise, return true.     

#############  END  ## 363 ###########################
############# BEGIN ## 364 ###########################
ID= 20.1.2.3
Summary= Number.isInteger ( number )
Description= When Number.isInteger is called with one argument number, the following steps are taken:
*0*If FUNCType(VARnumber) is not Number, return false. 
*0*If VARnumber is NaN, +∞, or -∞, return false. 
*0*Let VARinteger be FUNCToInteger(VARnumber). 
*0*If VARinteger is not equal to VARnumber, return false. 
*0*Otherwise, return true.     

#############  END  ## 364 ###########################
############# BEGIN ## 365 ###########################
ID= 20.1.2.4
Summary= Number.isNaN ( number )
Description= When Number.isNaN is called with one argument number, the following steps are taken:
*0*If FUNCType(VARnumber) is not Number, return false. 
*0*If VARnumber is NaN, return true. 
*0*Otherwise, return false.     

#############  END  ## 365 ###########################
############# BEGIN ## 366 ###########################
ID= 20.1.2.5
Summary= Number.isSafeInteger ( number )
Description= When Number.isSafeInteger is called with one argument number, the following steps are taken:
*0*If FUNCType(VARnumber) is not Number, return false. 
*0*If VARnumber is NaN, +∞, or -∞, return false. 
*0*Let VARinteger be FUNCToInteger(VARnumber). 
*0*If VARinteger is not equal to VARnumber, return false. 
*0*If abs(VARinteger) ≤ 2--EXP0--53--EXP1---1, return true. 
*0*Otherwise, return false.     

#############  END  ## 366 ###########################
############# BEGIN ## 367 ###########################
ID= 20.1.3.2
Summary= Number.prototype.toExponential ( fractionDigits )
Description= Return a String containing this Number value represented in decimal exponential notation with one digit before the significand's decimal point and fractionDigits digits after the significand's decimal point. If fractionDigits is undefined, include as many significand digits as necessary to uniquely specify the Number (just like in ToString except that in this case the Number is always output in exponential notation). Specifically, perform the following steps:
*0*Let VARx be ? FUNCthisNumberValue(this value). 
*0*Let VARf be ? FUNCToInteger(VARfractionDigits). 
*0*Assert: VARf is 0, when VARfractionDigits is undefined. 
*0*If VARx is NaN, return the String "NaN". 
*0*Let VARs be the empty String. 
*0*If VARx &lt; 0, then
*1*Let VARs be "-". 
*1*Let VARx be -VARx. 
*0*If VARx = +∞, then
*1*Return the string-concatenation of VARs and "Infinity". 
*0*If VARf &lt; 0 or VARf &gt; 100, throw a RangeError exception. 
*0*If VARx = 0, then
*1*Let VARm be the String value consisting of VARf+1 occurrences of the code unit 0x0030 (DIGIT ZERO). 
*1*Let VARe be 0. 
*0*Else VARx ≠ 0,
*1*If VARfractionDigits is not undefined, then
*2*Let VARe and VARn be integers such that 10--EXP0--VARf--EXP1-- ≤ VARn &lt; 10--EXP0--VARf+1--EXP1-- and for which the exact mathematical value of VARn × 10--EXP0--VARe-VARf--EXP1-- - VARx is as close to zero as possible. If there are two such sets of VARe and VARn, pick the VARe and VARn for which VARn × 10--EXP0--VARe-VARf--EXP1-- is larger. 
*1*Else VARfractionDigits is undefined,
*2*Let VARe, VARn, and VARf be integers such that VARf ≥ 0, 10--EXP0--VARf--EXP1-- ≤ VARn &lt; 10--EXP0--VARf+1--EXP1--, the Number value for VARn × 10--EXP0--VARe-VARf--EXP1-- is VARx, and VARf is as small as possible. Note that the decimal representation of VARn has VARf+1 digits, VARn is not divisible by 10, and the least significant digit of VARn is not necessarily uniquely determined by these criteria. 
*1*Let VARm be the String value consisting of the digits of the decimal representation of VARn (in order, with no leading zeroes). 
*0*If VARf ≠ 0, then
*1*Let VARa be the first element of VARm, and let VARb be the remaining VARf elements of VARm. 
*1*Let VARm be the string-concatenation of VARa, ".", and VARb. 
*0*If VARe = 0, then
*1*Let VARc be "+". 
*1*Let VARd be "0". 
*0*Else,
*1*If VARe &gt; 0, then
*2*Let VARc be "+". 
*1*Else VARe ≤ 0,
*2*Let VARc be "-". 
*2*Let VARe be -VARe. 
*1*Let VARd be the String value consisting of the digits of the decimal representation of VARe (in order, with no leading zeroes). 
*0*Let VARm be the string-concatenation of VARm, "e", VARc, and VARd. 
*0*Return the string-concatenation of VARs and VARm.     

#############  END  ## 367 ###########################
############# BEGIN ## 368 ###########################
ID= 20.1.3.3
Summary= Number.prototype.toFixed ( fractionDigits )
Description= toFixed returns a String containing this Number value represented in decimal fixed-point notation with fractionDigits digits after the decimal point. If fractionDigits is undefined, 0 is assumed.
*0*Let VARx be ? FUNCthisNumberValue(this value). 
*0*Let VARf be ? FUNCToInteger(VARfractionDigits). (If VARfractionDigits is undefined, this step produces the value 0.) 
*0*If VARf &lt; 0 or VARf &gt; 100, throw a RangeError exception. 
*0*If VARx is NaN, return the String "NaN". 
*0*Let VARs be the empty String. 
*0*If VARx &lt; 0, then
*1*Let VARs be "-". 
*1*Let VARx be -VARx. 
*0*If VARx ≥ 10--EXP0--21--EXP1--, then
*1*Let VARm be ! FUNCToString(VARx). 
*0*Else VARx &lt; 10--EXP0--21--EXP1--,
*1*Let VARn be an integer for which the exact mathematical value of VARn ÷ 10--EXP0--VARf--EXP1-- - VARx is as close to zero as possible. If there are two such VARn, pick the larger VARn. 
*1*If VARn = 0, then
*2*Let VARm be the String "0". Otherwise, then
*1*If VARf ≠ 0, then
*2*Let VARk be the length of VARm. 
*2*If VARk ≤ VARf, then
*3*Let VARz be the String value consisting of VARf+1-VARk occurrences of the code unit 0x0030 (DIGIT ZERO). 
*3*Let VARm be the string-concatenation of VARz and VARm. 
*3*Let VARk be VARf + 1. 
*2*Let VARa be the first VARk-VARf elements of VARm, and let VARb be the remaining VARf elements of VARm. 
*2*Let VARm be the string-concatenation of VARa, ".", and VARb. 
*0*Return the string-concatenation of VARs and VARm.     

#############  END  ## 368 ###########################
############# BEGIN ## 369 ###########################
ID= 20.1.3.5
Summary= Number.prototype.toPrecision ( precision )
Description= Return a String containing this Number value represented either in decimal exponential notation with one digit before the significand's decimal point and  precision-1 digits after the significand's decimal point or in decimal fixed notation with precision significant digits. If precision is undefined, call ToString instead. Specifically, perform the following steps:
*0*Let VARx be ? FUNCthisNumberValue(this value). 
*0*If VARprecision is undefined, return ! FUNCToString(VARx). 
*0*Let VARp be ? FUNCToInteger(VARprecision). 
*0*If VARx is NaN, return the String "NaN". 
*0*Let VARs be the empty String. 
*0*If VARx &lt; 0, then
*1*Let VARs be the code unit 0x002D (HYPHEN-MINUS). 
*1*Let VARx be -VARx. 
*0*If VARx = +∞, then
*1*Return the string-concatenation of VARs and "Infinity". 
*0*If VARp &lt; 1 or VARp &gt; 100, throw a RangeError exception. 
*0*If VARx = 0, then
*1*Let VARm be the String value consisting of VARp occurrences of the code unit 0x0030 (DIGIT ZERO). 
*1*Let VARe be 0. 
*0*Else VARx ≠ 0,
*1*Let VARe and VARn be integers such that 10--EXP0--VARp-1--EXP1-- ≤ VARn &lt; 10--EXP0--VARp--EXP1-- and for which the exact mathematical value of VARn × 10--EXP0--VARe-VARp+1--EXP1-- - VARx is as close to zero as possible. If there are two such sets of VARe and VARn, pick the VARe and VARn for which VARn × 10--EXP0--VARe-VARp+1--EXP1-- is larger. 
*1*Let VARm be the String value consisting of the digits of the decimal representation of VARn (in order, with no leading zeroes). 
*1*If VARe &lt; -6 or VARe ≥ VARp, then
*2*Assert: VARe ≠ 0. 
*2*If VARp ≠ 1, then
*3*Let VARa be the first element of VARm, and let VARb be the remaining VARp-1 elements of VARm. 
*3*Let VARm be the string-concatenation of VARa, ".", and VARb. 
*2*If VARe &gt; 0, then
*3*Let VARc be the code unit 0x002B (PLUS SIGN). 
*2*Else VARe &lt; 0,
*3*Let VARc be the code unit 0x002D (HYPHEN-MINUS). 
*3*Let VARe be -VARe. 
*2*Let VARd be the String value consisting of the digits of the decimal representation of VARe (in order, with no leading zeroes). 
*2*Return the string-concatenation of VARs, VARm, the code unit 0x0065 (LATIN SMALL LETTER E), VARc, and VARd. 
*0*If VARe = VARp-1, return the string-concatenation of VARs and VARm. 
*0*If VARe ≥ 0, then
*1*Let VARm be the string-concatenation of the first VARe+1 elements of VARm, the code unit 0x002E (FULL STOP), and the remaining VARp- (VARe+1) elements of VARm. 
*0*Else VARe &lt; 0,
*1*Let VARm be the string-concatenation of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(VARe+1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String VARm. 
*0*Return the string-concatenation of VARs and VARm.     

#############  END  ## 369 ###########################
############# BEGIN ## 370 ###########################
ID= 20.1.3.6
Summary= Number.prototype.toString ( [ radix ] )
Description= The optional radix should be an integer value in the inclusive range 2 to 36. If radix is not present or is undefined the Number 10 is used as the value of radix.
*0*Let VARx be ? FUNCthisNumberValue(this value). 
*0*If VARradix is not present, then
*1*Let VARradixNumber be 10. 
*0*Else,
*1*if VARradix is undefined, then
*2*Let VARradixNumber be 10.
*0*Else,
*1*let VARradixNumber be ? FUNCToInteger(VARradix).
*0*If VARradixNumber &lt; 2 or VARradixNumber &gt; 36, throw a RangeError exception. 
*0*If VARradixNumber = 10, return ! FUNCToString(VARx). 
*0*Return the String representation of this Number value using the radix specified by VARradixNumber. Letters a-z are used for digits with values 10 through 35. The precise algorithm is implementation-dependent, however the algorithm should be a generalization of that specified in 7.1.12.1.     

#############  END  ## 370 ###########################
############# BEGIN ## 371 ###########################
ID= 20.1.3.7
Summary= Number.prototype.valueOf ( )
Description= None
*0*Return ? FUNCthisNumberValue(this value).     

#############  END  ## 371 ###########################
############# BEGIN ## 372 ###########################
ID= 20.2.2.11
Summary= Math.clz32 ( x )
Description= When Math.clz32 is called with one argument x, the following steps are taken:
*0*Let VARn be FUNCToUint32(VARx). 
*0*Let VARp be the number of leading zero bits in the 32-bit binary representation of VARn. 
*0*Return VARp.     

#############  END  ## 372 ###########################
############# BEGIN ## 373 ###########################
ID= 20.2.2.17
Summary= Math.fround ( x )
Description= When Math.fround is called with argument x, the following steps are taken:
*0*If VARx is NaN, return NaN. 
*0*If VARx is one of +0, -0, +∞, -∞, return VARx. 
*0*Let VARx32 be the result of converting VARx to a value in IEEE 754-2008 binary32 format using roundTiesToEven. 
*0*Let VARx64 be the result of converting VARx32 to a value in IEEE 754-2008 binary64 format. 
*0*Return the ECMAScript Number value corresponding to VARx64.     

#############  END  ## 373 ###########################
############# BEGIN ## 374 ###########################
ID= 20.2.2.19
Summary= Math.imul ( x, y )
Description= When Math.imul is called with arguments x and y, the following steps are taken:
*0*Let VARa be FUNCToUint32(VARx). 
*0*Let VARb be FUNCToUint32(VARy). 
*0*Let VARproduct be (VARa × VARb) modulo 2--EXP0--32--EXP1--. 
*0*If VARproduct ≥ 2--EXP0--31--EXP1--, return VARproduct - 2--EXP0--32--EXP1--; otherwise return VARproduct.     

#############  END  ## 374 ###########################
############# BEGIN ## 375 ###########################
ID= 20.3.1.8
Summary= LocalTime ( t )
Description= The abstract operation LocalTime with argument t converts t from UTC to local time by performing the following steps:
*0*Return VARt + FUNCLocalTZA(VARt, true).     

#############  END  ## 375 ###########################
############# BEGIN ## 376 ###########################
ID= 20.3.1.9
Summary= UTC ( t )
Description= The abstract operation UTC with argument t converts t from local time to UTC. It performs the following steps:
*0*Return VARt - FUNCLocalTZA(VARt, false).     

#############  END  ## 376 ###########################
############# BEGIN ## 377 ###########################
ID= 20.3.1.11
Summary= MakeTime ( hour, min, sec, ms )
Description= The abstract operation MakeTime calculates a number of milliseconds from its four arguments, which must be ECMAScript Number values. This operator functions as follows:
*0*If VARhour is not finite or VARmin is not finite or VARsec is not finite or VARms is not finite, return NaN. 
*0*Let VARh be ! FUNCToInteger(VARhour). 
*0*Let VARm be ! FUNCToInteger(VARmin). 
*0*Let VARs be ! FUNCToInteger(VARsec). 
*0*Let VARmilli be ! FUNCToInteger(VARms). 
*0*Let VARt be VARh * msPerHour + VARm * msPerMinute + VARs * msPerSecond + VARmilli, performing the arithmetic according to IEEE 754-2008 rules (that is, as if using the ECMAScript operators * and +). 
*0*Return VARt.     

#############  END  ## 377 ###########################
############# BEGIN ## 378 ###########################
ID= 20.3.1.12
Summary= MakeDay ( year, month, date )
Description= The abstract operation MakeDay calculates a number of days from its three arguments, which must be ECMAScript Number values. This operator functions as follows:
*0*If VARyear is not finite or VARmonth is not finite or VARdate is not finite, return NaN. 
*0*Let VARy be ! FUNCToInteger(VARyear). 
*0*Let VARm be ! FUNCToInteger(VARmonth). 
*0*Let VARdt be ! FUNCToInteger(VARdate). 
*0*Let VARym be VARy + floor(VARm / 12). 
*0*Let VARmn be VARm modulo 12. 
*0*Find a value VARt such that YearFromTime(VARt) is VARym and MonthFromTime(VARt) is VARmn and FUNCDateFromTime(VARt) is 1; but if this is not possible (because some argument is out of range), return NaN. 
*0*Return Day(VARt) + VARdt - 1.     

#############  END  ## 378 ###########################
############# BEGIN ## 379 ###########################
ID= 20.3.1.13
Summary= MakeDate ( day, time )
Description= The abstract operation MakeDate calculates a number of milliseconds from its two arguments, which must be ECMAScript Number values. This operator functions as follows:
*0*If VARday is not finite or VARtime is not finite, return NaN. 
*0*Return VARday × msPerDay + VARtime.     

#############  END  ## 379 ###########################
############# BEGIN ## 380 ###########################
ID= 20.3.1.14
Summary= TimeClip ( time )
Description= The abstract operation TimeClip calculates a number of milliseconds from its argument, which must be an ECMAScript Number value. This operator functions as follows:
*0*If VARtime is not finite, return NaN. 
*0*If abs(VARtime) &gt; 8.64 × 10--EXP0--15--EXP1--, return NaN. 
*0*Let VARclippedTime be ! FUNCToInteger(VARtime). 
*0*If VARclippedTime is -0, set VARclippedTime to +0. 
*0*Return VARclippedTime.     

#############  END  ## 380 ###########################
############# BEGIN ## 381 ###########################
ID= 20.3.2.1
Summary= Date ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )
Description= This description applies only if the Date constructor is called with at least two arguments.
*0*Let VARnumberOfArgs be the number of arguments passed to this function call. 
*0*Assert: VARnumberOfArgs ≥ 2. 
*0*If NewTarget is undefined, then
*1*Let VARnow be the Number that is the time value (UTC) identifying the current time. 
*1*Return FUNCToDateString(VARnow). 
*0*Else,
*1*Let VARy be ? FUNCToNumber(VARyear). 
*1*Let VARm be ? FUNCToNumber(VARmonth). 
*1*If VARdate is present, then
*2*Let VARdt be ? FUNCToNumber(VARdate)
*1*Else,
*2*let VARdt be 1.
*1*If VARhours is present, then
*2*Let VARh be ? FUNCToNumber(VARhours)
*1*Else,
*2*let VARh be 0.
*1*If VARminutes is present, then
*2*Let VARmin be ? FUNCToNumber(VARminutes)
*1*Else,
*2*let VARmin be 0.
*1*If VARseconds is present, then
*2*Let VARs be ? FUNCToNumber(VARseconds)
*1*Else,
*2*let VARs be 0.
*1*If VARms is present, then
*2*Let VARmilli be ? FUNCToNumber(VARms)
*1*Else,
*2*let VARmilli be 0.
*1*If VARy is not NaN and 0 ≤ FUNCToInteger(VARy) ≤ 99, then
*2*Let VARyr be 1900+FUNCToInteger(VARy); otherwise, then
*1*Let VARfinalDate be FUNCMakeDate(FUNCMakeDay(VARyr, VARm, VARdt), FUNCMakeTime(VARh, VARmin, VARs, VARmilli)). 
*1*Let VARO be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%DatePrototype%", « [[VARDateValue]] »). 
*1*Set VARO.[[VARDateValue]] to FUNCTimeClip(FUNCUTC(VARfinalDate)). 
*1*Return VARO.     

#############  END  ## 381 ###########################
############# BEGIN ## 382 ###########################
ID= 20.3.2.2
Summary= Date ( value )
Description= This description applies only if the Date constructor is called with exactly one argument.
*0*Let VARnumberOfArgs be the number of arguments passed to this function call. 
*0*Assert: VARnumberOfArgs = 1. 
*0*If NewTarget is undefined, then
*1*Let VARnow be the Number that is the time value (UTC) identifying the current time. 
*1*Return FUNCToDateString(VARnow). 
*0*Else,
*1*If FUNCType(VARvalue) is Object and VARvalue has a [[VARDateValue]] internal slot, then
*2*Let VARtv be thisTimeValue(VARvalue). 
*1*Else,
*2*Let VARv be ? FUNCToPrimitive(VARvalue). 
*2*If FUNCType(VARv) is String, then
*3*Assert: The next step never returns an abrupt completion because VARv is a String value. 
*3*Let VARtv be the result of parsing VARv as a date, in exactly the same manner as for the parse method (20.3.3.2). 
*2*Else,
*3*Let VARtv be ? FUNCToNumber(VARv). 
*1*Let VARO be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%DatePrototype%", « [[VARDateValue]] »). 
*1*Set VARO.[[VARDateValue]] to FUNCTimeClip(VARtv). 
*1*Return VARO.     

#############  END  ## 382 ###########################
############# BEGIN ## 383 ###########################
ID= 20.3.2.3
Summary= Date ( )
Description= This description applies only if the Date constructor is called with no arguments.
*0*Let VARnumberOfArgs be the number of arguments passed to this function call. 
*0*Assert: VARnumberOfArgs = 0. 
*0*If NewTarget is undefined, then
*1*Let VARnow be the Number that is the time value (UTC) identifying the current time. 
*1*Return FUNCToDateString(VARnow). 
*0*Else,
*1*Let VARO be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%DatePrototype%", « [[VARDateValue]] »). 
*1*Set VARO.[[VARDateValue]] to the time value (UTC) identifying the current time. 
*1*Return VARO.     

#############  END  ## 383 ###########################
############# BEGIN ## 384 ###########################
ID= 20.3.3.4
Summary= Date.UTC ( year [ , month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] ] )
Description= When the UTC function is called, the following steps are taken:
*0*Let VARy be ? FUNCToNumber(VARyear). 
*0*If VARmonth is present, then
*1*Let VARm be ? FUNCToNumber(VARmonth)
*0*Else,
*1*let VARm be 0.
*0*If VARdate is present, then
*1*Let VARdt be ? FUNCToNumber(VARdate)
*0*Else,
*1*let VARdt be 1.
*0*If VARhours is present, then
*1*Let VARh be ? FUNCToNumber(VARhours)
*0*Else,
*1*let VARh be 0.
*0*If VARminutes is present, then
*1*Let VARmin be ? FUNCToNumber(VARminutes)
*0*Else,
*1*let VARmin be 0.
*0*If VARseconds is present, then
*1*Let VARs be ? FUNCToNumber(VARseconds)
*0*Else,
*1*let VARs be 0.
*0*If VARms is present, then
*1*Let VARmilli be ? FUNCToNumber(VARms)
*0*Else,
*1*let VARmilli be 0.
*0*If VARy is not NaN and 0 ≤ FUNCToInteger(VARy) ≤ 99, then
*1*Let VARyr be 1900+FUNCToInteger(VARy); otherwise, then
*0*Return FUNCTimeClip(FUNCMakeDate(FUNCMakeDay(VARyr, VARm, VARdt), FUNCMakeTime(VARh, VARmin, VARs, VARmilli))).     

#############  END  ## 384 ###########################
############# BEGIN ## 385 ###########################
ID= 20.3.4.2
Summary= Date.prototype.getDate ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return FUNCDateFromTime(FUNCLocalTime(VARt)).     

#############  END  ## 385 ###########################
############# BEGIN ## 386 ###########################
ID= 20.3.4.3
Summary= Date.prototype.getDay ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return FUNCWeekDay(FUNCLocalTime(VARt)).     

#############  END  ## 386 ###########################
############# BEGIN ## 387 ###########################
ID= 20.3.4.4
Summary= Date.prototype.getFullYear ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return YearFromTime(FUNCLocalTime(VARt)).     

#############  END  ## 387 ###########################
############# BEGIN ## 388 ###########################
ID= 20.3.4.5
Summary= Date.prototype.getHours ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return HourFromTime(FUNCLocalTime(VARt)).     

#############  END  ## 388 ###########################
############# BEGIN ## 389 ###########################
ID= 20.3.4.6
Summary= Date.prototype.getMilliseconds ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return msFromTime(FUNCLocalTime(VARt)).     

#############  END  ## 389 ###########################
############# BEGIN ## 390 ###########################
ID= 20.3.4.7
Summary= Date.prototype.getMinutes ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return MinFromTime(FUNCLocalTime(VARt)).     

#############  END  ## 390 ###########################
############# BEGIN ## 391 ###########################
ID= 20.3.4.8
Summary= Date.prototype.getMonth ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return MonthFromTime(FUNCLocalTime(VARt)).     

#############  END  ## 391 ###########################
############# BEGIN ## 392 ###########################
ID= 20.3.4.9
Summary= Date.prototype.getSeconds ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return SecFromTime(FUNCLocalTime(VARt)).     

#############  END  ## 392 ###########################
############# BEGIN ## 393 ###########################
ID= 20.3.4.10
Summary= Date.prototype.getTime ( )
Description= The following steps are performed:
*0*Return ? thisTimeValue(this value).     

#############  END  ## 393 ###########################
############# BEGIN ## 394 ###########################
ID= 20.3.4.11
Summary= Date.prototype.getTimezoneOffset ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return (VARt - FUNCLocalTime(VARt)) / msPerMinute.     

#############  END  ## 394 ###########################
############# BEGIN ## 395 ###########################
ID= 20.3.4.12
Summary= Date.prototype.getUTCDate ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return FUNCDateFromTime(VARt).     

#############  END  ## 395 ###########################
############# BEGIN ## 396 ###########################
ID= 20.3.4.13
Summary= Date.prototype.getUTCDay ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return FUNCWeekDay(VARt).     

#############  END  ## 396 ###########################
############# BEGIN ## 397 ###########################
ID= 20.3.4.14
Summary= Date.prototype.getUTCFullYear ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return YearFromTime(VARt).     

#############  END  ## 397 ###########################
############# BEGIN ## 398 ###########################
ID= 20.3.4.15
Summary= Date.prototype.getUTCHours ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return HourFromTime(VARt).     

#############  END  ## 398 ###########################
############# BEGIN ## 399 ###########################
ID= 20.3.4.16
Summary= Date.prototype.getUTCMilliseconds ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return msFromTime(VARt).     

#############  END  ## 399 ###########################
############# BEGIN ## 400 ###########################
ID= 20.3.4.17
Summary= Date.prototype.getUTCMinutes ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return MinFromTime(VARt).     

#############  END  ## 400 ###########################
############# BEGIN ## 401 ###########################
ID= 20.3.4.18
Summary= Date.prototype.getUTCMonth ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return MonthFromTime(VARt).     

#############  END  ## 401 ###########################
############# BEGIN ## 402 ###########################
ID= 20.3.4.19
Summary= Date.prototype.getUTCSeconds ( )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, return NaN. 
*0*Return SecFromTime(VARt).     

#############  END  ## 402 ###########################
############# BEGIN ## 403 ###########################
ID= 20.3.4.20
Summary= Date.prototype.setDate ( date )
Description= The following steps are performed:
*0*Let VARt be FUNCLocalTime(? thisTimeValue(this value)). 
*0*Let VARdt be ? FUNCToNumber(VARdate). 
*0*Let VARnewDate be FUNCMakeDate(FUNCMakeDay(YearFromTime(VARt), MonthFromTime(VARt), VARdt), TimeWithinDay(VARt)). 
*0*Let VARu be FUNCTimeClip(FUNCUTC(VARnewDate)). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARu. 
*0*Return VARu.     

#############  END  ## 403 ###########################
############# BEGIN ## 404 ###########################
ID= 20.3.4.21
Summary= Date.prototype.setFullYear ( year [ , month [ , date ] ] )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, then
*1*Let VARt be +0; otherwise, then
*0*Let VARy be ? FUNCToNumber(VARyear). 
*0*If VARmonth is not present, then
*1*Let VARm be MonthFromTime(VARt); otherwise, then
*0*If VARdate is not present, then
*1*Let VARdt be FUNCDateFromTime(VARt); otherwise, then
*0*Let VARnewDate be FUNCMakeDate(FUNCMakeDay(VARy, VARm, VARdt), TimeWithinDay(VARt)). 
*0*Let VARu be FUNCTimeClip(FUNCUTC(VARnewDate)). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARu. 
*0*Return VARu.     

#############  END  ## 404 ###########################
############# BEGIN ## 405 ###########################
ID= 20.3.4.22
Summary= Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )
Description= The following steps are performed:
*0*Let VARt be FUNCLocalTime(? thisTimeValue(this value)). 
*0*Let VARh be ? FUNCToNumber(VARhour). 
*0*If VARmin is not present, then
*1*Let VARm be MinFromTime(VARt); otherwise, then
*0*If VARsec is not present, then
*1*Let VARs be SecFromTime(VARt); otherwise, then
*0*If VARms is not present, then
*1*Let VARmilli be msFromTime(VARt); otherwise, then
*0*Let VARdate be FUNCMakeDate(Day(VARt), FUNCMakeTime(VARh, VARm, VARs, VARmilli)). 
*0*Let VARu be FUNCTimeClip(FUNCUTC(VARdate)). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARu. 
*0*Return VARu.     

#############  END  ## 405 ###########################
############# BEGIN ## 406 ###########################
ID= 20.3.4.23
Summary= Date.prototype.setMilliseconds ( ms )
Description= The following steps are performed:
*0*Let VARt be FUNCLocalTime(? thisTimeValue(this value)). 
*0*Let VARms be ? FUNCToNumber(VARms). 
*0*Let VARtime be FUNCMakeTime(HourFromTime(VARt), MinFromTime(VARt), SecFromTime(VARt), VARms). 
*0*Let VARu be FUNCTimeClip(FUNCUTC(FUNCMakeDate(Day(VARt), VARtime))). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARu. 
*0*Return VARu.     

#############  END  ## 406 ###########################
############# BEGIN ## 407 ###########################
ID= 20.3.4.24
Summary= Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )
Description= The following steps are performed:
*0*Let VARt be FUNCLocalTime(? thisTimeValue(this value)). 
*0*Let VARm be ? FUNCToNumber(VARmin). 
*0*If VARsec is not present, then
*1*Let VARs be SecFromTime(VARt); otherwise, then
*0*If VARms is not present, then
*1*Let VARmilli be msFromTime(VARt); otherwise, then
*0*Let VARdate be FUNCMakeDate(Day(VARt), FUNCMakeTime(HourFromTime(VARt), VARm, VARs, VARmilli)). 
*0*Let VARu be FUNCTimeClip(FUNCUTC(VARdate)). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARu. 
*0*Return VARu.     

#############  END  ## 407 ###########################
############# BEGIN ## 408 ###########################
ID= 20.3.4.25
Summary= Date.prototype.setMonth ( month [ , date ] )
Description= The following steps are performed:
*0*Let VARt be FUNCLocalTime(? thisTimeValue(this value)). 
*0*Let VARm be ? FUNCToNumber(VARmonth). 
*0*If VARdate is not present, then
*1*Let VARdt be FUNCDateFromTime(VARt); otherwise, then
*0*Let VARnewDate be FUNCMakeDate(FUNCMakeDay(YearFromTime(VARt), VARm, VARdt), TimeWithinDay(VARt)). 
*0*Let VARu be FUNCTimeClip(FUNCUTC(VARnewDate)). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARu. 
*0*Return VARu.     

#############  END  ## 408 ###########################
############# BEGIN ## 409 ###########################
ID= 20.3.4.26
Summary= Date.prototype.setSeconds ( sec [ , ms ] )
Description= The following steps are performed:
*0*Let VARt be FUNCLocalTime(? thisTimeValue(this value)). 
*0*Let VARs be ? FUNCToNumber(VARsec). 
*0*If VARms is not present, then
*1*Let VARmilli be msFromTime(VARt); otherwise, then
*0*Let VARdate be FUNCMakeDate(Day(VARt), FUNCMakeTime(HourFromTime(VARt), MinFromTime(VARt), VARs, VARmilli)). 
*0*Let VARu be FUNCTimeClip(FUNCUTC(VARdate)). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARu. 
*0*Return VARu.     

#############  END  ## 409 ###########################
############# BEGIN ## 410 ###########################
ID= 20.3.4.27
Summary= Date.prototype.setTime ( time )
Description= The following steps are performed:
*0*Perform ? thisTimeValue(this value). 
*0*Let VARt be ? FUNCToNumber(VARtime). 
*0*Let VARv be FUNCTimeClip(VARt). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARv. 
*0*Return VARv.     

#############  END  ## 410 ###########################
############# BEGIN ## 411 ###########################
ID= 20.3.4.28
Summary= Date.prototype.setUTCDate ( date )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*Let VARdt be ? FUNCToNumber(VARdate). 
*0*Let VARnewDate be FUNCMakeDate(FUNCMakeDay(YearFromTime(VARt), MonthFromTime(VARt), VARdt), TimeWithinDay(VARt)). 
*0*Let VARv be FUNCTimeClip(VARnewDate). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARv. 
*0*Return VARv.     

#############  END  ## 411 ###########################
############# BEGIN ## 412 ###########################
ID= 20.3.4.29
Summary= Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*If VARt is NaN, then
*1*Let VARt be +0. 
*0*Let VARy be ? FUNCToNumber(VARyear). 
*0*If VARmonth is not present, then
*1*Let VARm be MonthFromTime(VARt); otherwise, then
*0*If VARdate is not present, then
*1*Let VARdt be FUNCDateFromTime(VARt); otherwise, then
*0*Let VARnewDate be FUNCMakeDate(FUNCMakeDay(VARy, VARm, VARdt), TimeWithinDay(VARt)). 
*0*Let VARv be FUNCTimeClip(VARnewDate). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARv. 
*0*Return VARv.     

#############  END  ## 412 ###########################
############# BEGIN ## 413 ###########################
ID= 20.3.4.30
Summary= Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*Let VARh be ? FUNCToNumber(VARhour). 
*0*If VARmin is not present, then
*1*Let VARm be MinFromTime(VARt); otherwise, then
*0*If VARsec is not present, then
*1*Let VARs be SecFromTime(VARt); otherwise, then
*0*If VARms is not present, then
*1*Let VARmilli be msFromTime(VARt); otherwise, then
*0*Let VARnewDate be FUNCMakeDate(Day(VARt), FUNCMakeTime(VARh, VARm, VARs, VARmilli)). 
*0*Let VARv be FUNCTimeClip(VARnewDate). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARv. 
*0*Return VARv.     

#############  END  ## 413 ###########################
############# BEGIN ## 414 ###########################
ID= 20.3.4.31
Summary= Date.prototype.setUTCMilliseconds ( ms )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*Let VARmilli be ? FUNCToNumber(VARms). 
*0*Let VARtime be FUNCMakeTime(HourFromTime(VARt), MinFromTime(VARt), SecFromTime(VARt), VARmilli). 
*0*Let VARv be FUNCTimeClip(FUNCMakeDate(Day(VARt), VARtime)). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARv. 
*0*Return VARv.     

#############  END  ## 414 ###########################
############# BEGIN ## 415 ###########################
ID= 20.3.4.32
Summary= Date.prototype.setUTCMinutes ( min [ , sec [ , ms ] ] )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*Let VARm be ? FUNCToNumber(VARmin). 
*0*If VARsec is not present, then
*1*Let VARs be SecFromTime(VARt). 
*0*Else,
*1*Let VARs be ? FUNCToNumber(VARsec). 
*0*If VARms is not present, then
*1*Let VARmilli be msFromTime(VARt). 
*0*Else,
*1*Let VARmilli be ? FUNCToNumber(VARms). 
*0*Let VARdate be FUNCMakeDate(Day(VARt), FUNCMakeTime(HourFromTime(VARt), VARm, VARs, VARmilli)). 
*0*Let VARv be FUNCTimeClip(VARdate). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARv. 
*0*Return VARv.     

#############  END  ## 415 ###########################
############# BEGIN ## 416 ###########################
ID= 20.3.4.33
Summary= Date.prototype.setUTCMonth ( month [ , date ] )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*Let VARm be ? FUNCToNumber(VARmonth). 
*0*If VARdate is not present, then
*1*Let VARdt be FUNCDateFromTime(VARt). 
*0*Else,
*1*Let VARdt be ? FUNCToNumber(VARdate). 
*0*Let VARnewDate be FUNCMakeDate(FUNCMakeDay(YearFromTime(VARt), VARm, VARdt), TimeWithinDay(VARt)). 
*0*Let VARv be FUNCTimeClip(VARnewDate). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARv. 
*0*Return VARv.     

#############  END  ## 416 ###########################
############# BEGIN ## 417 ###########################
ID= 20.3.4.34
Summary= Date.prototype.setUTCSeconds ( sec [ , ms ] )
Description= The following steps are performed:
*0*Let VARt be ? thisTimeValue(this value). 
*0*Let VARs be ? FUNCToNumber(VARsec). 
*0*If VARms is not present, then
*1*Let VARmilli be msFromTime(VARt). 
*0*Else,
*1*Let VARmilli be ? FUNCToNumber(VARms). 
*0*Let VARdate be FUNCMakeDate(Day(VARt), FUNCMakeTime(HourFromTime(VARt), MinFromTime(VARt), VARs, VARmilli)). 
*0*Let VARv be FUNCTimeClip(VARdate). 
*0*Set the [[VARDateValue]] internal slot of this Date object to VARv. 
*0*Return VARv.     

#############  END  ## 417 ###########################
############# BEGIN ## 418 ###########################
ID= 20.3.4.35
Summary= Date.prototype.toDateString ( )
Description= The following steps are performed:
*0*Let VARO be this Date object. 
*0*Let VARtv be ? thisTimeValue(VARO). 
*0*If VARtv is NaN, return "Invalid Date". 
*0*Let VARt be FUNCLocalTime(VARtv). 
*0*Return FUNCDateString(VARt).     

#############  END  ## 418 ###########################
############# BEGIN ## 419 ###########################
ID= 20.3.4.37
Summary= Date.prototype.toJSON ( key )
Description= This function provides a String representation of a Date object for use by JSON.stringify (24.5.2).
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARtv be ? FUNCToPrimitive(VARO, hint Number). 
*0*If FUNCType(VARtv) is Number and VARtv is not finite, return null. 
*0*Return ? FUNCInvoke(VARO, "toISOString").     

#############  END  ## 419 ###########################
############# BEGIN ## 420 ###########################
ID= 20.3.4.41
Summary= Date.prototype.toString ( )
Description= The following steps are performed:
*0*Let VARtv be ? thisTimeValue(this value). 
*0*Return FUNCToDateString(VARtv).     

#############  END  ## 420 ###########################
############# BEGIN ## 421 ###########################
ID= 20.3.4.41.1
Summary= Runtime Semantics: TimeString ( tv )
Description= The following steps are performed:
*0*Assert: FUNCType(VARtv) is Number. 
*0*Assert: VARtv is not NaN. 
*0*Let VARhour be the String representation of HourFromTime(VARtv), formatted as a two-digit decimal number, padded to the left with a zero if necessary. 
*0*Let VARminute be the String representation of MinFromTime(VARtv), formatted as a two-digit decimal number, padded to the left with a zero if necessary. 
*0*Let VARsecond be the String representation of SecFromTime(VARtv), formatted as a two-digit decimal number, padded to the left with a zero if necessary. 
*0*Return the string-concatenation of VARhour, ":", VARminute, ":", VARsecond, the code unit 0x0020 (SPACE), and "GMT".      

#############  END  ## 421 ###########################
############# BEGIN ## 422 ###########################
ID= 20.3.4.41.2
Summary= Runtime Semantics: DateString ( tv )
Description= The following steps are performed:
*0*Assert: FUNCType(VARtv) is Number. 
*0*Assert: VARtv is not NaN. 
*0*Let VARweekday be the Name of the entry in FUNCTable 46 with the Number WeekDay(VARtv). 
*0*Let VARmonth be the Name of the entry in FUNCTable 47 with the Number MonthFromTime(VARtv). 
*0*Let VARday be the String representation of FUNCDateFromTime(VARtv), formatted as a two-digit decimal number, padded to the left with a zero if necessary. 
*0*Let VARyear be the String representation of YearFromTime(VARtv), formatted as a decimal number of at least four digits, padded to the left with zeroes if necessary. 
*0*Return the string-concatenation of VARweekday, the code unit 0x0020 (SPACE), VARmonth, the code unit 0x0020 (SPACE), VARday, the code unit 0x0020 (SPACE), and VARyear.      

#############  END  ## 422 ###########################
############# BEGIN ## 423 ###########################
ID= 20.3.4.41.3
Summary= Runtime Semantics: TimeZoneString ( tv )
Description= The following steps are performed:
*0*Assert: FUNCType(VARtv) is Number. 
*0*Assert: VARtv is not NaN. 
*0*Let VARoffset be FUNCLocalTZA(VARtv, true). 
*0*If VARoffset ≥ 0, then
*1*Let VARoffsetSign be "+"; otherwise, then
*0*Let VARoffsetMin be the String representation of MinFromTime(abs(VARoffset)), formatted as a two-digit decimal number, padded to the left with a zero if necessary. 
*0*Let VARoffsetHour be the String representation of HourFromTime(abs(VARoffset)), formatted as a two-digit decimal number, padded to the left with a zero if necessary. 
*0*Let VARtzName be an implementation-defined string that is either the empty string or the string-concatenation of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an implementation-dependent timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS). 
*0*Return the string-concatenation of VARoffsetSign, VARoffsetHour, VARoffsetMin, and VARtzName.      

#############  END  ## 423 ###########################
############# BEGIN ## 424 ###########################
ID= 20.3.4.41.4
Summary= Runtime Semantics: ToDateString ( tv )
Description= The following steps are performed:
*0*Assert: FUNCType(VARtv) is Number. 
*0*If VARtv is NaN, return "Invalid Date". 
*0*Let VARt be FUNCLocalTime(VARtv). 
*0*Return the FUNCstring-concatenation of DateString(VARt), the code unit 0x0020 (SPACE), FUNCTimeString(VARt), and FUNCTimeZoneString(VARtv).      

#############  END  ## 424 ###########################
############# BEGIN ## 425 ###########################
ID= 20.3.4.42
Summary= Date.prototype.toTimeString ( )
Description= The following steps are performed:
*0*Let VARO be this Date object. 
*0*Let VARtv be ? thisTimeValue(VARO). 
*0*If VARtv is NaN, return "Invalid Date". 
*0*Let VARt be FUNCLocalTime(VARtv). 
*0*Return the FUNCstring-concatenation of TimeString(VARt) and FUNCTimeZoneString(VARtv).     

#############  END  ## 425 ###########################
############# BEGIN ## 426 ###########################
ID= 20.3.4.43
Summary= Date.prototype.toUTCString ( )
Description= The following steps are performed:
*0*Let VARO be this Date object. 
*0*Let VARtv be ? thisTimeValue(VARO). 
*0*If VARtv is NaN, return "Invalid Date". 
*0*Let VARweekday be the Name of the entry in FUNCTable 46 with the Number WeekDay(VARtv). 
*0*Let VARmonth be the Name of the entry in FUNCTable 47 with the Number MonthFromTime(VARtv). 
*0*Let VARday be the String representation of FUNCDateFromTime(VARtv), formatted as a two-digit decimal number, padded to the left with a zero if necessary. 
*0*Let VARyear be the String representation of YearFromTime(VARtv), formatted as a decimal number of at least four digits, padded to the left with zeroes if necessary. 
*0*Return the FUNCstring-concatenation of VARweekday, ",", the code unit 0x0020 (SPACE), VARday, the code unit 0x0020 (SPACE), VARmonth, the code unit 0x0020 (SPACE), VARyear, the code unit 0x0020 (SPACE), and TimeString(VARtv).     

#############  END  ## 426 ###########################
############# BEGIN ## 427 ###########################
ID= 20.3.4.44
Summary= Date.prototype.valueOf ( )
Description= The following steps are performed:
*0*Return ? thisTimeValue(this value).     

#############  END  ## 427 ###########################
############# BEGIN ## 428 ###########################
ID= 20.3.4.45
Summary= Date.prototype [ @@toPrimitive ] ( hint )
Description= This function is called by ECMAScript language operators to convert a Date object to a primitive value. The allowed values for hint are "default", "number", and "string". Date objects, are unique among built-in ECMAScript object in that they treat "default" as being equivalent to "string", All other built-in ECMAScript objects treat "default" as being equivalent to "number".
*0*Let VARO be the this value. 
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*If VARhint is the String value "string" or the String value "default", then
*1*Let VARtryFirst be "string". 
*0*Else if VARhint is the String value "number", then
*1*Let VARtryFirst be "number". 
*0*Else,
*1*throw a TypeError exception.
*0*Return ? FUNCOrdinaryToPrimitive(VARO, VARtryFirst).     

#############  END  ## 428 ###########################
############# BEGIN ## 429 ###########################
ID= 21.1.1.1
Summary= String ( value )
Description= When String is called with argument value, the following steps are taken:
*0*If no arguments were passed to this function invocation, then
*1*Let VARs be "". 
*0*Else,
*1*If NewTarget is undefined and FUNCType(VARvalue) is Symbol, return FUNCSymbolDescriptiveString(VARvalue). 
*1*Let VARs be ? FUNCToString(VARvalue). 
*0*If NewTarget is undefined, return VARs. 
*0*Return ? FUNCStringCreate(VARs, ? FUNCGetPrototypeFromConstructor(NewTarget, "%StringPrototype%")).     

#############  END  ## 429 ###########################
############# BEGIN ## 430 ###########################
ID= 21.1.2.1
Summary= String.fromCharCode ( ...codeUnits )
Description= The String.fromCharCode function may be called with any number of arguments which form the rest parameter codeUnits. The following steps are taken:
*0*Let VARcodeUnits be a List containing the arguments passed to this function. 
*0*Let VARlength be the number of elements in VARcodeUnits. 
*0*Let VARelements be a new empty List. 
*0*Let VARnextIndex be 0. 
*0*Repeat, while VARnextIndex &lt; VARlength
*1*Let VARnext be VARcodeUnits[VARnextIndex]. 
*1*Let VARnextCU be ? FUNCToUint16(VARnext). 
*1*Append VARnextCU to the end of VARelements. 
*1*Let VARnextIndex be VARnextIndex + 1. 
*0*Return the String value whose elements are, in order, the elements in the List VARelements. If VARlength is 0, the empty string is returned.     

#############  END  ## 430 ###########################
############# BEGIN ## 431 ###########################
ID= 21.1.2.2
Summary= String.fromCodePoint ( ...codePoints )
Description= The String.fromCodePoint function may be called with any number of arguments which form the rest parameter codePoints. The following steps are taken:
*0*Let VARcodePoints be a List containing the arguments passed to this function. 
*0*Let VARlength be the number of elements in VARcodePoints. 
*0*Let VARelements be a new empty List. 
*0*Let VARnextIndex be 0. 
*0*Repeat, while VARnextIndex &lt; VARlength
*1*Let VARnext be VARcodePoints[VARnextIndex]. 
*1*Let VARnextCP be ? FUNCToNumber(VARnext). 
*1*If FUNCSameValue(VARnextCP, FUNCToInteger(VARnextCP)) is false, throw a RangeError exception. 
*1*If VARnextCP &lt; 0 or VARnextCP &gt; 0x10FFFF, throw a RangeError exception. 
*1*Append the elements of the UTF16Encoding of VARnextCP to the end of VARelements. 
*1*Let VARnextIndex be VARnextIndex + 1. 
*0*Return the String value whose elements are, in order, the elements in the List VARelements. If VARlength is 0, the empty string is returned.     

#############  END  ## 431 ###########################
############# BEGIN ## 432 ###########################
ID= 21.1.2.4
Summary= String.raw ( template, ...substitutions )
Description= The String.raw function may be called with a variable number of arguments. The first argument is template and the remainder of the arguments form the List substitutions. The following steps are taken:
*0*Let VARsubstitutions be a List consisting of all of the arguments passed to this function, starting with the second argument. If fewer than two arguments were passed, the List is empty. 
*0*Let VARnumberOfSubstitutions be the number of elements in VARsubstitutions. 
*0*Let VARcooked be ? FUNCToObject(VARtemplate). 
*0*Let VARraw be ? FUNCToObject(? FUNCGet(VARcooked, "raw")). 
*0*Let VARliteralSegments be ? FUNCToLength(? FUNCGet(VARraw, "length")). 
*0*If VARliteralSegments ≤ 0, return the empty string. 
*0*Let VARstringElements be a new empty List. 
*0*Let VARnextIndex be 0. 
*0*Repeat,
*1*Let VARnextKey be ! FUNCToString(VARnextIndex). 
*1*Let VARnextSeg be ? FUNCToString(? FUNCGet(VARraw, VARnextKey)). 
*1*Append in order the code unit elements of VARnextSeg to the end of VARstringElements. 
*1*If VARnextIndex + 1 = VARliteralSegments, then
*2*Return the String value whose code units are, in order, the elements in the List VARstringElements. If VARstringElements has no elements, the empty string is returned. 
*1*If VARnextIndex &lt; VARnumberOfSubstitutions, then
*2*Let VARnext be VARsubstitutions[VARnextIndex]. 
*1*Else,
*2*let VARnext be the empty String.
*1*Let VARnextSub be ? FUNCToString(VARnext). 
*1*Append in order the code unit elements of VARnextSub to the end of VARstringElements. 
*1*Let VARnextIndex be VARnextIndex + 1.     

#############  END  ## 432 ###########################
############# BEGIN ## 433 ###########################
ID= 21.1.3.1
Summary= String.prototype.charAt ( pos )
Description= Returns a single element String containing the code unit at index pos within the String value resulting from converting this object to a String. If there is no element at that index, the result is the empty String. The result is a String value, not a String object.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARposition be ? FUNCToInteger(VARpos). 
*0*Let VARsize be the length of VARS. 
*0*If VARposition &lt; 0 or VARposition ≥ VARsize, return the empty String. 
*0*Return the String value of length 1, containing one code unit from VARS, namely the code unit at index VARposition.     

#############  END  ## 433 ###########################
############# BEGIN ## 434 ###########################
ID= 21.1.3.2
Summary= String.prototype.charCodeAt ( pos )
Description= Returns a Number (a nonnegative integer less than 216) that is the numeric value of the code unit at index pos within the String resulting from converting this object to a String. If there is no element at that index, the result is NaN.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARposition be ? FUNCToInteger(VARpos). 
*0*Let VARsize be the length of VARS. 
*0*If VARposition &lt; 0 or VARposition ≥ VARsize, return NaN. 
*0*Return a value of Number type, whose value is the numeric value of the code unit at index VARposition within the String VARS.     

#############  END  ## 434 ###########################
############# BEGIN ## 435 ###########################
ID= 21.1.3.3
Summary= String.prototype.codePointAt ( pos )
Description= Returns a nonnegative integer Number less than 0x110000 that is the code point value of the UTF-16 encoded code point (6.1.4) starting at the string element at index pos within the String resulting from converting this object to a String. If there is no element at that index, the result is undefined. If a valid UTF-16  surrogate pair does not begin at pos, the result is the code unit at pos.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARposition be ? FUNCToInteger(VARpos). 
*0*Let VARsize be the length of VARS. 
*0*If VARposition &lt; 0 or VARposition ≥ VARsize, return undefined. 
*0*Let VARfirst be the numeric value of the code unit at index VARposition within the String VARS. 
*0*If VARfirst &lt; 0xD800 or VARfirst &gt; 0xDBFF or VARposition+1 = VARsize, return VARfirst. 
*0*Let VARsecond be the numeric value of the code unit at index VARposition+1 within the String VARS. 
*0*If VARsecond &lt; 0xDC00 or VARsecond &gt; 0xDFFF, return VARfirst. 
*0*Return FUNCUTF16Decode(VARfirst, VARsecond).     

#############  END  ## 435 ###########################
############# BEGIN ## 436 ###########################
ID= 21.1.3.4
Summary= String.prototype.concat ( ...args )
Description= When the concat method is called it returns the String value consisting of the code units of the this object (converted to a String) followed by the code units of each of the arguments converted to a String. The result is a String value, not a String object.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARargs be a List whose elements are the arguments passed to this function. 
*0*Let VARR be VARS. 
*0*Repeat, while VARargs is not empty
*1*Remove the first element from VARargs and let VARnext be the value of that element. 
*1*Let VARnextString be ? FUNCToString(VARnext). 
*1*Set VARR to the string-concatenation of the previous value of VARR and VARnextString. 
*0*Return VARR.     

#############  END  ## 436 ###########################
############# BEGIN ## 437 ###########################
ID= 21.1.3.6
Summary= String.prototype.endsWith ( searchString [ , endPosition ] )
Description= The following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARisRegExp be ? FUNCIsRegExp(VARsearchString). 
*0*If VARisRegExp is true, throw a TypeError exception. 
*0*Let VARsearchStr be ? FUNCToString(VARsearchString). 
*0*Let VARlen be the length of VARS. 
*0*If VARendPosition is undefined, then
*1*Let VARpos be VARlen
*0*Else,
*1*let VARpos be ? FUNCToInteger(VARendPosition).
*0*Let VARend be min(max(VARpos, 0), VARlen). 
*0*Let VARsearchLength be the length of VARsearchStr. 
*0*Let VARstart be VARend - VARsearchLength. 
*0*If VARstart is less than 0, return false. 
*0*If the sequence of elements of VARS starting at VARstart of length VARsearchLength is the same as the full element sequence of VARsearchStr, return true. 
*0*Otherwise, return false.     

#############  END  ## 437 ###########################
############# BEGIN ## 438 ###########################
ID= 21.1.3.7
Summary= String.prototype.includes ( searchString [ , position ] )
Description= The includes method takes two arguments, searchString and position, and performs the following steps:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARisRegExp be ? FUNCIsRegExp(VARsearchString). 
*0*If VARisRegExp is true, throw a TypeError exception. 
*0*Let VARsearchStr be ? FUNCToString(VARsearchString). 
*0*Let VARpos be ? FUNCToInteger(VARposition). (If VARposition is undefined, this step produces the value 0.) 
*0*Let VARlen be the length of VARS. 
*0*Let VARstart be min(max(VARpos, 0), VARlen). 
*0*Let VARsearchLen be the length of VARsearchStr. 
*0*If there exists any integer VARk not smaller than VARstart such that VARk + VARsearchLen is not greater than VARlen, and for all nonnegative integers VARj less than VARsearchLen, the code unit at index VARk+VARj within VARS is the same as the code unit at index VARj within VARsearchStr, return true; but if there is no such integer VARk, return false.     

#############  END  ## 438 ###########################
############# BEGIN ## 439 ###########################
ID= 21.1.3.8
Summary= String.prototype.indexOf ( searchString [ , position ] )
Description= If searchString appears as a substring of the result of converting this object to a String, at one or more indices that are greater than or equal to position, then the smallest such index is returned; otherwise, -1 is returned. If position is undefined, 0 is assumed, so as to search all of the String.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARsearchStr be ? FUNCToString(VARsearchString). 
*0*Let VARpos be ? FUNCToInteger(VARposition). (If VARposition is undefined, this step produces the value 0.) 
*0*Let VARlen be the length of VARS. 
*0*Let VARstart be min(max(VARpos, 0), VARlen). 
*0*Let VARsearchLen be the length of VARsearchStr. 
*0*Return the smallest possible integer VARk not smaller than VARstart such that VARk+VARsearchLen is not greater than VARlen, and for all nonnegative integers VARj less than VARsearchLen, the code unit at index VARk+VARj within VARS is the same as the code unit at index VARj within VARsearchStr; but if there is no such integer VARk, return the value -1.     

#############  END  ## 439 ###########################
############# BEGIN ## 440 ###########################
ID= 21.1.3.9
Summary= String.prototype.lastIndexOf ( searchString [ , position ] )
Description= If searchString appears as a substring of the result of converting this object to a String at one or more indices that are smaller than or equal to position, then the greatest such index is returned; otherwise, -1 is returned. If position is undefined, the length of the String value is assumed, so as to search all of the String.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARsearchStr be ? FUNCToString(VARsearchString). 
*0*Let VARnumPos be ? FUNCToNumber(VARposition). (If VARposition is undefined, this step produces the value NaN.) 
*0*If VARnumPos is NaN, then
*1*Let VARpos be +∞; otherwise, then
*0*Let VARlen be the length of VARS. 
*0*Let VARstart be min(max(VARpos, 0), VARlen). 
*0*Let VARsearchLen be the length of VARsearchStr. 
*0*Return the largest possible nonnegative integer VARk not larger than VARstart such that VARk+VARsearchLen is not greater than VARlen, and for all nonnegative integers VARj less than VARsearchLen, the code unit at index VARk+VARj within VARS is the same as the code unit at index VARj within VARsearchStr; but if there is no such integer VARk, return the value -1.     

#############  END  ## 440 ###########################
############# BEGIN ## 441 ###########################
ID= 21.1.3.10
Summary= String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )
Description= An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the localeCompare method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the localeCompare method is used.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARThat be ? FUNCToString(VARthat).     

#############  END  ## 441 ###########################
############# BEGIN ## 442 ###########################
ID= 21.1.3.11
Summary= String.prototype.match ( regexp )
Description= When the match method is called with argument regexp, the following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*If VARregexp is neither undefined nor null, then
*1*Let VARmatcher be ? FUNCGetMethod(VARregexp, @@match). 
*1*If VARmatcher is not undefined, then
*2*Return ? FUNCCall(VARmatcher, VARregexp, « VARO »). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARrx be ? FUNCRegExpCreate(VARregexp, undefined). 
*0*Return ? FUNCInvoke(VARrx, @@match, « VARS »).     

#############  END  ## 442 ###########################
############# BEGIN ## 443 ###########################
ID= 21.1.3.12
Summary= String.prototype.normalize ( [ form ] )
Description= When the normalize method is called with one argument form, the following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*If VARform is not present or VARform is undefined, then
*1*Let VARform be "NFC". 
*0*Let VARf be ? FUNCToString(VARform). 
*0*If VARf is not one of "NFC", "NFD", "NFKC", or "NFKD", throw a RangeError exception. 
*0*Let VARns be the String value that is the result of normalizing VARS into the normalization form named by VARf as specified in https://unicode.org/reports/tr15/. 
*0*Return VARns.     

#############  END  ## 443 ###########################
############# BEGIN ## 444 ###########################
ID= 21.1.3.13
Summary= String.prototype.padEnd ( maxLength [ , fillString ] )
Description= When the padEnd method is called, the following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARintMaxLength be ? FUNCToLength(VARmaxLength). 
*0*Let VARstringLength be the length of VARS. 
*0*If VARintMaxLength is not greater than VARstringLength, return VARS. 
*0*If VARfillString is undefined, then
*1*Let VARfiller be the String value consisting solely of the code unit 0x0020 (SPACE). 
*0*Else,
*1*let VARfiller be ? FUNCToString(VARfillString).
*0*If VARfiller is the empty String, return VARS. 
*0*Let VARfillLen be VARintMaxLength - VARstringLength. 
*0*Let VARtruncatedStringFiller be the String value consisting of repeated concatenations of VARfiller truncated to length VARfillLen. 
*0*Return the string-concatenation of VARS and VARtruncatedStringFiller.     

#############  END  ## 444 ###########################
############# BEGIN ## 445 ###########################
ID= 21.1.3.14
Summary= String.prototype.padStart ( maxLength [ , fillString ] )
Description= When the padStart method is called, the following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARintMaxLength be ? FUNCToLength(VARmaxLength). 
*0*Let VARstringLength be the length of VARS. 
*0*If VARintMaxLength is not greater than VARstringLength, return VARS. 
*0*If VARfillString is undefined, then
*1*Let VARfiller be the String value consisting solely of the code unit 0x0020 (SPACE). 
*0*Else,
*1*let VARfiller be ? FUNCToString(VARfillString).
*0*If VARfiller is the empty String, return VARS. 
*0*Let VARfillLen be VARintMaxLength - VARstringLength. 
*0*Let VARtruncatedStringFiller be the String value consisting of repeated concatenations of VARfiller truncated to length VARfillLen. 
*0*Return the string-concatenation of VARtruncatedStringFiller and VARS.     

#############  END  ## 445 ###########################
############# BEGIN ## 446 ###########################
ID= 21.1.3.15
Summary= String.prototype.repeat ( count )
Description= The following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARn be ? FUNCToInteger(VARcount). 
*0*If VARn &lt; 0, throw a RangeError exception. 
*0*If VARn is +∞, throw a RangeError exception. 
*0*Let VART be the String value that is made from VARn copies of VARS appended together. If VARn is 0, VART is the empty String. 
*0*Return VART.     

#############  END  ## 446 ###########################
############# BEGIN ## 447 ###########################
ID= 21.1.3.16
Summary= String.prototype.replace ( searchValue, replaceValue )
Description= When the replace method is called with arguments searchValue and replaceValue, the following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*If VARsearchValue is neither undefined nor null, then
*1*Let VARreplacer be ? FUNCGetMethod(VARsearchValue, @@replace). 
*1*If VARreplacer is not undefined, then
*2*Return ? FUNCCall(VARreplacer, VARsearchValue, « VARO, VARreplaceValue »). 
*0*Let VARstring be ? FUNCToString(VARO). 
*0*Let VARsearchString be ? FUNCToString(VARsearchValue). 
*0*Let VARfunctionalReplace be FUNCIsCallable(VARreplaceValue). 
*0*If VARfunctionalReplace is false, then
*1*Let VARreplaceValue be ? FUNCToString(VARreplaceValue). 
*0*Search VARstring for the first occurrence of VARsearchString and let VARpos be the index within VARstring of the first code unit of the matched substring and let VARmatched be VARsearchString. If no occurrences of VARsearchString were found, return VARstring. 
*0*If VARfunctionalReplace is true, then
*1*Let VARreplValue be ? FUNCCall(VARreplaceValue, undefined, « VARmatched, VARpos, VARstring »). 
*1*Let VARreplStr be ? FUNCToString(VARreplValue). 
*0*Else,
*1*Let VARcaptures be a new empty List. 
*1*Let VARreplStr be FUNCGetSubstitution(VARmatched, VARstring, VARpos, VARcaptures, undefined, VARreplaceValue). 
*0*Let VARtailPos be VARpos + the number of code units in VARmatched. 
*0*Let VARnewString be the string-concatenation of the first VARpos code units of VARstring, VARreplStr, and the trailing substring of VARstring starting at index VARtailPos. If VARpos is 0, the first element of the concatenation will be the empty String. 
*0*Return VARnewString.     

#############  END  ## 447 ###########################
############# BEGIN ## 448 ###########################
ID= 21.1.3.16.1
Summary= Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )
Description= The abstract operation GetSubstitution performs the following steps:
*0*Assert: FUNCType(VARmatched) is String. 
*0*Let VARmatchLength be the number of code units in VARmatched. 
*0*Assert: FUNCType(VARstr) is String. 
*0*Let VARstringLength be the number of code units in VARstr. 
*0*Assert: VARposition is a nonnegative integer. 
*0*Assert: VARposition ≤ VARstringLength. 
*0*Assert: VARcaptures is a possibly empty List of Strings. 
*0*Assert: FUNCType(VARreplacement) is String. 
*0*Let VARtailPos be VARposition + VARmatchLength. 
*0*Let VARm be the number of elements in VARcaptures. 
*0*If VARnamedCaptures is not undefined, then
*1*Set VARnamedCaptures to ? FUNCToObject(VARnamedCaptures). 
*0*Let VARresult be the String value derived from VARreplacement by copying code unit elements from VARreplacement to VARresult while performing replacements as specified in Table 48. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements. 
*0*Return VARresult.      

#############  END  ## 448 ###########################
############# BEGIN ## 449 ###########################
ID= 21.1.3.17
Summary= String.prototype.search ( regexp )
Description= When the search method is called with argument regexp, the following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*If VARregexp is neither undefined nor null, then
*1*Let VARsearcher be ? FUNCGetMethod(VARregexp, @@search). 
*1*If VARsearcher is not undefined, then
*2*Return ? FUNCCall(VARsearcher, VARregexp, « VARO »). 
*0*Let VARstring be ? FUNCToString(VARO). 
*0*Let VARrx be ? FUNCRegExpCreate(VARregexp, undefined). 
*0*Return ? FUNCInvoke(VARrx, @@search, « VARstring »).     

#############  END  ## 449 ###########################
############# BEGIN ## 450 ###########################
ID= 21.1.3.18
Summary= String.prototype.slice ( start, end )
Description= The slice method takes two arguments, start and end, and returns a substring of the result of converting this object to a String, starting from index start and running to, but not including, index end (or through the end of the String if end is undefined). If start is negative, it is treated as  sourceLength+start where sourceLength is the length of the String. If end is negative, it is treated as  sourceLength+end where sourceLength is the length of the String. The result is a String value, not a String object. The following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARlen be the length of VARS. 
*0*Let VARintStart be ? FUNCToInteger(VARstart). 
*0*If VARend is undefined, then
*1*Let VARintEnd be VARlen
*0*Else,
*1*let VARintEnd be ? FUNCToInteger(VARend).
*0*If VARintStart &lt; 0, then
*1*Let VARfrom be max(VARlen + VARintStart, 0); otherwise let VARfrom be min(VARintStart, VARlen). 
*0*If VARintEnd &lt; 0, then
*1*Let VARto be max(VARlen + VARintEnd, 0); otherwise let VARto be min(VARintEnd, VARlen). 
*0*Let VARspan be max(VARto - VARfrom, 0). 
*0*Return the String value containing VARspan consecutive elements from VARS beginning with the element at index VARfrom.     

#############  END  ## 450 ###########################
############# BEGIN ## 451 ###########################
ID= 21.1.3.19
Summary= String.prototype.split ( separator, limit )
Description= Returns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of separator; these occurrences are not part of any substring in the returned array, but serve to divide up the String value. The value of separator may be a String of any length or it may be an object, such as a RegExp, that has a @@split method.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*If VARseparator is neither undefined nor null, then
*1*Let VARsplitter be ? FUNCGetMethod(VARseparator, @@split). 
*1*If VARsplitter is not undefined, then
*2*Return ? FUNCCall(VARsplitter, VARseparator, « VARO, VARlimit »). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARA be ! FUNCArrayCreate(0). 
*0*Let VARlengthA be 0. 
*0*If VARlimit is undefined, then
*1*Let VARlim be 2--EXP0--32--EXP1---1
*0*Else,
*1*let VARlim be ? FUNCToUint32(VARlimit).
*0*Let VARs be the length of VARS. 
*0*Let VARp be 0. 
*0*Let VARR be ? FUNCToString(VARseparator). 
*0*If VARlim = 0, return VARA. 
*0*If VARseparator is undefined, then
*1*Perform ! FUNCCreateDataProperty(VARA, "0", VARS). 
*1*Return VARA. 
*0*If VARs = 0, then
*1*Let VARz be FUNCSplitMatch(VARS, 0, VARR). 
*1*If VARz is not false, return VARA. 
*1*Perform ! FUNCCreateDataProperty(VARA, "0", VARS). 
*1*Return VARA. 
*0*Let VARq be VARp. 
*0*Repeat, while VARq ≠ VARs
*1*Let VARe be FUNCSplitMatch(VARS, VARq, VARR). 
*1*If VARe is false, then
*2*Let VARq be VARq+1. 
*1*Else VARe is an integer index ≤ VARs,
*2*If VARe = VARp, then
*3*Let VARq be VARq+1. 
*2*Else VARe ≠ VARp,
*3*Let VART be the String value equal to the substring of VARS consisting of the code units at indices VARp (inclusive) through VARq (exclusive). 
*3*Perform ! FUNCCreateDataProperty(VARA, ! FUNCToString(VARlengthA), VART). 
*3*Increment VARlengthA by 1. 
*3*If VARlengthA = VARlim, return VARA. 
*3*Let VARp be VARe. 
*3*Let VARq be VARp. 
*0*Let VART be the String value equal to the substring of VARS consisting of the code units at indices VARp (inclusive) through VARs (exclusive). 
*0*Perform ! FUNCCreateDataProperty(VARA, ! FUNCToString(VARlengthA), VART). 
*0*Return VARA.     

#############  END  ## 451 ###########################
############# BEGIN ## 452 ###########################
ID= 21.1.3.19.1
Summary= Runtime Semantics: SplitMatch ( S, q, R )
Description= The abstract operation SplitMatch takes three parameters, a String S, an integer q, and a String R, and performs the following steps in order to return either false or the end index of a match:
*0*Assert: FUNCType(VARR) is String. 
*0*Let VARr be the number of code units in VARR. 
*0*Let VARs be the number of code units in VARS. 
*0*If VARq+VARr &gt; VARs, return false. 
*0*If there exists an integer VARi between 0 (inclusive) and VARr (exclusive) such that the code unit at index VARq+VARi within VARS is different from the code unit at index VARi within VARR, return false. 
*0*Return VARq+VARr.      

#############  END  ## 452 ###########################
############# BEGIN ## 453 ###########################
ID= 21.1.3.20
Summary= String.prototype.startsWith ( searchString [ , position ] )
Description= The following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARisRegExp be ? FUNCIsRegExp(VARsearchString). 
*0*If VARisRegExp is true, throw a TypeError exception. 
*0*Let VARsearchStr be ? FUNCToString(VARsearchString). 
*0*Let VARpos be ? FUNCToInteger(VARposition). (If VARposition is undefined, this step produces the value 0.) 
*0*Let VARlen be the length of VARS. 
*0*Let VARstart be min(max(VARpos, 0), VARlen). 
*0*Let VARsearchLength be the length of VARsearchStr. 
*0*If VARsearchLength+VARstart is greater than VARlen, return false. 
*0*If the sequence of elements of VARS starting at VARstart of length VARsearchLength is the same as the full element sequence of VARsearchStr, return true. 
*0*Otherwise, return false.     

#############  END  ## 453 ###########################
############# BEGIN ## 454 ###########################
ID= 21.1.3.21
Summary= String.prototype.substring ( start, end )
Description= The substring method takes two arguments, start and end, and returns a substring of the result of converting this object to a String, starting from index start and running to, but not including, index end of the String (or through the end of the String if end is undefined). The result is a String value, not a String object.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARlen be the length of VARS. 
*0*Let VARintStart be ? FUNCToInteger(VARstart). 
*0*If VARend is undefined, then
*1*Let VARintEnd be VARlen
*0*Else,
*1*let VARintEnd be ? FUNCToInteger(VARend).
*0*Let VARfinalStart be min(max(VARintStart, 0), VARlen). 
*0*Let VARfinalEnd be min(max(VARintEnd, 0), VARlen). 
*0*Let VARfrom be min(VARfinalStart, VARfinalEnd). 
*0*Let VARto be max(VARfinalStart, VARfinalEnd). 
*0*Return the String value whose length is VARto - VARfrom, containing code units from VARS, namely the code units with indices VARfrom through VARto - 1, in ascending order.     

#############  END  ## 454 ###########################
############# BEGIN ## 455 ###########################
ID= 21.1.3.24
Summary= String.prototype.toLowerCase ( )
Description= This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  6.1.4. The following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VARcpList be a List containing in order the code points as defined in 6.1.4 of VARS, starting at the first element of VARS. 
*0*Let VARcuList be a List where the elements are the result of toLowercase(VARcplist), according to the Unicode Default Case Conversion algorithm. 
*0*Let VARL be the String value whose elements are the UTF16Encoding of the code points of VARcuList. 
*0*Return VARL.     

#############  END  ## 455 ###########################
############# BEGIN ## 456 ###########################
ID= 21.1.3.25
Summary= String.prototype.toString ( )
Description= When the toString method is called, the following steps are taken:
*0*Return ? FUNCthisStringValue(this value).     

#############  END  ## 456 ###########################
############# BEGIN ## 457 ###########################
ID= 21.1.3.27
Summary= String.prototype.trim ( )
Description= This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  6.1.4.
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Let VART be the String value that is a copy of VARS with both leading and trailing white space removed. The definition of white space is the union of WhiteSpace and LineTerminator. When determining whether a Unicode code point is in Unicode general category “Space_Separator” (“Zs”), code unit sequences are interpreted as UTF-16 encoded code point sequences as specified in 6.1.4. 
*0*Return VART.     

#############  END  ## 457 ###########################
############# BEGIN ## 458 ###########################
ID= 21.1.3.28
Summary= String.prototype.valueOf ( )
Description= When the valueOf method is called, the following steps are taken:
*0*Return ? FUNCthisStringValue(this value).     

#############  END  ## 458 ###########################
############# BEGIN ## 459 ###########################
ID= 21.1.3.29
Summary= String.prototype [ @@iterator ] ( )
Description= When the @@iterator method is called it returns an Iterator object (25.1.1.2) that iterates over the code points of a String value, returning each code point as a String value. The following steps are taken:
*0*Let VARO be ? FUNCRequireObjectCoercible(this value). 
*0*Let VARS be ? FUNCToString(VARO). 
*0*Return FUNCCreateStringIterator(VARS).     

#############  END  ## 459 ###########################
############# BEGIN ## 460 ###########################
ID= 21.1.5.1
Summary= CreateStringIterator ( string )
Description= Several methods of String objects return Iterator objects. The abstract operation CreateStringIterator with argument string is used to create such iterator objects. It performs the following steps:
*0*Assert: FUNCType(VARstring) is String. 
*0*Let VARiterator be FUNCObjectCreate(%StringIteratorPrototype%, « [[VARIteratedString]], [[VARStringIteratorNextIndex]] »). 
*0*Set VARiterator.[[VARIteratedString]] to VARstring. 
*0*Set VARiterator.[[VARStringIteratorNextIndex]] to 0. 
*0*Return VARiterator.     

#############  END  ## 460 ###########################
############# BEGIN ## 461 ###########################
ID= 21.1.5.2.1
Summary= %StringIteratorPrototype%.next ( )
Description= None
*0*Let VARO be the this value. 
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*If VARO does not have all of the internal slots of a String Iterator Instance (21.1.5.3), throw a TypeError exception. 
*0*Let VARs be VARO.[[VARIteratedString]]. 
*0*If VARs is undefined, return FUNCCreateIterResultObject(undefined, true). 
*0*Let VARposition be VARO.[[VARStringIteratorNextIndex]]. 
*0*Let VARlen be the length of VARs. 
*0*If VARposition ≥ VARlen, then
*1*Set VARO.[[VARIteratedString]] to undefined. 
*1*Return FUNCCreateIterResultObject(undefined, true). 
*0*Let VARfirst be the numeric value of the code unit at index VARposition within VARs. 
*0*If VARfirst &lt; 0xD800 or VARfirst &gt; 0xDBFF or VARposition+1 = VARlen, then
*1*Let VARresultString be the String value consisting of the single code unit VARfirst. 
*0*Else,
*1*Let VARsecond be the numeric value of the code unit at index VARposition+1 within the String VARS. 
*1*If VARsecond &lt; 0xDC00 or VARsecond &gt; 0xDFFF, then
*2*Let VARresultString be the String value consisting of the single code unit VARfirst. 
*1*Else,
*2*let VARresultString be the string-concatenation of the code unit VARfirst and the code unit VARsecond.
*0*Let VARresultSize be the number of code units in VARresultString. 
*0*Set VARO.[[VARStringIteratorNextIndex]] to VARposition + VARresultSize. 
*0*Return FUNCCreateIterResultObject(VARresultString, false).      

#############  END  ## 461 ###########################
############# BEGIN ## 462 ###########################
ID= 21.2.2.5.1
Summary= Runtime Semantics: RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )
Description= The abstract operation RepeatMatcher takes eight parameters, a Matcher m, an integer min, an integer (or ∞) max, a Boolean greedy, a State x, a Continuation c, an integer parenIndex, and an integer parenCount, and performs the following steps:
*0*If VARmax is zero, return VARc(VARx). 
*0*Let VARd be an internal Continuation closure that takes one State argument VARy and performs the following steps when evaluated:
*1*If VARmin is zero and VARy's VARendIndex is equal to VARx's VARendIndex, return failure. 
*1*If VARmin is zero, then
*2*Let VARmin2 be zero; otherwise let VARmin2 be VARmin-1. 
*1*If VARmax is ∞, then
*2*Let VARmax2 be ∞; otherwise let VARmax2 be VARmax-1. 
*1*Call FUNCRepeatMatcher(VARm, VARmin2, VARmax2, VARgreedy, VARy, VARc, VARparenIndex, VARparenCount) and return its result. 
*0*Let VARcap be a copy of VARx's VARcaptures List. 
*0*For each integer VARk that satisfies VARparenIndex &lt; VARk and VARk ≤ VARparenIndex+VARparenCount, set VARcap[VARk] to undefined. 
*0*Let VARe be VARx's VARendIndex. 
*0*Let VARxr be the State (VARe, VARcap). 
*0*If VARmin is not zero, return VARm(VARxr, VARd). 
*0*If VARgreedy is false, then
*1*Call VARc(VARx) and let VARz be its result. 
*1*If VARz is not failure, return VARz. 
*1*Call VARm(VARxr, VARd) and return its result. 
*0*Call VARm(VARxr, VARd) and let VARz be its result. 
*0*If VARz is not failure, return VARz. 
*0*Call VARc(VARx) and return its result.      

#############  END  ## 462 ###########################
############# BEGIN ## 463 ###########################
ID= 21.2.2.6.1
Summary= Runtime Semantics: WordCharacters ( )
Description= The abstract operation WordCharacters performs the following steps:
*0*Let VARA be a set of characters containing the sixty-three characters:      abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_ 
*0*Let VARU be an empty set. 
*0*For each character VARc not in set VARA where FUNCCanonicalize(VARc) is in VARA, add VARc to VARU. 
*0*Assert: Unless VARUnicode and VARIgnoreCase are both true, VARU is empty. 
*0*Add the characters in set VARU to set VARA. 
*0*Return VARA.      

#############  END  ## 463 ###########################
############# BEGIN ## 464 ###########################
ID= 21.2.2.6.2
Summary= Runtime Semantics: IsWordChar ( e )
Description= The abstract operation IsWordChar takes an integer parameter e and performs the following steps:
*0*If VARe is -1 or VARe is VARInputLength, return false. 
*0*Let VARc be the character VARInput[VARe]. 
*0*Let VARwordChars be the result of ! FUNCWordCharacters(). 
*0*If VARc is in VARwordChars, return true. 
*0*Return false.      

#############  END  ## 464 ###########################
############# BEGIN ## 465 ###########################
ID= 21.2.2.8.1
Summary= Runtime Semantics: CharacterSetMatcher ( A, invert, direction )
Description= The abstract operation CharacterSetMatcher takes three arguments, a CharSet A, a Boolean flag invert, and an integer direction, and performs the following steps:
*0*Return an internal Matcher closure that takes two arguments, a State VARx and a Continuation VARc, and performs the following steps when evaluated:
*1*Let VARe be VARx's VARendIndex. 
*1*Let VARf be VARe + VARdirection. 
*1*If VARf &lt; 0 or VARf &gt; VARInputLength, return failure. 
*1*Let VARindex be min(VARe, VARf). 
*1*Let VARch be the character VARInput[VARindex]. 
*1*Let VARcc be FUNCCanonicalize(VARch). 
*1*If VARinvert is false, then
*2*If there does not exist a member VARa of set VARA such that FUNCCanonicalize(VARa) is VARcc, return failure. 
*1*Else,
*2*Assert: VARinvert is true. 
*2*If there exists a member VARa of set VARA such that FUNCCanonicalize(VARa) is VARcc, return failure. 
*1*Let VARcap be VARx's VARcaptures List. 
*1*Let VARy be the State (VARf, VARcap). 
*1*Call VARc(VARy) and return its result.      

#############  END  ## 465 ###########################
############# BEGIN ## 466 ###########################
ID= 21.2.2.8.2
Summary= Runtime Semantics: Canonicalize ( ch )
Description= The abstract operation Canonicalize takes a character parameter ch and performs the following steps:
*0*If VARIgnoreCase is false, return VARch. 
*0*If VARUnicode is true, then
*1*If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for VARch, return the result of applying that mapping to VARch. 
*1*Return VARch. 
*0*Else,
*1*Assert: VARch is a UTF-16 code unit. 
*1*Let VARs be the String value consisting of the single code unit VARch. 
*1*Let VARu be the same result produced as if by performing the algorithm for String.prototype.toUpperCase using VARs as the this value. 
*1*Assert: VARu is a String value. 
*1*If VARu does not consist of a single code unit, return VARch. 
*1*Let VARcu be VARu's single code unit element. 
*1*If the numeric value of VARch ≥ 128 and the numeric value of VARcu &lt; 128, return VARch. 
*1*Return VARcu.      

#############  END  ## 466 ###########################
############# BEGIN ## 467 ###########################
ID= 21.2.2.8.3
Summary= Runtime Semantics: UnicodeMatchProperty ( p )
Description= The abstract operation UnicodeMatchProperty takes a parameter p that is a List of Unicode code points and performs the following steps:
*0*Assert: VARp is a List of Unicode code points that is identical to a List of Unicode code points that is a Unicode property name or property alias listed in the “Property name and aliases” column of Table 51 or Table 52. 
*0*Let VARc be the canonical property name of VARp as given in the “Canonical property name” column of the corresponding row. 
*0*Return the List of Unicode code points of VARc.      

#############  END  ## 467 ###########################
############# BEGIN ## 468 ###########################
ID= 21.2.2.8.4
Summary= Runtime Semantics: UnicodeMatchPropertyValue ( p, v )
Description= The abstract operation UnicodeMatchPropertyValue takes two parameters p and v, each of which is a List of Unicode code points, and performs the following steps:
*0*Assert: VARp is a List of Unicode code points that is identical to a List of Unicode code points that is a canonical, unaliased Unicode property name listed in the “Canonical property name” column of Table 51. 
*0*Assert: VARv is a List of Unicode code points that is identical to a List of Unicode code points that is a property value or property value alias for Unicode property VARp listed in the “Property value and aliases” column of Table 53 or Table 54. 
*0*Let VARvalue be the canonical property value of VARv as given in the “Canonical property value” column of the corresponding row. 
*0*Return the List of Unicode code points of VARvalue.      

#############  END  ## 468 ###########################
############# BEGIN ## 469 ###########################
ID= 21.2.2.9.1
Summary= Runtime Semantics: BackreferenceMatcher ( n, direction )
Description= The abstract operation BackreferenceMatcher takes two arguments, an integer n and an integer direction, and performs the following steps:
*0*Return an internal Matcher closure that takes two arguments, a State VARx and a Continuation VARc, and performs the following steps:
*1*Let VARcap be VARx's VARcaptures List. 
*1*Let VARs be VARcap[VARn]. 
*1*If VARs is undefined, return VARc(VARx). 
*1*Let VARe be VARx's VARendIndex. 
*1*Let VARlen be the number of elements in VARs. 
*1*Let VARf be VARe + VARdirection × VARlen. 
*1*If VARf &lt; 0 or VARf &gt; VARInputLength, return failure. 
*1*Let VARg be min(VARe, VARf). 
*1*If there exists an integer VARi between 0 (inclusive) and VARlen (exclusive) such that FUNCCanonicalize(VARs[VARi]) is not the same character value as FUNCCanonicalize(VARInput[VARg + VARi]), return failure. 
*1*Let VARy be the State (VARf, VARcap). 
*1*Call VARc(VARy) and return its result.      

#############  END  ## 469 ###########################
############# BEGIN ## 470 ###########################
ID= 21.2.2.15.1
Summary= Runtime Semantics: CharacterRange ( A, B )
Description= The abstract operation CharacterRange takes two CharSet parameters A and B and performs the following steps:
*0*Assert: VARA and VARB each contain exactly one character. 
*0*Let VARa be the one character in CharSet VARA. 
*0*Let VARb be the one character in CharSet VARB. 
*0*Let VARi be the character value of character VARa. 
*0*Let VARj be the character value of character VARb. 
*0*Assert: VARi ≤ VARj. 
*0*Return the set containing all characters numbered VARi through VARj, inclusive.      

#############  END  ## 470 ###########################
############# BEGIN ## 471 ###########################
ID= 21.2.3.1
Summary= RegExp ( pattern, flags )
Description= The following steps are taken:
*0*Let VARpatternIsRegExp be ? FUNCIsRegExp(VARpattern). 
*0*If NewTarget is undefined, then
*1*Let VARnewTarget be the active function object. 
*1*If VARpatternIsRegExp is true and VARflags is undefined, then
*2*Let VARpatternConstructor be ? FUNCGet(VARpattern, "constructor"). 
*2*If FUNCSameValue(VARnewTarget, VARpatternConstructor) is true, return VARpattern. 
*0*Else,
*1*let VARnewTarget be NewTarget.
*0*If FUNCType(VARpattern) is Object and VARpattern has a [[VARRegExpMatcher]] internal slot, then
*1*Let VARP be VARpattern.[[VAROriginalSource]]. 
*1*If VARflags is undefined, then
*2*Let VARF be VARpattern.[[VARVAROriginalFlags]]. 
*1*Else,
*2*let VARF be VARflags.
*0*Else if VARpatternIsRegExp is true, then
*1*Let VARP be ? FUNCGet(VARpattern, "source"). 
*1*If VARflags is undefined, then
*2*Let VARF be ? FUNCGet(VARpattern, "flags"). 
*1*Else,
*2*let VARF be VARflags.
*0*Else,
*1*Let VARP be VARpattern. 
*1*Let VARF be VARflags. 
*0*Let VARO be ? FUNCRegExpAlloc(VARnewTarget). 
*0*Return ? FUNCRegExpInitialize(VARO, VARP, VARF).     

#############  END  ## 471 ###########################
############# BEGIN ## 472 ###########################
ID= 21.2.3.2.1
Summary= Runtime Semantics: RegExpAlloc ( newTarget )
Description= When the abstract operation RegExpAlloc with argument newTarget is called, the following steps are taken:
*0*Let VARobj be ? FUNCOrdinaryCreateFromConstructor(VARnewTarget, "%RegExpPrototype%", « [[VARRegExpMatcher]], [[VAROriginalSource]], [[VAROriginalFlags]] »). 
*0*Perform ! FUNCDefinePropertyOrThrow(VARobj, "lastIndex", PropertyDescriptor { [[VARWritable]]: true, [[VAREnumerable]]: false, [[VARConfigurable]]: false }). 
*0*Return VARobj.      

#############  END  ## 472 ###########################
############# BEGIN ## 473 ###########################
ID= 21.2.3.2.2
Summary= Runtime Semantics: RegExpInitialize ( obj, pattern, flags )
Description= When the abstract operation RegExpInitialize with arguments obj, pattern, and flags is called, the following steps are taken:
*0*If VARpattern is undefined, then
*1*Let VARP be the empty String. 
*0*Else,
*1*let VARP be ? FUNCToString(VARpattern).
*0*If VARflags is undefined, then
*1*Let VARF be the empty String. 
*0*Else,
*1*let VARF be ? FUNCToString(VARflags).
*0*If VARF contains any code unit other than "g", "i", "m", "s", "u", or "y" or if it contains the same code unit more than once, throw a SyntaxError exception. 
*0*If VARF contains "u", then
*1*Let VARBMP be false
*0*Else,
*1*let VARBMP be true.
*0*If VARBMP is true, then
*1*Parse VARP using the grammars in 21.2.1 and interpreting each of its 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements. The goal symbol for the parse is Pattern[~U, ~N]. If the result of parsing contains a GroupName, reparse with the goal symbol Pattern[~U, +N] and use this result instead. Throw a SyntaxError exception if VARP did not conform to the grammar, if any elements of VARP were not matched by the parse, or if any Early Error conditions exist. 
*1*Let VARpatternCharacters be a List whose elements are the code unit elements of VARP. 
*0*Else,
*1*Parse VARP using the grammars in 21.2.1 and interpreting VARP as UTF-16 encoded Unicode code points (6.1.4). The goal symbol for the parse is Pattern[+U, +N]. Throw a SyntaxError exception if VARP did not conform to the grammar, if any elements of VARP were not matched by the parse, or if any Early Error conditions exist. 
*1*Let VARpatternCharacters be a List whose elements are the code points resulting from applying UTF-16 decoding to VARP's sequence of elements. 
*0*Set VARobj.[[VAROriginalSource]] to VARP. 
*0*Set VARobj.[[VAROriginalFlags]] to VARF. 
*0*Set VARobj.[[VARRegExpMatcher]] to the internal procedure that evaluates the above parse of VARP by applying the semantics provided in 21.2.2 using VARpatternCharacters as the pattern's List of SourceCharacter values and VARF as the flag parameters. 
*0*Perform ? FUNCSet(VARobj, "lastIndex", 0, true). 
*0*Return VARobj.      

#############  END  ## 473 ###########################
############# BEGIN ## 474 ###########################
ID= 21.2.3.2.3
Summary= Runtime Semantics: RegExpCreate ( P, F )
Description= When the abstract operation RegExpCreate with arguments P and F is called, the following steps are taken:
*0*Let VARobj be ? FUNCRegExpAlloc(%RegExp%). 
*0*Return ? FUNCRegExpInitialize(VARobj, VARP, VARF).      

#############  END  ## 474 ###########################
############# BEGIN ## 475 ###########################
ID= 21.2.3.2.4
Summary= Runtime Semantics: EscapeRegExpPattern ( P, F )
Description= When the abstract operation EscapeRegExpPattern with arguments P and F is called, the following occurs:
*0*Let VARS be a String in the form of a Pattern[~U] (Pattern[+U] if VARF contains "u") equivalent to VARP interpreted as UTF-16 encoded Unicode code points (6.1.4), in which certain code points are escaped as described below. VARS may or may not be identical to VARP; however, the internal procedure that would result from evaluating VARS as a Pattern[~U] (Pattern[+U] if VARF contains "u") must behave identically to the internal procedure given by the constructed object's [[VARRegExpMatcher]] internal slot. Multiple calls to this abstract operation using the same values for VARP and VARF must produce identical results. 
*0*The code points / or any LineTerminator occurring in the pattern shall be escaped in VARS as necessary to ensure that the string-concatenation of "/", VARS, "/", and VARF can be parsed (in an appropriate lexical context) as a RegularExpressionLiteral that behaves identically to the constructed regular expression. For example, if VARP is "/", then VARS could be "\/" or "\u002F", among other possibilities, but not "/", because /// followed by VARF would be parsed as a SingleLineComment rather than a RegularExpressionLiteral. If VARP is the empty String, this specification can be met by letting VARS be "(?:)". 
*0*Return VARS.      

#############  END  ## 475 ###########################
############# BEGIN ## 476 ###########################
ID= 21.2.5.2
Summary= RegExp.prototype.exec ( string )
Description= Performs a regular expression match of string against the regular expression and returns an Array object containing the results of the match, or null if string did not match.
*0*Let VARR be the this value. 
*0*If FUNCType(VARR) is not Object, throw a TypeError exception. 
*0*If VARR does not have a [[VARRegExpMatcher]] internal slot, throw a TypeError exception. 
*0*Let VARS be ? FUNCToString(VARstring). 
*0*Return ? FUNCRegExpBuiltinExec(VARR, VARS).     

#############  END  ## 476 ###########################
############# BEGIN ## 477 ###########################
ID= 21.2.5.2.1
Summary= Runtime Semantics: RegExpExec ( R, S )
Description= The abstract operation RegExpExec with arguments R and S performs the following steps:
*0*Assert: FUNCType(VARR) is Object. 
*0*Assert: FUNCType(VARS) is String. 
*0*Let VARexec be ? FUNCGet(VARR, "exec"). 
*0*If FUNCIsCallable(VARexec) is true, then
*1*Let VARresult be ? FUNCCall(VARexec, VARR, « VARS »). 
*1*If FUNCType(VARresult) is neither Object or Null, throw a TypeError exception. 
*1*Return VARresult. 
*0*If VARR does not have a [[VARRegExpMatcher]] internal slot, throw a TypeError exception. 
*0*Return ? FUNCRegExpBuiltinExec(VARR, VARS).      

#############  END  ## 477 ###########################
############# BEGIN ## 478 ###########################
ID= 21.2.5.2.2
Summary= Runtime Semantics: RegExpBuiltinExec ( R, S )
Description= The abstract operation RegExpBuiltinExec with arguments R and S performs the following steps:
*0*Assert: VARR is an initialized RegExp instance. 
*0*Assert: FUNCType(VARS) is String. 
*0*Let VARlength be the number of code units in VARS. 
*0*Let VARlastIndex be ? FUNCToLength(? FUNCGet(VARR, "lastIndex")). 
*0*Let VARflags be VARR.[[VAROriginalFlags]]. 
*0*If VARflags contains "g", then
*1*Let VARglobal be true
*0*Else,
*1*let VARglobal be false.
*0*If VARflags contains "y", then
*1*Let VARsticky be true
*0*Else,
*1*let VARsticky be false.
*0*If VARglobal is false and VARsticky is false, set VARlastIndex to 0. 
*0*Let VARmatcher be VARR.[[VARRegExpMatcher]]. 
*0*If VARflags contains "u", then
*1*Let VARfullUnicode be true
*0*Else,
*1*let VARfullUnicode be false.
*0*Let VARmatchSucceeded be false. 
*0*Repeat, while VARmatchSucceeded is false
*1*If VARlastIndex &gt; VARlength, then
*2*If VARglobal is true or VARsticky is true, then
*3*Perform ? FUNCSet(VARR, "lastIndex", 0, true). 
*2*Return null. 
*1*Let VARr be VARmatcher(VARS, VARlastIndex). 
*1*If VARr is failure, then
*2*If VARsticky is true, then
*3*Perform ? FUNCSet(VARR, "lastIndex", 0, true). 
*3*Return null. 
*2*Set VARlastIndex to FUNCAdvanceStringIndex(VARS, VARlastIndex, VARfullUnicode). 
*1*Else,
*2*Assert: VARr is a State. 
*2*Set VARmatchSucceeded to true. 
*0*Let VARe be VARr's VARendIndex value. 
*0*If VARfullUnicode is true, then
*1*VARe is an index into the VARInput character list, derived from VARS, matched by VARmatcher. Let VAReUTF be the smallest index into VARS that corresponds to the character at element VARe of VARInput. If VARe is greater than or equal to the number of elements in VARInput, then VAReUTF is the number of code units in VARS. 
*1*Set VARe to VAReUTF. 
*0*If VARglobal is true or VARsticky is true, then
*1*Perform ? FUNCSet(VARR, "lastIndex", VARe, true). 
*0*Let VARn be the number of elements in VARr's VARcaptures List. (This is the same value as 21.2.2.1's VARNcapturingParens.) 
*0*Assert: VARn &lt; 2--EXP0--32--EXP1---1. 
*0*Let VARA be ! FUNCArrayCreate(VARn + 1). 
*0*Assert: The value of VARA's "length" property is VARn + 1. 
*0*Perform ! FUNCCreateDataProperty(VARA, "index", VARlastIndex). 
*0*Perform ! FUNCCreateDataProperty(VARA, "input", VARS). 
*0*Let VARmatchedSubstr be the matched substring (i.e. the portion of VARS between offset VARlastIndex inclusive and offset VARe exclusive). 
*0*Perform ! FUNCCreateDataProperty(VARA, "0", VARmatchedSubstr). 
*0*If VARR contains any GroupName, then
*1*Let VARgroups be FUNCObjectCreate(null). 
*0*Else,
*1*Let VARgroups be undefined. 
*0*Perform ! FUNCCreateDataProperty(VARA, "groups", VARgroups). 
*0*For each integer VARi such that VARi &gt; 0 and VARi ≤ VARn, do
*1*Let VARcaptureI be VARi--EXP0--th--EXP1-- element of VARr's VARcaptures List. 
*1*If VARcaptureI is undefined, then
*2*Let VARcapturedValue be undefined. 
*1*Else if VARfullUnicode is true, then
*2*Assert: VARcaptureI is a List of code points. 
*2*Let VARcapturedValue be the String value whose code units are the UTF16Encoding of the code points of VARcaptureI. 
*1*Else VARfullUnicode is false,
*2*Assert: VARcaptureI is a List of code units. 
*2*Let VARcapturedValue be the String value consisting of the code units of VARcaptureI. 
*1*Perform ! FUNCCreateDataProperty(VARA, ! FUNCToString(VARi), VARcapturedValue). 
*1*If the VARith capture of VARR was defined with a GroupName, then
*2*Let VARs be the StringValue of the corresponding RegExpIdentifierName. 
*2*Perform ! FUNCCreateDataProperty(VARgroups, VARs, VARcapturedValue). 
*0*Return VARA.      

#############  END  ## 478 ###########################
############# BEGIN ## 479 ###########################
ID= 21.2.5.2.3
Summary= AdvanceStringIndex ( S, index, unicode )
Description= The abstract operation AdvanceStringIndex with arguments S, index, and unicode performs the following steps:
*0*Assert: FUNCType(VARS) is String. 
*0*Assert: VARindex is an integer such that 0≤VARindex≤2--EXP0--53--EXP1---1. 
*0*Assert: FUNCType(VARunicode) is Boolean. 
*0*If VARunicode is false, return VARindex+1. 
*0*Let VARlength be the number of code units in VARS. 
*0*If VARindex+1 ≥ VARlength, return VARindex+1. 
*0*Let VARfirst be the numeric value of the code unit at index VARindex within VARS. 
*0*If VARfirst &lt; 0xD800 or VARfirst &gt; 0xDBFF, return VARindex+1. 
*0*Let VARsecond be the numeric value of the code unit at index VARindex+1 within VARS. 
*0*If VARsecond &lt; 0xDC00 or VARsecond &gt; 0xDFFF, return VARindex+1. 
*0*Return VARindex+2.      

#############  END  ## 479 ###########################
############# BEGIN ## 480 ###########################
ID= 21.2.5.7
Summary= RegExp.prototype [ @@match ] ( string )
Description= When the @@match method is called with argument string, the following steps are taken:
*0*Let VARrx be the this value. 
*0*If FUNCType(VARrx) is not Object, throw a TypeError exception. 
*0*Let VARS be ? FUNCToString(VARstring). 
*0*Let VARglobal be FUNCToBoolean(? FUNCGet(VARrx, "global")). 
*0*If VARglobal is false, then
*1*Return ? FUNCRegExpExec(VARrx, VARS). 
*0*Else VARglobal is true,
*1*Let VARfullUnicode be FUNCToBoolean(? FUNCGet(VARrx, "unicode")). 
*1*Perform ? FUNCSet(VARrx, "lastIndex", 0, true). 
*1*Let VARA be ! FUNCArrayCreate(0). 
*1*Let VARn be 0. 
*1*Repeat,
*2*Let VARresult be ? FUNCRegExpExec(VARrx, VARS). 
*2*If VARresult is null, then
*3*If VARn=0, return null. 
*3*Return VARA. 
*2*Else VARresult is not null,
*3*Let VARmatchStr be ? FUNCToString(? FUNCGet(VARresult, "0")). 
*3*Let VARstatus be FUNCCreateDataProperty(VARA, ! FUNCToString(VARn), VARmatchStr). 
*3*Assert: VARstatus is true. 
*3*If VARmatchStr is the empty String, then
*4*Let VARthisIndex be ? FUNCToLength(? FUNCGet(VARrx, "lastIndex")). 
*4*Let VARnextIndex be FUNCAdvanceStringIndex(VARS, VARthisIndex, VARfullUnicode). 
*4*Perform ? FUNCSet(VARrx, "lastIndex", VARnextIndex, true). 
*3*Increment VARn.     

#############  END  ## 480 ###########################
############# BEGIN ## 481 ###########################
ID= 21.2.5.9
Summary= RegExp.prototype [ @@replace ] ( string, replaceValue )
Description= When the @@replace method is called with arguments string and replaceValue, the following steps are taken:
*0*Let VARrx be the this value. 
*0*If FUNCType(VARrx) is not Object, throw a TypeError exception. 
*0*Let VARS be ? FUNCToString(VARstring). 
*0*Let VARlengthS be the number of code unit elements in VARS. 
*0*Let VARfunctionalReplace be FUNCIsCallable(VARreplaceValue). 
*0*If VARfunctionalReplace is false, then
*1*Let VARreplaceValue be ? FUNCToString(VARreplaceValue). 
*0*Let VARglobal be FUNCToBoolean(? FUNCGet(VARrx, "global")). 
*0*If VARglobal is true, then
*1*Let VARfullUnicode be FUNCToBoolean(? FUNCGet(VARrx, "unicode")). 
*1*Perform ? FUNCSet(VARrx, "lastIndex", 0, true). 
*0*Let VARresults be a new empty List. 
*0*Let VARdone be false. 
*0*Repeat, while VARdone is false
*1*Let VARresult be ? FUNCRegExpExec(VARrx, VARS). 
*1*If VARresult is null, set VARdone to true. 
*1*Else VARresult is not null,
*2*Append VARresult to the end of VARresults. 
*2*If VARglobal is false, set VARdone to true. 
*2*Else,
*3*Let VARmatchStr be ? FUNCToString(? FUNCGet(VARresult, "0")). 
*3*If VARmatchStr is the empty String, then
*4*Let VARthisIndex be ? FUNCToLength(? FUNCGet(VARrx, "lastIndex")). 
*4*Let VARnextIndex be FUNCAdvanceStringIndex(VARS, VARthisIndex, VARfullUnicode). 
*4*Perform ? FUNCSet(VARrx, "lastIndex", VARnextIndex, true). 
*0*Let VARaccumulatedResult be the empty String value. 
*0*Let VARnextSourcePosition be 0. 
*0*For each VARresult in VARresults, do
*1*Let VARnCaptures be ? FUNCToLength(? FUNCGet(VARresult, "length")). 
*1*Let VARnCaptures be max(VARnCaptures - 1, 0). 
*1*Let VARmatched be ? FUNCToString(? FUNCGet(VARresult, "0")). 
*1*Let VARmatchLength be the number of code units in VARmatched. 
*1*Let VARposition be ? FUNCToInteger(? FUNCGet(VARresult, "index")). 
*1*Let VARposition be max(min(VARposition, VARlengthS), 0). 
*1*Let VARn be 1. 
*1*Let VARcaptures be a new empty List. 
*1*Repeat, while VARn ≤ VARnCaptures
*2*Let VARcapN be ? FUNCGet(VARresult, ! FUNCToString(VARn)). 
*2*If VARcapN is not undefined, then
*3*Let VARcapN be ? FUNCToString(VARcapN). 
*2*Append VARcapN as the last element of VARcaptures. 
*2*Let VARn be VARn+1. 
*1*Let VARnamedCaptures be ? FUNCGet(VARresult, "groups"). 
*1*If VARfunctionalReplace is true, then
*2*Let VARreplacerArgs be « VARmatched ». 
*2*Append in list order the elements of VARcaptures to the end of the List VARreplacerArgs. 
*2*Append VARposition and VARS to VARreplacerArgs. 
*2*If VARnamedCaptures is not undefined, then
*3*Append VARnamedCaptures as the last element of VARreplacerArgs. 
*2*Let VARreplValue be ? FUNCCall(VARreplaceValue, undefined, VARreplacerArgs). 
*2*Let VARreplacement be ? FUNCToString(VARreplValue). 
*1*Else,
*2*Let VARreplacement be FUNCGetSubstitution(VARmatched, VARS, VARposition, VARcaptures, VARnamedCaptures, VARreplaceValue). 
*1*If VARposition ≥ VARnextSourcePosition, then
*2*NOTE: VARposition should not normally move backwards. If it does, it is an indication of an ill-behaving RegExp subclass or use of an access triggered side-effect to change the global flag or other characteristics of VARrx. In such cases, the corresponding substitution is ignored. 
*2*Let VARaccumulatedResult be the string-concatenation of the current value of VARaccumulatedResult, the substring of VARS consisting of the code units from VARnextSourcePosition (inclusive) up to VARposition (exclusive), and VARreplacement. 
*2*Let VARnextSourcePosition be VARposition + VARmatchLength. 
*0*If VARnextSourcePosition ≥ VARlengthS, return VARaccumulatedResult. 
*0*Return the string-concatenation of VARaccumulatedResult and the substring of VARS consisting of the code units from VARnextSourcePosition (inclusive) up through the final code unit of VARS (inclusive).     

#############  END  ## 481 ###########################
############# BEGIN ## 482 ###########################
ID= 21.2.5.10
Summary= RegExp.prototype [ @@search ] ( string )
Description= When the @@search method is called with argument string, the following steps are taken:
*0*Let VARrx be the this value. 
*0*If FUNCType(VARrx) is not Object, throw a TypeError exception. 
*0*Let VARS be ? FUNCToString(VARstring). 
*0*Let VARpreviousLastIndex be ? FUNCGet(VARrx, "lastIndex"). 
*0*If FUNCSameValue(VARpreviousLastIndex, 0) is false, then
*1*Perform ? FUNCSet(VARrx, "lastIndex", 0, true). 
*0*Let VARresult be ? FUNCRegExpExec(VARrx, VARS). 
*0*Let VARcurrentLastIndex be ? FUNCGet(VARrx, "lastIndex"). 
*0*If FUNCSameValue(VARcurrentLastIndex, VARpreviousLastIndex) is false, then
*1*Perform ? FUNCSet(VARrx, "lastIndex", VARpreviousLastIndex, true). 
*0*If VARresult is null, return -1. 
*0*Return ? FUNCGet(VARresult, "index").     

#############  END  ## 482 ###########################
############# BEGIN ## 483 ###########################
ID= 21.2.5.12
Summary= RegExp.prototype [ @@split ] ( string, limit )
Description= Returns an Array object into which substrings of the result of converting string to a String have been stored. The substrings are determined by searching from left to right for matches of the this value regular expression; these occurrences are not part of any substring in the returned array, but serve to divide up the String value.
*0*Let VARrx be the this value. 
*0*If FUNCType(VARrx) is not Object, throw a TypeError exception. 
*0*Let VARS be ? FUNCToString(VARstring). 
*0*Let VARC be ? FUNCSpeciesConstructor(VARrx, %RegExp%). 
*0*Let VARflags be ? FUNCToString(? FUNCGet(VARrx, "flags")). 
*0*If VARflags contains "u", then
*1*Let VARunicodeMatching be true. 
*0*Else,
*1*let VARunicodeMatching be false.
*0*If VARflags contains "y", then
*1*Let VARnewFlags be VARflags. 
*0*Else,
*1*let VARnewFlags be the string-concatenation of VARflags and "y".
*0*Let VARsplitter be ? FUNCConstruct(VARC, « VARrx, VARnewFlags »). 
*0*Let VARA be ! FUNCArrayCreate(0). 
*0*Let VARlengthA be 0. 
*0*If VARlimit is undefined, then
*1*Let VARlim be 2--EXP0--32--EXP1---1
*0*Else,
*1*let VARlim be ? FUNCToUint32(VARlimit).
*0*Let VARsize be the length of VARS. 
*0*Let VARp be 0. 
*0*If VARlim = 0, return VARA. 
*0*If VARsize = 0, then
*1*Let VARz be ? FUNCRegExpExec(VARsplitter, VARS). 
*1*If VARz is not null, return VARA. 
*1*Perform ! FUNCCreateDataProperty(VARA, "0", VARS). 
*1*Return VARA. 
*0*Let VARq be VARp. 
*0*Repeat, while VARq &lt; VARsize
*1*Perform ? FUNCSet(VARsplitter, "lastIndex", VARq, true). 
*1*Let VARz be ? FUNCRegExpExec(VARsplitter, VARS). 
*1*If VARz is null, then
*2*Let VARq be FUNCAdvanceStringIndex(VARS, VARq, VARunicodeMatching). 
*1*Else VARz is not null,
*2*Let VARe be ? FUNCToLength(? FUNCGet(VARsplitter, "lastIndex")). 
*2*Let VARe be min(VARe, VARsize). 
*2*If VARe = VARp, then
*3*Let VARq be FUNCAdvanceStringIndex(VARS, VARq, VARunicodeMatching). 
*2*Else VARe ≠ VARp,
*3*Let VART be the String value equal to the substring of VARS consisting of the elements at indices VARp (inclusive) through VARq (exclusive). 
*3*Perform ! FUNCCreateDataProperty(VARA, ! FUNCToString(VARlengthA), VART). 
*3*Let VARlengthA be VARlengthA + 1. 
*3*If VARlengthA = VARlim, return VARA. 
*3*Let VARp be VARe. 
*3*Let VARnumberOfCaptures be ? FUNCToLength(? FUNCGet(VARz, "length")). 
*3*Let VARnumberOfCaptures be max(VARnumberOfCaptures-1, 0). 
*3*Let VARi be 1. 
*3*Repeat, while VARi ≤ VARnumberOfCaptures,
*4*Let VARnextCapture be ? FUNCGet(VARz, ! FUNCToString(VARi)). 
*4*Perform ! FUNCCreateDataProperty(VARA, ! FUNCToString(VARlengthA), VARnextCapture). 
*4*Let VARi be VARi + 1. 
*4*Let VARlengthA be VARlengthA + 1. 
*4*If VARlengthA = VARlim, return VARA. 
*3*Let VARq be VARp. 
*0*Let VART be the String value equal to the substring of VARS consisting of the elements at indices VARp (inclusive) through VARsize (exclusive). 
*0*Perform ! FUNCCreateDataProperty(VARA, ! FUNCToString(VARlengthA), VART). 
*0*Return VARA.     

#############  END  ## 483 ###########################
############# BEGIN ## 484 ###########################
ID= 21.2.5.14
Summary= RegExp.prototype.test ( S )
Description= The following steps are taken:
*0*Let VARR be the this value. 
*0*If FUNCType(VARR) is not Object, throw a TypeError exception. 
*0*Let VARstring be ? FUNCToString(VARS). 
*0*Let VARmatch be ? FUNCRegExpExec(VARR, VARstring). 
*0*If VARmatch is not null, return true
*0*Else,
*1*return false.

#############  END  ## 484 ###########################
############# BEGIN ## 485 ###########################
ID= 21.2.5.15
Summary= RegExp.prototype.toString ( )
Description= The returned String has the form of a RegularExpressionLiteral that evaluates to another RegExp object with the same behaviour as this object.
*0*Let VARR be the this value. 
*0*If FUNCType(VARR) is not Object, throw a TypeError exception. 
*0*Let VARpattern be ? FUNCToString(? FUNCGet(VARR, "source")). 
*0*Let VARflags be ? FUNCToString(? FUNCGet(VARR, "flags")). 
*0*Let VARresult be the string-concatenation of "/", VARpattern, "/", and VARflags. 
*0*Return VARresult.     

#############  END  ## 485 ###########################
############# BEGIN ## 486 ###########################
ID= 22.1.1.1
Summary= Array ( )
Description= This description applies if and only if the Array constructor is called with no arguments.
*0*Let VARnumberOfArgs be the number of arguments passed to this function call. 
*0*Assert: VARnumberOfArgs = 0. 
*0*If NewTarget is undefined, then
*1*Let VARnewTarget be the active function object
*0*Else,
*1*let VARnewTarget be NewTarget.
*0*Let VARproto be ? FUNCGetPrototypeFromConstructor(VARnewTarget, "%ArrayPrototype%"). 
*0*Return ! FUNCArrayCreate(0, VARproto).     

#############  END  ## 486 ###########################
############# BEGIN ## 487 ###########################
ID= 22.1.1.2
Summary= Array ( len )
Description= This description applies if and only if the Array constructor is called with exactly one argument.
*0*Let VARnumberOfArgs be the number of arguments passed to this function call. 
*0*Assert: VARnumberOfArgs = 1. 
*0*If NewTarget is undefined, then
*1*Let VARnewTarget be the active function object
*0*Else,
*1*let VARnewTarget be NewTarget.
*0*Let VARproto be ? FUNCGetPrototypeFromConstructor(VARnewTarget, "%ArrayPrototype%"). 
*0*Let VARarray be ! FUNCArrayCreate(0, VARproto). 
*0*If FUNCType(VARlen) is not Number, then
*1*Let VARdefineStatus be FUNCCreateDataProperty(VARarray, "0", VARlen). 
*1*Assert: VARdefineStatus is true. 
*1*Let VARintLen be 1. 
*0*Else,
*1*Let VARintLen be FUNCToUint32(VARlen). 
*1*If VARintLen ≠ VARlen, throw a RangeError exception. 
*0*Perform ! FUNCSet(VARarray, "length", VARintLen, true). 
*0*Return VARarray.     

#############  END  ## 487 ###########################
############# BEGIN ## 488 ###########################
ID= 22.1.1.3
Summary= Array ( ...items )
Description= This description applies if and only if the Array constructor is called with at least two arguments.
*0*Let VARnumberOfArgs be the number of arguments passed to this function call. 
*0*Assert: VARnumberOfArgs ≥ 2. 
*0*If NewTarget is undefined, then
*1*Let VARnewTarget be the active function object
*0*Else,
*1*let VARnewTarget be NewTarget.
*0*Let VARproto be ? FUNCGetPrototypeFromConstructor(VARnewTarget, "%ArrayPrototype%"). 
*0*Let VARarray be ? FUNCArrayCreate(VARnumberOfArgs, VARproto). 
*0*Let VARk be 0. 
*0*Let VARitems be a zero-origined List containing the argument items in order. 
*0*Repeat, while VARk &lt; VARnumberOfArgs
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARitemK be VARitems[VARk]. 
*1*Let VARdefineStatus be FUNCCreateDataProperty(VARarray, VARPk, VARitemK). 
*1*Assert: VARdefineStatus is true. 
*1*Increase VARk by 1. 
*0*Assert: The value of VARarray's length property is VARnumberOfArgs. 
*0*Return VARarray.     

#############  END  ## 488 ###########################
############# BEGIN ## 489 ###########################
ID= 22.1.2.1
Summary= Array.from ( items [ , mapfn [ , thisArg ] ] )
Description= When the from method is called with argument items and optional arguments mapfn and thisArg, the following steps are taken:
*0*Let VARC be the this value. 
*0*If VARmapfn is undefined, then
*1*Let VARmapping be false. 
*0*Else,
*1*If FUNCIsCallable(VARmapfn) is false, throw a TypeError exception. 
*1*If VARthisArg is present, then
*2*Let VART be VARthisArg
*1*Else,
*2*let VART be undefined.
*1*Let VARmapping be true. 
*0*Let VARusingIterator be ? FUNCGetMethod(VARitems, @@iterator). 
*0*If VARusingIterator is not undefined, then
*1*If FUNCIsConstructor(VARC) is true, then
*2*Let VARA be ? FUNCConstruct(VARC). 
*1*Else,
*2*Let VARA be ! FUNCArrayCreate(0). 
*1*Let VARiteratorRecord be ? FUNCGetIterator(VARitems, sync, VARusingIterator). 
*1*Let VARk be 0. 
*1*Repeat,
*2*If VARk ≥ 2--EXP0--53--EXP1---1, then
*3*Let VARerror be FUNCThrowCompletion(a newly created TypeError object). 
*3*Return ? FUNCIteratorClose(VARiteratorRecord, VARerror). 
*2*Let VARPk be ! FUNCToString(VARk). 
*2*Let VARnext be ? FUNCIteratorStep(VARiteratorRecord). 
*2*If VARnext is false, then
*3*Perform ? FUNCSet(VARA, "length", VARk, true). 
*3*Return VARA. 
*2*Let VARnextValue be ? FUNCIteratorValue(VARnext). 
*2*If VARmapping is true, then
*3*Let VARmappedValue be FUNCCall(VARmapfn, VART, « VARnextValue, VARk »). 
*3*If VARmappedValue is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARmappedValue). 
*3*Let VARmappedValue be VARmappedValue.[[VARValue]]. 
*2*Else,
*3*let VARmappedValue be VARnextValue.
*2*Let VARdefineStatus be FUNCCreateDataPropertyOrThrow(VARA, VARPk, VARmappedValue). 
*2*If VARdefineStatus is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARdefineStatus). 
*2*Increase VARk by 1. 
*0*NOTE: VARitems is not an Iterable so assume it is an array-like object. 
*0*Let VARarrayLike be ! FUNCToObject(VARitems). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARarrayLike, "length")). 
*0*If FUNCIsConstructor(VARC) is true, then
*1*Let VARA be ? FUNCConstruct(VARC, « VARlen »). 
*0*Else,
*1*Let VARA be ? FUNCArrayCreate(VARlen). 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkValue be ? FUNCGet(VARarrayLike, VARPk). 
*1*If VARmapping is true, then
*2*Let VARmappedValue be ? FUNCCall(VARmapfn, VART, « VARkValue, VARk »). 
*1*Else,
*2*let VARmappedValue be VARkValue.
*1*Perform ? FUNCCreateDataPropertyOrThrow(VARA, VARPk, VARmappedValue). 
*1*Increase VARk by 1. 
*0*Perform ? FUNCSet(VARA, "length", VARlen, true). 
*0*Return VARA.     

#############  END  ## 489 ###########################
############# BEGIN ## 490 ###########################
ID= 22.1.2.2
Summary= Array.isArray ( arg )
Description= The isArray function takes one argument arg, and performs the following steps:
*0*Return ? FUNCIsArray(VARarg).     

#############  END  ## 490 ###########################
############# BEGIN ## 491 ###########################
ID= 22.1.2.3
Summary= Array.of ( ...items )
Description= When the of method is called with any number of arguments, the following steps are taken:
*0*Let VARlen be the actual number of arguments passed to this function. 
*0*Let VARitems be the List of arguments passed to this function. 
*0*Let VARC be the this value. 
*0*If FUNCIsConstructor(VARC) is true, then
*1*Let VARA be ? FUNCConstruct(VARC, « VARlen »). 
*0*Else,
*1*Let VARA be ? FUNCArrayCreate(VARlen). 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARkValue be VARitems[VARk]. 
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Perform ? FUNCCreateDataPropertyOrThrow(VARA, VARPk, VARkValue). 
*1*Increase VARk by 1. 
*0*Perform ? FUNCSet(VARA, "length", VARlen, true). 
*0*Return VARA.     

#############  END  ## 491 ###########################
############# BEGIN ## 492 ###########################
ID= 22.1.3.1
Summary= Array.prototype.concat ( ...arguments )
Description= When the concat method is called with zero or more arguments, it returns an array containing the array elements of the object followed by the array elements of each argument in order.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARA be ? FUNCArraySpeciesCreate(VARO, 0). 
*0*Let VARn be 0. 
*0*Let VARitems be a List whose first element is VARO and whose subsequent elements are, in left to right order, the arguments that were passed to this function invocation. 
*0*Repeat, while VARitems is not empty
*1*Remove the first element from VARitems and let VARE be the value of the element. 
*1*Let VARspreadable be ? FUNCIsConcatSpreadable(VARE). 
*1*If VARspreadable is true, then
*2*Let VARk be 0. 
*2*Let VARlen be ? FUNCToLength(? FUNCGet(VARE, "length")). 
*2*If VARn + VARlen &gt; 2--EXP0--53--EXP1---1, throw a TypeError exception. 
*2*Repeat, while VARk &lt; VARlen
*3*Let VARP be ! FUNCToString(VARk). 
*3*Let VARexists be ? FUNCHasProperty(VARE, VARP). 
*3*If VARexists is true, then
*4*Let VARsubElement be ? FUNCGet(VARE, VARP). 
*4*Perform ? FUNCCreateDataPropertyOrThrow(VARA, ! FUNCToString(VARn), VARsubElement). 
*3*Increase VARn by 1. 
*3*Increase VARk by 1. 
*1*Else VARE is added as a single item rather than spread,
*2*If VARn≥2--EXP0--53--EXP1---1, throw a TypeError exception. 
*2*Perform ? FUNCCreateDataPropertyOrThrow(VARA, ! FUNCToString(VARn), VARE). 
*2*Increase VARn by 1. 
*0*Perform ? FUNCSet(VARA, "length", VARn, true). 
*0*Return VARA.     

#############  END  ## 492 ###########################
############# BEGIN ## 493 ###########################
ID= 22.1.3.1.1
Summary= Runtime Semantics: IsConcatSpreadable ( O )
Description= The abstract operation IsConcatSpreadable with argument O performs the following steps:
*0*If FUNCType(VARO) is not Object, return false. 
*0*Let VARspreadable be ? FUNCGet(VARO, @@isConcatSpreadable). 
*0*If VARspreadable is not undefined, return FUNCToBoolean(VARspreadable). 
*0*Return ? FUNCIsArray(VARO).      

#############  END  ## 493 ###########################
############# BEGIN ## 494 ###########################
ID= 22.1.3.3
Summary= Array.prototype.copyWithin ( target, start [ , end ] )
Description= The copyWithin method takes up to three arguments target, start and end.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*Let VARrelativeTarget be ? FUNCToInteger(VARtarget). 
*0*If VARrelativeTarget &lt; 0, then
*1*Let VARto be max((VARlen + VARrelativeTarget), 0)
*0*Else,
*1*let VARto be min(VARrelativeTarget, VARlen).
*0*Let VARrelativeStart be ? FUNCToInteger(VARstart). 
*0*If VARrelativeStart &lt; 0, then
*1*Let VARfrom be max((VARlen + VARrelativeStart), 0)
*0*Else,
*1*let VARfrom be min(VARrelativeStart, VARlen).
*0*If VARend is undefined, then
*1*Let VARrelativeEnd be VARlen
*0*Else,
*1*let VARrelativeEnd be ? FUNCToInteger(VARend).
*0*If VARrelativeEnd &lt; 0, then
*1*Let VARfinal be max((VARlen + VARrelativeEnd), 0)
*0*Else,
*1*let VARfinal be min(VARrelativeEnd, VARlen).
*0*Let VARcount be min(VARfinal-VARfrom, VARlen-VARto). 
*0*If VARfrom&lt;VARto and VARto&lt;VARfrom+VARcount, then
*1*Let VARdirection be -1. 
*1*Let VARfrom be VARfrom + VARcount - 1. 
*1*Let VARto be VARto + VARcount - 1. 
*0*Else,
*1*Let VARdirection be 1. 
*0*Repeat, while VARcount &gt; 0
*1*Let VARfromKey be ! FUNCToString(VARfrom). 
*1*Let VARtoKey be ! FUNCToString(VARto). 
*1*Let VARfromPresent be ? FUNCHasProperty(VARO, VARfromKey). 
*1*If VARfromPresent is true, then
*2*Let VARfromVal be ? FUNCGet(VARO, VARfromKey). 
*2*Perform ? FUNCSet(VARO, VARtoKey, VARfromVal, true). 
*1*Else VARfromPresent is false,
*2*Perform ? FUNCDeletePropertyOrThrow(VARO, VARtoKey). 
*1*Let VARfrom be VARfrom + VARdirection. 
*1*Let VARto be VARto + VARdirection. 
*1*Let VARcount be VARcount - 1. 
*0*Return VARO.     

#############  END  ## 494 ###########################
############# BEGIN ## 495 ###########################
ID= 22.1.3.4
Summary= Array.prototype.entries ( )
Description= The following steps are taken:
*0*Let VARO be ? FUNCToObject(this value). 
*0*Return FUNCCreateArrayIterator(VARO, "key+value").     

#############  END  ## 495 ###########################
############# BEGIN ## 496 ###########################
ID= 22.1.3.5
Summary= Array.prototype.every ( callbackfn [ , thisArg ] )
Description= callbackfn should be a function that accepts three arguments and returns a value that is coercible to the Boolean value true or false. every calls callbackfn once for each element present in the array, in ascending order, until it finds one where callbackfn returns false. If such an element is found, every immediately returns false. Otherwise, if callbackfn returned true for all elements, every will return true. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*1*If VARkPresent is true, then
*2*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*2*Let VARtestResult be FUNCToBoolean(? FUNCCall(VARcallbackfn, VART, « VARkValue, VARk, VARO »)). 
*2*If VARtestResult is false, return false. 
*1*Increase VARk by 1. 
*0*Return true.     

#############  END  ## 496 ###########################
############# BEGIN ## 497 ###########################
ID= 22.1.3.6
Summary= Array.prototype.fill ( value [ , start [ , end ] ] )
Description= The fill method takes up to three arguments value, start and end.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*Let VARrelativeStart be ? FUNCToInteger(VARstart). 
*0*If VARrelativeStart &lt; 0, then
*1*Let VARk be max((VARlen + VARrelativeStart), 0)
*0*Else,
*1*let VARk be min(VARrelativeStart, VARlen).
*0*If VARend is undefined, then
*1*Let VARrelativeEnd be VARlen
*0*Else,
*1*let VARrelativeEnd be ? FUNCToInteger(VARend).
*0*If VARrelativeEnd &lt; 0, then
*1*Let VARfinal be max((VARlen + VARrelativeEnd), 0)
*0*Else,
*1*let VARfinal be min(VARrelativeEnd, VARlen).
*0*Repeat, while VARk &lt; VARfinal
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Perform ? FUNCSet(VARO, VARPk, VARvalue, true). 
*1*Increase VARk by 1. 
*0*Return VARO.     

#############  END  ## 497 ###########################
############# BEGIN ## 498 ###########################
ID= 22.1.3.7
Summary= Array.prototype.filter ( callbackfn [ , thisArg ] )
Description= callbackfn should be a function that accepts three arguments and returns a value that is coercible to the Boolean value true or false. filter calls callbackfn once for each element in the array, in ascending order, and constructs a new array of all the values for which callbackfn returns true. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARA be ? FUNCArraySpeciesCreate(VARO, 0). 
*0*Let VARk be 0. 
*0*Let VARto be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*1*If VARkPresent is true, then
*2*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*2*Let VARselected be FUNCToBoolean(? FUNCCall(VARcallbackfn, VART, « VARkValue, VARk, VARO »)). 
*2*If VARselected is true, then
*3*Perform ? FUNCCreateDataPropertyOrThrow(VARA, ! FUNCToString(VARto), VARkValue). 
*3*Increase VARto by 1. 
*1*Increase VARk by 1. 
*0*Return VARA.     

#############  END  ## 498 ###########################
############# BEGIN ## 499 ###########################
ID= 22.1.3.8
Summary= Array.prototype.find ( predicate [ , thisArg ] )
Description= The find method is called with one or two arguments, predicate and thisArg.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If FUNCIsCallable(VARpredicate) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*1*Let VARtestResult be FUNCToBoolean(? FUNCCall(VARpredicate, VART, « VARkValue, VARk, VARO »)). 
*1*If VARtestResult is true, return VARkValue. 
*1*Increase VARk by 1. 
*0*Return undefined.     

#############  END  ## 499 ###########################
############# BEGIN ## 500 ###########################
ID= 22.1.3.9
Summary= Array.prototype.findIndex ( predicate [ , thisArg ] )
Description= predicate should be a function that accepts three arguments and returns a value that is coercible to the Boolean value true or false. findIndex calls predicate once for each element of the array, in ascending order, until it finds one where predicate returns true. If such an element is found, findIndex immediately returns the index of that element value. Otherwise, findIndex returns -1.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If FUNCIsCallable(VARpredicate) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*1*Let VARtestResult be FUNCToBoolean(? FUNCCall(VARpredicate, VART, « VARkValue, VARk, VARO »)). 
*1*If VARtestResult is true, return VARk. 
*1*Increase VARk by 1. 
*0*Return -1.     

#############  END  ## 500 ###########################
############# BEGIN ## 501 ###########################
ID= 22.1.3.10
Summary= Array.prototype.forEach ( callbackfn [ , thisArg ] )
Description= callbackfn should be a function that accepts three arguments. forEach calls callbackfn once for each element present in the array, in ascending order. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*1*If VARkPresent is true, then
*2*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*2*Perform ? FUNCCall(VARcallbackfn, VART, « VARkValue, VARk, VARO »). 
*1*Increase VARk by 1. 
*0*Return undefined.     

#############  END  ## 501 ###########################
############# BEGIN ## 502 ###########################
ID= 22.1.3.11
Summary= Array.prototype.includes ( searchElement [ , fromIndex ] )
Description= includes compares searchElement to the elements of the array, in ascending order, using the SameValueZero algorithm, and if found at any position, returns true; otherwise, false is returned.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If VARlen is 0, return false. 
*0*Let VARn be ? FUNCToInteger(VARfromIndex). (If VARfromIndex is undefined, this step produces the value 0.) 
*0*If VARn ≥ 0, then
*1*Let VARk be VARn. 
*0*Else VARn &lt; 0,
*1*Let VARk be VARlen + VARn. 
*1*If VARk &lt; 0, then
*2*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARelementK be the result of ? FUNCGet(VARO, ! FUNCToString(VARk)). 
*1*If FUNCSameValueZero(VARsearchElement, VARelementK) is true, return true. 
*1*Increase VARk by 1. 
*0*Return false.     

#############  END  ## 502 ###########################
############# BEGIN ## 503 ###########################
ID= 22.1.3.12
Summary= Array.prototype.indexOf ( searchElement [ , fromIndex ] )
Description= indexOf compares searchElement to the elements of the array, in ascending order, using the Strict Equality Comparison algorithm, and if found at one or more indices, returns the smallest such index; otherwise, -1 is returned.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If VARlen is 0, return -1. 
*0*Let VARn be ? FUNCToInteger(VARfromIndex). (If VARfromIndex is undefined, this step produces the value 0.) 
*0*If VARn ≥ VARlen, return -1. 
*0*If VARn ≥ 0, then
*1*If VARn is -0, then
*2*Let VARk be +0
*1*Else,
*2*let VARk be VARn.
*0*Else VARn &lt; 0,
*1*Let VARk be VARlen + VARn. 
*1*If VARk &lt; 0, then
*2*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARkPresent be ? FUNCHasProperty(VARO, ! FUNCToString(VARk)). 
*1*If VARkPresent is true, then
*2*Let VARelementK be ? FUNCGet(VARO, ! FUNCToString(VARk)). 
*2*Let VARsame be the result of performing Strict Equality Comparison VARsearchElement === VARelementK. 
*2*If VARsame is true, return VARk. 
*1*Increase VARk by 1. 
*0*Return -1.     

#############  END  ## 503 ###########################
############# BEGIN ## 504 ###########################
ID= 22.1.3.13
Summary= Array.prototype.join ( separator )
Description= The elements of the array are converted to Strings, and these Strings are then concatenated, separated by occurrences of the separator. If no separator is provided, a single comma is used as the separator.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If VARseparator is undefined, then
*1*Let VARsep be the single-element String ",". 
*0*Else,
*1*let VARsep be ? FUNCToString(VARseparator).
*0*Let VARR be the empty String. 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*If VARk &gt; 0, then
*2*Let VARR be the string-concatenation of VARR and VARsep. 
*1*Let VARelement be ? FUNCGet(VARO, ! FUNCToString(VARk)). 
*1*If VARelement is undefined or null, then
*2*Let VARnext be the empty String; otherwise, then
*1*Set VARR to the string-concatenation of VARR and VARnext. 
*1*Increase VARk by 1. 
*0*Return VARR.     

#############  END  ## 504 ###########################
############# BEGIN ## 505 ###########################
ID= 22.1.3.14
Summary= Array.prototype.keys ( )
Description= The following steps are taken:
*0*Let VARO be ? FUNCToObject(this value). 
*0*Return FUNCCreateArrayIterator(VARO, "key").     

#############  END  ## 505 ###########################
############# BEGIN ## 506 ###########################
ID= 22.1.3.15
Summary= Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )
Description= lastIndexOf compares searchElement to the elements of the array in descending order using the Strict Equality Comparison algorithm, and if found at one or more indices, returns the largest such index; otherwise, -1 is returned.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If VARlen is 0, return -1. 
*0*If VARfromIndex is present, then
*1*Let VARn be ? FUNCToInteger(VARfromIndex)
*0*Else,
*1*let VARn be VARlen-1.
*0*If VARn ≥ 0, then
*1*If VARn is -0, then
*2*Let VARk be +0
*1*Else,
*2*let VARk be min(VARn, VARlen - 1).
*0*Else VARn &lt; 0,
*1*Let VARk be VARlen + VARn. 
*0*Repeat, while VARk ≥ 0
*1*Let VARkPresent be ? FUNCHasProperty(VARO, ! FUNCToString(VARk)). 
*1*If VARkPresent is true, then
*2*Let VARelementK be ? FUNCGet(VARO, ! FUNCToString(VARk)). 
*2*Let VARsame be the result of performing Strict Equality Comparison VARsearchElement === VARelementK. 
*2*If VARsame is true, return VARk. 
*1*Decrease VARk by 1. 
*0*Return -1.     

#############  END  ## 506 ###########################
############# BEGIN ## 507 ###########################
ID= 22.1.3.16
Summary= Array.prototype.map ( callbackfn [ , thisArg ] )
Description= callbackfn should be a function that accepts three arguments. map calls callbackfn once for each element in the array, in ascending order, and constructs a new Array from the results. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARA be ? FUNCArraySpeciesCreate(VARO, VARlen). 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*1*If VARkPresent is true, then
*2*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*2*Let VARmappedValue be ? FUNCCall(VARcallbackfn, VART, « VARkValue, VARk, VARO »). 
*2*Perform ? FUNCCreateDataPropertyOrThrow(VARA, VARPk, VARmappedValue). 
*1*Increase VARk by 1. 
*0*Return VARA.     

#############  END  ## 507 ###########################
############# BEGIN ## 508 ###########################
ID= 22.1.3.17
Summary= Array.prototype.pop ( )
Description= The last element of the array is removed from the array and returned.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If VARlen is zero, then
*1*Perform ? FUNCSet(VARO, "length", 0, true). 
*1*Return undefined. 
*0*Else VARlen &gt; 0,
*1*Let VARnewLen be VARlen-1. 
*1*Let VARindex be ! FUNCToString(VARnewLen). 
*1*Let VARelement be ? FUNCGet(VARO, VARindex). 
*1*Perform ? FUNCDeletePropertyOrThrow(VARO, VARindex). 
*1*Perform ? FUNCSet(VARO, "length", VARnewLen, true). 
*1*Return VARelement.     

#############  END  ## 508 ###########################
############# BEGIN ## 509 ###########################
ID= 22.1.3.18
Summary= Array.prototype.push ( ...items )
Description= The arguments are appended to the end of the array, in the order in which they appear. The new length of the array is returned as the result of the call.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*Let VARitems be a List whose elements are, in left to right order, the arguments that were passed to this function invocation. 
*0*Let VARargCount be the number of elements in VARitems. 
*0*If VARlen + VARargCount &gt; 2--EXP0--53--EXP1---1, throw a TypeError exception. 
*0*Repeat, while VARitems is not empty
*1*Remove the first element from VARitems and let VARE be the value of the element. 
*1*Perform ? FUNCSet(VARO, ! FUNCToString(VARlen), VARE, true). 
*1*Let VARlen be VARlen+1. 
*0*Perform ? FUNCSet(VARO, "length", VARlen, true). 
*0*Return VARlen.     

#############  END  ## 509 ###########################
############# BEGIN ## 510 ###########################
ID= 22.1.3.19
Summary= Array.prototype.reduce ( callbackfn [ , initialValue ] )
Description= callbackfn should be a function that takes four arguments. reduce calls the callback, as a function, once for each element after the first element present in the array, in ascending order.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARlen is 0 and VARinitialValue is not present, throw a TypeError exception. 
*0*Let VARk be 0. 
*0*Let VARaccumulator be undefined. 
*0*If VARinitialValue is present, then
*1*Set VARaccumulator to VARinitialValue. 
*0*Else VARinitialValue is not present,
*1*Let VARkPresent be false. 
*1*Repeat, while VARkPresent is false and VARk &lt; VARlen
*2*Let VARPk be ! FUNCToString(VARk). 
*2*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*2*If VARkPresent is true, then
*3*Set VARaccumulator to ? FUNCGet(VARO, VARPk). 
*2*Increase VARk by 1. 
*1*If VARkPresent is false, throw a TypeError exception. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*1*If VARkPresent is true, then
*2*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*2*Set VARaccumulator to ? FUNCCall(VARcallbackfn, undefined, « VARaccumulator, VARkValue, VARk, VARO »). 
*1*Increase VARk by 1. 
*0*Return VARaccumulator.     

#############  END  ## 510 ###########################
############# BEGIN ## 511 ###########################
ID= 22.1.3.20
Summary= Array.prototype.reduceRight ( callbackfn [ , initialValue ] )
Description= callbackfn should be a function that takes four arguments. reduceRight calls the callback, as a function, once for each element after the first element present in the array, in descending order.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARlen is 0 and VARinitialValue is not present, throw a TypeError exception. 
*0*Let VARk be VARlen-1. 
*0*Let VARaccumulator be undefined. 
*0*If VARinitialValue is present, then
*1*Set VARaccumulator to VARinitialValue. 
*0*Else VARinitialValue is not present,
*1*Let VARkPresent be false. 
*1*Repeat, while VARkPresent is false and VARk ≥ 0
*2*Let VARPk be ! FUNCToString(VARk). 
*2*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*2*If VARkPresent is true, then
*3*Set VARaccumulator to ? FUNCGet(VARO, VARPk). 
*2*Decrease VARk by 1. 
*1*If VARkPresent is false, throw a TypeError exception. 
*0*Repeat, while VARk ≥ 0
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*1*If VARkPresent is true, then
*2*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*2*Set VARaccumulator to ? FUNCCall(VARcallbackfn, undefined, « VARaccumulator, VARkValue, VARk, VARO »). 
*1*Decrease VARk by 1. 
*0*Return VARaccumulator.     

#############  END  ## 511 ###########################
############# BEGIN ## 512 ###########################
ID= 22.1.3.21
Summary= Array.prototype.reverse ( )
Description= The elements of the array are rearranged so as to reverse their order. The object is returned as the result of the call.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*Let VARmiddle be floor(VARlen/2). 
*0*Let VARlower be 0. 
*0*Repeat, while VARlower ≠ VARmiddle
*1*Let VARupper be VARlen - VARlower - 1. 
*1*Let VARupperP be ! FUNCToString(VARupper). 
*1*Let VARlowerP be ! FUNCToString(VARlower). 
*1*Let VARlowerExists be ? FUNCHasProperty(VARO, VARlowerP). 
*1*If VARlowerExists is true, then
*2*Let VARlowerValue be ? FUNCGet(VARO, VARlowerP). 
*1*Let VARupperExists be ? FUNCHasProperty(VARO, VARupperP). 
*1*If VARupperExists is true, then
*2*Let VARupperValue be ? FUNCGet(VARO, VARupperP). 
*1*If VARlowerExists is true and VARupperExists is true, then
*2*Perform ? FUNCSet(VARO, VARlowerP, VARupperValue, true). 
*2*Perform ? FUNCSet(VARO, VARupperP, VARlowerValue, true). 
*1*Else if VARlowerExists is false and VARupperExists is true, then
*2*Perform ? FUNCSet(VARO, VARlowerP, VARupperValue, true). 
*2*Perform ? FUNCDeletePropertyOrThrow(VARO, VARupperP). 
*1*Else if VARlowerExists is true and VARupperExists is false, then
*2*Perform ? FUNCDeletePropertyOrThrow(VARO, VARlowerP). 
*2*Perform ? FUNCSet(VARO, VARupperP, VARlowerValue, true). 
*1*Else both VARlowerExists and VARupperExists are false,
*2*No action is required. 
*1*Increase VARlower by 1. 
*0*Return VARO.     

#############  END  ## 512 ###########################
############# BEGIN ## 513 ###########################
ID= 22.1.3.22
Summary= Array.prototype.shift ( )
Description= The first element of the array is removed from the array and returned.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If VARlen is zero, then
*1*Perform ? FUNCSet(VARO, "length", 0, true). 
*1*Return undefined. 
*0*Let VARfirst be ? FUNCGet(VARO, "0"). 
*0*Let VARk be 1. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARfrom be ! FUNCToString(VARk). 
*1*Let VARto be ! FUNCToString(VARk-1). 
*1*Let VARfromPresent be ? FUNCHasProperty(VARO, VARfrom). 
*1*If VARfromPresent is true, then
*2*Let VARfromVal be ? FUNCGet(VARO, VARfrom). 
*2*Perform ? FUNCSet(VARO, VARto, VARfromVal, true). 
*1*Else VARfromPresent is false,
*2*Perform ? FUNCDeletePropertyOrThrow(VARO, VARto). 
*1*Increase VARk by 1. 
*0*Perform ? FUNCDeletePropertyOrThrow(VARO, ! FUNCToString(VARlen-1)). 
*0*Perform ? FUNCSet(VARO, "length", VARlen-1, true). 
*0*Return VARfirst.     

#############  END  ## 513 ###########################
############# BEGIN ## 514 ###########################
ID= 22.1.3.23
Summary= Array.prototype.slice ( start, end )
Description= The slice method takes two arguments, start and end, and returns an array containing the elements of the array from element start up to, but not including, element end (or through the end of the array if end is undefined). If start is negative, it is treated as  length+start where length is the length of the array. If end is negative, it is treated as  length+end where length is the length of the array.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*Let VARrelativeStart be ? FUNCToInteger(VARstart). 
*0*If VARrelativeStart &lt; 0, then
*1*Let VARk be max((VARlen + VARrelativeStart), 0)
*0*Else,
*1*let VARk be min(VARrelativeStart, VARlen).
*0*If VARend is undefined, then
*1*Let VARrelativeEnd be VARlen
*0*Else,
*1*let VARrelativeEnd be ? FUNCToInteger(VARend).
*0*If VARrelativeEnd &lt; 0, then
*1*Let VARfinal be max((VARlen + VARrelativeEnd), 0)
*0*Else,
*1*let VARfinal be min(VARrelativeEnd, VARlen).
*0*Let VARcount be max(VARfinal - VARk, 0). 
*0*Let VARA be ? FUNCArraySpeciesCreate(VARO, VARcount). 
*0*Let VARn be 0. 
*0*Repeat, while VARk &lt; VARfinal
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*1*If VARkPresent is true, then
*2*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*2*Perform ? FUNCCreateDataPropertyOrThrow(VARA, ! FUNCToString(VARn), VARkValue). 
*1*Increase VARk by 1. 
*1*Increase VARn by 1. 
*0*Perform ? FUNCSet(VARA, "length", VARn, true). 
*0*Return VARA.     

#############  END  ## 514 ###########################
############# BEGIN ## 515 ###########################
ID= 22.1.3.24
Summary= Array.prototype.some ( callbackfn [ , thisArg ] )
Description= callbackfn should be a function that accepts three arguments and returns a value that is coercible to the Boolean value true or false. some calls callbackfn once for each element present in the array, in ascending order, until it finds one where callbackfn returns true. If such an element is found, some immediately returns true. Otherwise, some returns false. callbackfn is called only for elements of the array which actually exist; it is not called for missing elements of the array.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkPresent be ? FUNCHasProperty(VARO, VARPk). 
*1*If VARkPresent is true, then
*2*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*2*Let VARtestResult be FUNCToBoolean(? FUNCCall(VARcallbackfn, VART, « VARkValue, VARk, VARO »)). 
*2*If VARtestResult is true, return true. 
*1*Increase VARk by 1. 
*0*Return false.     

#############  END  ## 515 ###########################
############# BEGIN ## 516 ###########################
ID= 22.1.3.25
Summary= Array.prototype.sort ( comparefn )
Description= The elements of this array are sorted. The sort is not necessarily stable (that is, elements that compare equal do not necessarily remain in their original order). If comparefn is not undefined, it should be a function that accepts two arguments x and y and returns a negative value if x &lt; y, zero if x = y, or a positive value if x &gt; y.
*0*If VARcomparefn is not undefined and FUNCIsCallable(VARcomparefn) is false, throw a TypeError exception. 
*0*Let VARobj be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARobj, "length")).     

#############  END  ## 516 ###########################
############# BEGIN ## 517 ###########################
ID= 22.1.3.25.1
Summary= Runtime Semantics: SortCompare ( x, y )
Description= The SortCompare abstract operation is called with two arguments x and y. It also has access to the comparefn argument passed to the current invocation of the sort method. The following steps are taken:
*0*If VARx and VARy are both undefined, return +0. 
*0*If VARx is undefined, return 1. 
*0*If VARy is undefined, return -1. 
*0*If VARcomparefn is not undefined, then
*1*Let VARv be ? FUNCToNumber(? FUNCCall(VARcomparefn, undefined, « VARx, VARy »)). 
*1*If VARv is NaN, return +0. 
*1*Return VARv. 
*0*Let VARxString be ? FUNCToString(VARx). 
*0*Let VARyString be ? FUNCToString(VARy). 
*0*Let VARxSmaller be the result of performing Abstract Relational Comparison VARxString &lt; VARyString. 
*0*If VARxSmaller is true, return -1. 
*0*Let VARySmaller be the result of performing Abstract Relational Comparison VARyString &lt; VARxString. 
*0*If VARySmaller is true, return 1. 
*0*Return +0.      

#############  END  ## 517 ###########################
############# BEGIN ## 518 ###########################
ID= 22.1.3.26
Summary= Array.prototype.splice ( start, deleteCount, ...items )
Description= When the splice method is called with two or more arguments start, deleteCount and zero or more items, the deleteCount elements of the array starting at integer index start are replaced by the arguments items. An Array object containing the deleted elements (if any) is returned.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*Let VARrelativeStart be ? FUNCToInteger(VARstart). 
*0*If VARrelativeStart &lt; 0, then
*1*Let VARactualStart be max((VARlen + VARrelativeStart), 0)
*0*Else,
*1*let VARactualStart be min(VARrelativeStart, VARlen).
*0*If the number of actual arguments is 0, then
*1*Let VARinsertCount be 0. 
*1*Let VARactualDeleteCount be 0. 
*0*Else if the number of actual arguments is 1, then
*1*Let VARinsertCount be 0. 
*1*Let VARactualDeleteCount be VARlen - VARactualStart. 
*0*Else,
*1*Let VARinsertCount be the number of actual arguments minus 2. 
*1*Let VARdc be ? FUNCToInteger(VARdeleteCount). 
*1*Let VARactualDeleteCount be min(max(VARdc, 0), VARlen - VARactualStart). 
*0*If VARlen+VARinsertCount-VARactualDeleteCount &gt; 2--EXP0--53--EXP1---1, throw a TypeError exception. 
*0*Let VARA be ? FUNCArraySpeciesCreate(VARO, VARactualDeleteCount). 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARactualDeleteCount
*1*Let VARfrom be ! FUNCToString(VARactualStart+VARk). 
*1*Let VARfromPresent be ? FUNCHasProperty(VARO, VARfrom). 
*1*If VARfromPresent is true, then
*2*Let VARfromValue be ? FUNCGet(VARO, VARfrom). 
*2*Perform ? FUNCCreateDataPropertyOrThrow(VARA, ! FUNCToString(VARk), VARfromValue). 
*1*Increment VARk by 1. 
*0*Perform ? FUNCSet(VARA, "length", VARactualDeleteCount, true). 
*0*Let VARitems be a List whose elements are, in left to right order, the portion of the actual argument list starting with the third argument. The list is empty if fewer than three arguments were passed. 
*0*Let VARitemCount be the number of elements in VARitems. 
*0*If VARitemCount &lt; VARactualDeleteCount, then
*1*Let VARk be VARactualStart. 
*1*Repeat, while VARk &lt; (VARlen - VARactualDeleteCount)
*2*Let VARfrom be ! FUNCToString(VARk+VARactualDeleteCount). 
*2*Let VARto be ! FUNCToString(VARk+VARitemCount). 
*2*Let VARfromPresent be ? FUNCHasProperty(VARO, VARfrom). 
*2*If VARfromPresent is true, then
*3*Let VARfromValue be ? FUNCGet(VARO, VARfrom). 
*3*Perform ? FUNCSet(VARO, VARto, VARfromValue, true). 
*2*Else VARfromPresent is false,
*3*Perform ? FUNCDeletePropertyOrThrow(VARO, VARto). 
*2*Increase VARk by 1. 
*1*Let VARk be VARlen. 
*1*Repeat, while VARk &gt; (VARlen - VARactualDeleteCount + VARitemCount)
*2*Perform ? FUNCDeletePropertyOrThrow(VARO, ! FUNCToString(VARk-1)). 
*2*Decrease VARk by 1. 
*0*Else if VARitemCount &gt; VARactualDeleteCount, then
*1*Let VARk be (VARlen - VARactualDeleteCount). 
*1*Repeat, while VARk &gt; VARactualStart
*2*Let VARfrom be ! FUNCToString(VARk + VARactualDeleteCount - 1). 
*2*Let VARto be ! FUNCToString(VARk + VARitemCount - 1). 
*2*Let VARfromPresent be ? FUNCHasProperty(VARO, VARfrom). 
*2*If VARfromPresent is true, then
*3*Let VARfromValue be ? FUNCGet(VARO, VARfrom). 
*3*Perform ? FUNCSet(VARO, VARto, VARfromValue, true). 
*2*Else VARfromPresent is false,
*3*Perform ? FUNCDeletePropertyOrThrow(VARO, VARto). 
*2*Decrease VARk by 1. 
*0*Let VARk be VARactualStart. 
*0*Repeat, while VARitems is not empty
*1*Remove the first element from VARitems and let VARE be the value of that element. 
*1*Perform ? FUNCSet(VARO, ! FUNCToString(VARk), VARE, true). 
*1*Increase VARk by 1. 
*0*Perform ? FUNCSet(VARO, "length", VARlen - VARactualDeleteCount + VARitemCount, true). 
*0*Return VARA.     

#############  END  ## 518 ###########################
############# BEGIN ## 519 ###########################
ID= 22.1.3.27
Summary= Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )
Description= An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the Array.prototype.toLocaleString method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the toLocaleString method is used.
*0*Let VARarray be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARarray, "length")). 
*0*Let VARseparator be the String value for the list-separator String appropriate for the host environment's current locale (this is derived in an implementation-defined way). 
*0*Let VARR be the empty String. 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*If VARk &gt; 0, then
*2*Set VARR to the string-concatenation of VARR and VARseparator. 
*1*Let VARnextElement be ? FUNCGet(VARarray, ! FUNCToString(VARk)). 
*1*If VARnextElement is not undefined or null, then
*2*Let VARS be ? FUNCToString(? FUNCInvoke(VARnextElement, "toLocaleString")). 
*2*Set VARR to the string-concatenation of VARR and VARS. 
*1*Increase VARk by 1. 
*0*Return VARR.     

#############  END  ## 519 ###########################
############# BEGIN ## 520 ###########################
ID= 22.1.3.28
Summary= Array.prototype.toString ( )
Description= When the toString method is called, the following steps are taken:
*0*Let VARarray be ? FUNCToObject(this value). 
*0*Let VARfunc be ? FUNCGet(VARarray, "join"). 
*0*If FUNCIsCallable(VARfunc) is false, then
*1*Let VARfunc be the intrinsic function %ObjProto_toString%. 
*0*Return ? FUNCCall(VARfunc, VARarray).     

#############  END  ## 520 ###########################
############# BEGIN ## 521 ###########################
ID= 22.1.3.29
Summary= Array.prototype.unshift ( ...items )
Description= The arguments are prepended to the start of the array, such that their order within the array is the same as the order in which they appear in the argument list.
*0*Let VARO be ? FUNCToObject(this value). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARO, "length")). 
*0*Let VARargCount be the number of actual arguments. 
*0*If VARargCount &gt; 0, then
*1*If VARlen+VARargCount &gt; 2--EXP0--53--EXP1---1, throw a TypeError exception. 
*1*Let VARk be VARlen. 
*1*Repeat, while VARk &gt; 0,
*2*Let VARfrom be ! FUNCToString(VARk-1). 
*2*Let VARto be ! FUNCToString(VARk+VARargCount-1). 
*2*Let VARfromPresent be ? FUNCHasProperty(VARO, VARfrom). 
*2*If VARfromPresent is true, then
*3*Let VARfromValue be ? FUNCGet(VARO, VARfrom). 
*3*Perform ? FUNCSet(VARO, VARto, VARfromValue, true). 
*2*Else VARfromPresent is false,
*3*Perform ? FUNCDeletePropertyOrThrow(VARO, VARto). 
*2*Decrease VARk by 1. 
*1*Let VARj be 0. 
*1*Let VARitems be a List whose elements are, in left to right order, the arguments that were passed to this function invocation. 
*1*Repeat, while VARitems is not empty
*2*Remove the first element from VARitems and let VARE be the value of that element. 
*2*Perform ? FUNCSet(VARO, ! FUNCToString(VARj), VARE, true). 
*2*Increase VARj by 1. 
*0*Perform ? FUNCSet(VARO, "length", VARlen+VARargCount, true). 
*0*Return VARlen+VARargCount.     

#############  END  ## 521 ###########################
############# BEGIN ## 522 ###########################
ID= 22.1.3.30
Summary= Array.prototype.values ( )
Description= The following steps are taken:
*0*Let VARO be ? FUNCToObject(this value). 
*0*Return FUNCCreateArrayIterator(VARO, "value").     

#############  END  ## 522 ###########################
############# BEGIN ## 523 ###########################
ID= 22.1.5.1
Summary= CreateArrayIterator ( array, kind )
Description= Several methods of Array objects return Iterator objects. The abstract operation CreateArrayIterator with arguments array and kind is used to create such iterator objects. It performs the following steps:
*0*Assert: FUNCType(VARarray) is Object. 
*0*Let VARiterator be FUNCObjectCreate(%ArrayIteratorPrototype%, « [[VARIteratedObject]], [[VARArrayIteratorNextIndex]], [[VARArrayIterationKind]] »). 
*0*Set VARiterator.[[VARIteratedObject]] to VARarray. 
*0*Set VARiterator.[[VARArrayIteratorNextIndex]] to 0. 
*0*Set VARiterator.[[VARArrayIterationKind]] to VARkind. 
*0*Return VARiterator.     

#############  END  ## 523 ###########################
############# BEGIN ## 524 ###########################
ID= 22.1.5.2.1
Summary= %ArrayIteratorPrototype%.next ( )
Description= None
*0*Let VARO be the this value. 
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*If VARO does not have all of the internal slots of an Array Iterator Instance (22.1.5.3), throw a TypeError exception. 
*0*Let VARa be VARO.[[VARIteratedObject]]. 
*0*If VARa is undefined, return FUNCCreateIterResultObject(undefined, true). 
*0*Let VARindex be VARO.[[VARArrayIteratorNextIndex]]. 
*0*Let VARitemKind be VARO.[[VARArrayIterationKind]]. 
*0*If VARa has a [[VARTypedArrayName]] internal slot, then
*1*If FUNCIsDetachedBuffer(VARa.[[VARViewedArrayBuffer]]) is true, throw a TypeError exception. 
*1*Let VARlen be VARa.[[VARArrayLength]]. 
*0*Else,
*1*Let VARlen be ? FUNCToLength(? FUNCGet(VARa, "length")). 
*0*If VARindex ≥ VARlen, then
*1*Set VARO.[[VARIteratedObject]] to undefined. 
*1*Return FUNCCreateIterResultObject(undefined, true). 
*0*Set VARO.[[VARArrayIteratorNextIndex]] to VARindex+1. 
*0*If VARitemKind is "key", return FUNCCreateIterResultObject(VARindex, false). 
*0*Let VARelementKey be ! FUNCToString(VARindex). 
*0*Let VARelementValue be ? FUNCGet(VARa, VARelementKey). 
*0*If VARitemKind is "value", then
*1*Let VARresult be VARelementValue. 
*0*Else,
*1*Assert: VARitemKind is "key+value". 
*1*Let VARresult be FUNCCreateArrayFromList(« VARindex, VARelementValue »). 
*0*Return FUNCCreateIterResultObject(VARresult, false).      

#############  END  ## 524 ###########################
############# BEGIN ## 525 ###########################
ID= 22.2.1.1
Summary= %TypedArray% ( )
Description= The %TypedArray% constructor performs the following steps:
*0*Throw a TypeError exception.     

#############  END  ## 525 ###########################
############# BEGIN ## 526 ###########################
ID= 22.2.2.1
Summary= %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )
Description= When the from method is called with argument source, and optional arguments mapfn and thisArg, the following steps are taken:
*0*Let VARC be the this value. 
*0*If FUNCIsConstructor(VARC) is false, throw a TypeError exception. 
*0*If VARmapfn is present and VARmapfn is not undefined, then
*1*If FUNCIsCallable(VARmapfn) is false, throw a TypeError exception. 
*1*Let VARmapping be true. 
*0*Else,
*1*let VARmapping be false.
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARusingIterator be ? FUNCGetMethod(VARsource, @@iterator). 
*0*If VARusingIterator is not undefined, then
*1*Let VARvalues be ? FUNCIterableToList(VARsource, VARusingIterator). 
*1*Let VARlen be the number of elements in VARvalues. 
*1*Let VARtargetObj be ? TypedArrayCreate(VARC, « VARlen »). 
*1*Let VARk be 0. 
*1*Repeat, while VARk &lt; VARlen
*2*Let VARPk be ! FUNCToString(VARk). 
*2*Let VARkValue be the first element of VARvalues and remove that element from VARvalues. 
*2*If VARmapping is true, then
*3*Let VARmappedValue be ? FUNCCall(VARmapfn, VART, « VARkValue, VARk »). 
*2*Else,
*3*let VARmappedValue be VARkValue.
*2*Perform ? FUNCSet(VARtargetObj, VARPk, VARmappedValue, true). 
*2*Increase VARk by 1. 
*1*Assert: VARvalues is now an empty List. 
*1*Return VARtargetObj. 
*0*NOTE: VARsource is not an Iterable so assume it is already an array-like object. 
*0*Let VARarrayLike be ! FUNCToObject(VARsource). 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARarrayLike, "length")). 
*0*Let VARtargetObj be ? TypedArrayCreate(VARC, « VARlen »). 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkValue be ? FUNCGet(VARarrayLike, VARPk). 
*1*If VARmapping is true, then
*2*Let VARmappedValue be ? FUNCCall(VARmapfn, VART, « VARkValue, VARk »). 
*1*Else,
*2*let VARmappedValue be VARkValue.
*1*Perform ? FUNCSet(VARtargetObj, VARPk, VARmappedValue, true). 
*1*Increase VARk by 1. 
*0*Return VARtargetObj.     

#############  END  ## 526 ###########################
############# BEGIN ## 527 ###########################
ID= 22.2.2.1.1
Summary= Runtime Semantics: IterableToList ( items, method )
Description= The abstract operation IterableToList performs the following steps:
*0*Let VARiteratorRecord be ? FUNCGetIterator(VARitems, sync, VARmethod). 
*0*Let VARvalues be a new empty List. 
*0*Let VARnext be true. 
*0*Repeat, while VARnext is not false
*1*Set VARnext to ? FUNCIteratorStep(VARiteratorRecord). 
*1*If VARnext is not false, then
*2*Let VARnextValue be ? FUNCIteratorValue(VARnext). 
*2*Append VARnextValue to the end of the List VARvalues. 
*0*Return VARvalues.      

#############  END  ## 527 ###########################
############# BEGIN ## 528 ###########################
ID= 22.2.2.2
Summary= %TypedArray%.of ( ...items )
Description= When the of method is called with any number of arguments, the following steps are taken:
*0*Let VARlen be the actual number of arguments passed to this function. 
*0*Let VARitems be the List of arguments passed to this function. 
*0*Let VARC be the this value. 
*0*If FUNCIsConstructor(VARC) is false, throw a TypeError exception. 
*0*Let VARnewObj be ? TypedArrayCreate(VARC, « VARlen »). 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARkValue be VARitems[VARk]. 
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Perform ? FUNCSet(VARnewObj, VARPk, VARkValue, true). 
*1*Increase VARk by 1. 
*0*Return VARnewObj.     

#############  END  ## 528 ###########################
############# BEGIN ## 529 ###########################
ID= 22.2.3.5
Summary= %TypedArray%.prototype.copyWithin ( target, start [ , end ] )
Description= The interpretation and use of the arguments of %TypedArray%.prototype.copyWithin are the same as for Array.prototype.copyWithin as defined in  22.1.3.3.
*0*Let VARO be this value. 
*0*Perform ? FUNCValidateTypedArray(VARO). 
*0*Let VARlen be VARO.[[VARArrayLength]]. 
*0*Let VARrelativeTarget be ? FUNCToInteger(VARtarget). 
*0*If VARrelativeTarget &lt; 0, then
*1*Let VARto be max((VARlen + VARrelativeTarget), 0)
*0*Else,
*1*let VARto be min(VARrelativeTarget, VARlen).
*0*Let VARrelativeStart be ? FUNCToInteger(VARstart). 
*0*If VARrelativeStart &lt; 0, then
*1*Let VARfrom be max((VARlen + VARrelativeStart), 0)
*0*Else,
*1*let VARfrom be min(VARrelativeStart, VARlen).
*0*If VARend is undefined, then
*1*Let VARrelativeEnd be VARlen
*0*Else,
*1*let VARrelativeEnd be ? FUNCToInteger(VARend).
*0*If VARrelativeEnd &lt; 0, then
*1*Let VARfinal be max((VARlen + VARrelativeEnd), 0)
*0*Else,
*1*let VARfinal be min(VARrelativeEnd, VARlen).
*0*Let VARcount be min(VARfinal-VARfrom, VARlen-VARto). 
*0*If VARcount &gt; 0, then
*1*NOTE: The copying must be performed in a manner that preserves the bit-level encoding of the source data. 
*1*Let VARbuffer be VARO.[[VARViewedArrayBuffer]]. 
*1*If FUNCIsDetachedBuffer(VARbuffer) is true, throw a TypeError exception. 
*1*Let VARtypedArrayName be the String value of VARO.[[VARTypedArrayName]]. 
*1*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for VARtypedArrayName. 
*1*Let VARbyteOffset be VARO.[[VARByteOffset]]. 
*1*Let VARtoByteIndex be VARto × VARelementSize + VARbyteOffset. 
*1*Let VARfromByteIndex be VARfrom × VARelementSize + VARbyteOffset. 
*1*Let VARcountBytes be VARcount × VARelementSize. 
*1*If VARfromByteIndex&lt;VARtoByteIndex and VARtoByteIndex&lt;VARfromByteIndex+VARcountBytes, then
*2*Let VARdirection be -1. 
*2*Let VARfromByteIndex be VARfromByteIndex + VARcountBytes - 1. 
*2*Let VARtoByteIndex be VARtoByteIndex + VARcountBytes - 1. 
*1*Else,
*2*Let VARdirection be 1. 
*1*Repeat, while VARcountBytes &gt; 0
*2*Let VARvalue be FUNCGetValueFromBuffer(VARbuffer, VARfromByteIndex, "Uint8", true, "Unordered"). 
*2*Perform FUNCSetValueInBuffer(VARbuffer, VARtoByteIndex, "Uint8", VARvalue, true, "Unordered"). 
*2*Let VARfromByteIndex be VARfromByteIndex + VARdirection. 
*2*Let VARtoByteIndex be VARtoByteIndex + VARdirection. 
*2*Let VARcountBytes be VARcountBytes - 1. 
*0*Return VARO.     

#############  END  ## 529 ###########################
############# BEGIN ## 530 ###########################
ID= 22.2.3.5.1
Summary= Runtime Semantics: ValidateTypedArray ( O )
Description= When called with argument O, the following steps are taken:
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*If VARO does not have a [[VARTypedArrayName]] internal slot, throw a TypeError exception. 
*0*Assert: VARO has a [[VARViewedArrayBuffer]] internal slot. 
*0*Let VARbuffer be VARO.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARbuffer) is true, throw a TypeError exception. 
*0*Return VARbuffer.      

#############  END  ## 530 ###########################
############# BEGIN ## 531 ###########################
ID= 22.2.3.6
Summary= %TypedArray%.prototype.entries ( )
Description= The following steps are taken:
*0*Let VARO be the this value. 
*0*Perform ? FUNCValidateTypedArray(VARO). 
*0*Return FUNCCreateArrayIterator(VARO, "key+value").     

#############  END  ## 531 ###########################
############# BEGIN ## 532 ###########################
ID= 22.2.3.8
Summary= %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )
Description= The interpretation and use of the arguments of %TypedArray%.prototype.fill are the same as for Array.prototype.fill as defined in  22.1.3.6.
*0*Let VARO be the this value. 
*0*Perform ? FUNCValidateTypedArray(VARO). 
*0*Let VARlen be VARO.[[VARArrayLength]]. 
*0*Let VARvalue be ? FUNCToNumber(VARvalue). 
*0*Let VARrelativeStart be ? FUNCToInteger(VARstart). 
*0*If VARrelativeStart &lt; 0, then
*1*Let VARk be max((VARlen + VARrelativeStart), 0)
*0*Else,
*1*let VARk be min(VARrelativeStart, VARlen).
*0*If VARend is undefined, then
*1*Let VARrelativeEnd be VARlen
*0*Else,
*1*let VARrelativeEnd be ? FUNCToInteger(VARend).
*0*If VARrelativeEnd &lt; 0, then
*1*Let VARfinal be max((VARlen + VARrelativeEnd), 0)
*0*Else,
*1*let VARfinal be min(VARrelativeEnd, VARlen).
*0*If FUNCIsDetachedBuffer(VARO.[[VARViewedArrayBuffer]]) is true, throw a TypeError exception. 
*0*Repeat, while VARk &lt; VARfinal
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Perform ! FUNCSet(VARO, VARPk, VARvalue, true). 
*1*Increase VARk by 1. 
*0*Return VARO.     

#############  END  ## 532 ###########################
############# BEGIN ## 533 ###########################
ID= 22.2.3.9
Summary= %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )
Description= The interpretation and use of the arguments of %TypedArray%.prototype.filter are the same as for Array.prototype.filter as defined in  22.1.3.7.
*0*Let VARO be the this value. 
*0*Perform ? FUNCValidateTypedArray(VARO). 
*0*Let VARlen be VARO.[[VARArrayLength]]. 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARkept be a new empty List. 
*0*Let VARk be 0. 
*0*Let VARcaptured be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*1*Let VARselected be FUNCToBoolean(? FUNCCall(VARcallbackfn, VART, « VARkValue, VARk, VARO »)). 
*1*If VARselected is true, then
*2*Append VARkValue to the end of VARkept. 
*2*Increase VARcaptured by 1. 
*1*Increase VARk by 1. 
*0*Let VARA be ? TypedArraySpeciesCreate(VARO, « VARcaptured »). 
*0*Let VARn be 0. 
*0*For each element VARe of VARkept, do
*1*Perform ! FUNCSet(VARA, ! FUNCToString(VARn), VARe, true). 
*1*Increment VARn by 1. 
*0*Return VARA.     

#############  END  ## 533 ###########################
############# BEGIN ## 534 ###########################
ID= 22.2.3.16
Summary= %TypedArray%.prototype.keys ( )
Description= The following steps are taken:
*0*Let VARO be the this value. 
*0*Perform ? FUNCValidateTypedArray(VARO). 
*0*Return FUNCCreateArrayIterator(VARO, "key").     

#############  END  ## 534 ###########################
############# BEGIN ## 535 ###########################
ID= 22.2.3.19
Summary= %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )
Description= The interpretation and use of the arguments of %TypedArray%.prototype.map are the same as for Array.prototype.map as defined in  22.1.3.16.
*0*Let VARO be the this value. 
*0*Perform ? FUNCValidateTypedArray(VARO). 
*0*Let VARlen be VARO.[[VARArrayLength]]. 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARA be ? TypedArraySpeciesCreate(VARO, « VARlen »). 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*1*Let VARmappedValue be ? FUNCCall(VARcallbackfn, VART, « VARkValue, VARk, VARO »). 
*1*Perform ? FUNCSet(VARA, VARPk, VARmappedValue, true). 
*1*Increase VARk by 1. 
*0*Return VARA.     

#############  END  ## 535 ###########################
############# BEGIN ## 536 ###########################
ID= 22.2.3.23
Summary= %TypedArray%.prototype.set ( overloaded [ , offset ] )
Description= %TypedArray%.prototype.set is a single function whose behaviour is overloaded based upon the type of its first argument.
*0*Assert: VARarray is any ECMAScript language value other than an Object with a [[VARTypedArrayName]] internal slot. If it is such an Object, the definition in 22.2.3.23.2 applies. 
*0*Let VARtarget be the this value. 
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*If VARtarget does not have a [[VARTypedArrayName]] internal slot, throw a TypeError exception. 
*0*Assert: VARtarget has a [[VARViewedArrayBuffer]] internal slot. 
*0*Let VARtargetOffset be ? FUNCToInteger(VARoffset). 
*0*If VARtargetOffset &lt; 0, throw a RangeError exception. 
*0*Let VARtargetBuffer be VARtarget.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARtargetBuffer) is true, throw a TypeError exception. 
*0*Let VARtargetLength be VARtarget.[[VARArrayLength]]. 
*0*Let VARtargetName be the String value of VARtarget.[[VARTypedArrayName]]. 
*0*Let VARtargetElementSize be the Number value of the Element Size value specified in Table 56 for VARtargetName. 
*0*Let VARtargetType be the String value of the Element Type value in Table 56 for VARtargetName. 
*0*Let VARtargetByteOffset be VARtarget.[[VARByteOffset]]. 
*0*Let VARsrc be ? FUNCToObject(VARarray). 
*0*Let VARsrcLength be ? FUNCToLength(? FUNCGet(VARsrc, "length")). 
*0*If VARsrcLength + VARtargetOffset &gt; VARtargetLength, throw a RangeError exception. 
*0*Let VARtargetByteIndex be VARtargetOffset × VARtargetElementSize + VARtargetByteOffset. 
*0*Let VARk be 0. 
*0*Let VARlimit be VARtargetByteIndex + VARtargetElementSize × VARsrcLength. 
*0*Repeat, while VARtargetByteIndex &lt; VARlimit
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkNumber be ? FUNCToNumber(? FUNCGet(VARsrc, VARPk)). 
*1*If FUNCIsDetachedBuffer(VARtargetBuffer) is true, throw a TypeError exception. 
*1*Perform FUNCSetValueInBuffer(VARtargetBuffer, VARtargetByteIndex, VARtargetType, VARkNumber, true, "Unordered"). 
*1*Set VARk to VARk + 1. 
*1*Set VARtargetByteIndex to VARtargetByteIndex + VARtargetElementSize. 
*0*Return undefined.      

#############  END  ## 536 ###########################
############# BEGIN ## 537 ###########################
ID= 22.2.3.23.1
Summary= %TypedArray%.prototype.set ( array [ , offset ] )
Description= Sets multiple values in this TypedArray, reading the values from the object array. The optional offset value indicates the first element index in this TypedArray where values are written. If omitted, it is assumed to be 0.
*0*Assert: VARarray is any ECMAScript language value other than an Object with a [[VARTypedArrayName]] internal slot. If it is such an Object, the definition in 22.2.3.23.2 applies. 
*0*Let VARtarget be the this value. 
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*If VARtarget does not have a [[VARTypedArrayName]] internal slot, throw a TypeError exception. 
*0*Assert: VARtarget has a [[VARViewedArrayBuffer]] internal slot. 
*0*Let VARtargetOffset be ? FUNCToInteger(VARoffset). 
*0*If VARtargetOffset &lt; 0, throw a RangeError exception. 
*0*Let VARtargetBuffer be VARtarget.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARtargetBuffer) is true, throw a TypeError exception. 
*0*Let VARtargetLength be VARtarget.[[VARArrayLength]]. 
*0*Let VARtargetName be the String value of VARtarget.[[VARTypedArrayName]]. 
*0*Let VARtargetElementSize be the Number value of the Element Size value specified in Table 56 for VARtargetName. 
*0*Let VARtargetType be the String value of the Element Type value in Table 56 for VARtargetName. 
*0*Let VARtargetByteOffset be VARtarget.[[VARByteOffset]]. 
*0*Let VARsrc be ? FUNCToObject(VARarray). 
*0*Let VARsrcLength be ? FUNCToLength(? FUNCGet(VARsrc, "length")). 
*0*If VARsrcLength + VARtargetOffset &gt; VARtargetLength, throw a RangeError exception. 
*0*Let VARtargetByteIndex be VARtargetOffset × VARtargetElementSize + VARtargetByteOffset. 
*0*Let VARk be 0. 
*0*Let VARlimit be VARtargetByteIndex + VARtargetElementSize × VARsrcLength. 
*0*Repeat, while VARtargetByteIndex &lt; VARlimit
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkNumber be ? FUNCToNumber(? FUNCGet(VARsrc, VARPk)). 
*1*If FUNCIsDetachedBuffer(VARtargetBuffer) is true, throw a TypeError exception. 
*1*Perform FUNCSetValueInBuffer(VARtargetBuffer, VARtargetByteIndex, VARtargetType, VARkNumber, true, "Unordered"). 
*1*Set VARk to VARk + 1. 
*1*Set VARtargetByteIndex to VARtargetByteIndex + VARtargetElementSize. 
*0*Return undefined.      

#############  END  ## 537 ###########################
############# BEGIN ## 538 ###########################
ID= 22.2.3.23.2
Summary= %TypedArray%.prototype.set ( typedArray [ , offset ] )
Description= Sets multiple values in this TypedArray, reading the values from the typedArray argument object. The optional offset value indicates the first element index in this TypedArray where values are written. If omitted, it is assumed to be 0.
*0*Assert: VARtypedArray has a [[VARTypedArrayName]] internal slot. If it does not, the definition in 22.2.3.23.1 applies. 
*0*Let VARtarget be the this value. 
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*If VARtarget does not have a [[VARTypedArrayName]] internal slot, throw a TypeError exception. 
*0*Assert: VARtarget has a [[VARViewedArrayBuffer]] internal slot. 
*0*Let VARtargetOffset be ? FUNCToInteger(VARoffset). 
*0*If VARtargetOffset &lt; 0, throw a RangeError exception. 
*0*Let VARtargetBuffer be VARtarget.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARtargetBuffer) is true, throw a TypeError exception. 
*0*Let VARtargetLength be VARtarget.[[VARArrayLength]]. 
*0*Let VARsrcBuffer be VARtypedArray.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARsrcBuffer) is true, throw a TypeError exception. 
*0*Let VARtargetName be the String value of VARtarget.[[VARTypedArrayName]]. 
*0*Let VARtargetType be the String value of the Element Type value in Table 56 for VARtargetName. 
*0*Let VARtargetElementSize be the Number value of the Element Size value specified in Table 56 for VARtargetName. 
*0*Let VARtargetByteOffset be VARtarget.[[VARByteOffset]]. 
*0*Let VARsrcName be the String value of VARtypedArray.[[VARTypedArrayName]]. 
*0*Let VARsrcType be the String value of the Element Type value in Table 56 for VARsrcName. 
*0*Let VARsrcElementSize be the Number value of the Element Size value specified in Table 56 for VARsrcName. 
*0*Let VARsrcLength be VARtypedArray.[[VARArrayLength]]. 
*0*Let VARsrcByteOffset be VARtypedArray.[[VARByteOffset]]. 
*0*If VARsrcLength + VARtargetOffset &gt; VARtargetLength, throw a RangeError exception. 
*0*If both FUNCIsSharedArrayBuffer(VARsrcBuffer) and FUNCIsSharedArrayBuffer(VARtargetBuffer) are true, then
*1*If VARsrcBuffer.[[VARArrayBufferData]] and VARtargetBuffer.[[VARArrayBufferData]] are the same Shared Data Block values, then
*2*Let VARsame be true
*1*Else,
*2*let VARsame be false.
*0*Else,
*1*let VARsame be FUNCSameValue(VARsrcBuffer, VARtargetBuffer).
*0*If VARsame is true, then
*1*Let VARsrcByteLength be VARtypedArray.[[VARByteLength]]. 
*1*Let VARsrcBuffer be ? FUNCCloneArrayBuffer(VARsrcBuffer, VARsrcByteOffset, VARsrcByteLength, %ArrayBuffer%). 
*1*NOTE: %ArrayBuffer% is used to clone VARsrcBuffer because is it known to not have any observable side-effects. 
*1*Let VARsrcByteIndex be 0. 
*0*Else,
*1*let VARsrcByteIndex be VARsrcByteOffset.
*0*Let VARtargetByteIndex be VARtargetOffset × VARtargetElementSize + VARtargetByteOffset. 
*0*Let VARlimit be VARtargetByteIndex + VARtargetElementSize × VARsrcLength. 
*0*If FUNCSameValue(VARsrcType, VARtargetType) is true, then
*1*NOTE: If VARsrcType and VARtargetType are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data. 
*1*Repeat, while VARtargetByteIndex &lt; VARlimit
*2*Let VARvalue be FUNCGetValueFromBuffer(VARsrcBuffer, VARsrcByteIndex, "Uint8", true, "Unordered"). 
*2*Perform FUNCSetValueInBuffer(VARtargetBuffer, VARtargetByteIndex, "Uint8", VARvalue, true, "Unordered"). 
*2*Set VARsrcByteIndex to VARsrcByteIndex + 1. 
*2*Set VARtargetByteIndex to VARtargetByteIndex + 1. 
*0*Else,
*1*Repeat, while VARtargetByteIndex &lt; VARlimit
*2*Let VARvalue be FUNCGetValueFromBuffer(VARsrcBuffer, VARsrcByteIndex, VARsrcType, true, "Unordered"). 
*2*Perform FUNCSetValueInBuffer(VARtargetBuffer, VARtargetByteIndex, VARtargetType, VARvalue, true, "Unordered"). 
*2*Set VARsrcByteIndex to VARsrcByteIndex + VARsrcElementSize. 
*2*Set VARtargetByteIndex to VARtargetByteIndex + VARtargetElementSize. 
*0*Return undefined.      

#############  END  ## 538 ###########################
############# BEGIN ## 539 ###########################
ID= 22.2.3.24
Summary= %TypedArray%.prototype.slice ( start, end )
Description= The interpretation and use of the arguments of %TypedArray%.prototype.slice are the same as for Array.prototype.slice as defined in  22.1.3.23. The following steps are taken:
*0*Let VARO be the this value. 
*0*Perform ? FUNCValidateTypedArray(VARO). 
*0*Let VARlen be VARO.[[VARArrayLength]]. 
*0*Let VARrelativeStart be ? FUNCToInteger(VARstart). 
*0*If VARrelativeStart &lt; 0, then
*1*Let VARk be max((VARlen + VARrelativeStart), 0)
*0*Else,
*1*let VARk be min(VARrelativeStart, VARlen).
*0*If VARend is undefined, then
*1*Let VARrelativeEnd be VARlen
*0*Else,
*1*let VARrelativeEnd be ? FUNCToInteger(VARend).
*0*If VARrelativeEnd &lt; 0, then
*1*Let VARfinal be max((VARlen + VARrelativeEnd), 0)
*0*Else,
*1*let VARfinal be min(VARrelativeEnd, VARlen).
*0*Let VARcount be max(VARfinal - VARk, 0). 
*0*Let VARA be ? TypedArraySpeciesCreate(VARO, « VARcount »). 
*0*Let VARsrcName be the String value of VARO.[[VARTypedArrayName]]. 
*0*Let VARsrcType be the String value of the Element Type value in Table 56 for VARsrcName. 
*0*Let VARtargetName be the String value of VARA.[[VARTypedArrayName]]. 
*0*Let VARtargetType be the String value of the Element Type value in Table 56 for VARtargetName. 
*0*If FUNCSameValue(VARsrcType, VARtargetType) is false, then
*1*Let VARn be 0. 
*1*Repeat, while VARk &lt; VARfinal
*2*Let VARPk be ! FUNCToString(VARk). 
*2*Let VARkValue be ? FUNCGet(VARO, VARPk). 
*2*Perform ! FUNCSet(VARA, ! FUNCToString(VARn), VARkValue). 
*2*Increase VARk by 1. 
*2*Increase VARn by 1. 
*0*Else if VARcount &gt; 0, then
*1*Let VARsrcBuffer be VARO.[[VARViewedArrayBuffer]]. 
*1*If FUNCIsDetachedBuffer(VARsrcBuffer) is true, throw a TypeError exception. 
*1*Let VARtargetBuffer be VARA.[[VARViewedArrayBuffer]]. 
*1*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for VARsrcType. 
*1*NOTE: If VARsrcType and VARtargetType are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data. 
*1*Let VARsrcByteOffet be VARO.[[VARByteOffset]]. 
*1*Let VARtargetByteIndex be VARA.[[VARByteOffset]]. 
*1*Let VARsrcByteIndex be (VARk × VARelementSize) + VARsrcByteOffet. 
*1*Let VARlimit be VARtargetByteIndex + VARcount × VARelementSize. 
*1*Repeat, while VARtargetByteIndex &lt; VARlimit
*2*Let VARvalue be FUNCGetValueFromBuffer(VARsrcBuffer, VARsrcByteIndex, "Uint8", true, "Unordered"). 
*2*Perform FUNCSetValueInBuffer(VARtargetBuffer, VARtargetByteIndex, "Uint8", VARvalue, true, "Unordered"). 
*2*Increase VARsrcByteIndex by 1. 
*2*Increase VARtargetByteIndex by 1. 
*0*Return VARA.     

#############  END  ## 539 ###########################
############# BEGIN ## 540 ###########################
ID= 22.2.3.26
Summary= %TypedArray%.prototype.sort ( comparefn )
Description= %TypedArray%.prototype.sort is a distinct function that, except as described below, implements the same requirements as those of Array.prototype.sort as defined in  22.1.3.25. The implementation of the %TypedArray%.prototype.sort specification may be optimized with the knowledge that the this value is an object that has a fixed length and whose  integer-indexed properties are not sparse. The only internal methods of the this object that the algorithm may call are [[Get]] and [[Set]].
*0*If VARcomparefn is not undefined and FUNCIsCallable(VARcomparefn) is false, throw a TypeError exception. 
*0*Let VARobj be the this value. 
*0*Let VARbuffer be ? FUNCValidateTypedArray(VARobj). 
*0*Let VARlen be VARobj.[[VARArrayLength]].     

#############  END  ## 540 ###########################
############# BEGIN ## 541 ###########################
ID= 22.2.3.27
Summary= %TypedArray%.prototype.subarray ( begin, end )
Description= Returns a new TypedArray object whose element type is the same as this TypedArray and whose ArrayBuffer is the same as the ArrayBuffer of this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning.
*0*Let VARO be the this value. 
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*If VARO does not have a [[VARTypedArrayName]] internal slot, throw a TypeError exception. 
*0*Assert: VARO has a [[VARViewedArrayBuffer]] internal slot. 
*0*Let VARbuffer be VARO.[[VARViewedArrayBuffer]]. 
*0*Let VARsrcLength be VARO.[[VARArrayLength]]. 
*0*Let VARrelativeBegin be ? FUNCToInteger(VARbegin). 
*0*If VARrelativeBegin &lt; 0, then
*1*Let VARbeginIndex be max((VARsrcLength + VARrelativeBegin), 0)
*0*Else,
*1*let VARbeginIndex be min(VARrelativeBegin, VARsrcLength).
*0*If VARend is undefined, then
*1*Let VARrelativeEnd be VARsrcLength
*0*Else,
*1*, then
*0*If VARrelativeEnd &lt; 0, then
*1*Let VARendIndex be max((VARsrcLength + VARrelativeEnd), 0)
*0*Else,
*1*let VARendIndex be min(VARrelativeEnd, VARsrcLength).
*0*Let VARnewLength be max(VARendIndex - VARbeginIndex, 0). 
*0*Let VARconstructorName be the String value of VARO.[[VARTypedArrayName]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for VARconstructorName. 
*0*Let VARsrcByteOffset be VARO.[[VARByteOffset]]. 
*0*Let VARbeginByteOffset be VARsrcByteOffset + VARbeginIndex × VARelementSize. 
*0*Let VARargumentsList be « VARbuffer, VARbeginByteOffset, VARnewLength ». 
*0*Return ? TypedArraySpeciesCreate(VARO, VARargumentsList).     

#############  END  ## 541 ###########################
############# BEGIN ## 542 ###########################
ID= 22.2.3.30
Summary= %TypedArray%.prototype.values ( )
Description= The following steps are taken:
*0*Let VARO be the this value. 
*0*Perform ? FUNCValidateTypedArray(VARO). 
*0*Return FUNCCreateArrayIterator(VARO, "value").     

#############  END  ## 542 ###########################
############# BEGIN ## 543 ###########################
ID= 22.2.4.1
Summary= TypedArray ( )
Description= This description applies only if the TypedArray function is called with no arguments.
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARconstructorName be the String value of the Constructor Name value specified in Table 56 for this VARTypedArray constructor. 
*0*Return ? FUNCAllocateTypedArray(VARconstructorName, NewTarget, "%VARTypedArrayPrototype%", 0).     

#############  END  ## 543 ###########################
############# BEGIN ## 544 ###########################
ID= 22.2.4.2
Summary= TypedArray ( length )
Description= This description applies only if the TypedArray function is called with at least one argument and the Type of the first argument is not Object.
*0*Assert: FUNCType(VARlength) is not Object. 
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARelementLength be ? FUNCToIndex(VARlength). 
*0*Let VARconstructorName be the String value of the Constructor Name value specified in Table 56 for this VARTypedArray constructor. 
*0*Return ? FUNCAllocateTypedArray(VARconstructorName, NewTarget, "%VARTypedArrayPrototype%", VARelementLength).     

#############  END  ## 544 ###########################
############# BEGIN ## 545 ###########################
ID= 22.2.4.2.1
Summary= Runtime Semantics: AllocateTypedArray ( constructorName, newTarget, defaultProto [ , length ] )
Description= The abstract operation AllocateTypedArray with arguments constructorName, newTarget, defaultProto and optional argument length is used to validate and create an instance of a TypedArray constructor. constructorName is required to be the name of a TypedArray constructor in  Table 56. If the length argument is passed, an ArrayBuffer of that length is also allocated and associated with the new TypedArray instance. AllocateTypedArray provides common semantics that is used by all of the TypedArray overloads. AllocateTypedArray performs the following steps:
*0*Let VARproto be ? FUNCGetPrototypeFromConstructor(VARnewTarget, VARdefaultProto). 
*0*Let VARobj be FUNCIntegerIndexedObjectCreate(VARproto, « [[VARViewedArrayBuffer]], [[VARTypedArrayName]], [[VARByteLength]], [[VARByteOffset]], [[VARArrayLength]] »). 
*0*Assert: VARobj.[[VARViewedArrayBuffer]] is undefined. 
*0*Set VARobj.[[VARTypedArrayName]] to VARconstructorName. 
*0*If VARlength is not present, then
*1*Set VARobj.[[VARByteLength]] to 0. 
*1*Set VARobj.[[VARByteOffset]] to 0. 
*1*Set VARobj.[[VARArrayLength]] to 0. 
*0*Else,
*1*Perform ? FUNCAllocateTypedArrayBuffer(VARobj, VARlength). 
*0*Return VARobj.      

#############  END  ## 545 ###########################
############# BEGIN ## 546 ###########################
ID= 22.2.4.2.2
Summary= Runtime Semantics: AllocateTypedArrayBuffer ( O, length )
Description= The abstract operation AllocateTypedArrayBuffer with arguments O and length allocates and associates an ArrayBuffer with the TypedArray instance O. It performs the following steps:
*0*Assert: VARO is an Object that has a [[VARViewedArrayBuffer]] internal slot. 
*0*Assert: VARO.[[VARViewedArrayBuffer]] is undefined. 
*0*Assert: VARlength ≥ 0. 
*0*Let VARconstructorName be the String value of VARO.[[VARTypedArrayName]]. 
*0*Let VARelementSize be the Element Size value in Table 56 for VARconstructorName. 
*0*Let VARbyteLength be VARelementSize × VARlength. 
*0*Let VARdata be ? FUNCAllocateArrayBuffer(%ArrayBuffer%, VARbyteLength). 
*0*Set VARO.[[VARViewedArrayBuffer]] to VARdata. 
*0*Set VARO.[[VARByteLength]] to VARbyteLength. 
*0*Set VARO.[[VARByteOffset]] to 0. 
*0*Set VARO.[[VARArrayLength]] to VARlength. 
*0*Return VARO.      

#############  END  ## 546 ###########################
############# BEGIN ## 547 ###########################
ID= 22.2.4.3
Summary= TypedArray ( typedArray )
Description= This description applies only if the TypedArray function is called with at least one argument and the Type of the first argument is Object and that object has a [[TypedArrayName]] internal slot.
*0*Assert: FUNCType(VARtypedArray) is Object and VARtypedArray has a [[VARTypedArrayName]] internal slot. 
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARconstructorName be the String value of the Constructor Name value specified in Table 56 for this VARTypedArray constructor. 
*0*Let VARO be ? FUNCAllocateTypedArray(VARconstructorName, NewTarget, "%VARTypedArrayPrototype%"). 
*0*Let VARsrcArray be VARtypedArray. 
*0*Let VARsrcData be VARsrcArray.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARsrcData) is true, throw a TypeError exception. 
*0*Let VARelementType be the String value of the Element Type value in Table 56 for VARconstructorName. 
*0*Let VARelementLength be VARsrcArray.[[VARArrayLength]]. 
*0*Let VARsrcName be the String value of VARsrcArray.[[VARTypedArrayName]]. 
*0*Let VARsrcType be the String value of the Element Type value in Table 56 for VARsrcName. 
*0*Let VARsrcElementSize be the Element Size value in Table 56 for VARsrcName. 
*0*Let VARsrcByteOffset be VARsrcArray.[[VARByteOffset]]. 
*0*Let VARelementSize be the Element Size value in Table 56 for VARconstructorName. 
*0*Let VARbyteLength be VARelementSize × VARelementLength. 
*0*If FUNCIsSharedArrayBuffer(VARsrcData) is false, then
*1*Let VARbufferConstructor be ? FUNCSpeciesConstructor(VARsrcData, %ArrayBuffer%). 
*0*Else,
*1*Let VARbufferConstructor be %ArrayBuffer%. 
*0*If FUNCSameValue(VARelementType, VARsrcType) is true, then
*1*If FUNCIsDetachedBuffer(VARsrcData) is true, throw a TypeError exception. 
*1*Let VARdata be ? FUNCCloneArrayBuffer(VARsrcData, VARsrcByteOffset, VARbyteLength, VARbufferConstructor). 
*0*Else,
*1*Let VARdata be ? FUNCAllocateArrayBuffer(VARbufferConstructor, VARbyteLength). 
*1*If FUNCIsDetachedBuffer(VARsrcData) is true, throw a TypeError exception. 
*1*Let VARsrcByteIndex be VARsrcByteOffset. 
*1*Let VARtargetByteIndex be 0. 
*1*Let VARcount be VARelementLength. 
*1*Repeat, while VARcount &gt; 0
*2*Let VARvalue be FUNCGetValueFromBuffer(VARsrcData, VARsrcByteIndex, VARsrcType, true, "Unordered"). 
*2*Perform FUNCSetValueInBuffer(VARdata, VARtargetByteIndex, VARelementType, VARvalue, true, "Unordered"). 
*2*Set VARsrcByteIndex to VARsrcByteIndex + VARsrcElementSize. 
*2*Set VARtargetByteIndex to VARtargetByteIndex + VARelementSize. 
*2*Decrement VARcount by 1. 
*0*Set VARO.[[VARViewedArrayBuffer]] to VARdata. 
*0*Set VARO.[[VARByteLength]] to VARbyteLength. 
*0*Set VARO.[[VARByteOffset]] to 0. 
*0*Set VARO.[[VARArrayLength]] to VARelementLength. 
*0*Return VARO.     

#############  END  ## 547 ###########################
############# BEGIN ## 548 ###########################
ID= 22.2.4.4
Summary= TypedArray ( object )
Description= This description applies only if the TypedArray function is called with at least one argument and the Type of the first argument is Object and that object does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.
*0*Assert: FUNCType(VARobject) is Object and VARobject does not have either a [[VARTypedArrayName]] or an [[VARArrayBufferData]] internal slot. 
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARconstructorName be the String value of the Constructor Name value specified in Table 56 for this VARTypedArray constructor. 
*0*Let VARO be ? FUNCAllocateTypedArray(VARconstructorName, NewTarget, "%VARTypedArrayPrototype%"). 
*0*Let VARusingIterator be ? FUNCGetMethod(VARobject, @@iterator). 
*0*If VARusingIterator is not undefined, then
*1*Let VARvalues be ? FUNCIterableToList(VARobject, VARusingIterator). 
*1*Let VARlen be the number of elements in VARvalues. 
*1*Perform ? FUNCAllocateTypedArrayBuffer(VARO, VARlen). 
*1*Let VARk be 0. 
*1*Repeat, while VARk &lt; VARlen
*2*Let VARPk be ! FUNCToString(VARk). 
*2*Let VARkValue be the first element of VARvalues and remove that element from VARvalues. 
*2*Perform ? FUNCSet(VARO, VARPk, VARkValue, true). 
*2*Increase VARk by 1. 
*1*Assert: VARvalues is now an empty List. 
*1*Return VARO. 
*0*NOTE: VARobject is not an Iterable so assume it is already an array-like object. 
*0*Let VARarrayLike be VARobject. 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARarrayLike, "length")). 
*0*Perform ? FUNCAllocateTypedArrayBuffer(VARO, VARlen). 
*0*Let VARk be 0. 
*0*Repeat, while VARk &lt; VARlen
*1*Let VARPk be ! FUNCToString(VARk). 
*1*Let VARkValue be ? FUNCGet(VARarrayLike, VARPk). 
*1*Perform ? FUNCSet(VARO, VARPk, VARkValue, true). 
*1*Increase VARk by 1. 
*0*Return VARO.     

#############  END  ## 548 ###########################
############# BEGIN ## 549 ###########################
ID= 22.2.4.5
Summary= TypedArray ( buffer [ , byteOffset [ , length ] ] )
Description= This description applies only if the TypedArray function is called with at least one argument and the Type of the first argument is Object and that object has an [[ArrayBufferData]] internal slot.
*0*Assert: FUNCType(VARbuffer) is Object and VARbuffer has an [[VARArrayBufferData]] internal slot. 
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARconstructorName be the String value of the Constructor Name value specified in Table 56 for this VARTypedArray constructor. 
*0*Let VARO be ? FUNCAllocateTypedArray(VARconstructorName, NewTarget, "%VARTypedArrayPrototype%"). 
*0*Let VARelementSize be the Number value of the Element Size value in Table 56 for VARconstructorName. 
*0*Let VARoffset be ? FUNCToIndex(VARbyteOffset). 
*0*If VARoffset modulo VARelementSize ≠ 0, throw a RangeError exception. 
*0*If VARlength is present and VARlength is not undefined, then
*1*Let VARnewLength be ? FUNCToIndex(VARlength). 
*0*If FUNCIsDetachedBuffer(VARbuffer) is true, throw a TypeError exception. 
*0*Let VARbufferByteLength be VARbuffer.[[VARArrayBufferByteLength]]. 
*0*If VARlength is either not present or undefined, then
*1*If VARbufferByteLength modulo VARelementSize ≠ 0, throw a RangeError exception. 
*1*Let VARnewByteLength be VARbufferByteLength - VARoffset. 
*1*If VARnewByteLength &lt; 0, throw a RangeError exception. 
*0*Else,
*1*Let VARnewByteLength be VARnewLength × VARelementSize. 
*1*If VARoffset+VARnewByteLength &gt; VARbufferByteLength, throw a RangeError exception. 
*0*Set VARO.[[VARViewedArrayBuffer]] to VARbuffer. 
*0*Set VARO.[[VARByteLength]] to VARnewByteLength. 
*0*Set VARO.[[VARByteOffset]] to VARoffset. 
*0*Set VARO.[[VARArrayLength]] to VARnewByteLength / VARelementSize. 
*0*Return VARO.     

#############  END  ## 549 ###########################
############# BEGIN ## 550 ###########################
ID= 22.2.4.6
Summary= TypedArrayCreate ( constructor, argumentList )
Description= The abstract operation TypedArrayCreate with arguments constructor and argumentList is used to specify the creation of a new TypedArray object using a constructor function. It performs the following steps:
*0*Let VARnewTypedArray be ? FUNCConstruct(VARconstructor, VARargumentList). 
*0*Perform ? FUNCValidateTypedArray(VARnewTypedArray). 
*0*If VARargumentList is a List of a single Number, then
*1*If VARnewTypedArray.[[VARArrayLength]] &lt; VARargumentList[0], throw a TypeError exception. 
*0*Return VARnewTypedArray.     

#############  END  ## 550 ###########################
############# BEGIN ## 551 ###########################
ID= 22.2.4.7
Summary= TypedArraySpeciesCreate ( exemplar, argumentList )
Description= The abstract operation TypedArraySpeciesCreate with arguments exemplar and argumentList is used to specify the creation of a new TypedArray object using a constructor function that is derived from exemplar. It performs the following steps:
*0*Assert: VARexemplar is an Object that has a [[VARTypedArrayName]] internal slot. 
*0*Let VARdefaultConstructor be the intrinsic object listed in column one of Table 56 for VARexemplar.[[VARTypedArrayName]]. 
*0*Let VARconstructor be ? FUNCSpeciesConstructor(VARexemplar, VARdefaultConstructor). 
*0*Return ? TypedArrayCreate(VARconstructor, VARargumentList).     

#############  END  ## 551 ###########################
############# BEGIN ## 552 ###########################
ID= 23.1.1.1
Summary= Map ( [ iterable ] )
Description= When the Map function is called with optional argument, the following steps are taken:
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARmap be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%MapPrototype%", « [[VARMapData]] »). 
*0*Set VARmap.[[VARMapData]] to a new empty List. 
*0*If VARiterable is not present, then
*1*Let VARiterable be undefined. 
*0*If VARiterable is either undefined or null, return VARmap. 
*0*Let VARadder be ? FUNCGet(VARmap, "set"). 
*0*If FUNCIsCallable(VARadder) is false, throw a TypeError exception. 
*0*Let VARiteratorRecord be ? FUNCGetIterator(VARiterable). 
*0*Repeat,
*1*Let VARnext be ? FUNCIteratorStep(VARiteratorRecord). 
*1*If VARnext is false, return VARmap. 
*1*Let VARnextItem be ? FUNCIteratorValue(VARnext). 
*1*If FUNCType(VARnextItem) is not Object, then
*2*Let VARerror be FUNCThrowCompletion(a newly created TypeError object). 
*2*Return ? FUNCIteratorClose(VARiteratorRecord, VARerror). 
*1*Let VARk be FUNCGet(VARnextItem, "0"). 
*1*If VARk is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARk). 
*1*Let VARv be FUNCGet(VARnextItem, "1"). 
*1*If VARv is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARv). 
*1*Let VARstatus be FUNCCall(VARadder, VARmap, « VARk.[[VARValue]], VARv.[[VARValue]] »). 
*1*If VARstatus is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARstatus).     

#############  END  ## 552 ###########################
############# BEGIN ## 553 ###########################
ID= 23.1.3.1
Summary= Map.prototype.clear ( )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARMapData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARM.[[VARMapData]]. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARp that is an element of VARentries, do
*1*Set VARp.[[VARKey]] to empty. 
*1*Set VARp.[[VARValue]] to empty. 
*0*Return undefined.     

#############  END  ## 553 ###########################
############# BEGIN ## 554 ###########################
ID= 23.1.3.3
Summary= Map.prototype.delete ( key )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARMapData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARM.[[VARMapData]]. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARp that is an element of VARentries, do
*1*If VARp.[[VARKey]] is not empty and FUNCSameValueZero(VARp.[[VARKey]], VARkey) is true, then
*2*Set VARp.[[VARKey]] to empty. 
*2*Set VARp.[[VARValue]] to empty. 
*2*Return true. 
*0*Return false.     

#############  END  ## 554 ###########################
############# BEGIN ## 555 ###########################
ID= 23.1.3.4
Summary= Map.prototype.entries ( )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*Return ? FUNCCreateMapIterator(VARM, "key+value").     

#############  END  ## 555 ###########################
############# BEGIN ## 556 ###########################
ID= 23.1.3.5
Summary= Map.prototype.forEach ( callbackfn [ , thisArg ] )
Description= When the forEach method is called with one or two arguments, the following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARMapData]] internal slot, throw a TypeError exception. 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARentries be the List that is VARM.[[VARMapData]]. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARe that is an element of VARentries, in original key insertion order, do
*1*If VARe.[[VARKey]] is not empty, then
*2*Perform ? FUNCCall(VARcallbackfn, VART, « VARe.[[VARValue]], VARe.[[VARKey]], VARM »). 
*0*Return undefined.     

#############  END  ## 556 ###########################
############# BEGIN ## 557 ###########################
ID= 23.1.3.6
Summary= Map.prototype.get ( key )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARMapData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARM.[[VARMapData]]. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARp that is an element of VARentries, do
*1*If VARp.[[VARKey]] is not empty and FUNCSameValueZero(VARp.[[VARKey]], VARkey) is true, return VARp.[[VARValue]]. 
*0*Return undefined.     

#############  END  ## 557 ###########################
############# BEGIN ## 558 ###########################
ID= 23.1.3.7
Summary= Map.prototype.has ( key )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARMapData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARM.[[VARMapData]]. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARp that is an element of VARentries, do
*1*If VARp.[[VARKey]] is not empty and FUNCSameValueZero(VARp.[[VARKey]], VARkey) is true, return true. 
*0*Return false.     

#############  END  ## 558 ###########################
############# BEGIN ## 559 ###########################
ID= 23.1.3.8
Summary= Map.prototype.keys ( )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*Return ? FUNCCreateMapIterator(VARM, "key").     

#############  END  ## 559 ###########################
############# BEGIN ## 560 ###########################
ID= 23.1.3.9
Summary= Map.prototype.set ( key, value )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARMapData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARM.[[VARMapData]]. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARp that is an element of VARentries, do
*1*If VARp.[[VARKey]] is not empty and FUNCSameValueZero(VARp.[[VARKey]], VARkey) is true, then
*2*Set VARp.[[VARValue]] to VARvalue. 
*2*Return VARM. 
*0*If VARkey is -0, then
*1*Let VARkey be +0. 
*0*Let VARp be the Record { [[VARKey]]: VARkey, [[VARValue]]: VARvalue }. 
*0*Append VARp as the last element of VARentries. 
*0*Return VARM.     

#############  END  ## 560 ###########################
############# BEGIN ## 561 ###########################
ID= 23.1.3.11
Summary= Map.prototype.values ( )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*Return ? FUNCCreateMapIterator(VARM, "value").     

#############  END  ## 561 ###########################
############# BEGIN ## 562 ###########################
ID= 23.1.5.1
Summary= CreateMapIterator ( map, kind )
Description= Several methods of Map objects return Iterator objects. The abstract operation CreateMapIterator with arguments map and kind is used to create such iterator objects. It performs the following steps:
*0*If FUNCType(VARmap) is not Object, throw a TypeError exception. 
*0*If VARmap does not have a [[VARMapData]] internal slot, throw a TypeError exception. 
*0*Let VARiterator be FUNCObjectCreate(%MapIteratorPrototype%, « [[VARMap]], [[VARMapNextIndex]], [[VARMapIterationKind]] »). 
*0*Set VARiterator.[[VARMap]] to VARmap. 
*0*Set VARiterator.[[VARMapNextIndex]] to 0. 
*0*Set VARiterator.[[VARMapIterationKind]] to VARkind. 
*0*Return VARiterator.     

#############  END  ## 562 ###########################
############# BEGIN ## 563 ###########################
ID= 23.1.5.2.1
Summary= %MapIteratorPrototype%.next ( )
Description= None
*0*Let VARO be the this value. 
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*If VARO does not have all of the internal slots of a Map Iterator Instance (23.1.5.3), throw a TypeError exception. 
*0*Let VARm be VARO.[[VARMap]]. 
*0*Let VARindex be VARO.[[VARMapNextIndex]]. 
*0*Let VARitemKind be VARO.[[VARMapIterationKind]]. 
*0*If VARm is undefined, return FUNCCreateIterResultObject(undefined, true). 
*0*Assert: VARm has a [[VARMapData]] internal slot. 
*0*Let VARentries be the List that is VARm.[[VARMapData]]. 
*0*Let VARnumEntries be the number of elements of VARentries. 
*0*NOTE: VARnumEntries must be redetermined each time this method is evaluated. 
*0*Repeat, while VARindex is less than VARnumEntries,
*1*Let VARe be the Record { [[VARKey]], [[VARValue]] } that is the value of VARentries[VARindex]. 
*1*Set VARindex to VARindex+1. 
*1*Set VARO.[[VARMapNextIndex]] to VARindex. 
*1*If VARe.[[VARKey]] is not empty, then
*2*If VARitemKind is "key", then
*3*Let VARresult be VARe.[[VARVARKey]]. 
*2*Else,
*3*if VARitemKind is "value", then
*4*Let VARresult be VARe.[[VARVARVARValue]].
*2*Else,
*3*Assert: VARitemKind is "key+value". 
*3*Let VARresult be FUNCCreateArrayFromList(« VARe.[[VARKey]], VARe.[[VARValue]] »). 
*2*Return FUNCCreateIterResultObject(VARresult, false). 
*0*Set VARO.[[VARMap]] to undefined. 
*0*Return FUNCCreateIterResultObject(undefined, true).      

#############  END  ## 563 ###########################
############# BEGIN ## 564 ###########################
ID= 23.2.1.1
Summary= Set ( [ iterable ] )
Description= When the Set function is called with optional argument iterable, the following steps are taken:
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARset be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%SetPrototype%", « [[VARSetData]] »). 
*0*Set VARset.[[VARSetData]] to a new empty List. 
*0*If VARiterable is not present, then
*1*Let VARiterable be undefined. 
*0*If VARiterable is either undefined or null, return VARset. 
*0*Let VARadder be ? FUNCGet(VARset, "add"). 
*0*If FUNCIsCallable(VARadder) is false, throw a TypeError exception. 
*0*Let VARiteratorRecord be ? FUNCGetIterator(VARiterable). 
*0*Repeat,
*1*Let VARnext be ? FUNCIteratorStep(VARiteratorRecord). 
*1*If VARnext is false, return VARset. 
*1*Let VARnextValue be ? FUNCIteratorValue(VARnext). 
*1*Let VARstatus be FUNCCall(VARadder, VARset, « VARnextValue.[[VARValue]] »). 
*1*If VARstatus is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARstatus).     

#############  END  ## 564 ###########################
############# BEGIN ## 565 ###########################
ID= 23.2.3.1
Summary= Set.prototype.add ( value )
Description= The following steps are taken:
*0*Let VARS be the this value. 
*0*If FUNCType(VARS) is not Object, throw a TypeError exception. 
*0*If VARS does not have a [[VARSetData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARS.[[VARSetData]]. 
*0*For each VARe that is an element of VARentries, do
*1*If VARe is not empty and FUNCSameValueZero(VARe, VARvalue) is true, then
*2*Return VARS. 
*0*If VARvalue is -0, then
*1*Let VARvalue be +0. 
*0*Append VARvalue as the last element of VARentries. 
*0*Return VARS.     

#############  END  ## 565 ###########################
############# BEGIN ## 566 ###########################
ID= 23.2.3.2
Summary= Set.prototype.clear ( )
Description= The following steps are taken:
*0*Let VARS be the this value. 
*0*If FUNCType(VARS) is not Object, throw a TypeError exception. 
*0*If VARS does not have a [[VARSetData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARS.[[VARSetData]]. 
*0*For each VARe that is an element of VARentries, do
*1*Replace the element of VARentries whose value is VARe with an element whose value is empty. 
*0*Return undefined.     

#############  END  ## 566 ###########################
############# BEGIN ## 567 ###########################
ID= 23.2.3.4
Summary= Set.prototype.delete ( value )
Description= The following steps are taken:
*0*Let VARS be the this value. 
*0*If FUNCType(VARS) is not Object, throw a TypeError exception. 
*0*If VARS does not have a [[VARSetData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARS.[[VARSetData]]. 
*0*For each VARe that is an element of VARentries, do
*1*If VARe is not empty and FUNCSameValueZero(VARe, VARvalue) is true, then
*2*Replace the element of VARentries whose value is VARe with an element whose value is empty. 
*2*Return true. 
*0*Return false.     

#############  END  ## 567 ###########################
############# BEGIN ## 568 ###########################
ID= 23.2.3.5
Summary= Set.prototype.entries ( )
Description= The following steps are taken:
*0*Let VARS be the this value. 
*0*Return ? FUNCCreateSetIterator(VARS, "key+value").     

#############  END  ## 568 ###########################
############# BEGIN ## 569 ###########################
ID= 23.2.3.6
Summary= Set.prototype.forEach ( callbackfn [ , thisArg ] )
Description= When the forEach method is called with one or two arguments, the following steps are taken:
*0*Let VARS be the this value. 
*0*If FUNCType(VARS) is not Object, throw a TypeError exception. 
*0*If VARS does not have a [[VARSetData]] internal slot, throw a TypeError exception. 
*0*If FUNCIsCallable(VARcallbackfn) is false, throw a TypeError exception. 
*0*If VARthisArg is present, then
*1*Let VART be VARthisArg
*0*Else,
*1*let VART be undefined.
*0*Let VARentries be the List that is VARS.[[VARSetData]]. 
*0*For each VARe that is an element of VARentries, in original insertion order, do
*1*If VARe is not empty, then
*2*Perform ? FUNCCall(VARcallbackfn, VART, « VARe, VARe, VARS »). 
*0*Return undefined.     

#############  END  ## 569 ###########################
############# BEGIN ## 570 ###########################
ID= 23.2.3.7
Summary= Set.prototype.has ( value )
Description= The following steps are taken:
*0*Let VARS be the this value. 
*0*If FUNCType(VARS) is not Object, throw a TypeError exception. 
*0*If VARS does not have a [[VARSetData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARS.[[VARSetData]]. 
*0*For each VARe that is an element of VARentries, do
*1*If VARe is not empty and FUNCSameValueZero(VARe, VARvalue) is true, return true. 
*0*Return false.     

#############  END  ## 570 ###########################
############# BEGIN ## 571 ###########################
ID= 23.2.3.10
Summary= Set.prototype.values ( )
Description= The following steps are taken:
*0*Let VARS be the this value. 
*0*Return ? FUNCCreateSetIterator(VARS, "value").     

#############  END  ## 571 ###########################
############# BEGIN ## 572 ###########################
ID= 23.2.5.1
Summary= CreateSetIterator ( set, kind )
Description= Several methods of Set objects return Iterator objects. The abstract operation CreateSetIterator with arguments set and kind is used to create such iterator objects. It performs the following steps:
*0*If FUNCType(VARset) is not Object, throw a TypeError exception. 
*0*If VARset does not have a [[VARSetData]] internal slot, throw a TypeError exception. 
*0*Let VARiterator be FUNCObjectCreate(%SetIteratorPrototype%, « [[VARIteratedSet]], [[VARSetNextIndex]], [[VARSetIterationKind]] »). 
*0*Set VARiterator.[[VARIteratedSet]] to VARset. 
*0*Set VARiterator.[[VARSetNextIndex]] to 0. 
*0*Set VARiterator.[[VARSetIterationKind]] to VARkind. 
*0*Return VARiterator.     

#############  END  ## 572 ###########################
############# BEGIN ## 573 ###########################
ID= 23.2.5.2.1
Summary= %SetIteratorPrototype%.next ( )
Description= None
*0*Let VARO be the this value. 
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*If VARO does not have all of the internal slots of a Set Iterator Instance (23.2.5.3), throw a TypeError exception. 
*0*Let VARs be VARO.[[VARIteratedSet]]. 
*0*Let VARindex be VARO.[[VARSetNextIndex]]. 
*0*Let VARitemKind be VARO.[[VARSetIterationKind]]. 
*0*If VARs is undefined, return FUNCCreateIterResultObject(undefined, true). 
*0*Assert: VARs has a [[VARSetData]] internal slot. 
*0*Let VARentries be the List that is VARs.[[VARSetData]]. 
*0*Let VARnumEntries be the number of elements of VARentries. 
*0*NOTE: VARnumEntries must be redetermined each time this method is evaluated. 
*0*Repeat, while VARindex is less than VARnumEntries,
*1*Let VARe be VARentries[VARindex]. 
*1*Set VARindex to VARindex+1. 
*1*Set VARO.[[VARSetNextIndex]] to VARindex. 
*1*If VARe is not empty, then
*2*If VARitemKind is "key+value", then
*3*Return FUNCCreateIterResultObject(FUNCCreateArrayFromList(« VARe, VARe »), false). 
*2*Return FUNCCreateIterResultObject(VARe, false). 
*0*Set VARO.[[VARIteratedSet]] to undefined. 
*0*Return FUNCCreateIterResultObject(undefined, true).      

#############  END  ## 573 ###########################
############# BEGIN ## 574 ###########################
ID= 23.3.1.1
Summary= WeakMap ( [ iterable ] )
Description= When the WeakMap function is called with optional argument iterable, the following steps are taken:
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARmap be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%WeakMapPrototype%", « [[VARWeakMapData]] »). 
*0*Set VARmap.[[VARWeakMapData]] to a new empty List. 
*0*If VARiterable is not present, then
*1*Let VARiterable be undefined. 
*0*If VARiterable is either undefined or null, return VARmap. 
*0*Let VARadder be ? FUNCGet(VARmap, "set"). 
*0*If FUNCIsCallable(VARadder) is false, throw a TypeError exception. 
*0*Let VARiteratorRecord be ? FUNCGetIterator(VARiterable). 
*0*Repeat,
*1*Let VARnext be ? FUNCIteratorStep(VARiterRecord). 
*1*If VARnext is false, return VARmap. 
*1*Let VARnextItem be ? FUNCIteratorValue(VARnext). 
*1*If FUNCType(VARnextItem) is not Object, then
*2*Let VARerror be FUNCThrowCompletion(a newly created TypeError object). 
*2*Return ? FUNCIteratorClose(VARiteratorRecord, VARerror). 
*1*Let VARk be FUNCGet(VARnextItem, "0"). 
*1*If VARk is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARk). 
*1*Let VARv be FUNCGet(VARnextItem, "1"). 
*1*If VARv is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARv). 
*1*Let VARstatus be FUNCCall(VARadder, VARmap, « VARk.[[VARValue]], VARv.[[VARValue]] »). 
*1*If VARstatus is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARstatus).     

#############  END  ## 574 ###########################
############# BEGIN ## 575 ###########################
ID= 23.3.3.2
Summary= WeakMap.prototype.delete ( key )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARWeakMapData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARM.[[VARWeakMapData]]. 
*0*If FUNCType(VARkey) is not Object, return false. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARp that is an element of VARentries, do
*1*If VARp.[[VARKey]] is not empty and FUNCSameValue(VARp.[[VARKey]], VARkey) is true, then
*2*Set VARp.[[VARKey]] to empty. 
*2*Set VARp.[[VARValue]] to empty. 
*2*Return true. 
*0*Return false.     

#############  END  ## 575 ###########################
############# BEGIN ## 576 ###########################
ID= 23.3.3.3
Summary= WeakMap.prototype.get ( key )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARWeakMapData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARM.[[VARWeakMapData]]. 
*0*If FUNCType(VARkey) is not Object, return undefined. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARp that is an element of VARentries, do
*1*If VARp.[[VARKey]] is not empty and FUNCSameValue(VARp.[[VARKey]], VARkey) is true, return VARp.[[VARValue]]. 
*0*Return undefined.     

#############  END  ## 576 ###########################
############# BEGIN ## 577 ###########################
ID= 23.3.3.4
Summary= WeakMap.prototype.has ( key )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARWeakMapData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARM.[[VARWeakMapData]]. 
*0*If FUNCType(VARkey) is not Object, return false. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARp that is an element of VARentries, do
*1*If VARp.[[VARKey]] is not empty and FUNCSameValue(VARp.[[VARKey]], VARkey) is true, return true. 
*0*Return false.     

#############  END  ## 577 ###########################
############# BEGIN ## 578 ###########################
ID= 23.3.3.5
Summary= WeakMap.prototype.set ( key, value )
Description= The following steps are taken:
*0*Let VARM be the this value. 
*0*If FUNCType(VARM) is not Object, throw a TypeError exception. 
*0*If VARM does not have a [[VARWeakMapData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARM.[[VARWeakMapData]]. 
*0*If FUNCType(VARkey) is not Object, throw a TypeError exception. 
*0*For each Record { [[VARKey]], [[VARValue]] } VARp that is an element of VARentries, do
*1*If VARp.[[VARKey]] is not empty and FUNCSameValue(VARp.[[VARKey]], VARkey) is true, then
*2*Set VARp.[[VARValue]] to VARvalue. 
*2*Return VARM. 
*0*Let VARp be the Record { [[VARKey]]: VARkey, [[VARValue]]: VARvalue }. 
*0*Append VARp as the last element of VARentries. 
*0*Return VARM.     

#############  END  ## 578 ###########################
############# BEGIN ## 579 ###########################
ID= 23.4.1.1
Summary= WeakSet ( [ iterable ] )
Description= When the WeakSet function is called with optional argument iterable, the following steps are taken:
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARset be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%WeakSetPrototype%", « [[VARWeakSetData]] »). 
*0*Set VARset.[[VARWeakSetData]] to a new empty List. 
*0*If VARiterable is not present, then
*1*Let VARiterable be undefined. 
*0*If VARiterable is either undefined or null, return VARset. 
*0*Let VARadder be ? FUNCGet(VARset, "add"). 
*0*If FUNCIsCallable(VARadder) is false, throw a TypeError exception. 
*0*Let VARiteratorRecord be ? FUNCGetIterator(VARiterable). 
*0*Repeat,
*1*Let VARnext be ? FUNCIteratorStep(VARiteratorRecord). 
*1*If VARnext is false, return VARset. 
*1*Let VARnextValue be ? FUNCIteratorValue(VARnext). 
*1*Let VARstatus be FUNCCall(VARadder, VARset, « VARnextValue »). 
*1*If VARstatus is an FUNCabrupt completion, return ? IteratorClose(VARiteratorRecord, VARstatus).     

#############  END  ## 579 ###########################
############# BEGIN ## 580 ###########################
ID= 23.4.3.1
Summary= WeakSet.prototype.add ( value )
Description= The following steps are taken:
*0*Let VARS be the this value. 
*0*If FUNCType(VARS) is not Object, throw a TypeError exception. 
*0*If VARS does not have a [[VARWeakSetData]] internal slot, throw a TypeError exception. 
*0*If FUNCType(VARvalue) is not Object, throw a TypeError exception. 
*0*Let VARentries be the List that is VARS.[[VARWeakSetData]]. 
*0*For each VARe that is an element of VARentries, do
*1*If VARe is not empty and FUNCSameValue(VARe, VARvalue) is true, then
*2*Return VARS. 
*0*Append VARvalue as the last element of VARentries. 
*0*Return VARS.     

#############  END  ## 580 ###########################
############# BEGIN ## 581 ###########################
ID= 23.4.3.3
Summary= WeakSet.prototype.delete ( value )
Description= The following steps are taken:
*0*Let VARS be the this value. 
*0*If FUNCType(VARS) is not Object, throw a TypeError exception. 
*0*If VARS does not have a [[VARWeakSetData]] internal slot, throw a TypeError exception. 
*0*If FUNCType(VARvalue) is not Object, return false. 
*0*Let VARentries be the List that is VARS.[[VARWeakSetData]]. 
*0*For each VARe that is an element of VARentries, do
*1*If VARe is not empty and FUNCSameValue(VARe, VARvalue) is true, then
*2*Replace the element of VARentries whose value is VARe with an element whose value is empty. 
*2*Return true. 
*0*Return false.     

#############  END  ## 581 ###########################
############# BEGIN ## 582 ###########################
ID= 23.4.3.4
Summary= WeakSet.prototype.has ( value )
Description= The following steps are taken:
*0*Let VARS be the this value. 
*0*If FUNCType(VARS) is not Object, throw a TypeError exception. 
*0*If VARS does not have a [[VARWeakSetData]] internal slot, throw a TypeError exception. 
*0*Let VARentries be the List that is VARS.[[VARWeakSetData]]. 
*0*If FUNCType(VARvalue) is not Object, return false. 
*0*For each VARe that is an element of VARentries, do
*1*If VARe is not empty and FUNCSameValue(VARe, VARvalue) is true, return true. 
*0*Return false.     

#############  END  ## 582 ###########################
############# BEGIN ## 583 ###########################
ID= 24.1.1.1
Summary= AllocateArrayBuffer ( constructor, byteLength )
Description= The abstract operation AllocateArrayBuffer with arguments constructor and byteLength is used to create an ArrayBuffer object. It performs the following steps:
*0*Let VARobj be ? FUNCOrdinaryCreateFromConstructor(VARconstructor, "%ArrayBufferPrototype%", « [[VARArrayBufferData]], [[VARArrayBufferByteLength]], [[VARArrayBufferDetachKey]] »). 
*0*Assert: VARbyteLength is an integer value ≥ 0. 
*0*Let VARblock be ? FUNCCreateByteDataBlock(VARbyteLength). 
*0*Set VARobj.[[VARArrayBufferData]] to VARblock. 
*0*Set VARobj.[[VARArrayBufferByteLength]] to VARbyteLength. 
*0*Return VARobj.     

#############  END  ## 583 ###########################
############# BEGIN ## 584 ###########################
ID= 24.1.1.2
Summary= IsDetachedBuffer ( arrayBuffer )
Description= The abstract operation IsDetachedBuffer with argument arrayBuffer performs the following steps:
*0*Assert: FUNCType(VARarrayBuffer) is Object and it has an [[VARArrayBufferData]] internal slot. 
*0*If VARarrayBuffer.[[VARArrayBufferData]] is null, return true. 
*0*Return false.     

#############  END  ## 584 ###########################
############# BEGIN ## 585 ###########################
ID= 24.1.1.3
Summary= DetachArrayBuffer ( arrayBuffer [ , key ] )
Description= The abstract operation DetachArrayBuffer with argument arrayBuffer and optional argument key performs the following steps:
*0*Assert: FUNCType(VARarrayBuffer) is Object and it has [[VARArrayBufferData]], [[VARArrayBufferByteLength]], and [[VARArrayBufferDetachKey]] internal slots. 
*0*Assert: FUNCIsSharedArrayBuffer(VARarrayBuffer) is false. 
*0*If VARkey is not present, set VARkey to undefined. 
*0*If FUNCSameValue(VARarrayBuffer.[[VARArrayBufferDetachKey]], VARkey) is false, throw a TypeError exception. 
*0*Set VARarrayBuffer.[[VARArrayBufferData]] to null. 
*0*Set VARarrayBuffer.[[VARArrayBufferByteLength]] to 0. 
*0*Return FUNCNormalCompletion(null).     

#############  END  ## 585 ###########################
############# BEGIN ## 586 ###########################
ID= 24.1.1.4
Summary= CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength, cloneConstructor )
Description= The abstract operation CloneArrayBuffer takes four parameters, an ArrayBuffer srcBuffer, an integer offset srcByteOffset, an integer length srcLength, and a constructor function cloneConstructor. It creates a new ArrayBuffer whose data is a copy of srcBuffer's data over the range starting at srcByteOffset and continuing for srcLength bytes. This operation performs the following steps:
*0*Assert: FUNCType(VARsrcBuffer) is Object and it has an [[VARArrayBufferData]] internal slot. 
*0*Assert: FUNCIsConstructor(VARcloneConstructor) is true. 
*0*Let VARtargetBuffer be ? FUNCAllocateArrayBuffer(VARcloneConstructor, VARsrcLength). 
*0*If FUNCIsDetachedBuffer(VARsrcBuffer) is true, throw a TypeError exception. 
*0*Let VARsrcBlock be VARsrcBuffer.[[VARArrayBufferData]]. 
*0*Let VARtargetBlock be VARtargetBuffer.[[VARArrayBufferData]]. 
*0*Perform FUNCCopyDataBlockBytes(VARtargetBlock, 0, VARsrcBlock, VARsrcByteOffset, VARsrcLength). 
*0*Return VARtargetBuffer.     

#############  END  ## 586 ###########################
############# BEGIN ## 587 ###########################
ID= 24.1.1.5
Summary= RawBytesToNumber ( type, rawBytes, isLittleEndian )
Description= The abstract operation RawBytesToNumber takes three parameters, a String type, a List rawBytes, and a Boolean isLittleEndian. This operation performs the following steps:
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for Element Type VARtype. 
*0*If VARisLittleEndian is false, reverse the order of the elements of VARrawBytes. 
*0*If VARtype is "Float32", then
*1*Let VARvalue be the byte elements of VARrawBytes concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary32 value. 
*1*If VARvalue is an IEEE 754-2008 binary32 NaN value, return the NaN Number value. 
*1*Return the Number value that corresponds to VARvalue. 
*0*If VARtype is "Float64", then
*1*Let VARvalue be the byte elements of VARrawBytes concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary64 value. 
*1*If VARvalue is an IEEE 754-2008 binary64 NaN value, return the NaN Number value. 
*1*Return the Number value that corresponds to VARvalue. 
*0*If the first code unit of VARtype is the code unit 0x0055 (LATIN CAPITAL LETTER U), then
*1*Let VARintValue be the byte elements of VARrawBytes concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number. 
*0*Else,
*1*Let VARintValue be the byte elements of VARrawBytes concatenated and interpreted as a bit string encoding of a binary little-endian 2's complement number of bit length VARelementSize × 8. 
*0*Return the Number value that corresponds to VARintValue.     

#############  END  ## 587 ###########################
############# BEGIN ## 588 ###########################
ID= 24.1.1.6
Summary= GetValueFromBuffer ( arrayBuffer, byteIndex, type, isTypedArray, order [ , isLittleEndian ] )
Description= The abstract operation GetValueFromBuffer takes six parameters, an ArrayBuffer or SharedArrayBuffer arrayBuffer, an integer byteIndex, a String type, a Boolean isTypedArray, a String order, and optionally a Boolean isLittleEndian. This operation performs the following steps:
*0*Assert: FUNCIsDetachedBuffer(VARarrayBuffer) is false. 
*0*Assert: There are sufficient bytes in VARarrayBuffer starting at VARbyteIndex to represent a value of VARtype. 
*0*Assert: VARbyteIndex is an integer value ≥ 0. 
*0*Let VARblock be VARarrayBuffer.[[VARArrayBufferData]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for Element Type VARtype. 
*0*If FUNCIsSharedArrayBuffer(VARarrayBuffer) is true, then
*1*Let VARexecution be the [[VARCandidateExecution]] field of the surrounding agent's Agent Record. 
*1*Let VAReventList be the [[VAREventList]] field of the element in VARexecution.[[VAREventLists]] whose [[VARAgentSignifier]] is FUNCAgentSignifier(). 
*1*If VARisTypedArray is true and VARtype is "Int8", "Uint8", "Int16", "Uint16", "Int32", or "Uint32", then
*2*Let VARnoTear be true; otherwise let VARnoTear be false. 
*1*Let VARrawValue be a List of length VARelementSize of nondeterministically chosen byte values. 
*1*NOTE: In implementations, VARrawValue is the result of a non-atomic or atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency. 
*1*Let VARreadEvent be ReadSharedMemory { [[VAROrder]]: VARorder, [[VARNoTear]]: VARnoTear, [[VARBlock]]: VARblock, [[VARByteIndex]]: VARbyteIndex, [[VARElementSize]]: VARelementSize }. 
*1*Append VARreadEvent to VAReventList. 
*1*Append Chosen Value Record { [[VAREvent]]: VARreadEvent, [[VARChosenValue]]: VARrawValue } to VARexecution.[[VARChosenValues]]. 
*0*Else,
*1*let VARrawValue be a List of VARelementSize containing, in order, the VARelementSize sequence of bytes starting with VARblock[VARbyteIndex].
*0*If VARisLittleEndian is not present, set VARisLittleEndian to the value of the [[VARLittleEndian]] field of the surrounding agent's Agent Record. 
*0*Return FUNCRawBytesToNumber(VARtype, VARrawValue, VARisLittleEndian).     

#############  END  ## 588 ###########################
############# BEGIN ## 589 ###########################
ID= 24.1.1.7
Summary= NumberToRawBytes ( type, value, isLittleEndian )
Description= The abstract operation NumberToRawBytes takes three parameters, a String type, a Number value, and a Boolean isLittleEndian. This operation performs the following steps:
*0*If VARtype is "Float32", then
*1*Let VARrawBytes be a List containing the 4 bytes that are the result of converting VARvalue to IEEE 754-2008 binary32 format using “Round to nearest, ties to even” rounding mode. If VARisLittleEndian is false, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If VARvalue is NaN, VARrawBytes may be set to any implementation chosen IEEE 754-2008 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable NaN value. 
*0*Else if VARtype is "Float64", then
*1*Let VARrawBytes be a List containing the 8 bytes that are the IEEE 754-2008 binary64 format encoding of VARvalue. If VARisLittleEndian is false, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If VARvalue is NaN, VARrawBytes may be set to any implementation chosen IEEE 754-2008 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable NaN value. 
*0*Else,
*1*Let VARn be the Number value of the Element Size specified in Table 56 for Element Type VARtype. 
*1*Let VARconvOp be the abstract operation named in the Conversion Operation column in Table 56 for Element Type VARtype. 
*1*Let VARintValue be VARconvOp(VARvalue). 
*1*If VARintValue ≥ 0, then
*2*Let VARrawBytes be a List containing the VARn-byte binary encoding of VARintValue. If VARisLittleEndian is false, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order. 
*1*Else,
*2*Let VARrawBytes be a List containing the VARn-byte binary 2's complement encoding of VARintValue. If VARisLittleEndian is false, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order. 
*0*Return VARrawBytes.     

#############  END  ## 589 ###########################
############# BEGIN ## 590 ###########################
ID= 24.1.1.8
Summary= SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )
Description= The abstract operation SetValueInBuffer takes seven parameters, an ArrayBuffer or SharedArrayBuffer arrayBuffer, an integer byteIndex, a String type, a Number value, a Boolean isTypedArray, a String order, and optionally a Boolean isLittleEndian. This operation performs the following steps:
*0*Assert: FUNCIsDetachedBuffer(VARarrayBuffer) is false. 
*0*Assert: There are sufficient bytes in VARarrayBuffer starting at VARbyteIndex to represent a value of VARtype. 
*0*Assert: VARbyteIndex is an integer value ≥ 0. 
*0*Assert: FUNCType(VARvalue) is Number. 
*0*Let VARblock be VARarrayBuffer.[[VARArrayBufferData]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for Element Type VARtype. 
*0*If VARisLittleEndian is not present, set VARisLittleEndian to the value of the [[VARLittleEndian]] field of the surrounding agent's Agent Record. 
*0*Let VARrawBytes be FUNCNumberToRawBytes(VARtype, VARvalue, VARisLittleEndian). 
*0*If FUNCIsSharedArrayBuffer(VARarrayBuffer) is true, then
*1*Let VARexecution be the [[VARCandidateExecution]] field of the surrounding agent's Agent Record. 
*1*Let VAReventList be the [[VAREventList]] field of the element in VARexecution.[[VAREventLists]] whose [[VARAgentSignifier]] is FUNCAgentSignifier(). 
*1*If VARisTypedArray is true and VARtype is "Int8", "Uint8", "Int16", "Uint16", "Int32", or "Uint32", then
*2*Let VARnoTear be true; otherwise let VARnoTear be false. 
*1*Append WriteSharedMemory { [[VAROrder]]: VARorder, [[VARNoTear]]: VARnoTear, [[VARBlock]]: VARblock, [[VARByteIndex]]: VARbyteIndex, [[VARElementSize]]: VARelementSize, [[VARPayload]]: VARrawBytes } to VAReventList. 
*0*Else,
*1*store the individual bytes of VARrawBytes into VARblock, in order, starting at VARblock[VARbyteIndex].
*0*Return FUNCNormalCompletion(undefined).     

#############  END  ## 590 ###########################
############# BEGIN ## 591 ###########################
ID= 24.1.1.9
Summary= GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )
Description= The abstract operation GetModifySetValueInBuffer takes six parameters, a SharedArrayBuffer arrayBuffer, a nonnegative integer byteIndex, a String type, a Number value, a semantic function op, and optionally a Boolean isLittleEndian. This operation performs the following steps:
*0*Assert: FUNCIsSharedArrayBuffer(VARarrayBuffer) is true. 
*0*Assert: There are sufficient bytes in VARarrayBuffer starting at VARbyteIndex to represent a value of VARtype. 
*0*Assert: VARbyteIndex is an integer value ≥ 0. 
*0*Assert: FUNCType(VARvalue) is Number. 
*0*Let VARblock be VARarrayBuffer.[[VARArrayBufferData]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for Element Type VARtype. 
*0*If VARisLittleEndian is not present, set VARisLittleEndian to the value of the [[VARLittleEndian]] field of the surrounding agent's Agent Record. 
*0*Let VARrawBytes be FUNCNumberToRawBytes(VARtype, VARvalue, VARisLittleEndian). 
*0*Let VARexecution be the [[VARCandidateExecution]] field of the surrounding agent's Agent Record. 
*0*Let VAReventList be the [[VAREventList]] field of the element in VARexecution.[[VAREventLists]] whose [[VARAgentSignifier]] is FUNCAgentSignifier(). 
*0*Let VARrawBytesRead be a List of length VARelementSize of nondeterministically chosen byte values. 
*0*NOTE: In implementations, VARrawBytesRead is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency. 
*0*Let VARrmwEvent be ReadModifyWriteSharedMemory { [[VAROrder]]: "SeqCst", [[VARNoTear]]: true, [[VARBlock]]: VARblock, [[VARByteIndex]]: VARbyteIndex, [[VARElementSize]]: VARelementSize, [[VARPayload]]: VARrawBytes, [[VARModifyOp]]: VARop }. 
*0*Append VARrmwEvent to VAReventList. 
*0*Append Chosen Value Record { [[VAREvent]]: VARrmwEvent, [[VARChosenValue]]: VARrawBytesRead } to VARexecution.[[VARChosenValues]]. 
*0*Return FUNCRawBytesToNumber(VARtype, VARrawBytesRead, VARisLittleEndian).     

#############  END  ## 591 ###########################
############# BEGIN ## 592 ###########################
ID= 24.1.2.1
Summary= ArrayBuffer ( length )
Description= When the ArrayBuffer function is called with argument length, the following steps are taken:
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARbyteLength be ? FUNCToIndex(VARlength). 
*0*Return ? FUNCAllocateArrayBuffer(NewTarget, VARbyteLength).     

#############  END  ## 592 ###########################
############# BEGIN ## 593 ###########################
ID= 24.1.3.1
Summary= ArrayBuffer.isView ( arg )
Description= The isView function takes one argument arg, and performs, the following steps are taken:
*0*If FUNCType(VARarg) is not Object, return false. 
*0*If VARarg has a [[VARViewedArrayBuffer]] internal slot, return true. 
*0*Return false.     

#############  END  ## 593 ###########################
############# BEGIN ## 594 ###########################
ID= 24.1.4.3
Summary= ArrayBuffer.prototype.slice ( start, end )
Description= The following steps are taken:
*0*Let VARO be the this value. 
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*If VARO does not have an [[VARArrayBufferData]] internal slot, throw a TypeError exception. 
*0*If FUNCIsSharedArrayBuffer(VARO) is true, throw a TypeError exception. 
*0*If FUNCIsDetachedBuffer(VARO) is true, throw a TypeError exception. 
*0*Let VARlen be VARO.[[VARArrayBufferByteLength]]. 
*0*Let VARrelativeStart be ? FUNCToInteger(VARstart). 
*0*If VARrelativeStart &lt; 0, then
*1*Let VARfirst be max((VARlen + VARrelativeStart), 0)
*0*Else,
*1*let VARfirst be min(VARrelativeStart, VARlen).
*0*If VARend is undefined, then
*1*Let VARrelativeEnd be VARlen
*0*Else,
*1*let VARrelativeEnd be ? FUNCToInteger(VARend).
*0*If VARrelativeEnd &lt; 0, then
*1*Let VARfinal be max((VARlen + VARrelativeEnd), 0)
*0*Else,
*1*let VARfinal be min(VARrelativeEnd, VARlen).
*0*Let VARnewLen be max(VARfinal-VARfirst, 0). 
*0*Let VARctor be ? FUNCSpeciesConstructor(VARO, %ArrayBuffer%). 
*0*Let VARnew be ? FUNCConstruct(VARctor, « VARnewLen »). 
*0*If VARnew does not have an [[VARArrayBufferData]] internal slot, throw a TypeError exception. 
*0*If FUNCIsSharedArrayBuffer(VARnew) is true, throw a TypeError exception. 
*0*If FUNCIsDetachedBuffer(VARnew) is true, throw a TypeError exception. 
*0*If FUNCSameValue(VARnew, VARO) is true, throw a TypeError exception. 
*0*If VARnew.[[VARArrayBufferByteLength]] &lt; VARnewLen, throw a TypeError exception. 
*0*NOTE: Side-effects of the above steps may have detached VARO. 
*0*If FUNCIsDetachedBuffer(VARO) is true, throw a TypeError exception. 
*0*Let VARfromBuf be VARO.[[VARArrayBufferData]]. 
*0*Let VARtoBuf be VARnew.[[VARArrayBufferData]]. 
*0*Perform FUNCCopyDataBlockBytes(VARtoBuf, 0, VARfromBuf, VARfirst, VARnewLen). 
*0*Return VARnew.     

#############  END  ## 594 ###########################
############# BEGIN ## 595 ###########################
ID= 24.2.1.1
Summary= AllocateSharedArrayBuffer ( constructor, byteLength )
Description= The abstract operation AllocateSharedArrayBuffer with arguments constructor and byteLength is used to create a SharedArrayBuffer object. It performs the following steps:
*0*Let VARobj be ? FUNCOrdinaryCreateFromConstructor(VARconstructor, "%SharedArrayBufferPrototype%", « [[VARArrayBufferData]], [[VARArrayBufferByteLength]] »). 
*0*Assert: VARbyteLength is a nonnegative integer. 
*0*Let VARblock be ? FUNCCreateSharedByteDataBlock(VARbyteLength). 
*0*Set VARobj.[[VARArrayBufferData]] to VARblock. 
*0*Set VARobj.[[VARArrayBufferByteLength]] to VARbyteLength. 
*0*Return VARobj.     

#############  END  ## 595 ###########################
############# BEGIN ## 596 ###########################
ID= 24.2.1.2
Summary= IsSharedArrayBuffer ( obj )
Description= IsSharedArrayBuffer tests whether an object is an ArrayBuffer, a SharedArrayBuffer, or a subtype of either. It performs the following steps:
*0*Assert: FUNCType(VARobj) is Object and it has an [[VARArrayBufferData]] internal slot. 
*0*Let VARbufferData be VARobj.[[VARArrayBufferData]]. 
*0*If VARbufferData is null, return false. 
*0*If VARbufferData is a Data Block, return false. 
*0*Assert: VARbufferData is a Shared Data Block. 
*0*Return true.     

#############  END  ## 596 ###########################
############# BEGIN ## 597 ###########################
ID= 24.2.2.1
Summary= SharedArrayBuffer ( length )
Description= When the SharedArrayBuffer function is called with optional argument length, the following steps are taken:
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Let VARbyteLength be ? FUNCToIndex(VARlength). 
*0*Return ? FUNCAllocateSharedArrayBuffer(NewTarget, VARbyteLength).     

#############  END  ## 597 ###########################
############# BEGIN ## 598 ###########################
ID= 24.2.4.3
Summary= SharedArrayBuffer.prototype.slice ( start, end )
Description= The following steps are taken:
*0*Let VARO be the this value. 
*0*If FUNCType(VARO) is not Object, throw a TypeError exception. 
*0*If VARO does not have an [[VARArrayBufferData]] internal slot, throw a TypeError exception. 
*0*If FUNCIsSharedArrayBuffer(VARO) is false, throw a TypeError exception. 
*0*Let VARlen be VARO.[[VARArrayBufferByteLength]]. 
*0*Let VARrelativeStart be ? FUNCToInteger(VARstart). 
*0*If VARrelativeStart &lt; 0, then
*1*Let VARfirst be max((VARlen + VARrelativeStart), 0)
*0*Else,
*1*let VARfirst be min(VARrelativeStart, VARlen).
*0*If VARend is undefined, then
*1*Let VARrelativeEnd be VARlen
*0*Else,
*1*let VARrelativeEnd be ? FUNCToInteger(VARend).
*0*If VARrelativeEnd &lt; 0, then
*1*Let VARfinal be max((VARlen + VARrelativeEnd), 0)
*0*Else,
*1*let VARfinal be min(VARrelativeEnd, VARlen).
*0*Let VARnewLen be max(VARfinal - VARfirst, 0). 
*0*Let VARctor be ? FUNCSpeciesConstructor(VARO, %SharedArrayBuffer%). 
*0*Let VARnew be ? FUNCConstruct(VARctor, « VARnewLen »). 
*0*If VARnew does not have an [[VARArrayBufferData]] internal slot, throw a TypeError exception. 
*0*If FUNCIsSharedArrayBuffer(VARnew) is false, throw a TypeError exception. 
*0*If VARnew.[[VARArrayBufferData]] and VARO.[[VARArrayBufferData]] are the same Shared Data Block values, throw a TypeError exception. 
*0*If VARnew.[[VARArrayBufferByteLength]] &lt; VARnewLen, throw a TypeError exception. 
*0*Let VARfromBuf be VARO.[[VARArrayBufferData]]. 
*0*Let VARtoBuf be VARnew.[[VARArrayBufferData]]. 
*0*Perform FUNCCopyDataBlockBytes(VARtoBuf, 0, VARfromBuf, VARfirst, VARnewLen). 
*0*Return VARnew.     

#############  END  ## 598 ###########################
############# BEGIN ## 599 ###########################
ID= 24.3.1.1
Summary= GetViewValue ( view, requestIndex, isLittleEndian, type )
Description= The abstract operation GetViewValue with arguments view, requestIndex, isLittleEndian, and type is used by functions on DataView instances to retrieve values from the view's buffer. It performs the following steps:
*0*If FUNCType(VARview) is not Object, throw a TypeError exception. 
*0*If VARview does not have a [[VARDataView]] internal slot, throw a TypeError exception. 
*0*Assert: VARview has a [[VARViewedArrayBuffer]] internal slot. 
*0*Let VARgetIndex be ? FUNCToIndex(VARrequestIndex). 
*0*Set VARisLittleEndian to FUNCToBoolean(VARisLittleEndian). 
*0*Let VARbuffer be VARview.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARbuffer) is true, throw a TypeError exception. 
*0*Let VARviewOffset be VARview.[[VARByteOffset]]. 
*0*Let VARviewSize be VARview.[[VARByteLength]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for Element Type VARtype. 
*0*If VARgetIndex + VARelementSize &gt; VARviewSize, throw a RangeError exception. 
*0*Let VARbufferIndex be VARgetIndex + VARviewOffset. 
*0*Return FUNCGetValueFromBuffer(VARbuffer, VARbufferIndex, VARtype, false, "Unordered", VARisLittleEndian).     

#############  END  ## 599 ###########################
############# BEGIN ## 600 ###########################
ID= 24.3.1.2
Summary= SetViewValue ( view, requestIndex, isLittleEndian, type, value )
Description= The abstract operation SetViewValue with arguments view, requestIndex, isLittleEndian, type, and value is used by functions on DataView instances to store values into the view's buffer. It performs the following steps:
*0*If FUNCType(VARview) is not Object, throw a TypeError exception. 
*0*If VARview does not have a [[VARDataView]] internal slot, throw a TypeError exception. 
*0*Assert: VARview has a [[VARViewedArrayBuffer]] internal slot. 
*0*Let VARgetIndex be ? FUNCToIndex(VARrequestIndex). 
*0*Let VARnumberValue be ? FUNCToNumber(VARvalue). 
*0*Set VARisLittleEndian to FUNCToBoolean(VARisLittleEndian). 
*0*Let VARbuffer be VARview.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsDetachedBuffer(VARbuffer) is true, throw a TypeError exception. 
*0*Let VARviewOffset be VARview.[[VARByteOffset]]. 
*0*Let VARviewSize be VARview.[[VARByteLength]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for Element Type VARtype. 
*0*If VARgetIndex + VARelementSize &gt; VARviewSize, throw a RangeError exception. 
*0*Let VARbufferIndex be VARgetIndex + VARviewOffset. 
*0*Return FUNCSetValueInBuffer(VARbuffer, VARbufferIndex, VARtype, VARnumberValue, false, "Unordered", VARisLittleEndian).     

#############  END  ## 600 ###########################
############# BEGIN ## 601 ###########################
ID= 24.3.2.1
Summary= DataView ( buffer [ , byteOffset [ , byteLength  ] ] )
Description= When the DataView is called with at least one argument buffer, the following steps are taken:
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*If FUNCType(VARbuffer) is not Object, throw a TypeError exception. 
*0*If VARbuffer does not have an [[VARArrayBufferData]] internal slot, throw a TypeError exception. 
*0*Let VARoffset be ? FUNCToIndex(VARbyteOffset). 
*0*If FUNCIsDetachedBuffer(VARbuffer) is true, throw a TypeError exception. 
*0*Let VARbufferByteLength be VARbuffer.[[VARArrayBufferByteLength]]. 
*0*If VARoffset &gt; VARbufferByteLength, throw a RangeError exception. 
*0*If VARbyteLength is either not present or undefined, then
*1*Let VARviewByteLength be VARbufferByteLength - VARoffset. 
*0*Else,
*1*Let VARviewByteLength be ? FUNCToIndex(VARbyteLength). 
*1*If VARoffset+VARviewByteLength &gt; VARbufferByteLength, throw a RangeError exception. 
*0*Let VARO be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%DataViewPrototype%", « [[VARDataView]], [[VARViewedArrayBuffer]], [[VARByteLength]], [[VARByteOffset]] »). 
*0*Set VARO.[[VARViewedArrayBuffer]] to VARbuffer. 
*0*Set VARO.[[VARByteLength]] to VARviewByteLength. 
*0*Set VARO.[[VARByteOffset]] to VARoffset. 
*0*Return VARO.     

#############  END  ## 601 ###########################
############# BEGIN ## 602 ###########################
ID= 24.3.4.5
Summary= DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )
Description= When the getFloat32 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCGetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Float32").     

#############  END  ## 602 ###########################
############# BEGIN ## 603 ###########################
ID= 24.3.4.6
Summary= DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )
Description= When the getFloat64 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCGetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Float64").     

#############  END  ## 603 ###########################
############# BEGIN ## 604 ###########################
ID= 24.3.4.7
Summary= DataView.prototype.getInt8 ( byteOffset )
Description= When the getInt8 method is called with argument byteOffset, the following steps are taken:
*0*Let VARv be the this value. 
*0*Return ? FUNCGetViewValue(VARv, VARbyteOffset, true, "Int8").     

#############  END  ## 604 ###########################
############# BEGIN ## 605 ###########################
ID= 24.3.4.8
Summary= DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )
Description= When the getInt16 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCGetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Int16").     

#############  END  ## 605 ###########################
############# BEGIN ## 606 ###########################
ID= 24.3.4.9
Summary= DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )
Description= When the getInt32 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCGetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Int32").     

#############  END  ## 606 ###########################
############# BEGIN ## 607 ###########################
ID= 24.3.4.10
Summary= DataView.prototype.getUint8 ( byteOffset )
Description= When the getUint8 method is called with argument byteOffset, the following steps are taken:
*0*Let VARv be the this value. 
*0*Return ? FUNCGetViewValue(VARv, VARbyteOffset, true, "Uint8").     

#############  END  ## 607 ###########################
############# BEGIN ## 608 ###########################
ID= 24.3.4.11
Summary= DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )
Description= When the getUint16 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCGetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Uint16").     

#############  END  ## 608 ###########################
############# BEGIN ## 609 ###########################
ID= 24.3.4.12
Summary= DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )
Description= When the getUint32 method is called with argument byteOffset and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCGetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Uint32").     

#############  END  ## 609 ###########################
############# BEGIN ## 610 ###########################
ID= 24.3.4.13
Summary= DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )
Description= When the setFloat32 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCSetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Float32", VARvalue).     

#############  END  ## 610 ###########################
############# BEGIN ## 611 ###########################
ID= 24.3.4.14
Summary= DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )
Description= When the setFloat64 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCSetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Float64", VARvalue).     

#############  END  ## 611 ###########################
############# BEGIN ## 612 ###########################
ID= 24.3.4.15
Summary= DataView.prototype.setInt8 ( byteOffset, value )
Description= When the setInt8 method is called with arguments byteOffset and value, the following steps are taken:
*0*Let VARv be the this value. 
*0*Return ? FUNCSetViewValue(VARv, VARbyteOffset, true, "Int8", VARvalue).     

#############  END  ## 612 ###########################
############# BEGIN ## 613 ###########################
ID= 24.3.4.16
Summary= DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )
Description= When the setInt16 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCSetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Int16", VARvalue).     

#############  END  ## 613 ###########################
############# BEGIN ## 614 ###########################
ID= 24.3.4.17
Summary= DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )
Description= When the setInt32 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCSetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Int32", VARvalue).     

#############  END  ## 614 ###########################
############# BEGIN ## 615 ###########################
ID= 24.3.4.18
Summary= DataView.prototype.setUint8 ( byteOffset, value )
Description= When the setUint8 method is called with arguments byteOffset and value, the following steps are taken:
*0*Let VARv be the this value. 
*0*Return ? FUNCSetViewValue(VARv, VARbyteOffset, true, "Uint8", VARvalue).     

#############  END  ## 615 ###########################
############# BEGIN ## 616 ###########################
ID= 24.3.4.19
Summary= DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )
Description= When the setUint16 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCSetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Uint16", VARvalue).     

#############  END  ## 616 ###########################
############# BEGIN ## 617 ###########################
ID= 24.3.4.20
Summary= DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )
Description= When the setUint32 method is called with arguments byteOffset and value and optional argument littleEndian, the following steps are taken:
*0*Let VARv be the this value. 
*0*If VARlittleEndian is not present, then
*1*Let VARlittleEndian be false. 
*0*Return ? FUNCSetViewValue(VARv, VARbyteOffset, VARlittleEndian, "Uint32", VARvalue).     

#############  END  ## 617 ###########################
############# BEGIN ## 618 ###########################
ID= 24.4.1.1
Summary= ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )
Description= The abstract operation ValidateSharedIntegerTypedArray takes one argument typedArray and an optional Boolean onlyInt32. It performs the following steps:
*0*If VARonlyInt32 is not present, set VARonlyInt32 to false. 
*0*If FUNCType(VARtypedArray) is not Object, throw a TypeError exception. 
*0*If VARtypedArray does not have a [[VARTypedArrayName]] internal slot, throw a TypeError exception. 
*0*Let VARtypeName be VARtypedArray.[[VARTypedArrayName]]. 
*0*If VARonlyInt32 is true, then
*1*If VARtypeName is not "Int32Array", throw a TypeError exception. 
*0*Else,
*1*If VARtypeName is not "Int8Array", "Uint8Array", "Int16Array", "Uint16Array", "Int32Array", or "Uint32Array", throw a TypeError exception. 
*0*Assert: VARtypedArray has a [[VARViewedArrayBuffer]] internal slot. 
*0*Let VARbuffer be VARtypedArray.[[VARViewedArrayBuffer]]. 
*0*If FUNCIsSharedArrayBuffer(VARbuffer) is false, throw a TypeError exception. 
*0*Return VARbuffer.     

#############  END  ## 618 ###########################
############# BEGIN ## 619 ###########################
ID= 24.4.1.2
Summary= ValidateAtomicAccess ( typedArray, requestIndex )
Description= The abstract operation ValidateAtomicAccess takes two arguments, typedArray and requestIndex. It performs the following steps:
*0*Assert: VARtypedArray is an Object that has a [[VARViewedArrayBuffer]] internal slot. 
*0*Let VARaccessIndex be ? FUNCToIndex(VARrequestIndex). 
*0*Let VARlength be VARtypedArray.[[VARArrayLength]]. 
*0*Assert: VARaccessIndex ≥ 0. 
*0*If VARaccessIndex ≥ VARlength, throw a RangeError exception. 
*0*Return VARaccessIndex.     

#############  END  ## 619 ###########################
############# BEGIN ## 620 ###########################
ID= 24.4.1.3
Summary= GetWaiterList ( block, i )
Description= A  WaiterList is a semantic object that contains an ordered list of those agents that are waiting on a location (block, i) in shared memory; block is a Shared Data Block and i a byte offset into the memory of block.
*0*Assert: VARblock is a Shared Data Block. 
*0*Assert: VARi and VARi+3 are valid byte offsets within the memory of VARblock. 
*0*Assert: VARi is divisible by 4. 
*0*Return the WaiterList that is referenced by the pair (VARblock, VARi).     

#############  END  ## 620 ###########################
############# BEGIN ## 621 ###########################
ID= 24.4.1.4
Summary= EnterCriticalSection ( WL )
Description= The abstract operation EnterCriticalSection takes one argument, a WaiterList WL. It performs the following steps:
*0*Assert: The calling agent is not in the critical section for any WaiterList. 
*0*Wait until no agent is in the critical section for VARWL, then enter the critical section for VARWL (without allowing any other agent to enter).     

#############  END  ## 621 ###########################
############# BEGIN ## 622 ###########################
ID= 24.4.1.5
Summary= LeaveCriticalSection ( WL )
Description= The abstract operation LeaveCriticalSection takes one argument, a WaiterList WL. It performs the following steps:
*0*Assert: The calling agent is in the critical section for VARWL. 
*0*Leave the critical section for VARWL.     

#############  END  ## 622 ###########################
############# BEGIN ## 623 ###########################
ID= 24.4.1.6
Summary= AddWaiter ( WL, W )
Description= The abstract operation AddWaiter takes two arguments, a WaiterList WL and an agent signifier W. It performs the following steps:
*0*Assert: The calling agent is in the critical section for VARWL. 
*0*Assert: VARW is not on the list of waiters in any WaiterList. 
*0*Add VARW to the end of the list of waiters in VARWL.     

#############  END  ## 623 ###########################
############# BEGIN ## 624 ###########################
ID= 24.4.1.7
Summary= RemoveWaiter ( WL, W )
Description= The abstract operation RemoveWaiter takes two arguments, a WaiterList WL and an agent signifier W. It performs the following steps:
*0*Assert: The calling agent is in the critical section for VARWL. 
*0*Assert: VARW is on the list of waiters in VARWL. 
*0*Remove VARW from the list of waiters in VARWL.     

#############  END  ## 624 ###########################
############# BEGIN ## 625 ###########################
ID= 24.4.1.8
Summary= RemoveWaiters ( WL, c )
Description= The abstract operation RemoveWaiters takes two arguments, a WaiterList WL and nonnegative integer c. It performs the following steps:
*0*Assert: The calling agent is in the critical section for VARWL. 
*0*Let VARL be a new empty List. 
*0*Let VARS be a reference to the list of waiters in VARWL. 
*0*Repeat, while VARc &gt; 0 and VARS is not an empty List,
*1*Let VARW be the first waiter in VARS. 
*1*Add VARW to the end of VARL. 
*1*Remove VARW from VARS. 
*1*Subtract 1 from VARc. 
*0*Return VARL.     

#############  END  ## 625 ###########################
############# BEGIN ## 626 ###########################
ID= 24.4.1.9
Summary= Suspend ( WL, W, timeout )
Description= The abstract operation Suspend takes three arguments, a WaiterList WL, an agent signifier W, and a nonnegative, non-NaN Number timeout. It performs the following steps:
*0*Assert: The calling agent is in the critical section for VARWL. 
*0*Assert: VARW is equal to FUNCAgentSignifier(). 
*0*Assert: VARW is on the list of waiters in VARWL. 
*0*Assert: FUNCAgentCanSuspend() is true. 
*0*Perform FUNCLeaveCriticalSection(VARWL) and suspend VARW for up to VARtimeout milliseconds, performing the combined operation in such a way that a wakeup that arrives after the critical section is exited but before the suspension takes effect is not lost. VARW can wake up either because the timeout expired or because it was woken explicitly by another agent calling FUNCWakeWaiter(VARWL, VARW), and not for any other reasons at all. 
*0*Perform FUNCEnterCriticalSection(VARWL). 
*0*If VARW was woken explicitly by another agent calling FUNCWakeWaiter(VARWL, VARW), return true. 
*0*Return false.     

#############  END  ## 626 ###########################
############# BEGIN ## 627 ###########################
ID= 24.4.1.10
Summary= WakeWaiter ( WL, W )
Description= The abstract operation WakeWaiter takes two arguments, a WaiterList WL and an agent signifier W. It performs the following steps:
*0*Assert: The calling agent is in the critical section for VARWL. 
*0*Assert: VARW is on the list of waiters in VARWL. 
*0*Wake the agent VARW.     

#############  END  ## 627 ###########################
############# BEGIN ## 628 ###########################
ID= 24.4.1.11
Summary= AtomicReadModifyWrite ( typedArray, index, value, op )
Description= The abstract operation AtomicReadModifyWrite takes four arguments, typedArray, index, value, and a pure combining operation op. The pure combining operation op takes two List of byte values arguments and returns a List of byte values. The operation atomically loads a value, combines it with another value, and stores the result of the combination. It returns the loaded value. It performs the following steps:
*0*Let VARbuffer be ? FUNCValidateSharedIntegerTypedArray(VARtypedArray). 
*0*Let VARi be ? FUNCValidateAtomicAccess(VARtypedArray, VARindex). 
*0*Let VARv be ? FUNCToInteger(VARvalue). 
*0*Let VARarrayTypeName be VARtypedArray.[[VARTypedArrayName]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for VARarrayTypeName. 
*0*Let VARelementType be the String value of the Element Type value in Table 56 for VARarrayTypeName. 
*0*Let VARoffset be VARtypedArray.[[VARByteOffset]]. 
*0*Let VARindexedPosition be (VARi × VARelementSize) + VARoffset. 
*0*Return FUNCGetModifySetValueInBuffer(VARbuffer, VARindexedPosition, VARelementType, VARv, VARop).     

#############  END  ## 628 ###########################
############# BEGIN ## 629 ###########################
ID= 24.4.1.12
Summary= AtomicLoad ( typedArray, index )
Description= The abstract operation AtomicLoad takes two arguments, typedArray, index. The operation atomically loads a value and returns the loaded value. It performs the following steps:
*0*Let VARbuffer be ? FUNCValidateSharedIntegerTypedArray(VARtypedArray). 
*0*Let VARi be ? FUNCValidateAtomicAccess(VARtypedArray, VARindex). 
*0*Let VARarrayTypeName be VARtypedArray.[[VARTypedArrayName]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for VARarrayTypeName. 
*0*Let VARelementType be the String value of the Element Type value in Table 56 for VARarrayTypeName. 
*0*Let VARoffset be VARtypedArray.[[VARByteOffset]]. 
*0*Let VARindexedPosition be (VARi × VARelementSize) + VARoffset. 
*0*Return FUNCGetValueFromBuffer(VARbuffer, VARindexedPosition, VARelementType, true, "SeqCst").     

#############  END  ## 629 ###########################
############# BEGIN ## 630 ###########################
ID= 24.4.2
Summary= Atomics.add ( typedArray, index, value )
Description= Let add denote a semantic function of two List of byte values arguments that applies the addition operation to the Number values corresponding to the List of byte values arguments and returns a List of byte values corresponding to the result of that operation.
*0*Return ? FUNCAtomicReadModifyWrite(VARtypedArray, VARindex, VARvalue, add).    

#############  END  ## 630 ###########################
############# BEGIN ## 631 ###########################
ID= 24.4.3
Summary= Atomics.and ( typedArray, index, value )
Description= Let and denote a semantic function of two List of byte values arguments that applies the bitwise-and operation element-wise to the two arguments and returns a List of byte values corresponding to the result of that operation.
*0*Return ? FUNCAtomicReadModifyWrite(VARtypedArray, VARindex, VARvalue, and).    

#############  END  ## 631 ###########################
############# BEGIN ## 632 ###########################
ID= 24.4.4
Summary= Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )
Description= The following steps are taken:
*0*Let VARbuffer be ? FUNCValidateSharedIntegerTypedArray(VARtypedArray). 
*0*Let VARi be ? FUNCValidateAtomicAccess(VARtypedArray, VARindex). 
*0*Let VARexpected be ? FUNCToInteger(VARexpectedValue). 
*0*Let VARreplacement be ? FUNCToInteger(VARreplacementValue). 
*0*Let VARarrayTypeName be VARtypedArray.[[VARTypedArrayName]]. 
*0*Let VARelementType be the String value of the Element Type value in Table 56 for VARarrayTypeName. 
*0*Let VARisLittleEndian be the value of the [[VARLittleEndian]] field of the surrounding agent's Agent Record. 
*0*Let VARexpectedBytes be FUNCNumberToRawBytes(VARelementType, VARexpected, VARisLittleEndian). 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for VARarrayTypeName. 
*0*Let VARoffset be VARtypedArray.[[VARByteOffset]]. 
*0*Let VARindexedPosition be (VARi × VARelementSize) + VARoffset. 
*0*Let compareExchange denote a semantic function of two List of byte values arguments that returns the second argument if the first argument is element-wise equal to VARexpectedBytes. 
*0*Return FUNCGetModifySetValueInBuffer(VARbuffer, VARindexedPosition, VARelementType, VARreplacement, compareExchange).    

#############  END  ## 632 ###########################
############# BEGIN ## 633 ###########################
ID= 24.4.5
Summary= Atomics.exchange ( typedArray, index, value )
Description= Let second denote a semantic function of two List of byte values arguments that returns its second argument.
*0*Return ? FUNCAtomicReadModifyWrite(VARtypedArray, VARindex, VARvalue, second).    

#############  END  ## 633 ###########################
############# BEGIN ## 634 ###########################
ID= 24.4.6
Summary= Atomics.isLockFree ( size )
Description= The following steps are taken:
*0*Let VARn be ? FUNCToInteger(VARsize). 
*0*Let VARAR be the Agent Record of the surrounding agent. 
*0*If VARn equals 1, return VARAR.[[VARIsLockFree1]]. 
*0*If VARn equals 2, return VARAR.[[VARIsLockFree2]]. 
*0*If VARn equals 4, return true. 
*0*Return false.    

#############  END  ## 634 ###########################
############# BEGIN ## 635 ###########################
ID= 24.4.7
Summary= Atomics.load ( typedArray, index )
Description= The following steps are taken:
*0*Return ? FUNCAtomicLoad(VARtypedArray, VARindex).    

#############  END  ## 635 ###########################
############# BEGIN ## 636 ###########################
ID= 24.4.8
Summary= Atomics.or ( typedArray, index, value )
Description= Let or denote a semantic function of two List of byte values arguments that applies the bitwise-or operation element-wise to the two arguments and returns a List of byte values corresponding to the result of that operation.
*0*Return ? FUNCAtomicReadModifyWrite(VARtypedArray, VARindex, VARvalue, or).    

#############  END  ## 636 ###########################
############# BEGIN ## 637 ###########################
ID= 24.4.9
Summary= Atomics.store ( typedArray, index, value )
Description= The following steps are taken:
*0*Let VARbuffer be ? FUNCValidateSharedIntegerTypedArray(VARtypedArray). 
*0*Let VARi be ? FUNCValidateAtomicAccess(VARtypedArray, VARindex). 
*0*Let VARv be ? FUNCToInteger(VARvalue). 
*0*Let VARarrayTypeName be VARtypedArray.[[VARTypedArrayName]]. 
*0*Let VARelementSize be the Number value of the Element Size value specified in Table 56 for VARarrayTypeName. 
*0*Let VARelementType be the String value of the Element Type value in Table 56 for VARarrayTypeName. 
*0*Let VARoffset be VARtypedArray.[[VARByteOffset]]. 
*0*Let VARindexedPosition be (VARi × VARelementSize) + VARoffset. 
*0*Perform FUNCSetValueInBuffer(VARbuffer, VARindexedPosition, VARelementType, VARv, true, "SeqCst"). 
*0*Return VARv.    

#############  END  ## 637 ###########################
############# BEGIN ## 638 ###########################
ID= 24.4.10
Summary= Atomics.sub ( typedArray, index, value )
Description= Let subtract denote a semantic function of two List of byte values arguments that applies the subtraction operation to the Number values corresponding to the List of byte values arguments and returns a List of byte values corresponding to the result of that operation.
*0*Return ? FUNCAtomicReadModifyWrite(VARtypedArray, VARindex, VARvalue, subtract).    

#############  END  ## 638 ###########################
############# BEGIN ## 639 ###########################
ID= 24.4.11
Summary= Atomics.wait ( typedArray, index, value, timeout )
Description= Atomics.wait puts the calling agent in a wait queue and puts it to sleep until it is awoken or the sleep times out. The following steps are taken:
*0*Let VARbuffer be ? FUNCValidateSharedIntegerTypedArray(VARtypedArray, true). 
*0*Let VARi be ? FUNCValidateAtomicAccess(VARtypedArray, VARindex). 
*0*Let VARv be ? FUNCToInt32(VARvalue). 
*0*Let VARq be ? FUNCToNumber(VARtimeout). 
*0*If VARq is NaN, then
*1*Let VARt be +∞
*0*Else,
*1*let VARt be max(VARq, 0).
*0*Let VARB be FUNCAgentCanSuspend(). 
*0*If VARB is false, throw a TypeError exception. 
*0*Let VARblock be VARbuffer.[[VARArrayBufferData]]. 
*0*Let VARoffset be VARtypedArray.[[VARByteOffset]]. 
*0*Let VARindexedPosition be (VARi × 4) + VARoffset. 
*0*Let VARWL be FUNCGetWaiterList(VARblock, VARindexedPosition). 
*0*Perform FUNCEnterCriticalSection(VARWL). 
*0*Let VARw be ! FUNCAtomicLoad(VARtypedArray, VARi). 
*0*If VARv is not equal to VARw, then
*1*Perform FUNCLeaveCriticalSection(VARWL). 
*1*Return the String "not-equal". 
*0*Let VARW be FUNCAgentSignifier(). 
*0*Perform FUNCAddWaiter(VARWL, VARW). 
*0*Let VARawoken be FUNCSuspend(VARWL, VARW, VARt). 
*0*If VARawoken is true, then
*1*Assert: VARW is not on the list of waiters in VARWL. 
*0*Else,
*1*Perform FUNCRemoveWaiter(VARWL, VARW). 
*0*Perform FUNCLeaveCriticalSection(VARWL). 
*0*If VARawoken is true, return the String "ok". 
*0*Return the String "timed-out".    

#############  END  ## 639 ###########################
############# BEGIN ## 640 ###########################
ID= 24.4.12
Summary= Atomics.wake ( typedArray, index, count )
Description= Atomics.wake wakes up some agents that are sleeping in the wait queue.  The following steps are taken:
*0*Let VARbuffer be ? FUNCValidateSharedIntegerTypedArray(VARtypedArray, true). 
*0*Let VARi be ? FUNCValidateAtomicAccess(VARtypedArray, VARindex). 
*0*If VARcount is undefined, then
*1*Let VARc be +∞. 
*0*Else,
*1*Let VARintCount be ? FUNCToInteger(VARcount). 
*1*Let VARc be max(VARintCount, 0). 
*0*Let VARblock be VARbuffer.[[VARArrayBufferData]]. 
*0*Let VARoffset be VARtypedArray.[[VARByteOffset]]. 
*0*Let VARindexedPosition be (VARi × 4) + VARoffset. 
*0*Let VARWL be FUNCGetWaiterList(VARblock, VARindexedPosition). 
*0*Let VARn be 0. 
*0*Perform FUNCEnterCriticalSection(VARWL). 
*0*Let VARS be FUNCRemoveWaiters(VARWL, VARc). 
*0*Repeat, while VARS is not an empty List,
*1*Let VARW be the first agent in VARS. 
*1*Remove VARW from the front of VARS. 
*1*Perform FUNCWakeWaiter(VARWL, VARW). 
*1*Add 1 to VARn. 
*0*Perform FUNCLeaveCriticalSection(VARWL). 
*0*Return VARn.    

#############  END  ## 640 ###########################
############# BEGIN ## 641 ###########################
ID= 24.4.13
Summary= Atomics.xor ( typedArray, index, value )
Description= Let xor denote a semantic function of two List of byte values arguments that applies the bitwise-xor operation element-wise to the two arguments and returns a List of byte values corresponding to the result of that operation.
*0*Return ? FUNCAtomicReadModifyWrite(VARtypedArray, VARindex, VARvalue, xor).    

#############  END  ## 641 ###########################
############# BEGIN ## 642 ###########################
ID= 24.5.1
Summary= JSON.parse ( text [ , reviver ] )
Description= The parse function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format represents literals, arrays, and objects with a syntax similar to the syntax for ECMAScript literals, Array Initializers, and Object Initializers. After parsing, JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and null.
*0*Let VARJText be ? FUNCToString(VARtext). 
*0*Parse VARJText interpreted as UTF-16 encoded Unicode points (6.1.4) as a JSON text as specified in ECMA-404. Throw a SyntaxError exception if VARJText is not a valid JSON text as defined in that specification. 
*0*Let VARscriptText be the string-concatenation of "(", VARJText, and ");". 
*0*Let VARcompletion be the result of parsing and evaluating VARscriptText as if it was the source text of an ECMAScript Script, but using the alternative definition of DoubleStringCharacter provided below. The extended PropertyDefinitionEvaluation semantics defined in B.3.1 must not be used during the evaluation. 
*0*Let VARunfiltered be VARcompletion.[[VARValue]]. 
*0*Assert: VARunfiltered is either a String, Number, Boolean, Null, or an Object that is defined by either an ArrayLiteral or an ObjectLiteral. 
*0*If FUNCIsCallable(VARreviver) is true, then
*1*Let VARroot be FUNCObjectCreate(%ObjectPrototype%). 
*1*Let VARrootName be the empty String. 
*1*Let VARstatus be FUNCCreateDataProperty(VARroot, VARrootName, VARunfiltered). 
*1*Assert: VARstatus is true. 
*1*Return ? FUNCInternalizeJSONProperty(VARroot, VARrootName). 
*0*Else,
*1*Return VARunfiltered.    

#############  END  ## 642 ###########################
############# BEGIN ## 643 ###########################
ID= 24.5.1.1
Summary= Runtime Semantics: InternalizeJSONProperty ( holder, name )
Description= The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two parameters: a holder object and the String name of a property in that object. InternalizeJSONProperty uses the value of reviver that was originally passed to the above parse function.
*0*Let VARval be ? FUNCGet(VARholder, VARname). 
*0*If FUNCType(VARval) is Object, then
*1*Let VARisArray be ? FUNCIsArray(VARval). 
*1*If VARisArray is true, then
*2*Let VARI be 0. 
*2*Let VARlen be ? FUNCToLength(? FUNCGet(VARval, "length")). 
*2*Repeat, while VARI &lt; VARlen,
*3*Let VARnewElement be ? FUNCInternalizeJSONProperty(VARval, ! FUNCToString(VARI)). 
*3*If VARnewElement is undefined, then
*4*Perform ? VARval.[[VARDelete]](! FUNCToString(VARI)). 
*3*Else,
*4*Perform ? FUNCCreateDataProperty(VARval, ! FUNCToString(VARI), VARnewElement). 
*4*NOTE: This algorithm intentionally does not throw an exception if CreateDataProperty returns false. 
*3*Add 1 to VARI. 
*1*Else,
*2*Let VARkeys be ? FUNCEnumerableOwnPropertyNames(VARval, "key"). 
*2*For each String VARP in VARkeys, do
*3*Let VARnewElement be ? FUNCInternalizeJSONProperty(VARval, VARP). 
*3*If VARnewElement is undefined, then
*4*Perform ? VARval.[[VARDelete]](VARP). 
*3*Else,
*4*Perform ? FUNCCreateDataProperty(VARval, VARP, VARnewElement). 
*4*NOTE: This algorithm intentionally does not throw an exception if CreateDataProperty returns false. 
*0*Return ? FUNCCall(VARreviver, VARholder, « VARname, VARval »).     

#############  END  ## 643 ###########################
############# BEGIN ## 644 ###########################
ID= 24.5.2
Summary= JSON.stringify ( value [ , replacer [ , space ] ] )
Description= The stringify function returns a String in UTF-16 encoded JSON format representing an ECMAScript value. It can take three parameters. The value parameter is an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or null. The optional replacer parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as an inclusion list for selecting the object properties that will be stringified. The optional space parameter is a String or Number that allows the result to have white space injected into it to improve human readability.
*0*Let VARstack be a new empty List. 
*0*Let VARindent be the empty String. 
*0*Let VARPropertyList and VARReplacerFunction be undefined. 
*0*If FUNCType(VARreplacer) is Object, then
*1*If FUNCIsCallable(VARreplacer) is true, then
*2*Let VARReplacerFunction be VARreplacer. 
*1*Else,
*2*Let VARisArray be ? FUNCIsArray(VARreplacer). 
*2*If VARisArray is true, then
*3*Let VARPropertyList be a new empty List. 
*3*Let VARlen be ? FUNCToLength(? FUNCGet(VARreplacer, "length")). 
*3*Let VARk be 0. 
*3*Repeat, while VARk&lt;VARlen,
*4*Let VARv be ? FUNCGet(VARreplacer, ! FUNCToString(VARk)). 
*4*Let VARitem be undefined. 
*4*If FUNCType(VARv) is String, then
*5*Let VARitem be VARv. 
*4*Else,
*5*if FUNCType(VARv) is Number, then
*6*Let VARitem be ! FUNCToString(VARv).
*4*Else if FUNCType(VARv) is Object, then
*5*If VARv has a [[VARStringData]] or [[VARNumberData]] internal slot, then
*6*Let VARitem be ? FUNCToString(VARv). 
*4*If VARitem is not undefined and VARitem is not currently an element of VARPropertyList, then
*5*Append VARitem to the end of VARPropertyList. 
*4*Let VARk be VARk+1. 
*0*If FUNCType(VARspace) is Object, then
*1*If VARspace has a [[VARNumberData]] internal slot, then
*2*Let VARspace be ? FUNCToNumber(VARspace). 
*1*Else if VARspace has a [[VARStringData]] internal slot, then
*2*Let VARspace be ? FUNCToString(VARspace). 
*0*If FUNCType(VARspace) is Number, then
*1*Let VARspace be min(10, FUNCToInteger(VARspace)). 
*1*Set VARgap to the String value containing VARspace occurrences of the code unit 0x0020 (SPACE). This will be the empty String if VARspace is less than 1. 
*0*Else if FUNCType(VARspace) is String, then
*1*If the length of VARspace is 10 or less, set VARgap to VARspace; otherwise set VARgap to the String value consisting of the first 10 elements of VARspace. 
*0*Else,
*1*Set VARgap to the empty String. 
*0*Let VARwrapper be FUNCObjectCreate(%ObjectPrototype%). 
*0*Let VARstatus be FUNCCreateDataProperty(VARwrapper, the empty String, VARvalue). 
*0*Assert: VARstatus is true. 
*0*Return ? FUNCSerializeJSONProperty(the empty String, VARwrapper).    

#############  END  ## 644 ###########################
############# BEGIN ## 645 ###########################
ID= 24.5.2.1
Summary= Runtime Semantics: SerializeJSONProperty ( key, holder )
Description= The abstract operation SerializeJSONProperty with arguments key, and holder has access to ReplacerFunction from the invocation of the stringify method. Its algorithm is as follows:
*0*Let VARvalue be ? FUNCGet(VARholder, VARkey). 
*0*If FUNCType(VARvalue) is Object, then
*1*Let VARtoJSON be ? FUNCGet(VARvalue, "toJSON"). 
*1*If FUNCIsCallable(VARtoJSON) is true, then
*2*Set VARvalue to ? FUNCCall(VARtoJSON, VARvalue, « VARkey »). 
*0*If VARReplacerFunction is not undefined, then
*1*Set VARvalue to ? FUNCCall(VARReplacerFunction, VARholder, « VARkey, VARvalue »). 
*0*If FUNCType(VARvalue) is Object, then
*1*If VARvalue has a [[VARNumberData]] internal slot, then
*2*Set VARvalue to ? FUNCToNumber(VARvalue). 
*1*Else if VARvalue has a [[VARStringData]] internal slot, then
*2*Set VARvalue to ? FUNCToString(VARvalue). 
*1*Else if VARvalue has a [[VARBooleanData]] internal slot, then
*2*Set VARvalue to VARvalue.[[VARBooleanData]]. 
*0*If VARvalue is null, return "null". 
*0*If VARvalue is true, return "true". 
*0*If VARvalue is false, return "false". 
*0*If FUNCType(VARvalue) is String, return FUNCQuoteJSONString(VARvalue). 
*0*If FUNCType(VARvalue) is Number, then
*1*If VARvalue is finite, return ! FUNCToString(VARvalue). 
*1*Return "null". 
*0*If FUNCType(VARvalue) is Object and FUNCIsCallable(VARvalue) is false, then
*1*Let VARisArray be ? FUNCIsArray(VARvalue). 
*1*If VARisArray is true, return ? FUNCSerializeJSONArray(VARvalue). 
*1*Return ? FUNCSerializeJSONObject(VARvalue). 
*0*Return undefined.     

#############  END  ## 645 ###########################
############# BEGIN ## 646 ###########################
ID= 24.5.2.2
Summary= Runtime Semantics: QuoteJSONString ( value )
Description= The abstract operation QuoteJSONString with argument value wraps a String value in QUOTATION MARK code units and escapes certain other code units within it.
*0*Let VARproduct be the String value consisting solely of the code unit 0x0022 (QUOTATION MARK). 
*0*For each code unit VARC in VARvalue, do
*1*If the numeric value of VARC is listed in the Code Unit Value column of Table 59, then
*2*Set VARproduct to the string-concatenation of VARproduct and the Escape Sequence for VARC as specified in Table 59. 
*1*Else if VARC has a numeric value less than 0x0020 (SPACE), then
*2*Set VARproduct to the FUNCstring-concatenation of VARproduct and UnicodeEscape(VARC). 
*1*Else,
*2*Set VARproduct to the string-concatenation of VARproduct and VARC. 
*0*Set VARproduct to the string-concatenation of VARproduct and the code unit 0x0022 (QUOTATION MARK). 
*0*Return VARproduct.     

#############  END  ## 646 ###########################
############# BEGIN ## 647 ###########################
ID= 24.5.2.3
Summary= Runtime Semantics: UnicodeEscape ( C )
Description= The abstract operation UnicodeEscape takes a code unit argument C and represents it as a Unicode escape sequence.
*0*Let VARn be the numeric value of VARC. 
*0*Assert: VARn ≤ 0xFFFF. 
*0*Return the string-concatenation of:the code unit 0x005C (REVERSE SOLIDUS) "u" the String representation of VARn, formatted as a four-digit lowercase hexadecimal number, padded to the left with zeroes if necessary     

#############  END  ## 647 ###########################
############# BEGIN ## 648 ###########################
ID= 24.5.2.4
Summary= Runtime Semantics: SerializeJSONObject ( value )
Description= The abstract operation SerializeJSONObject with argument value serializes an object. It has access to the stack, indent, gap, and PropertyList values of the current invocation of the stringify method.
*0*If VARstack contains VARvalue, throw a TypeError exception because the structure is cyclical. 
*0*Append VARvalue to VARstack. 
*0*Let VARstepback be VARindent. 
*0*Set VARindent to the string-concatenation of VARindent and VARgap. 
*0*If VARPropertyList is not undefined, then
*1*Let VARK be VARPropertyList. 
*0*Else,
*1*Let VARK be ? FUNCEnumerableOwnPropertyNames(VARvalue, "key"). 
*0*Let VARpartial be a new empty List. 
*0*For each element VARP of VARK, do
*1*Let VARstrP be ? FUNCSerializeJSONProperty(VARP, VARvalue). 
*1*If VARstrP is not undefined, then
*2*Let VARmember be FUNCQuoteJSONString(VARP). 
*2*Set VARmember to the string-concatenation of VARmember and ":". 
*2*If VARgap is not the empty String, then
*3*Set VARmember to the string-concatenation of VARmember and the code unit 0x0020 (SPACE). 
*2*Set VARmember to the string-concatenation of VARmember and VARstrP. 
*2*Append VARmember to VARpartial. 
*0*If VARpartial is empty, then
*1*Let VARfinal be "{}". 
*0*Else,
*1*If VARgap is the empty String, then
*2*Let VARproperties be the String value formed by concatenating all the element Strings of VARpartial with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String. 
*2*Let VARfinal be the string-concatenation of "{", VARproperties, and "}". 
*1*Else VARgap is not the empty String,
*2*Let VARseparator be the string-concatenation of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and VARindent. 
*2*Let VARproperties be the String value formed by concatenating all the element Strings of VARpartial with each adjacent pair of Strings separated with VARseparator. The VARseparator String is not inserted either before the first String or after the last String. 
*2*Let VARfinal be the string-concatenation of "{", the code unit 0x000A (LINE FEED), VARindent, VARproperties, the code unit 0x000A (LINE FEED), VARstepback, and "}". 
*0*Remove the last element of VARstack. 
*0*Set VARindent to VARstepback. 
*0*Return VARfinal.     

#############  END  ## 648 ###########################
############# BEGIN ## 649 ###########################
ID= 24.5.2.5
Summary= Runtime Semantics: SerializeJSONArray ( value )
Description= The abstract operation SerializeJSONArray with argument value serializes an array. It has access to the stack, indent, and gap values of the current invocation of the stringify method.
*0*If VARstack contains VARvalue, throw a TypeError exception because the structure is cyclical. 
*0*Append VARvalue to VARstack. 
*0*Let VARstepback be VARindent. 
*0*Set VARindent to the string-concatenation of VARindent and VARgap. 
*0*Let VARpartial be a new empty List. 
*0*Let VARlen be ? FUNCToLength(? FUNCGet(VARvalue, "length")). 
*0*Let VARindex be 0. 
*0*Repeat, while VARindex &lt; VARlen
*1*Let VARstrP be ? FUNCSerializeJSONProperty(! FUNCToString(VARindex), VARvalue). 
*1*If VARstrP is undefined, then
*2*Append "null" to VARpartial. 
*1*Else,
*2*Append VARstrP to VARpartial. 
*1*Increment VARindex by 1. 
*0*If VARpartial is empty, then
*1*Let VARfinal be "[]". 
*0*Else,
*1*If VARgap is the empty String, then
*2*Let VARproperties be the String value formed by concatenating all the element Strings of VARpartial with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String. 
*2*Let VARfinal be the string-concatenation of "[", VARproperties, and "]". 
*1*Else,
*2*Let VARseparator be the string-concatenation of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and VARindent. 
*2*Let VARproperties be the String value formed by concatenating all the element Strings of VARpartial with each adjacent pair of Strings separated with VARseparator. The VARseparator String is not inserted either before the first String or after the last String. 
*2*Let VARfinal be the string-concatenation of "[", the code unit 0x000A (LINE FEED), VARindent, VARproperties, the code unit 0x000A (LINE FEED), VARstepback, and "]". 
*0*Remove the last element of VARstack. 
*0*Set VARindent to VARstepback. 
*0*Return VARfinal.     

#############  END  ## 649 ###########################
############# BEGIN ## 650 ###########################
ID= 25.1.2.1
Summary= %IteratorPrototype% [ @@iterator ] ( )
Description= The following steps are taken:
*0*Return the this value.     

#############  END  ## 650 ###########################
############# BEGIN ## 651 ###########################
ID= 25.1.3.1
Summary= %AsyncIteratorPrototype% [ @@asyncIterator ] ( )
Description= The following steps are taken:
*0*Return the this value.     

#############  END  ## 651 ###########################
############# BEGIN ## 652 ###########################
ID= 25.1.4.1
Summary= CreateAsyncFromSyncIterator ( syncIteratorRecord )
Description= The abstract operation CreateAsyncFromSyncIterator is used to create an async iterator Record from a synchronous iterator Record. It performs the following steps:
*0*Let VARasyncIterator be ! FUNCObjectCreate(%AsyncFromSyncIteratorPrototype%, « [[VARSyncIteratorRecord]] »). 
*0*Set VARasyncIterator.[[VARSyncIteratorRecord]] to VARsyncIteratorRecord. 
*0*Return ? FUNCGetIterator(VARasyncIterator, async).     

#############  END  ## 652 ###########################
############# BEGIN ## 653 ###########################
ID= 25.1.4.2.1
Summary= %AsyncFromSyncIteratorPrototype%.next ( value )
Description= None
*0*Let VARO be the this value. 
*0*Let VARpromiseCapability be ! FUNCNewPromiseCapability(%Promise%). 
*0*If FUNCType(VARO) is not Object, or if VARO does not have a [[VARSyncIteratorRecord]] internal slot, then
*1*Let VARinvalidIteratorError be a newly created TypeError object. 
*1*Perform ! FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « VARinvalidIteratorError »). 
*1*Return VARpromiseCapability.[[VARPromise]]. 
*0*Let VARsyncIteratorRecord be VARO.[[VARSyncIteratorRecord]]. 
*0*Let VARnextResult be FUNCIteratorNext(VARsyncIteratorRecord, VARvalue). 
*0*FUNCIfAbruptRejectPromise(VARnextResult, VARpromiseCapability). 
*0*Let VARnextDone be FUNCIteratorComplete(VARnextResult). 
*0*FUNCIfAbruptRejectPromise(VARnextDone, VARpromiseCapability). 
*0*Let VARnextValue be FUNCIteratorValue(VARnextResult). 
*0*FUNCIfAbruptRejectPromise(VARnextValue, VARpromiseCapability). 
*0*Let VARvalueWrapperCapability be ! FUNCNewPromiseCapability(%Promise%). 
*0*Perform ! FUNCCall(VARvalueWrapperCapability.[[VARResolve]], undefined, « VARnextValue »). 
*0*Let VARsteps be the algorithm steps defined in Async-from-Sync Iterator Value Unwrap Functions. 
*0*Let VARonFulfilled be FUNCCreateBuiltinFunction(VARsteps, « [[VARDone]] »). 
*0*Set VARonFulfilled.[[VARDone]] to VARnextDone. 
*0*Perform ! FUNCPerformPromiseThen(VARvalueWrapperCapability.[[VARPromise]], VARonFulfilled, undefined, VARpromiseCapability). 
*0*Return VARpromiseCapability.[[VARPromise]].      

#############  END  ## 653 ###########################
############# BEGIN ## 654 ###########################
ID= 25.1.4.2.2
Summary= %AsyncFromSyncIteratorPrototype%.return ( value )
Description= None
*0*Let VARO be the this value. 
*0*Let VARpromiseCapability be ! FUNCNewPromiseCapability(%Promise%). 
*0*If FUNCType(VARO) is not Object, or if VARO does not have a [[VARSyncIteratorRecord]] internal slot, then
*1*Let VARinvalidIteratorError be a newly created TypeError object. 
*1*Perform ! FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « VARinvalidIteratorError »). 
*1*Return VARpromiseCapability.[[VARPromise]]. 
*0*Let VARsyncIterator be VARO.[[VARSyncIteratorRecord]].[[VARIterator]]. 
*0*Let VARreturn be FUNCGetMethod(VARsyncIterator, "return"). 
*0*FUNCIfAbruptRejectPromise(VARreturn, VARpromiseCapability). 
*0*If VARreturn is undefined, then
*1*Let VARiterResult be ! FUNCCreateIterResultObject(VARvalue, true). 
*1*Perform ! FUNCCall(VARpromiseCapability.[[VARResolve]], undefined, « VARiterResult »). 
*1*Return VARpromiseCapability.[[VARPromise]]. 
*0*Let VARreturnResult be FUNCCall(VARreturn, VARsyncIterator, « VARvalue »). 
*0*FUNCIfAbruptRejectPromise(VARreturnResult, VARpromiseCapability). 
*0*If FUNCType(VARreturnResult) is not Object, then
*1*Perform ! FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « a newly created TypeError object »). 
*1*Return VARpromiseCapability.[[VARPromise]]. 
*0*Let VARreturnDone be FUNCIteratorComplete(VARreturnResult). 
*0*FUNCIfAbruptRejectPromise(VARreturnDone, VARpromiseCapability). 
*0*Let VARreturnValue be FUNCIteratorValue(VARreturnResult). 
*0*FUNCIfAbruptRejectPromise(VARreturnValue, VARpromiseCapability). 
*0*Let VARvalueWrapperCapability be ! FUNCNewPromiseCapability(%Promise%). 
*0*Perform ! FUNCCall(VARvalueWrapperCapability.[[VARResolve]], undefined, « VARreturnValue »). 
*0*Let VARsteps be the algorithm steps defined in Async-from-Sync Iterator Value Unwrap Functions. 
*0*Let VARonFulfilled be FUNCCreateBuiltinFunction(VARsteps, « [[VARDone]] »). 
*0*Set VARonFulfilled.[[VARDone]] to VARreturnDone. 
*0*Perform ! FUNCPerformPromiseThen(VARvalueWrapperCapability.[[VARPromise]], VARonFulfilled, undefined, VARpromiseCapability). 
*0*Return VARpromiseCapability.[[VARPromise]].      

#############  END  ## 654 ###########################
############# BEGIN ## 655 ###########################
ID= 25.1.4.2.3
Summary= %AsyncFromSyncIteratorPrototype%.throw ( value )
Description= None
*0*Let VARO be the this value. 
*0*Let VARpromiseCapability be ! FUNCNewPromiseCapability(%Promise%). 
*0*If FUNCType(VARO) is not Object, or if VARO does not have a [[VARSyncIteratorRecord]] internal slot, then
*1*Let VARinvalidIteratorError be a newly created TypeError object. 
*1*Perform ! FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « VARinvalidIteratorError »). 
*1*Return VARpromiseCapability.[[VARPromise]]. 
*0*Let VARsyncIterator be VARO.[[VARSyncIteratorRecord]].[[VARIterator]]. 
*0*Let VARthrow be FUNCGetMethod(VARsyncIterator, "throw"). 
*0*FUNCIfAbruptRejectPromise(VARthrow, VARpromiseCapability). 
*0*If VARthrow is undefined, then
*1*Perform ! FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « VARvalue »). 
*1*Return VARpromiseCapability.[[VARPromise]]. 
*0*Let VARthrowResult be FUNCCall(VARthrow, VARsyncIterator, « VARvalue »). 
*0*FUNCIfAbruptRejectPromise(VARthrowResult, VARpromiseCapability). 
*0*If FUNCType(VARthrowResult) is not Object, then
*1*Perform ! FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « a newly created TypeError object »). 
*1*Return VARpromiseCapability.[[VARPromise]]. 
*0*Let VARthrowDone be FUNCIteratorComplete(VARthrowResult). 
*0*FUNCIfAbruptRejectPromise(VARthrowDone, VARpromiseCapability). 
*0*Let VARthrowValue be FUNCIteratorValue(VARthrowResult). 
*0*FUNCIfAbruptRejectPromise(VARthrowValue, VARpromiseCapability). 
*0*Let VARvalueWrapperCapability be ! FUNCNewPromiseCapability(%Promise%). 
*0*Perform ! FUNCCall(VARvalueWrapperCapability.[[VARResolve]], undefined, « VARthrowValue »). 
*0*Let VARsteps be the algorithm steps defined in Async-from-Sync Iterator Value Unwrap Functions. 
*0*Let VARonFulfilled be FUNCCreateBuiltinFunction(VARsteps, « [[VARDone]] »). 
*0*Set VARonFulfilled.[[VARDone]] to VARthrowDone. 
*0*Perform ! FUNCPerformPromiseThen(VARvalueWrapperCapability.[[VARPromise]], VARonFulfilled, undefined, VARpromiseCapability). 
*0*Return VARpromiseCapability.[[VARPromise]].      

#############  END  ## 655 ###########################
############# BEGIN ## 656 ###########################
ID= 25.2.1.1
Summary= GeneratorFunction ( p1, p2, … , pn, body )
Description= The last argument specifies the body (executable code) of a generator function; any preceding arguments specify formal parameters.
*0*Let VARC be the active function object. 
*0*Let VARargs be the VARargumentsList that was passed to this function by [[VARCall]] or [[VARConstruct]]. 
*0*Return ? FUNCCreateDynamicFunction(VARC, NewTarget, "generator", VARargs).     

#############  END  ## 656 ###########################
############# BEGIN ## 657 ###########################
ID= 25.3.1.1
Summary= AsyncGeneratorFunction ( p1, p2, ..., pn, body )
Description= The last argument specifies the body (executable code) of an async generator function; any preceding arguments specify formal parameters.
*0*Let VARC be the active function object. 
*0*Let VARargs be the VARargumentsList that was passed to this function by [[VARCall]] or [[VARConstruct]]. 
*0*Return ? FUNCCreateDynamicFunction(VARC, NewTarget, "async generator", VARargs).     

#############  END  ## 657 ###########################
############# BEGIN ## 658 ###########################
ID= 25.4.1.2
Summary= Generator.prototype.next ( value )
Description= The next method performs the following steps:
*0*Let VARg be the this value. 
*0*Return ? FUNCGeneratorResume(VARg, VARvalue).     

#############  END  ## 658 ###########################
############# BEGIN ## 659 ###########################
ID= 25.4.1.3
Summary= Generator.prototype.return ( value )
Description= The return method performs the following steps:
*0*Let VARg be the this value. 
*0*Let VARC be Completion { [[VARType]]: return, [[VARValue]]: VARvalue, [[VARTarget]]: empty }. 
*0*Return ? FUNCGeneratorResumeAbrupt(VARg, VARC).     

#############  END  ## 659 ###########################
############# BEGIN ## 660 ###########################
ID= 25.4.1.4
Summary= Generator.prototype.throw ( exception )
Description= The throw method performs the following steps:
*0*Let VARg be the this value. 
*0*Let VARC be FUNCThrowCompletion(VARexception). 
*0*Return ? FUNCGeneratorResumeAbrupt(VARg, VARC).     

#############  END  ## 660 ###########################
############# BEGIN ## 661 ###########################
ID= 25.4.3.1
Summary= GeneratorStart ( generator, generatorBody )
Description= The abstract operation GeneratorStart with arguments generator and generatorBody performs the following steps:
*0*Assert: The value of VARgenerator.[[VARGeneratorState]] is undefined. 
*0*Let VARgenContext be the running execution context. 
*0*Set the Generator component of VARgenContext to VARgenerator. 
*0*Set the code evaluation state of VARgenContext such that when evaluation is resumed for that execution context the following steps will be performed:
*1*Let VARresult be the result of evaluating VARgeneratorBody. 
*1*Assert: If we return here, the generator either threw an exception or performed either an implicit or explicit return. 
*1*Remove VARgenContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context. 
*1*Set VARgenerator.[[VARGeneratorState]] to "completed". 
*1*Once a generator enters the "completed" state it never leaves it and its associated execution context is never resumed. Any execution state associated with VARgenerator can be discarded at this point. 
*1*If VARresult.[[VARType]] is normal, then
*2*Let VARresultValue be undefined. 
*1*Else,
*2*if VARresult.[[VARVARType]] is return, then
*3*Let VARresultValue be VARresult.[[VARVARVARValue]].
*1*Else,
*2*Assert: VARresult.[[VARType]] is throw. 
*2*Return FUNCCompletion(VARresult). 
*1*Return FUNCCreateIterResultObject(VARresultValue, true). 
*0*Set VARgenerator.[[VARGeneratorContext]] to VARgenContext. 
*0*Set VARgenerator.[[VARGeneratorState]] to "suspendedStart". 
*0*Return FUNCNormalCompletion(undefined).     

#############  END  ## 661 ###########################
############# BEGIN ## 662 ###########################
ID= 25.4.3.2
Summary= GeneratorValidate ( generator )
Description= The abstract operation GeneratorValidate with argument generator performs the following steps:
*0*If FUNCType(VARgenerator) is not Object, throw a TypeError exception. 
*0*If VARgenerator does not have a [[VARGeneratorState]] internal slot, throw a TypeError exception. 
*0*Assert: VARgenerator also has a [[VARGeneratorContext]] internal slot. 
*0*Let VARstate be VARgenerator.[[VARGeneratorState]]. 
*0*If VARstate is "executing", throw a TypeError exception. 
*0*Return VARstate.     

#############  END  ## 662 ###########################
############# BEGIN ## 663 ###########################
ID= 25.4.3.3
Summary= GeneratorResume ( generator, value )
Description= The abstract operation GeneratorResume with arguments generator and value performs the following steps:
*0*Let VARstate be ? FUNCGeneratorValidate(VARgenerator). 
*0*If VARstate is "completed", return FUNCCreateIterResultObject(undefined, true). 
*0*Assert: VARstate is either "suspendedStart" or "suspendedYield". 
*0*Let VARgenContext be VARgenerator.[[VARGeneratorContext]]. 
*0*Let VARmethodContext be the running execution context. 
*0*Suspend VARmethodContext. 
*0*Set VARgenerator.[[VARGeneratorState]] to "executing". 
*0*Push VARgenContext onto the execution context stack; VARgenContext is now the running execution context. 
*0*Resume the suspended evaluation of VARgenContext using FUNCNormalCompletion(VARvalue) as the result of the operation that suspended it. Let VARresult be the value returned by the resumed computation. 
*0*Assert: When we return here, VARgenContext has already been removed from the execution context stack and VARmethodContext is the currently running execution context. 
*0*Return FUNCCompletion(VARresult).     

#############  END  ## 663 ###########################
############# BEGIN ## 664 ###########################
ID= 25.4.3.4
Summary= GeneratorResumeAbrupt ( generator, abruptCompletion )
Description= The abstract operation GeneratorResumeAbrupt with arguments generator and abruptCompletion performs the following steps:
*0*Let VARstate be ? FUNCGeneratorValidate(VARgenerator). 
*0*If VARstate is "suspendedStart", then
*1*Set VARgenerator.[[VARGeneratorState]] to "completed". 
*1*Once a generator enters the "completed" state it never leaves it and its associated execution context is never resumed. Any execution state associated with VARgenerator can be discarded at this point. 
*1*Set VARstate to "completed". 
*0*If VARstate is "completed", then
*1*If VARabruptCompletion.[[VARType]] is return, then
*2*Return FUNCCreateIterResultObject(VARabruptCompletion.[[VARValue]], true). 
*1*Return FUNCCompletion(VARabruptCompletion). 
*0*Assert: VARstate is "suspendedYield". 
*0*Let VARgenContext be VARgenerator.[[VARGeneratorContext]]. 
*0*Let VARmethodContext be the running execution context. 
*0*Suspend VARmethodContext. 
*0*Set VARgenerator.[[VARGeneratorState]] to "executing". 
*0*Push VARgenContext onto the execution context stack; VARgenContext is now the running execution context. 
*0*Resume the suspended evaluation of VARgenContext using VARabruptCompletion as the result of the operation that suspended it. Let VARresult be the completion record returned by the resumed computation. 
*0*Assert: When we return here, VARgenContext has already been removed from the execution context stack and VARmethodContext is the currently running execution context. 
*0*Return FUNCCompletion(VARresult).     

#############  END  ## 664 ###########################
############# BEGIN ## 665 ###########################
ID= 25.4.3.5
Summary= GetGeneratorKind ( )
Description= None
*0*Let VARgenContext be the running execution context. 
*0*If VARgenContext does not have a Generator component, return non-generator. 
*0*Let VARgenerator be the Generator component of VARgenContext. 
*0*If VARgenerator has an [[VARAsyncGeneratorState]] internal slot, return async. 
*0*Else,
*1*return sync.

#############  END  ## 665 ###########################
############# BEGIN ## 666 ###########################
ID= 25.4.3.6
Summary= GeneratorYield ( iterNextObj )
Description= The abstract operation GeneratorYield with argument iterNextObj performs the following steps:
*0*Assert: VARiterNextObj is an Object that implements the IteratorResult interface. 
*0*Let VARgenContext be the running execution context. 
*0*Assert: VARgenContext is the execution context of a generator. 
*0*Let VARgenerator be the value of the Generator component of VARgenContext. 
*0*Assert: FUNCGetGeneratorKind() is sync. 
*0*Set VARgenerator.[[VARGeneratorState]] to "suspendedYield". 
*0*Remove VARgenContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context. 
*0*Set the code evaluation state of VARgenContext such that when evaluation is resumed with a Completion VARresumptionValue the following steps will be performed:
*1*Return VARresumptionValue. 
*1*NOTE: This returns to the evaluation of the YieldExpression that originally called this abstract operation. 
*0*Return FUNCNormalCompletion(VARiterNextObj). 
*0*NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of VARgenContext.     

#############  END  ## 666 ###########################
############# BEGIN ## 667 ###########################
ID= 25.5.1.2
Summary= AsyncGenerator.prototype.next ( value )
Description= None
*0*Let VARgenerator be the this value. 
*0*Let VARcompletion be FUNCNormalCompletion(VARvalue). 
*0*Return ! FUNCAsyncGeneratorEnqueue(VARgenerator, VARcompletion).     

#############  END  ## 667 ###########################
############# BEGIN ## 668 ###########################
ID= 25.5.1.3
Summary= AsyncGenerator.prototype.return ( value )
Description= None
*0*Let VARgenerator be the this value. 
*0*Let VARcompletion be Completion { [[VARType]]: return, [[VARValue]]: VARvalue, [[VARTarget]]: empty }. 
*0*Return ! FUNCAsyncGeneratorEnqueue(VARgenerator, VARcompletion).     

#############  END  ## 668 ###########################
############# BEGIN ## 669 ###########################
ID= 25.5.1.4
Summary= AsyncGenerator.prototype.throw ( exception )
Description= None
*0*Let VARgenerator be the this value. 
*0*Let VARcompletion be FUNCThrowCompletion(VARexception). 
*0*Return ! FUNCAsyncGeneratorEnqueue(VARgenerator, VARcompletion).     

#############  END  ## 669 ###########################
############# BEGIN ## 670 ###########################
ID= 25.5.3.2
Summary= AsyncGeneratorStart ( generator, generatorBody )
Description= None
*0*Assert: VARgenerator is an AsyncGenerator instance. 
*0*Assert: VARgenerator.[[VARAsyncGeneratorState]] is undefined. 
*0*Let VARgenContext be the running execution context. 
*0*Set the Generator component of VARgenContext to VARgenerator. 
*0*Set the code evaluation state of VARgenContext such that when evaluation is resumed for that execution context the following steps will be performed:
*1*Let VARresult be the result of evaluating VARgeneratorBody. 
*1*Assert: If we return here, the async generator either threw an exception or performed either an implicit or explicit return. 
*1*Remove VARgenContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context. 
*1*Set VARgenerator.[[VARAsyncGeneratorState]] to "completed". 
*1*If VARresult is a normal completion, then
*2*Let VARresultValue be undefined. 
*1*Else,
*2*Let VARresultValue be VARresult.[[VARValue]]. 
*2*If VARresult.[[VARType]] is not return, then
*3*Return ! FUNCAsyncGeneratorReject(VARgenerator, VARresultValue). 
*1*Return ! FUNCAsyncGeneratorResolve(VARgenerator, VARresultValue, true). 
*0*Set VARgenerator.[[VARAsyncGeneratorContext]] to VARgenContext. 
*0*Set VARgenerator.[[VARAsyncGeneratorState]] to "suspendedStart". 
*0*Set VARgenerator.[[VARAsyncGeneratorQueue]] to a new empty List. 
*0*Return undefined.     

#############  END  ## 670 ###########################
############# BEGIN ## 671 ###########################
ID= 25.5.3.3
Summary= AsyncGeneratorResolve ( generator, value, done )
Description= None
*0*Assert: VARgenerator is an AsyncGenerator instance. 
*0*Let VARqueue be VARgenerator.[[VARAsyncGeneratorQueue]]. 
*0*Assert: VARqueue is not an empty List. 
*0*Remove the first element from VARqueue and let VARnext be the value of that element. 
*0*Let VARpromiseCapability be VARnext.[[VARCapability]]. 
*0*Let VARiteratorResult be ! FUNCCreateIterResultObject(VARvalue, VARdone). 
*0*Perform ! FUNCCall(VARpromiseCapability.[[VARResolve]], undefined, « VARiteratorResult »). 
*0*Perform ! FUNCAsyncGeneratorResumeNext(VARgenerator). 
*0*Return undefined.     

#############  END  ## 671 ###########################
############# BEGIN ## 672 ###########################
ID= 25.5.3.4
Summary= AsyncGeneratorReject ( generator, exception )
Description= None
*0*Assert: VARgenerator is an AsyncGenerator instance. 
*0*Let VARqueue be VARgenerator.[[VARAsyncGeneratorQueue]]. 
*0*Assert: VARqueue is not an empty List. 
*0*Remove the first element from VARqueue and let VARnext be the value of that element. 
*0*Let VARpromiseCapability be VARnext.[[VARCapability]]. 
*0*Perform ! FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « VARexception »). 
*0*Perform ! FUNCAsyncGeneratorResumeNext(VARgenerator). 
*0*Return undefined.     

#############  END  ## 672 ###########################
############# BEGIN ## 673 ###########################
ID= 25.5.3.5
Summary= AsyncGeneratorResumeNext ( generator )
Description= An AsyncGeneratorResumeNext return processor fulfilled function is an anonymous built-in function that is used as part of the AsyncGeneratorResumeNext specification device to unwrap promises passed in to the  AsyncGenerator.prototype.return ( value ) method. Each AsyncGeneratorResumeNext return processor fulfilled function has a [[Generator]] internal slot.
*0*Assert: VARgenerator is an AsyncGenerator instance. 
*0*Let VARstate be VARgenerator.[[VARAsyncGeneratorState]]. 
*0*Assert: VARstate is not "executing". 
*0*If VARstate is "awaiting-return", return undefined. 
*0*Let VARqueue be VARgenerator.[[VARAsyncGeneratorQueue]]. 
*0*If VARqueue is an empty List, return undefined. 
*0*Let VARnext be the value of the first element of VARqueue. 
*0*Assert: VARnext is an AsyncGeneratorRequest record. 
*0*Let VARcompletion be VARnext.[[VARCompletion]]. 
*0*If VARcompletion is an abrupt completion, then
*1*If VARstate is "suspendedStart", then
*2*Set VARgenerator.[[VARAsyncGeneratorState]] to "completed". 
*2*Set VARstate to "completed". 
*1*If VARstate is "completed", then
*2*If VARcompletion.[[VARType]] is return, then
*3*Set VARgenerator.[[VARAsyncGeneratorState]] to "awaiting-return". 
*3*Let VARpromiseCapability be ! FUNCNewPromiseCapability(%Promise%). 
*3*Perform ! FUNCCall(VARpromiseCapability.[[VARResolve]], undefined, « VARcompletion.[[VARValue]] »). 
*3*Let VARstepsFulfilled be the algorithm steps defined in AsyncGeneratorResumeNext Return Processor Fulfilled Functions. 
*3*Let VARonFulfilled be FUNCCreateBuiltinFunction(VARstepsFulfilled, « [[VARGenerator]] »). 
*3*Set VARonFulfilled.[[VARGenerator]] to VARgenerator. 
*3*Let VARstepsRejected be the algorithm steps defined in AsyncGeneratorResumeNext Return Processor Rejected Functions. 
*3*Let VARonRejected be FUNCCreateBuiltinFunction(VARstepsRejected, « [[VARGenerator]] »). 
*3*Set VARonRejected.[[VARGenerator]] to VARgenerator. 
*3*Let VARthrowawayCapability be ! FUNCNewPromiseCapability(%Promise%). 
*3*Set VARthrowawayCapability.[[VARPromise]].[[VARPromiseIsHandled]] to true. 
*3*Perform ! FUNCPerformPromiseThen(VARpromiseCapability.[[VARPromise]], VARonFulfilled, VARonRejected, VARthrowawayCapability). 
*3*Return undefined. 
*2*Else,
*3*Assert: VARcompletion.[[VARType]] is throw. 
*3*Perform ! FUNCAsyncGeneratorReject(VARgenerator, VARcompletion.[[VARValue]]). 
*3*Return undefined. 
*0*Else,
*1*if VARstate is "completed", return ! FUNCAsyncGeneratorResolve(VARgenerator, undefined, true).
*0*Assert: VARstate is either "suspendedStart" or "suspendedYield". 
*0*Let VARgenContext be VARgenerator.[[VARAsyncGeneratorContext]]. 
*0*Let VARcallerContext be the running execution context. 
*0*Suspend VARcallerContext. 
*0*Set VARgenerator.[[VARAsyncGeneratorState]] to "executing". 
*0*Push VARgenContext onto the execution context stack; VARgenContext is now the running execution context. 
*0*Resume the suspended evaluation of VARgenContext using VARcompletion as the result of the operation that suspended it. Let VARresult be the completion record returned by the resumed computation. 
*0*Assert: VARresult is never an abrupt completion. 
*0*Assert: When we return here, VARgenContext has already been removed from the execution context stack and VARcallerContext is the currently running execution context. 
*0*Return undefined.     

#############  END  ## 673 ###########################
############# BEGIN ## 674 ###########################
ID= 25.5.3.6
Summary= AsyncGeneratorEnqueue ( generator, completion )
Description= None
*0*Assert: VARcompletion is a Completion Record. 
*0*Let VARpromiseCapability be ! FUNCNewPromiseCapability(%Promise%). 
*0*If FUNCType(VARgenerator) is not Object, or if VARgenerator does not have an [[VARAsyncGeneratorState]] internal slot, then
*1*Let VARbadGeneratorError be a newly created TypeError object. 
*1*Perform ! FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « VARbadGeneratorError »). 
*1*Return VARpromiseCapability.[[VARPromise]]. 
*0*Let VARqueue be VARgenerator.[[VARAsyncGeneratorQueue]]. 
*0*Let VARrequest be AsyncGeneratorRequest { [[VARCompletion]]: VARcompletion, [[VARCapability]]: VARpromiseCapability }. 
*0*Append VARrequest to the end of VARqueue. 
*0*Let VARstate be VARgenerator.[[VARAsyncGeneratorState]]. 
*0*If VARstate is not "executing", then
*1*Perform ! FUNCAsyncGeneratorResumeNext(VARgenerator). 
*0*Return VARpromiseCapability.[[VARPromise]].     

#############  END  ## 674 ###########################
############# BEGIN ## 675 ###########################
ID= 25.5.3.7
Summary= AsyncGeneratorYield ( value )
Description= The abstract operation AsyncGeneratorYield with argument value performs the following steps:
*0*Let VARgenContext be the running execution context. 
*0*Assert: VARgenContext is the execution context of a generator. 
*0*Let VARgenerator be the value of the Generator component of VARgenContext. 
*0*Assert: FUNCGetGeneratorKind() is async. 
*0*Set VARvalue to ? Await(VARvalue). 
*0*Set VARgenerator.[[VARAsyncGeneratorState]] to "suspendedYield". 
*0*Remove VARgenContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context. 
*0*Set the code evaluation state of VARgenContext such that when evaluation is resumed with a Completion VARresumptionValue the following steps will be performed:
*1*If VARresumptionValue.[[VARType]] is not return, return FUNCCompletion(VARresumptionValue). 
*1*Let VARawaited be Await(VARresumptionValue.[[VARValue]]). 
*1*If VARawaited.[[VARType]] is throw, return FUNCCompletion(VARawaited). 
*1*Assert: VARawaited.[[VARType]] is normal. 
*1*Return Completion { [[VARType]]: return, [[VARValue]]: VARawaited.[[VARValue]], [[VARTarget]]: empty }. 
*1*NOTE: When one of the above steps returns, it returns to the evaluation of the YieldExpression production that originally called this abstract operation. 
*0*Return ! FUNCAsyncGeneratorResolve(VARgenerator, VARvalue, false). 
*0*NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of VARgenContext.     

#############  END  ## 675 ###########################
############# BEGIN ## 676 ###########################
ID= 25.6.1.1.1
Summary= IfAbruptRejectPromise ( value, capability )
Description= IfAbruptRejectPromise is a shorthand for a sequence of algorithm steps that use a PromiseCapability Record. An algorithm step of the form:
*0*FUNCIfAbruptRejectPromise(VARvalue, VARcapability).      

#############  END  ## 676 ###########################
############# BEGIN ## 677 ###########################
ID= 25.6.1.3
Summary= CreateResolvingFunctions ( promise )
Description= When CreateResolvingFunctions is performed with argument promise, the following steps are taken:
*0*Let VARalreadyResolved be a new Record { [[VARValue]]: false }. 
*0*Let VARstepsResolve be the algorithm steps defined in Promise Resolve Functions (25.6.1.3.2). 
*0*Let VARresolve be FUNCCreateBuiltinFunction(VARstepsResolve, « [[VARPromise]], [[VARAlreadyResolved]] »). 
*0*Set VARresolve.[[VARPromise]] to VARpromise. 
*0*Set VARresolve.[[VARAlreadyResolved]] to VARalreadyResolved. 
*0*Let VARstepsReject be the algorithm steps defined in Promise Reject Functions (25.6.1.3.1). 
*0*Let VARreject be FUNCCreateBuiltinFunction(VARstepsReject, « [[VARPromise]], [[VARAlreadyResolved]] »). 
*0*Set VARreject.[[VARPromise]] to VARpromise. 
*0*Set VARreject.[[VARAlreadyResolved]] to VARalreadyResolved. 
*0*Return a new Record { [[VARResolve]]: VARresolve, [[VARReject]]: VARreject }.     

#############  END  ## 677 ###########################
############# BEGIN ## 678 ###########################
ID= 25.6.1.4
Summary= FulfillPromise ( promise, value )
Description= When the FulfillPromise abstract operation is called with arguments promise and value, the following steps are taken:
*0*Assert: The value of VARpromise.[[VARPromiseState]] is "pending". 
*0*Let VARreactions be VARpromise.[[VARPromiseFulfillReactions]]. 
*0*Set VARpromise.[[VARPromiseResult]] to VARvalue. 
*0*Set VARpromise.[[VARPromiseFulfillReactions]] to undefined. 
*0*Set VARpromise.[[VARPromiseRejectReactions]] to undefined. 
*0*Set VARpromise.[[VARPromiseState]] to "fulfilled". 
*0*Return FUNCTriggerPromiseReactions(VARreactions, VARvalue).     

#############  END  ## 678 ###########################
############# BEGIN ## 679 ###########################
ID= 25.6.1.5
Summary= NewPromiseCapability ( C )
Description= The abstract operation NewPromiseCapability takes a constructor function, and attempts to use that constructor function in the fashion of the built-in Promise constructor to create a Promise object and extract its resolve and reject functions. The promise plus the resolve and reject functions are used to initialize a new PromiseCapability Record which is returned as the value of this abstract operation.
*0*If FUNCIsConstructor(VARC) is false, throw a TypeError exception. 
*0*NOTE: VARC is assumed to be a constructor function that supports the parameter conventions of the Promise constructor (see 25.6.3.1). 
*0*Let VARpromiseCapability be a new PromiseCapability { [[VARPromise]]: undefined, [[VARResolve]]: undefined, [[VARReject]]: undefined }. 
*0*Let VARsteps be the algorithm steps defined in GetCapabilitiesExecutor Functions. 
*0*Let VARexecutor be FUNCCreateBuiltinFunction(VARsteps, « [[VARCapability]] »). 
*0*Set VARexecutor.[[VARCapability]] to VARpromiseCapability. 
*0*Let VARpromise be ? FUNCConstruct(VARC, « VARexecutor »). 
*0*If FUNCIsCallable(VARpromiseCapability.[[VARResolve]]) is false, throw a TypeError exception. 
*0*If FUNCIsCallable(VARpromiseCapability.[[VARReject]]) is false, throw a TypeError exception. 
*0*Set VARpromiseCapability.[[VARPromise]] to VARpromise. 
*0*Return VARpromiseCapability.     

#############  END  ## 679 ###########################
############# BEGIN ## 680 ###########################
ID= 25.6.1.6
Summary= IsPromise ( x )
Description= The abstract operation IsPromise checks for the promise brand on an object.
*0*If FUNCType(VARx) is not Object, return false. 
*0*If VARx does not have a [[VARPromiseState]] internal slot, return false. 
*0*Return true.     

#############  END  ## 680 ###########################
############# BEGIN ## 681 ###########################
ID= 25.6.1.7
Summary= RejectPromise ( promise, reason )
Description= When the RejectPromise abstract operation is called with arguments promise and reason, the following steps are taken:
*0*Assert: The value of VARpromise.[[VARPromiseState]] is "pending". 
*0*Let VARreactions be VARpromise.[[VARPromiseRejectReactions]]. 
*0*Set VARpromise.[[VARPromiseResult]] to VARreason. 
*0*Set VARpromise.[[VARPromiseFulfillReactions]] to undefined. 
*0*Set VARpromise.[[VARPromiseRejectReactions]] to undefined. 
*0*Set VARpromise.[[VARPromiseState]] to "rejected". 
*0*If VARpromise.[[VARPromiseIsHandled]] is false, perform FUNCHostPromiseRejectionTracker(VARpromise, "reject"). 
*0*Return FUNCTriggerPromiseReactions(VARreactions, VARreason).     

#############  END  ## 681 ###########################
############# BEGIN ## 682 ###########################
ID= 25.6.1.8
Summary= TriggerPromiseReactions ( reactions, argument )
Description= The abstract operation TriggerPromiseReactions takes a collection of PromiseReactionRecords and enqueues a new Job for each record. Each such Job processes the [[Type]] and [[Handler]] of the PromiseReactionRecord, and if the [[Handler]] is a function, calls it passing the given argument. If the [[Handler]] is undefined, the behaviour is determined by the [[Type]].
*0*For each VARreaction in VARreactions, in original insertion order, do
*1*Perform FUNCEnqueueJob("PromiseJobs", PromiseReactionJob, « VARreaction, VARargument »). 
*0*Return undefined.     

#############  END  ## 682 ###########################
############# BEGIN ## 683 ###########################
ID= 25.6.2.1
Summary= PromiseReactionJob ( reaction, argument )
Description= The job PromiseReactionJob with parameters reaction and argument applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler.
*0*Assert: VARreaction is a PromiseReaction Record. 
*0*Let VARpromiseCapability be VARreaction.[[VARCapability]]. 
*0*Let VARtype be VARreaction.[[VARType]]. 
*0*Let VARhandler be VARreaction.[[VARHandler]]. 
*0*If VARhandler is undefined, then
*1*If VARtype is "Fulfill", then
*2*Let VARhandlerResult be FUNCNormalCompletion(VARargument). 
*1*Else,
*2*Assert: VARtype is "Reject". 
*2*Let VARhandlerResult be FUNCThrowCompletion(VARargument). 
*0*Else,
*1*let VARhandlerResult be FUNCCall(VARhandler, undefined, « VARargument »).
*0*If VARhandlerResult is an abrupt completion, then
*1*Let VARstatus be FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « VARhandlerResult.[[VARValue]] »). 
*0*Else,
*1*Let VARstatus be FUNCCall(VARpromiseCapability.[[VARResolve]], undefined, « VARhandlerResult.[[VARValue]] »). 
*0*Return FUNCCompletion(VARstatus).     

#############  END  ## 683 ###########################
############# BEGIN ## 684 ###########################
ID= 25.6.2.2
Summary= PromiseResolveThenableJob ( promiseToResolve, thenable, then )
Description= The job PromiseResolveThenableJob with parameters promiseToResolve, thenable, and then performs the following steps:
*0*Let VARresolvingFunctions be FUNCCreateResolvingFunctions(VARpromiseToResolve). 
*0*Let VARthenCallResult be FUNCCall(VARthen, VARthenable, « VARresolvingFunctions.[[VARResolve]], VARresolvingFunctions.[[VARReject]] »). 
*0*If VARthenCallResult is an abrupt completion, then
*1*Let VARstatus be FUNCCall(VARresolvingFunctions.[[VARReject]], undefined, « VARthenCallResult.[[VARValue]] »). 
*1*Return FUNCCompletion(VARstatus). 
*0*Return FUNCCompletion(VARthenCallResult).     

#############  END  ## 684 ###########################
############# BEGIN ## 685 ###########################
ID= 25.6.3.1
Summary= Promise ( executor )
Description= When the Promise function is called with argument executor, the following steps are taken:
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*If FUNCIsCallable(VARexecutor) is false, throw a TypeError exception. 
*0*Let VARpromise be ? FUNCOrdinaryCreateFromConstructor(NewTarget, "%PromisePrototype%", « [[VARPromiseState]], [[VARPromiseResult]], [[VARPromiseFulfillReactions]], [[VARPromiseRejectReactions]], [[VARPromiseIsHandled]] »). 
*0*Set VARpromise.[[VARPromiseState]] to "pending". 
*0*Set VARpromise.[[VARPromiseFulfillReactions]] to a new empty List. 
*0*Set VARpromise.[[VARPromiseRejectReactions]] to a new empty List. 
*0*Set VARpromise.[[VARPromiseIsHandled]] to false. 
*0*Let VARresolvingFunctions be FUNCCreateResolvingFunctions(VARpromise). 
*0*Let VARcompletion be FUNCCall(VARexecutor, undefined, « VARresolvingFunctions.[[VARResolve]], VARresolvingFunctions.[[VARReject]] »). 
*0*If VARcompletion is an abrupt completion, then
*1*Perform ? FUNCCall(VARresolvingFunctions.[[VARReject]], undefined, « VARcompletion.[[VARValue]] »). 
*0*Return VARpromise.     

#############  END  ## 685 ###########################
############# BEGIN ## 686 ###########################
ID= 25.6.4.1
Summary= Promise.all ( iterable )
Description= The all function returns a new promise which is fulfilled with an array of fulfillment values for the passed promises, or rejects with the reason of the first passed promise that rejects. It resolves all elements of the passed iterable to promises as it runs this algorithm.
*0*Let VARC be the this value. 
*0*If FUNCType(VARC) is not Object, throw a TypeError exception. 
*0*Let VARpromiseCapability be ? FUNCNewPromiseCapability(VARC). 
*0*Let VARiteratorRecord be FUNCGetIterator(VARiterable). 
*0*FUNCIfAbruptRejectPromise(VARiteratorRecord, VARpromiseCapability). 
*0*Let VARresult be FUNCPerformPromiseAll(VARiteratorRecord, VARC, VARpromiseCapability). 
*0*If VARresult is an abrupt completion, then
*1*If VARiteratorRecord.[[VARDone]] is false, then
*2*Let VARresult be FUNCIteratorClose(VARiteratorRecord, VARresult). 
*1*FUNCIfAbruptRejectPromise(VARresult, VARpromiseCapability). 
*0*Return FUNCCompletion(VARresult).     

#############  END  ## 686 ###########################
############# BEGIN ## 687 ###########################
ID= 25.6.4.1.1
Summary= Runtime Semantics: PerformPromiseAll ( iteratorRecord, constructor, resultCapability )
Description= When the PerformPromiseAll abstract operation is called with arguments iteratorRecord, constructor, and resultCapability, the following steps are taken:
*0*Assert: VARconstructor is a constructor function. 
*0*Assert: VARresultCapability is a PromiseCapability Record. 
*0*Let VARvalues be a new empty List. 
*0*Let VARremainingElementsCount be a new Record { [[VARValue]]: 1 }. 
*0*Let VARindex be 0. 
*0*Repeat,
*1*Let VARnext be FUNCIteratorStep(VARiteratorRecord). 
*1*If VARnext is an abrupt completion, set VARiteratorRecord.[[VARDone]] to true. 
*1*FUNCReturnIfAbrupt(VARnext). 
*1*If VARnext is false, then
*2*Set VARiteratorRecord.[[VARDone]] to true. 
*2*Set VARremainingElementsCount.[[VARValue]] to VARremainingElementsCount.[[VARValue]] - 1. 
*2*If VARremainingElementsCount.[[VARValue]] is 0, then
*3*Let VARvaluesArray be FUNCCreateArrayFromList(VARvalues). 
*3*Perform ? FUNCCall(VARresultCapability.[[VARResolve]], undefined, « VARvaluesArray »). 
*2*Return VARresultCapability.[[VARPromise]]. 
*1*Let VARnextValue be FUNCIteratorValue(VARnext). 
*1*If VARnextValue is an abrupt completion, set VARiteratorRecord.[[VARDone]] to true. 
*1*FUNCReturnIfAbrupt(VARnextValue). 
*1*Append undefined to VARvalues. 
*1*Let VARnextPromise be ? FUNCInvoke(VARconstructor, "resolve", « VARnextValue »). 
*1*Let VARsteps be the algorithm steps defined in Promise.all Resolve Element Functions. 
*1*Let VARresolveElement be FUNCCreateBuiltinFunction(VARsteps, « [[VARAlreadyCalled]], [[VARIndex]], [[VARValues]], [[VARCapability]], [[VARRemainingElements]] »). 
*1*Set VARresolveElement.[[VARAlreadyCalled]] to a new Record { [[VARValue]]: false }. 
*1*Set VARresolveElement.[[VARIndex]] to VARindex. 
*1*Set VARresolveElement.[[VARValues]] to VARvalues. 
*1*Set VARresolveElement.[[VARCapability]] to VARresultCapability. 
*1*Set VARresolveElement.[[VARRemainingElements]] to VARremainingElementsCount. 
*1*Set VARremainingElementsCount.[[VARValue]] to VARremainingElementsCount.[[VARValue]] + 1. 
*1*Perform ? FUNCInvoke(VARnextPromise, "then", « VARresolveElement, VARresultCapability.[[VARReject]] »). 
*1*Set VARindex to VARindex + 1.      

#############  END  ## 687 ###########################
############# BEGIN ## 688 ###########################
ID= 25.6.4.3
Summary= Promise.race ( iterable )
Description= The race function returns a new promise which is settled in the same way as the first passed promise to settle. It resolves all elements of the passed iterable to promises as it runs this algorithm.
*0*Let VARC be the this value. 
*0*If FUNCType(VARC) is not Object, throw a TypeError exception. 
*0*Let VARpromiseCapability be ? FUNCNewPromiseCapability(VARC). 
*0*Let VARiteratorRecord be FUNCGetIterator(VARiterable). 
*0*FUNCIfAbruptRejectPromise(VARiteratorRecord, VARpromiseCapability). 
*0*Let VARresult be FUNCPerformPromiseRace(VARiteratorRecord, VARC, VARpromiseCapability). 
*0*If VARresult is an abrupt completion, then
*1*If VARiteratorRecord.[[VARDone]] is false, then
*2*Let VARresult be FUNCIteratorClose(VARiterator, VARresult). 
*1*FUNCIfAbruptRejectPromise(VARresult, VARpromiseCapability). 
*0*Return FUNCCompletion(VARresult).     

#############  END  ## 688 ###########################
############# BEGIN ## 689 ###########################
ID= 25.6.4.3.1
Summary= Runtime Semantics: PerformPromiseRace ( iteratorRecord, constructor, resultCapability )
Description= When the PerformPromiseRace abstract operation is called with arguments iteratorRecord, constructor, and resultCapability, the following steps are taken:
*0*Assert: VARconstructor is a constructor function. 
*0*Assert: VARresultCapability is a PromiseCapability Record. 
*0*Repeat,
*1*Let VARnext be FUNCIteratorStep(VARiteratorRecord). 
*1*If VARnext is an abrupt completion, set VARiteratorRecord.[[VARDone]] to true. 
*1*FUNCReturnIfAbrupt(VARnext). 
*1*If VARnext is false, then
*2*Set VARiteratorRecord.[[VARDone]] to true. 
*2*Return VARresultCapability.[[VARPromise]]. 
*1*Let VARnextValue be FUNCIteratorValue(VARnext). 
*1*If VARnextValue is an abrupt completion, set VARiteratorRecord.[[VARDone]] to true. 
*1*FUNCReturnIfAbrupt(VARnextValue). 
*1*Let VARnextPromise be ? FUNCInvoke(VARconstructor, "resolve", « VARnextValue »). 
*1*Perform ? FUNCInvoke(VARnextPromise, "then", « VARresultCapability.[[VARResolve]], VARresultCapability.[[VARReject]] »).      

#############  END  ## 689 ###########################
############# BEGIN ## 690 ###########################
ID= 25.6.4.4
Summary= Promise.reject ( r )
Description= The reject function returns a new promise rejected with the passed argument.
*0*Let VARC be the this value. 
*0*If FUNCType(VARC) is not Object, throw a TypeError exception. 
*0*Let VARpromiseCapability be ? FUNCNewPromiseCapability(VARC). 
*0*Perform ? FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « VARr »). 
*0*Return VARpromiseCapability.[[VARPromise]].     

#############  END  ## 690 ###########################
############# BEGIN ## 691 ###########################
ID= 25.6.4.5
Summary= Promise.resolve ( x )
Description= The resolve function returns either a new promise resolved with the passed argument, or the argument itself if the argument is a promise produced by this constructor.
*0*Let VARC be the this value. 
*0*If FUNCType(VARC) is not Object, throw a TypeError exception. 
*0*Return ? FUNCPromiseResolve(VARC, VARx).     

#############  END  ## 691 ###########################
############# BEGIN ## 692 ###########################
ID= 25.6.4.5.1
Summary= PromiseResolve ( C, x )
Description= The abstract operation PromiseResolve, given a constructor and a value, returns a new promise resolved with that value.
*0*Assert: FUNCType(VARC) is Object. 
*0*If FUNCIsPromise(VARx) is true, then
*1*Let VARxConstructor be ? FUNCGet(VARx, "constructor"). 
*1*If FUNCSameValue(VARxConstructor, VARC) is true, return VARx. 
*0*Let VARpromiseCapability be ? FUNCNewPromiseCapability(VARC). 
*0*Perform ? FUNCCall(VARpromiseCapability.[[VARResolve]], undefined, « VARx »). 
*0*Return VARpromiseCapability.[[VARPromise]].      

#############  END  ## 692 ###########################
############# BEGIN ## 693 ###########################
ID= 25.6.5.1
Summary= Promise.prototype.catch ( onRejected )
Description= When the catch method is called with argument onRejected, the following steps are taken:
*0*Let VARpromise be the this value. 
*0*Return ? FUNCInvoke(VARpromise, "then", « undefined, VARonRejected »).     

#############  END  ## 693 ###########################
############# BEGIN ## 694 ###########################
ID= 25.6.5.3
Summary= Promise.prototype.finally ( onFinally )
Description= When the finally method is called with argument onFinally, the following steps are taken:
*0*Let VARpromise be the this value. 
*0*If FUNCType(VARpromise) is not Object, throw a TypeError exception. 
*0*Let VARC be ? FUNCSpeciesConstructor(VARpromise, %Promise%). 
*0*Assert: FUNCIsConstructor(VARC) is true. 
*0*If FUNCIsCallable(VARonFinally) is false, then
*1*Let VARthenFinally be VARonFinally. 
*1*Let VARcatchFinally be VARonFinally. 
*0*Else,
*1*Let VARstepsThenFinally be the algorithm steps defined in Then Finally Functions. 
*1*Let VARthenFinally be FUNCCreateBuiltinFunction(VARstepsThenFinally, « [[VARConstructor]], [[VAROnFinally]] »). 
*1*Set VARthenFinally.[[VARConstructor]] to VARC. 
*1*Set VARthenFinally.[[VAROnFinally]] to VARonFinally. 
*1*Let VARstepsCatchFinally be the algorithm steps defined in Catch Finally Functions. 
*1*Let VARcatchFinally be FUNCCreateBuiltinFunction(VARstepsCatchFinally, « [[VARConstructor]], [[VAROnFinally]] »). 
*1*Set VARcatchFinally.[[VARConstructor]] to VARC. 
*1*Set VARcatchFinally.[[VAROnFinally]] to VARonFinally. 
*0*Return ? FUNCInvoke(VARpromise, "then", « VARthenFinally, VARcatchFinally »).     

#############  END  ## 694 ###########################
############# BEGIN ## 695 ###########################
ID= 25.6.5.4
Summary= Promise.prototype.then ( onFulfilled, onRejected )
Description= When the then method is called with arguments onFulfilled and onRejected, the following steps are taken:
*0*Let VARpromise be the this value. 
*0*If FUNCIsPromise(VARpromise) is false, throw a TypeError exception. 
*0*Let VARC be ? FUNCSpeciesConstructor(VARpromise, %Promise%). 
*0*Let VARresultCapability be ? FUNCNewPromiseCapability(VARC). 
*0*Return FUNCPerformPromiseThen(VARpromise, VARonFulfilled, VARonRejected, VARresultCapability).     

#############  END  ## 695 ###########################
############# BEGIN ## 696 ###########################
ID= 25.6.5.4.1
Summary= PerformPromiseThen ( promise, onFulfilled, onRejected, resultCapability )
Description= The abstract operation PerformPromiseThen performs the “then” operation on promise using onFulfilled and onRejected as its settlement actions. The result is resultCapability's promise.
*0*Assert: FUNCIsPromise(VARpromise) is true. 
*0*Assert: VARresultCapability is a PromiseCapability Record. 
*0*If FUNCIsCallable(VARonFulfilled) is false, then
*1*Set VARonFulfilled to undefined. 
*0*If FUNCIsCallable(VARonRejected) is false, then
*1*Set VARonRejected to undefined. 
*0*Let VARfulfillReaction be the PromiseReaction { [[VARCapability]]: VARresultCapability, [[VARType]]: "Fulfill", [[VARHandler]]: VARonFulfilled }. 
*0*Let VARrejectReaction be the PromiseReaction { [[VARCapability]]: VARresultCapability, [[VARType]]: "Reject", [[VARHandler]]: VARonRejected }. 
*0*If VARpromise.[[VARPromiseState]] is "pending", then
*1*Append VARfulfillReaction as the last element of the List that is VARpromise.[[VARPromiseFulfillReactions]]. 
*1*Append VARrejectReaction as the last element of the List that is VARpromise.[[VARPromiseRejectReactions]]. 
*0*Else if VARpromise.[[VARPromiseState]] is "fulfilled", then
*1*Let VARvalue be VARpromise.[[VARPromiseResult]]. 
*1*Perform FUNCEnqueueJob("PromiseJobs", PromiseReactionJob, « VARfulfillReaction, VARvalue »). 
*0*Else,
*1*Assert: The value of VARpromise.[[VARPromiseState]] is "rejected". 
*1*Let VARreason be VARpromise.[[VARPromiseResult]]. 
*1*If VARpromise.[[VARPromiseIsHandled]] is false, perform FUNCHostPromiseRejectionTracker(VARpromise, "handle"). 
*1*Perform FUNCEnqueueJob("PromiseJobs", PromiseReactionJob, « VARrejectReaction, VARreason »). 
*0*Set VARpromise.[[VARPromiseIsHandled]] to true. 
*0*Return VARresultCapability.[[VARPromise]].      

#############  END  ## 696 ###########################
############# BEGIN ## 697 ###########################
ID= 25.7.1.1
Summary= AsyncFunction ( p1, p2, … , pn, body )
Description= The last argument specifies the body (executable code) of an async function. Any preceding arguments specify formal parameters.
*0*Let VARC be the active function object. 
*0*Let VARargs be the VARargumentsList that was passed to this function by [[VARCall]] or [[VARConstruct]]. 
*0*Return FUNCCreateDynamicFunction(VARC, NewTarget, "async", VARargs).     

#############  END  ## 697 ###########################
############# BEGIN ## 698 ###########################
ID= 25.7.5.1
Summary= AsyncFunctionStart ( promiseCapability, asyncFunctionBody )
Description= None
*0*Let VARrunningContext be the running execution context. 
*0*Let VARasyncContext be a copy of VARrunningContext. 
*0*Set the code evaluation state of VARasyncContext such that when evaluation is resumed for that execution context the following steps will be performed:
*1*Let VARresult be the result of evaluating VARasyncFunctionBody. 
*1*Assert: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done. 
*1*Remove VARasyncContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context. 
*1*If VARresult.[[VARType]] is normal, then
*2*Perform ! FUNCCall(VARpromiseCapability.[[VARResolve]], undefined, « undefined »). 
*1*Else if VARresult.[[VARType]] is return, then
*2*Perform ! FUNCCall(VARpromiseCapability.[[VARResolve]], undefined, « VARresult.[[VARValue]] »). 
*1*Else,
*2*Assert: VARresult.[[VARType]] is throw. 
*2*Perform ! FUNCCall(VARpromiseCapability.[[VARReject]], undefined, « VARresult.[[VARValue]] »). 
*1*Return. 
*0*Push VARasyncContext onto the execution context stack; VARasyncContext is now the running execution context. 
*0*Resume the suspended evaluation of VARasyncContext. Let VARresult be the value returned by the resumed computation. 
*0*Assert: When we return here, VARasyncContext has already been removed from the execution context stack and VARrunningContext is the currently running execution context. 
*0*Assert: VARresult is a normal completion with a value of undefined. The possible sources of completion values are Await or, if the async function doesn't await anything, the step 3.g above. 
*0*Return.     

#############  END  ## 698 ###########################
############# BEGIN ## 699 ###########################
ID= 26.1.1
Summary= Reflect.apply ( target, thisArgument, argumentsList )
Description= When the apply function is called with arguments target, thisArgument, and argumentsList, the following steps are taken:
*0*If FUNCIsCallable(VARtarget) is false, throw a TypeError exception. 
*0*Let VARargs be ? FUNCCreateListFromArrayLike(VARargumentsList). 
*0*Perform FUNCPrepareForTailCall(). 
*0*Return ? FUNCCall(VARtarget, VARthisArgument, VARargs).    

#############  END  ## 699 ###########################
############# BEGIN ## 700 ###########################
ID= 26.1.2
Summary= Reflect.construct ( target, argumentsList [ , newTarget ] )
Description= When the construct function is called with arguments target, argumentsList, and newTarget, the following steps are taken:
*0*If FUNCIsConstructor(VARtarget) is false, throw a TypeError exception. 
*0*If VARnewTarget is not present, then
*1*Let VARnewTarget be VARtarget. 
*0*Else,
*1*if FUNCIsConstructor(VARnewTarget) is false, throw a TypeError exception.
*0*Let VARargs be ? FUNCCreateListFromArrayLike(VARargumentsList). 
*0*Return ? FUNCConstruct(VARtarget, VARargs, VARnewTarget).    

#############  END  ## 700 ###########################
############# BEGIN ## 701 ###########################
ID= 26.1.3
Summary= Reflect.defineProperty ( target, propertyKey, attributes )
Description= When the defineProperty function is called with arguments target, propertyKey, and attributes, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Let VARkey be ? FUNCToPropertyKey(VARpropertyKey). 
*0*Let VARdesc be ? FUNCToPropertyDescriptor(VARattributes). 
*0*Return ? VARtarget.[[VARDefineOwnProperty]](VARkey, VARdesc).    

#############  END  ## 701 ###########################
############# BEGIN ## 702 ###########################
ID= 26.1.4
Summary= Reflect.deleteProperty ( target, propertyKey )
Description= When the deleteProperty function is called with arguments target and propertyKey, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Let VARkey be ? FUNCToPropertyKey(VARpropertyKey). 
*0*Return ? VARtarget.[[VARDelete]](VARkey).    

#############  END  ## 702 ###########################
############# BEGIN ## 703 ###########################
ID= 26.1.5
Summary= Reflect.get ( target, propertyKey [ , receiver ] )
Description= When the get function is called with arguments target, propertyKey, and receiver, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Let VARkey be ? FUNCToPropertyKey(VARpropertyKey). 
*0*If VARreceiver is not present, then
*1*Let VARreceiver be VARtarget. 
*0*Return ? VARtarget.[[VARGet]](VARkey, VARreceiver).    

#############  END  ## 703 ###########################
############# BEGIN ## 704 ###########################
ID= 26.1.6
Summary= Reflect.getOwnPropertyDescriptor ( target, propertyKey )
Description= When the getOwnPropertyDescriptor function is called with arguments target and propertyKey, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Let VARkey be ? FUNCToPropertyKey(VARpropertyKey). 
*0*Let VARdesc be ? VARtarget.[[VARGetOwnProperty]](VARkey). 
*0*Return FUNCFromPropertyDescriptor(VARdesc).    

#############  END  ## 704 ###########################
############# BEGIN ## 705 ###########################
ID= 26.1.7
Summary= Reflect.getPrototypeOf ( target )
Description= When the getPrototypeOf function is called with argument target, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Return ? VARtarget.[[VARGetPrototypeOf]]().    

#############  END  ## 705 ###########################
############# BEGIN ## 706 ###########################
ID= 26.1.8
Summary= Reflect.has ( target, propertyKey )
Description= When the has function is called with arguments target and propertyKey, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Let VARkey be ? FUNCToPropertyKey(VARpropertyKey). 
*0*Return ? VARtarget.[[VARHasProperty]](VARkey).    

#############  END  ## 706 ###########################
############# BEGIN ## 707 ###########################
ID= 26.1.9
Summary= Reflect.isExtensible ( target )
Description= When the isExtensible function is called with argument target, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Return ? VARtarget.[[VARIsExtensible]]().    

#############  END  ## 707 ###########################
############# BEGIN ## 708 ###########################
ID= 26.1.10
Summary= Reflect.ownKeys ( target )
Description= When the ownKeys function is called with argument target, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Let VARkeys be ? VARtarget.[[VAROwnPropertyKeys]](). 
*0*Return FUNCCreateArrayFromList(VARkeys).    

#############  END  ## 708 ###########################
############# BEGIN ## 709 ###########################
ID= 26.1.11
Summary= Reflect.preventExtensions ( target )
Description= When the preventExtensions function is called with argument target, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Return ? VARtarget.[[VARPreventExtensions]]().    

#############  END  ## 709 ###########################
############# BEGIN ## 710 ###########################
ID= 26.1.12
Summary= Reflect.set ( target, propertyKey, V [ , receiver ] )
Description= When the set function is called with arguments target, V, propertyKey, and receiver, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*Let VARkey be ? FUNCToPropertyKey(VARpropertyKey). 
*0*If VARreceiver is not present, then
*1*Let VARreceiver be VARtarget. 
*0*Return ? VARtarget.[[VARSet]](VARkey, VARV, VARreceiver).    

#############  END  ## 710 ###########################
############# BEGIN ## 711 ###########################
ID= 26.1.13
Summary= Reflect.setPrototypeOf ( target, proto )
Description= When the setPrototypeOf function is called with arguments target and proto, the following steps are taken:
*0*If FUNCType(VARtarget) is not Object, throw a TypeError exception. 
*0*If FUNCType(VARproto) is not Object and VARproto is not null, throw a TypeError exception. 
*0*Return ? VARtarget.[[VARSetPrototypeOf]](VARproto).    

#############  END  ## 711 ###########################
############# BEGIN ## 712 ###########################
ID= 26.2.1.1
Summary= Proxy ( target, handler )
Description= When Proxy is called with arguments target and handler performs the following steps:
*0*If NewTarget is undefined, throw a TypeError exception. 
*0*Return ? FUNCProxyCreate(VARtarget, VARhandler).     

#############  END  ## 712 ###########################
############# BEGIN ## 713 ###########################
ID= 26.2.2.1
Summary= Proxy.revocable ( target, handler )
Description= The Proxy.revocable function is used to create a revocable Proxy object. When Proxy.revocable is called with arguments target and handler, the following steps are taken:
*0*Let VARp be ? FUNCProxyCreate(VARtarget, VARhandler). 
*0*Let VARsteps be the algorithm steps defined in Proxy Revocation Functions. 
*0*Let VARrevoker be FUNCCreateBuiltinFunction(VARsteps, « [[VARRevocableProxy]] »). 
*0*Set VARrevoker.[[VARRevocableProxy]] to VARp. 
*0*Let VARresult be FUNCObjectCreate(%ObjectPrototype%). 
*0*Perform FUNCCreateDataProperty(VARresult, "proxy", VARp). 
*0*Perform FUNCCreateDataProperty(VARresult, "revoke", VARrevoker). 
*0*Return VARresult.     

#############  END  ## 713 ###########################
############# BEGIN ## 714 ###########################
ID= 27.5.1
Summary= EventSet ( execution )
Description= The abstract operation EventSet takes one argument, a candidate execution execution. It performs the following steps:
*0*Let VARevents be an empty Set. 
*0*For each Agent Events Record VARaer in VARexecution.[[VAREventLists]], do
*1*For each event VARE in VARaer.[[VAREventList]], do
*2*Add VARE to VARevents. 
*0*Return VARevents.    

#############  END  ## 714 ###########################
############# BEGIN ## 715 ###########################
ID= 27.5.2
Summary= SharedDataBlockEventSet ( execution )
Description= The abstract operation SharedDataBlockEventSet takes one argument, a candidate execution execution. It performs the following steps:
*0*Let VARevents be an empty Set. 
*0*For each event VARE in FUNCEventSet(VARexecution), do
*1*If VARE is a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event, add VARE to VARevents. 
*0*Return VARevents.    

#############  END  ## 715 ###########################
############# BEGIN ## 716 ###########################
ID= 27.5.3
Summary= HostEventSet ( execution )
Description= The abstract operation HostEventSet takes one argument, a candidate execution execution. It performs the following steps:
*0*Let VARevents be an empty Set. 
*0*For each event VARE in FUNCEventSet(VARexecution), do
*1*If VARE is not in FUNCSharedDataBlockEventSet(VARexecution), add VARE to VARevents. 
*0*Return VARevents.    

#############  END  ## 716 ###########################
############# BEGIN ## 717 ###########################
ID= 27.5.4
Summary= ComposeWriteEventBytes ( execution, byteIndex, Ws )
Description= The abstract operation ComposeWriteEventBytes takes four arguments, a candidate execution execution, a nonnegative integer byteIndex, and a List Ws of WriteSharedMemory or ReadModifyWriteSharedMemory events. It performs the following steps:
*0*Let VARbyteLocation be VARbyteIndex. 
*0*Let VARbytesRead be a new empty List. 
*0*For each element VARW of VARWs in List order, do
*1*Assert: VARW has VARbyteLocation in its range. 
*1*Let VARpayloadIndex be VARbyteLocation - VARW.[[VARByteIndex]]. 
*1*If VARW is a WriteSharedMemory event, then
*2*Let VARbyte be VARW.[[VARPayload]][VARpayloadIndex]. 
*1*Else,
*2*Assert: VARW is a ReadModifyWriteSharedMemory event. 
*2*Let VARbytes be FUNCValueOfReadEvent(VARexecution, VARW). 
*2*Let VARbytesModified be VARW.[[VARModifyOp]](VARbytes, VARW.[[VARPayload]]). 
*2*Let VARbyte be VARbytesModified[VARpayloadIndex]. 
*1*Append VARbyte to VARbytesRead. 
*1*Increment VARbyteLocation by 1. 
*0*Return VARbytesRead.    

#############  END  ## 717 ###########################
############# BEGIN ## 718 ###########################
ID= 27.5.5
Summary= ValueOfReadEvent ( execution, R )
Description= The abstract operation ValueOfReadEvent takes two arguments, a candidate execution execution and a ReadSharedMemory or ReadModifyWriteSharedMemory event R. It performs the following steps:
*0*Assert: VARR is a ReadSharedMemory or ReadModifyWriteSharedMemory event. 
*0*Let VARWs be VARexecution.[[VARReadsBytesFrom]](VARR). 
*0*Assert: VARWs is a List of WriteSharedMemory or ReadModifyWriteSharedMemory events with length equal to VARR.[[VARElementSize]]. 
*0*Return FUNCComposeWriteEventBytes(VARexecution, VARR.[[VARByteIndex]], VARWs).    

#############  END  ## 718 ###########################
