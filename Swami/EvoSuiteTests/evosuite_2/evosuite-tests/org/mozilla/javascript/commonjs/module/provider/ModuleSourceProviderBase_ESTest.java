/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 02:21:13 GMT 2018
 */

package org.mozilla.javascript.commonjs.module.provider;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.commonjs.module.provider.DefaultUrlConnectionExpiryCalculator;
import org.mozilla.javascript.commonjs.module.provider.ModuleSource;
import org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModuleSourceProviderBase_ESTest extends ModuleSourceProviderBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(nativeArray0, nativeArray0);
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        urlModuleSourceProvider0.loadSource(uRI0, uRI0, objectArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultUrlConnectionExpiryCalculator defaultUrlConnectionExpiryCalculator0 = new DefaultUrlConnectionExpiryCalculator();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider((Iterable<URI>) null, (Iterable<URI>) null);
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      ModuleSource moduleSource0 = urlModuleSourceProvider0.loadSource("", (Scriptable) nativeInt32Array0, (Object) defaultUrlConnectionExpiryCalculator0);
      assertNull(moduleSource0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector<URI> vector0 = new Vector<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(vector0, vector0);
      Context context0 = Context.enter();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(1244);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "y'{;cm<\"{Ht: I|As?";
      Scriptable scriptable0 = context0.newArray((Scriptable) nativeInt32Array0, objectArray0);
      try { 
        urlModuleSourceProvider0.loadSource("y'{;cm<\"{Ht: I|As?", scriptable0, objectArray0[0]);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Illegal character in scheme name at index 1: y'{;cm<\"{Ht: I|As?/
         //
         verifyException("org.mozilla.javascript.commonjs.module.provider.ModuleSourceProviderBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TreeSet<URI> treeSet0 = new TreeSet<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(treeSet0, treeSet0);
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array((-2147483645));
      // Undeclared exception!
      try { 
        urlModuleSourceProvider0.loadSource("docext iOpUkMZt", (Scriptable) nativeFloat32Array0, (Object) nativeFloat32Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 6: docext iOpUkMZt
         //
         verifyException("java.net.URI", e);
      }
  }
}
