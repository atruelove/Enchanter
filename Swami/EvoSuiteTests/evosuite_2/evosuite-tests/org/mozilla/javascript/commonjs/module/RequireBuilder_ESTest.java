/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 02:09:38 GMT 2018
 */

package org.mozilla.javascript.commonjs.module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.net.URI;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.commonjs.module.Require;
import org.mozilla.javascript.commonjs.module.RequireBuilder;
import org.mozilla.javascript.commonjs.module.provider.DefaultUrlConnectionExpiryCalculator;
import org.mozilla.javascript.commonjs.module.provider.SoftCachingModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlConnectionSecurityDomainProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequireBuilder_ESTest extends RequireBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RequireBuilder requireBuilder0 = new RequireBuilder();
      RequireBuilder requireBuilder1 = requireBuilder0.setSandboxed(true);
      assertSame(requireBuilder1, requireBuilder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RequireBuilder requireBuilder0 = new RequireBuilder();
      ArrayList<URI> arrayList0 = new ArrayList<URI>();
      DefaultUrlConnectionExpiryCalculator defaultUrlConnectionExpiryCalculator0 = new DefaultUrlConnectionExpiryCalculator(1L);
      UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider0 = mock(UrlConnectionSecurityDomainProvider.class, new ViolatedAssumptionAnswer());
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(arrayList0, arrayList0, defaultUrlConnectionExpiryCalculator0, urlConnectionSecurityDomainProvider0);
      SoftCachingModuleScriptProvider softCachingModuleScriptProvider0 = new SoftCachingModuleScriptProvider(urlModuleSourceProvider0);
      RequireBuilder requireBuilder1 = requireBuilder0.setModuleScriptProvider(softCachingModuleScriptProvider0);
      assertSame(requireBuilder0, requireBuilder1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RequireBuilder requireBuilder0 = new RequireBuilder();
      Context context0 = Context.getCurrentContext();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      Require require0 = requireBuilder0.createRequire(context0, nativeFloat32Array0);
      assertEquals(0, ScriptableObject.EMPTY);
  }
}
