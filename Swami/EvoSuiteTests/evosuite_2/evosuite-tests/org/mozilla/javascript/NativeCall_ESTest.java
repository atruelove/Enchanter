/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 06:00:23 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.InterpretedFunction;
import org.mozilla.javascript.InterpreterData;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeCall_ESTest extends NativeCall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        nativeCall0.initPrototypeId(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4
         //
         verifyException("org.mozilla.javascript.NativeCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeCall0, 0, 1, 0);
      Synchronizer synchronizer0 = new Synchronizer(idFunctionObject0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        nativeCall0.execIdCall(idFunctionObject0, (Context) null, synchronizer0, synchronizer0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=1 MASTER=org.mozilla.javascript.NativeCall@3
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      InterpreterData interpreterData0 = new InterpreterData(1, "language version", "error reporter", true);
      String[] stringArray0 = new String[7];
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      interpreterData0.argIsConst = booleanArray0;
      interpreterData0.argNames = stringArray0;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createFunction(context0, nativeInt16Array0, interpreterData0, (Object) null);
      NativeCall nativeCall0 = new NativeCall(interpretedFunction0, interpretedFunction0, interpreterData0.argNames, true, false);
      assertFalse(nativeCall0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeUint8Array0, "Call", 0, "error reporter", 1, nativeCall0);
      // Undeclared exception!
      try { 
        nativeCall0.execIdCall(idFunctionObjectES6_0, context0, nativeUint8Array0, idFunctionObjectES6_0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.NativeCall", e);
      }
  }
}
