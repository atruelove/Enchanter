/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 23:46:12 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.DToA;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DToA_ESTest extends DToA_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((long) 9);
      assertNotNull(stringBuilder1);
      assertEquals("9", stringBuilder0.toString());
      assertEquals("9", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      boolean boolean0 = DToA.roundOff(stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = DToA.JS_dtoa(3089.387981342169, 4, false, 8, booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("3089388", stringBuilder0.toString());
      assertEquals(7, booleanArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      DToA.JS_dtostr(stringBuilder0, 3, 3, 3);
      assertEquals("3.00e+0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      DToA.JS_dtostr(stringBuilder0, 2, (-824), 1846.3147671);
      assertEquals("0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = DToA.JS_dtobasestr(9, 17.001279645399354);
      assertNotNull(string0);
      assertEquals("18.000835044755", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = DToA.JS_dtobasestr(15, 0.5);
      assertNotNull(string0);
      assertEquals("0.77777777777777", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = DToA.JS_dtobasestr(14, (-1.0E21));
      assertNotNull(string0);
      assertEquals("-24b20a611509d86c436", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = DToA.JS_dtobasestr(25, (-4839.917843276966));
      assertNotNull(string0);
      assertEquals("-7ie.mng7d676e", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = DToA.JS_dtobasestr(25, 0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        DToA.JS_dtobasestr(2045, 1376.5068);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad base: 2045
         //
         verifyException("org.mozilla.javascript.DToA", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      DToA.JS_dtostr(stringBuilder0, 0, 2, 1283.7009483688719);
      assertEquals("1283.7009483688719", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = DToA.JS_dtoa(4.999999707349887E-4, 16, false, (-3830), booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("4999999707349887", stringBuilder0.toString());
      assertEquals(7, booleanArray0.length);
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean[] booleanArray0 = new boolean[9];
      int int0 = DToA.JS_dtoa(9.223372036854776E18, 806, false, 1, booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("9223372036854776", stringBuilder0.toString());
      assertEquals(9, booleanArray0.length);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      DToA.JS_dtostr(stringBuilder0, 4, 16, 0.5955969789314755);
      assertEquals("0.5955969789314755", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean[] booleanArray0 = new boolean[3];
      int int0 = DToA.JS_dtoa(17.001279645399354, 9, false, (-824), booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals("0", stringBuilder0.toString());
      assertEquals(3, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = DToA.JS_dtoa(1376.5068, 8, true, 8, booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("13765068", stringBuilder0.toString());
      assertEquals(7, booleanArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = DToA.JS_dtoa(4, 4, false, 347, booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("4", stringBuilder0.toString());
      assertEquals(7, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      DToA.JS_dtostr(stringBuilder0, 4, 8, 0.301029995663981);
      assertEquals("0.30103000", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = DToA.JS_dtoa(1.0E19, 4, true, 4, booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("1", stringBuilder0.toString());
      assertEquals(7, booleanArray0.length);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = DToA.JS_dtoa(306, 7, false, (-3), booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("0", stringBuilder0.toString());
      assertEquals(7, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = DToA.JS_dtoa(276, 7, false, (-1), booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("28", stringBuilder0.toString());
      assertEquals(7, booleanArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean[] booleanArray0 = new boolean[9];
      int int0 = DToA.JS_dtoa(999999.4441006087, 1687, false, 0, booleanArray0, stringBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("9999994441006087", stringBuilder0.toString());
      assertEquals(9, booleanArray0.length);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      // Undeclared exception!
      try { 
        DToA.JS_dtoa(2.14574908868E-312, 0, true, 101, booleanArray0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.DToA", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      // Undeclared exception!
      try { 
        DToA.JS_dtoa(2.145749088577E-312, 0, true, 101, booleanArray0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.DToA", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DToA.JS_dtostr(stringBuilder0, 4, 16, 0.0);
      assertEquals("0.000000000000000", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DToA.JS_dtostr(stringBuilder0, 4, (-1031), (-1.0));
      assertEquals("-1e+0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = DToA.JS_dtobasestr(2, 2.145749088577E-312);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      DToA.JS_dtostr(stringBuilder0, 2, 0, 2068.5);
      assertEquals("2069", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DToA dToA0 = new DToA();
  }
}
