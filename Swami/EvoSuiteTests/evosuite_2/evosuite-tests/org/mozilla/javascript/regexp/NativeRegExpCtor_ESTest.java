/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 20:18:43 GMT 2018
 */

package org.mozilla.javascript.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.regexp.NativeRegExpCtor;
import org.mozilla.javascript.regexp.RegExpImpl;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeRegExpCtor_ESTest extends NativeRegExpCtor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      nativeRegExpCtor0.setInstanceIdValue(2, regExpImpl0);
      assertTrue(nativeRegExpCtor0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdValue(10, (Object) null);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdValue(21, "_au)@Kon=0");
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(5, 4);
      assertEquals("Function", nativeRegExpCtor0.getClassName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(26, 508);
      assertEquals("Function", nativeRegExpCtor0.getClassName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      // Undeclared exception!
      try { 
        nativeRegExpCtor0.setInstanceIdAttributes(2, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InternalError: Changing attributes not supported for Function arity property
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(10, 4);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(9, 9);
      assertFalse(nativeRegExpCtor0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(8, 8);
      assertTrue(nativeRegExpCtor0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(6, 100);
      assertFalse(nativeRegExpCtor0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(7, 13);
      assertEquals("function", nativeRegExpCtor0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      Object object0 = nativeRegExpCtor0.getInstanceIdValue(1);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeRegExpCtor0, "leftContext", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000005 is not a function, it is function.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      String string0 = nativeRegExpCtor0.getFunctionName();
      assertEquals("RegExp", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      int int0 = nativeRegExpCtor0.getArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(1);
      boolean boolean0 = nativeRegExpCtor0.has(",(", (Scriptable) nativeArrayBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.enter();
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      Object object0 = nativeRegExpCtor0.call(context0, nativeRegExpCtor0, nativeRegExpCtor0, context0.emptyArgs);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      Object object1 = nativeRegExpCtor0.call(context0, nativeRegExpCtor0, nativeRegExpCtor0, objectArray0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        nativeRegExpCtor0.defineOwnProperties(context0, nativeRegExpCtor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type string
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }
}
