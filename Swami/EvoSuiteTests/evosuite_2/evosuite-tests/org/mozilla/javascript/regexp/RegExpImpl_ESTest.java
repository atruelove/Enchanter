/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 20:13:01 GMT 2018
 */

package org.mozilla.javascript.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeFunction;
import org.mozilla.javascript.NativeGenerator;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.regexp.NativeRegExp;
import org.mozilla.javascript.regexp.RegExpImpl;
import org.mozilla.javascript.regexp.SubString;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegExpImpl_ESTest extends RegExpImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 18);
      NativeRegExp nativeRegExp0 = (NativeRegExp)regExpImpl0.wrapRegExp(context0, nativeFloat64Array0, (Object) null);
      assertTrue(nativeRegExp0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      SubString[] subStringArray0 = new SubString[7];
      SubString subString0 = new SubString("language version", (-4), 2318);
      subStringArray0[2] = subString0;
      regExpImpl0.parens = subStringArray0;
      SubString subString1 = regExpImpl0.getParenSubString(2);
      assertNotNull(subString1);
      assertSame(subString1, subString0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      SubString[] subStringArray0 = new SubString[10];
      regExpImpl0.parens = subStringArray0;
      SubString subString0 = regExpImpl0.getParenSubString(4);
      assertEquals("", subString0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = (NativeArray)regExpImpl0.js_split(context0, nativeContinuation0, "language version", objectArray0);
      NativeArray nativeArray1 = (NativeArray)regExpImpl0.js_split(context0, nativeArray0, "", objectArray0);
      assertEquals(1L, nativeArray0.jsGet_length());
      assertEquals(1L, nativeArray1.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.getCurrentContext();
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeGenerator nativeGenerator0 = new NativeGenerator(nativeRegExp0, (NativeFunction) null, nativeContinuation0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeRegExp0;
      // Undeclared exception!
      try { 
        regExpImpl0.js_split(context0, nativeGenerator0, "error reporter", objectArray0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) nativeRegExp0, false);
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object object0 = regExpImpl0.action(context0, nativeArray0, scriptableObject0, objectArray0, 3);
      Object[] objectArray1 = new Object[6];
      objectArray1[1] = object0;
      NativeArray nativeArray1 = (NativeArray)regExpImpl0.js_split(context0, nativeRegExp0, "org.mozilla.javascript.regexp.RegExpImpl", objectArray1);
      assertEquals(1L, nativeArray1.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      Object object0 = regExpImpl0.compileRegExp(context0, "", (String) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        regExpImpl0.action(context0, importerTopLevel0, (Scriptable) null, context0.emptyArgs, 4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) nativeRegExp0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) scriptableObject0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        regExpImpl0.action(context0, nativeArray0, scriptableObject0, objectArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }
}
