/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 00:56:14 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeInt8Array_ESTest extends NativeInt8Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      Byte byte0 = new Byte((byte) (-24));
      // Undeclared exception!
      try { 
        nativeInt8Array0.set((-2230), byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeInt8Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(0);
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeInt8Array0, context0, 180, "language version", 0, nativeArray0);
      // Undeclared exception!
      try { 
        nativeInt8Array0.realThis(nativeArray0, idFunctionObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"language version\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(2538);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      Object object0 = nativeInt8Array0.js_set((-2034), nativeArrayBuffer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(2538);
      Object object0 = nativeInt8Array0.js_get(2538);
      Object object1 = nativeInt8Array0.js_set(8, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        NativeInt8Array.init(context0, nativeInt8Array0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(184);
      // Undeclared exception!
      try { 
        nativeInt8Array0.exportAsJSClass(1, nativeInt8Array0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(184);
      Byte byte0 = nativeInt8Array0.get(1);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(2538);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      NativeTypedArrayView nativeTypedArrayView0 = nativeInt8Array0.construct(nativeArrayBuffer0, 993, 2);
      assertEquals(993, nativeTypedArrayView0.getByteOffset());
      assertEquals(2, nativeTypedArrayView0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(44);
      Byte byte0 = nativeInt8Array0.set(0, (Byte) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      // Undeclared exception!
      try { 
        nativeInt8Array0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeInt8Array", e);
      }
  }
}
