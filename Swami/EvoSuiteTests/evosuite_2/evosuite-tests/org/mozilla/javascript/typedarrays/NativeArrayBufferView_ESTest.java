/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 01:14:06 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeArrayBufferView;
import org.mozilla.javascript.typedarrays.NativeDataView;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeArrayBufferView_ESTest extends NativeArrayBufferView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Context context0 = Context.enter();
      boolean boolean0 = NativeArrayBufferView.isArg(context0.emptyArgs, 9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeDataView nativeDataView0 = new NativeDataView();
      // Undeclared exception!
      try { 
        nativeDataView0.getInstanceIdValue(4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.defineOwnProperties(context0, nativeFloat32Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray((NativeArrayBuffer) null, 120, 0);
      int int0 = nativeUint8ClampedArray0.getByteOffset();
      assertEquals(0, nativeUint8ClampedArray0.getByteLength());
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, (-1463), 1);
      int int0 = nativeInt8Array0.getByteLength();
      assertEquals(1, int0);
      assertEquals((-1463), nativeInt8Array0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      nativeUint16Array0.getBuffer();
      assertEquals(0, nativeUint16Array0.getByteOffset());
      assertEquals(0, nativeUint16Array0.getByteLength());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeDataView nativeDataView0 = new NativeDataView();
      NativeArrayBuffer nativeArrayBuffer0 = (NativeArrayBuffer)nativeDataView0.getInstanceIdValue(1);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.defineOwnProperties(context0, nativeDataView0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type number
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(13);
      Object object0 = nativeUint8ClampedArray0.getInstanceIdValue(2);
      assertEquals(0, object0);
      assertEquals(13, nativeUint8ClampedArray0.getByteLength());
  }
}
