/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 01:15:04 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeUint32Array_ESTest extends NativeUint32Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 931, 13);
      Long long0 = new Long(1431655764L);
      // Undeclared exception!
      try { 
        nativeUint32Array0.set(0, long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(0);
      Long long0 = new Long(0);
      // Undeclared exception!
      try { 
        nativeUint32Array0.set(8, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint32Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(467);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 0, 467);
      Scriptable scriptable0 = context0.newObject((Scriptable) importerTopLevel0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, (Object) null, 0, "language version", 18, scriptable0);
      // Undeclared exception!
      try { 
        nativeUint32Array0.realThis(nativeArrayBuffer0, idFunctionObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"language version\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(0);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeTypedArrayView nativeTypedArrayView0 = nativeUint32Array0.construct(nativeArrayBuffer0, 4, (-1235));
      NativeTypedArrayView nativeTypedArrayView1 = nativeUint32Array0.realThis(nativeTypedArrayView0, (IdFunctionObject) null);
      assertEquals((-1235), nativeTypedArrayView1.getArrayLength());
      assertEquals(4, nativeTypedArrayView1.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(0);
      Object object0 = nativeUint32Array0.js_get(1426);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(2893);
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      nativeUint32Array0.replaceAll(unaryOperator0);
      assertEquals(2893, nativeUint32Array0.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(0);
      // Undeclared exception!
      try { 
        nativeUint32Array0.get((-14));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint32Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      Object object0 = nativeUint32Array0.js_set(0, "Uint32Array");
      assertNotNull(object0);
  }
}
