/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 01:14:30 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeUint8Array_ESTest extends NativeUint8Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      // Undeclared exception!
      try { 
        nativeUint8Array0.set(100, (Integer) 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint8Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 4, 0);
      // Undeclared exception!
      try { 
        nativeUint8Array0.realThis(nativeArrayBuffer0, (IdFunctionObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      NativeTypedArrayView nativeTypedArrayView0 = nativeUint8Array0.realThis(nativeUint8Array0, (IdFunctionObject) null);
      assertFalse(nativeTypedArrayView0.isSealed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(906);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 13, 906);
      Integer integer0 = nativeUint8Array0.set(0, (Integer) 13);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 1, (-479));
      Object object0 = nativeUint8Array0.js_set(4, nativeUint8Array0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 0, 4);
      Object object0 = nativeUint8Array0.js_get(4);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(906);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 13, 906);
      // Undeclared exception!
      try { 
        NativeUint8Array.init((Context) null, nativeUint8Array0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 0, 4);
      // Undeclared exception!
      try { 
        nativeUint8Array0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.typedarrays.ByteIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      // Undeclared exception!
      try { 
        nativeUint8Array0.get(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint8Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(1036);
      assertFalse(nativeUint8Array0.isSealed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeTypedArrayView nativeTypedArrayView0 = nativeUint8Array0.construct(nativeArrayBuffer0, 13, 8);
      assertEquals(13, nativeTypedArrayView0.getByteOffset());
      assertEquals(8, nativeTypedArrayView0.getByteLength());
  }
}
