/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 08:05:33 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.EcmaError;
import org.mozilla.javascript.EvaluatorException;
import org.mozilla.javascript.JavaScriptException;
import org.mozilla.javascript.RhinoException;
import org.mozilla.javascript.ScriptStackElement;
import org.mozilla.javascript.StackStyle;
import org.mozilla.javascript.WrappedException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RhinoException_ESTest extends RhinoException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = RhinoException.usesMozillaStackStyle();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RhinoException.useMozillaStackStyle(true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportRuntimeError("KEs|wRc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // KEs|wRc
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      JavaScriptException javaScriptException0 = new JavaScriptException(object0, "QPS5", (-1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("org.mozilla.javascript.RhinoException$1");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      evaluatorException0.interpreterStackInfo = (Object) pipedOutputStream0;
      // Undeclared exception!
      try { 
        evaluatorException0.printStackTrace((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.PipedOutputStream cannot be cast to [Lorg.mozilla.javascript.Interpreter$CallFrame;
         //
         verifyException("org.mozilla.javascript.Interpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("org.mozilla.javascript.RhinoException$1");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      evaluatorException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals(StackStyle.RHINO, evaluatorException0.getStackStyle());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("e", "e", "e", 114, "e", 114);
      WrappedException wrappedException0 = new WrappedException(ecmaError0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("e");
      wrappedException0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals(114, ecmaError0.getColumnNumber());
      assertEquals(114, ecmaError0.lineNumber());
      assertEquals(114, ecmaError0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("", "", 1, (String) null, 1);
      evaluatorException0.lineSource();
      assertEquals(1, evaluatorException0.getColumnNumber());
      assertEquals(1, evaluatorException0.lineNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("\f", "", "", '}', "", '}');
      int int0 = ecmaError0.lineNumber();
      assertEquals(125, int0);
      assertEquals(125, ecmaError0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackStyle stackStyle0 = RhinoException.getStackStyle();
      assertEquals(StackStyle.RHINO, stackStyle0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportRuntimeError("mv~XGC*^KrGxW.java");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // mv~XGC*^KrGxW.java
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      WrappedException wrappedException0 = new WrappedException(mockThrowable0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("r", "r", "r", 263);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("r", "_c_yVrit_0", "_c_yVrit_0", 263);
      stackTraceElementArray0[4] = stackTraceElement1;
      stackTraceElementArray0[5] = stackTraceElement0;
      wrappedException0.setStackTrace(stackTraceElementArray0);
      ScriptStackElement[] scriptStackElementArray0 = wrappedException0.getScriptStack(263, "Rhino");
      assertEquals(0, scriptStackElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("(I)C");
      evaluatorException0.interpreterStackInfo = (Object) "(I)C";
      // Undeclared exception!
      try { 
        evaluatorException0.getScriptStackTrace(463, "(I)C");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to [Lorg.mozilla.javascript.Interpreter$CallFrame;
         //
         verifyException("org.mozilla.javascript.Interpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      WrappedException wrappedException0 = new WrappedException(mockThrowable0);
      ScriptStackElement[] scriptStackElementArray0 = wrappedException0.getScriptStack();
      assertEquals(0, scriptStackElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("\f", "", "", '}', "", '}');
      String string0 = ecmaError0.getMessage();
      assertEquals("\f:  (#125)", string0);
      assertEquals(125, ecmaError0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("zex9mG8M6Q-do[r");
      String string0 = evaluatorException0.getMessage();
      assertEquals("zex9mG8M6Q-do[r", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScriptStackElement[] scriptStackElementArray0 = new ScriptStackElement[2];
      // Undeclared exception!
      try { 
        RhinoException.formatStackTrace(scriptStackElementArray0, "rID^%s>t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackStyle stackStyle0 = StackStyle.V8;
      RhinoException.setStackStyle(stackStyle0);
      ScriptStackElement[] scriptStackElementArray0 = new ScriptStackElement[9];
      ScriptStackElement scriptStackElement0 = new ScriptStackElement("Rhino", "", 1101);
      scriptStackElementArray0[0] = scriptStackElement0;
      // Undeclared exception!
      try { 
        RhinoException.formatStackTrace(scriptStackElementArray0, "sun.reflect.GeneraedConstructorAccessor47.java.java");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StackStyle stackStyle0 = StackStyle.MOZILLA;
      RhinoException.setStackStyle(stackStyle0);
      EvaluatorException evaluatorException0 = new EvaluatorException("zex9mG8M6Q-do[r");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("zex9mG8M6Q-do[r", "zex9mG8M6Q-do[r", "zex9mG8M6Q-do[r", 145);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("_c_runtimeErro", "_c_runtimeErro", "zex9mG8M6Q-do[r", 145);
      stackTraceElementArray0[5] = stackTraceElement1;
      stackTraceElementArray0[6] = stackTraceElement0;
      stackTraceElementArray0[7] = stackTraceElement0;
      evaluatorException0.setStackTrace(stackTraceElementArray0);
      String string0 = evaluatorException0.getScriptStackTrace();
      assertEquals("@zex9mG8M6Q-do[r:145\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportRuntimeError("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("'w2d*Mzd ", "'w2d*Mzd ", "'w2d*Mzd ", 170, "'w2d*Mzd ", 170);
      WrappedException wrappedException0 = new WrappedException(ecmaError0);
      Float float0 = new Float((double) 170);
      wrappedException0.interpreterStackInfo = (Object) float0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("'w2d*Mzd ");
      // Undeclared exception!
      try { 
        wrappedException0.printStackTrace((PrintStream) mockPrintStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to [Lorg.mozilla.javascript.Interpreter$CallFrame;
         //
         verifyException("org.mozilla.javascript.Interpreter", e);
      }
  }
}
