/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 21:20:29 GMT 2018
 */

package org.mozilla.javascript.tools.shell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.WrapFactory;
import org.mozilla.javascript.commonjs.module.Require;
import org.mozilla.javascript.tools.shell.Global;
import org.mozilla.javascript.tools.shell.QuitAction;
import org.mozilla.javascript.tools.shell.ShellContextFactory;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Global_ESTest extends Global_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShellContextFactory shellContextFactory0 = new ShellContextFactory();
      Context context0 = shellContextFactory0.enterContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2904);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, (-1505), 0);
      // Undeclared exception!
      try { 
        Global.write(context0, nativeUint32Array0, context0.emptyArgs, (Function) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = Context.enter();
      Object[] objectArray0 = new Object[4];
      double double0 = Global.version(context0, (Scriptable) null, objectArray0, (Function) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.enter();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(1835);
      BaseFunction baseFunction0 = new BaseFunction();
      double double0 = Global.version(context0, nativeUint32Array0, context0.emptyArgs, baseFunction0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = Global.toint32((Context) null, (Scriptable) null, objectArray0, (Function) null);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        Global.sync(context0, global0, context0.emptyArgs, delegator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.sync.args
         //
         verifyException("org.mozilla.javascript.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Global global0 = new Global();
      global0.setSealedStdLib(false);
      assertFalse(global0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShellContextFactory shellContextFactory0 = new ShellContextFactory();
      Context context0 = shellContextFactory0.enterContext();
      Global global0 = new Global(context0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      global0.setIn(pipedInputStream0);
      assertEquals("global", global0.getClassName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Global global0 = new Global();
      // Undeclared exception!
      try { 
        Global.serialize((Context) null, global0, objectArray0, (Function) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object for excluded name Object not found.
         //
         verifyException("org.mozilla.javascript.serialize.ScriptableOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      // Undeclared exception!
      try { 
        Global.serialize(context0, nativeArrayBuffer0, context0.emptyArgs, (Function) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected an object to serialize and a filename to write the serialization to
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(nativeArrayBuffer0, 1, 8);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) nativeArrayBuffer0;
      objectArray0[1] = (Object) nativeArrayBuffer0;
      BaseFunction baseFunction0 = new BaseFunction(nativeFloat32Array0, nativeArrayBuffer0);
      Global.seal((Context) null, nativeFloat32Array0, objectArray0, baseFunction0);
      assertFalse(nativeFloat32Array0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Global global0 = new Global();
      Object[] objectArray0 = new Object[9];
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        Global.seal((Context) null, global0, objectArray0, delegator0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // seal function can only be applied to objects
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 160, 12);
      Global global0 = new Global(context0);
      int int0 = global0.runDoctest(context0, nativeInt32Array0, "language version", "+", 1975);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      // Undeclared exception!
      try { 
        global0.runDoctest(context0, global0, "js>1 HeK9q3E", "language version", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // doctest failure running:
         // 1 HeK9q3E
         // expected: actual: js: \"doctest input\", line 1: missing ; before statement
         // js: 1 HeK9q3E
         // js: ........^
         // js: \"doctest input\", line 1: Compilation produced 1 syntax errors.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      NativeArray nativeArray0 = new NativeArray(0L);
      Require require0 = global0.installRequire(context0, nativeArray0, false);
      // Undeclared exception!
      try { 
        Global.runCommand(context0, nativeArray0, context0.emptyArgs, require0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The first argument to runCommand must be a command name.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(global0, class0, false);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Global.readline(context0, nativeJavaClass0, objectArray0, nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(global0, class0, false);
      // Undeclared exception!
      try { 
        Global.readline(context0, nativeJavaClass0, context0.emptyArgs, nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShellContextFactory shellContextFactory0 = new ShellContextFactory();
      Context context0 = shellContextFactory0.enterContext();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(75);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeUint8ClampedArray0, (Object) null, 16, "msg.null.to.object", 8, nativeUint8ClampedArray0);
      // Undeclared exception!
      try { 
        Global.readUrl(context0, nativeUint8ClampedArray0, context0.emptyArgs, idFunctionObjectES6_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // readUrl require at least file path to be specified
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      Object[] objectArray0 = new Object[6];
      Object object0 = ScriptableObject.getProperty((Scriptable) global0, 0);
      objectArray0[0] = object0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.mozilla.javascript.UniqueTag@0000000011");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "language version");
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array((NativeArrayBuffer) null, 4, 2);
      BaseFunction baseFunction0 = new BaseFunction(nativeInt32Array0, nativeInt32Array0);
      try { 
        Global.readFile(context0, global0, objectArray0, baseFunction0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ShellContextFactory shellContextFactory0 = new ShellContextFactory();
      Context context0 = shellContextFactory0.enterContext();
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      Synchronizer synchronizer0 = new Synchronizer(nativeArrayBuffer0, wrapFactory0);
      try { 
        Global.readUrl((Context) null, synchronizer0, objectArray0, synchronizer0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: null
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      Object[] objectArray0 = new Object[6];
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array((NativeArrayBuffer) null, 4, 2);
      BaseFunction baseFunction0 = new BaseFunction(nativeInt32Array0, nativeInt32Array0);
      try { 
        Global.readFile(context0, global0, objectArray0, baseFunction0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File not found: null
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array((NativeArrayBuffer) null, 4, 2);
      BaseFunction baseFunction0 = new BaseFunction(nativeInt32Array0, nativeInt32Array0);
      // Undeclared exception!
      try { 
        Global.readFile(context0, global0, context0.emptyArgs, baseFunction0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // readFile require at least file path to be specified
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(global0, class0, false);
      Global.quit(context0, global0, context0.emptyArgs, nativeJavaClass0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("error reporter", false);
      // Undeclared exception!
      try { 
        Global.pipe(false, (InputStream) null, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Global global0 = new Global();
      InputStream inputStream0 = global0.getIn();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 4526);
      try { 
        Global.pipe(false, sequenceInputStream0, bufferedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated exception in System.in
         //
         verifyException("org.evosuite.runtime.util.SystemInUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Global.pipe(true, pipedInputStream0, pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Global global0 = new Global();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PrintStream printStream0 = global0.getOut();
      Global.pipe(true, byteArrayInputStream0, printStream0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        Global.loadClass(context0, baseFunction0, context0.emptyArgs, baseFunction0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Expected a string argument.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Global.load((Context) null, nativeObject0, objectArray0, (Function) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Couldn't read source file \"null\": null.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Global global0 = new Global();
      boolean boolean0 = global0.isInitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Context context0 = Context.enter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("error reporter");
      Global global0 = new Global(context0);
      // Undeclared exception!
      try { 
        global0.installRequire(context0, linkedList0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 5: error reporter
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Global global0 = new Global();
      // Undeclared exception!
      try { 
        global0.initQuitAction((QuitAction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // quitAction is null
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Global global0 = new Global();
      QuitAction quitAction0 = mock(QuitAction.class, new ViolatedAssumptionAnswer());
      global0.initQuitAction(quitAction0);
      QuitAction quitAction1 = mock(QuitAction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        global0.initQuitAction(quitAction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method is once-call.
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Global global0 = new Global();
      ContextFactory contextFactory0 = new ContextFactory();
      global0.init(contextFactory0);
      assertFalse(global0.isSealed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext((Context) null);
      Global global0 = new Global(context0);
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      Global global1 = new Global();
      IdFunctionObject idFunctionObject0 = global1.exportAsJSClass(17, global0, false);
      Global.help(context0, scriptableObject0, context0.emptyArgs, idFunctionObject0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      Object object0 = Global.doctest(context0, global0, context0.emptyArgs, (Function) null);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ShellContextFactory shellContextFactory0 = new ShellContextFactory();
      Context context0 = shellContextFactory0.enterContext();
      Global global0 = new Global(context0);
      // Undeclared exception!
      try { 
        Global.deserialize((Context) null, global0, context0.emptyArgs, (Function) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a filename to read the serialization from
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(global0, class0, false);
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      Object object0 = Global.print(context0, nativeUint16Array0, context0.emptyArgs, nativeJavaClass0);
      assertNotNull(object0);
  }
}
