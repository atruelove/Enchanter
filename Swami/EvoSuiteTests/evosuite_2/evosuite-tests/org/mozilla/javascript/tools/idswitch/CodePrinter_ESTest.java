/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 23:13:11 GMT 2018
 */

package org.mozilla.javascript.tools.idswitch;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.idswitch.CodePrinter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodePrinter_ESTest extends CodePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      assertEquals("\n", codePrinter0.getLineTerminator());
      
      codePrinter0.setLineTerminator("");
      assertEquals(4, codePrinter0.getIndentStep());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.qstring("(\"Vl\u0002Iclj0$");
      assertEquals(34, codePrinter0.getLastChar());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.qchar(4116);
      String string0 = codePrinter0.toString();
      codePrinter0.qstring(string0);
      assertEquals(34, codePrinter0.getLastChar());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.qchar(13);
      assertEquals(39, codePrinter0.getLastChar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.qchar(12);
      assertEquals(39, codePrinter0.getLastChar());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.indent(4116);
      String string0 = codePrinter0.toString();
      codePrinter0.qstring(string0);
      assertEquals(6176, codePrinter0.getOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.qchar(8);
      assertEquals(39, codePrinter0.getLastChar());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      char[] charArray0 = new char[5];
      codePrinter0.p(charArray0);
      assertEquals(0, codePrinter0.getLastChar());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.p(8);
      assertEquals(1, codePrinter0.getOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.setIndentTabSize(0);
      codePrinter0.line(0, "(\"Vl\u0002Iclj0$");
      assertEquals(0, codePrinter0.getIndentTabSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      int int0 = codePrinter0.getOffset();
      assertEquals("\n", codePrinter0.getLineTerminator());
      assertEquals(8, codePrinter0.getIndentTabSize());
      assertEquals(4, codePrinter0.getIndentStep());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      String string0 = codePrinter0.getLineTerminator();
      assertEquals(4, codePrinter0.getIndentStep());
      assertEquals(8, codePrinter0.getIndentTabSize());
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      int int0 = codePrinter0.getLastChar();
      assertEquals(8, codePrinter0.getIndentTabSize());
      assertEquals("\n", codePrinter0.getLineTerminator());
      assertEquals((-1), int0);
      assertEquals(4, codePrinter0.getIndentStep());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      int int0 = codePrinter0.getIndentTabSize();
      assertEquals("\n", codePrinter0.getLineTerminator());
      assertEquals(8, int0);
      assertEquals(4, codePrinter0.getIndentStep());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      int int0 = codePrinter0.getIndentStep();
      assertEquals("\n", codePrinter0.getLineTerminator());
      assertEquals(8, codePrinter0.getIndentTabSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.setIndentTabSize(4096);
      codePrinter0.setIndentStep(17);
      codePrinter0.indent(4096);
      codePrinter0.erase(609, 17);
      assertEquals(609, codePrinter0.getOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.setIndentTabSize(4116);
      codePrinter0.line(592, "");
      String string0 = codePrinter0.toString();
      codePrinter0.qstring(string0);
      assertEquals(4116, codePrinter0.getIndentTabSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
      codePrinter0.clear();
      assertEquals(4, codePrinter0.getIndentStep());
      assertEquals(0, codePrinter0.getOffset());
      assertEquals(8, codePrinter0.getIndentTabSize());
      assertEquals("\n", codePrinter0.getLineTerminator());
  }
}
