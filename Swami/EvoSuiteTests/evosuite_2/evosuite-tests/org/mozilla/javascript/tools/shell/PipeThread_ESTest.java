/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 20:42:17 GMT 2018
 */

package org.mozilla.javascript.tools.shell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.shell.PipeThread;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PipeThread_ESTest extends PipeThread_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P2'`iZ] nevGIY6", true);
      PipeThread pipeThread0 = new PipeThread(true, byteArrayInputStream0, mockFileOutputStream0);
      pipeThread0.run();
      assertEquals(0, pipeThread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2993);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      PipeThread pipeThread0 = new PipeThread(false, pipedInputStream0, dataOutputStream0);
      // Undeclared exception!
      try { 
        pipeThread0.run();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.io.IOException: Pipe not connected
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }
}
