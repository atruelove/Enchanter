/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 21:04:15 GMT 2018
 */

package org.mozilla.javascript.tools.shell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.tools.shell.ShellConsole;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShellConsole_ESTest extends ShellConsole_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = ShellConsole.getConsole((InputStream) sequenceInputStream0, (PrintStream) mockPrintStream0, charset0);
      String string0 = shellConsole0.readLine();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = ShellConsole.getConsole((InputStream) sequenceInputStream0, (PrintStream) mockPrintStream0, charset0);
      shellConsole0.println("v)j2y:eHArL.RDM)");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = ShellConsole.getConsole((InputStream) sequenceInputStream0, (PrintStream) mockPrintStream0, charset0);
      shellConsole0.println();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = ShellConsole.getConsole((InputStream) sequenceInputStream0, (PrintStream) mockPrintStream0, charset0);
      shellConsole0.print("Li((L[[M -/");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = ShellConsole.getConsole((InputStream) sequenceInputStream0, (PrintStream) mockPrintStream0, charset0);
      InputStream inputStream0 = shellConsole0.getIn();
      assertSame(sequenceInputStream0, inputStream0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = ShellConsole.getConsole((InputStream) sequenceInputStream0, (PrintStream) mockPrintStream0, charset0);
      shellConsole0.flush();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = ShellConsole.getConsole((Scriptable) null, charset0);
      assertNull(shellConsole0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = ShellConsole.getConsole((InputStream) sequenceInputStream0, (PrintStream) mockPrintStream0, charset0);
      String string0 = shellConsole0.readLine("M{f");
      assertNull(string0);
  }
}
