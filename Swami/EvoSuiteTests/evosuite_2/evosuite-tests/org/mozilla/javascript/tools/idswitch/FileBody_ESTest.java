/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 23:18:19 GMT 2018
 */

package org.mozilla.javascript.tools.idswitch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.idswitch.FileBody;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileBody_ESTest extends FileBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      StringWriter stringWriter0 = new StringWriter();
      fileBody0.writeInitialData(stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      fileBody0.setReplacement(2977, 2977, "&-iFt?!J.}p*^");
      StringWriter stringWriter0 = new StringWriter(2977);
      // Undeclared exception!
      try { 
        fileBody0.writeData(stringWriter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      fileBody0.setReplacement(2, 0, "/9");
      StringWriter stringWriter0 = new StringWriter();
      fileBody0.writeData(stringWriter0);
      assertTrue(fileBody0.wasModified());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      boolean boolean0 = fileBody0.wasModified();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      fileBody0.startLineLoop();
      assertEquals(0, fileBody0.getLineNumber());
      assertEquals(0, fileBody0.getLineEnd());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      fileBody0.setReplacement('\u0017', '\u0000', "b$");
      fileBody0.setReplacement('\u0000', '\u0017', "b$");
      boolean boolean0 = fileBody0.setReplacement('\u0017', 2, "b$");
      assertTrue(fileBody0.wasModified());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      fileBody0.setReplacement(2, 0, "/9");
      fileBody0.setReplacement((-1), 0, "/9");
      boolean boolean0 = fileBody0.setReplacement(0, (-508), "");
      assertTrue(fileBody0.wasModified());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      StringReader stringReader0 = new StringReader("I-t!");
      fileBody0.readData(stringReader0);
      boolean boolean0 = fileBody0.nextLine();
      assertEquals(4, fileBody0.getLineEnd());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      boolean boolean0 = fileBody0.nextLine();
      assertEquals(0, fileBody0.getLineNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      int int0 = fileBody0.getLineNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      int int0 = fileBody0.getLineEnd();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      int int0 = fileBody0.getLineBegin();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      char[] charArray0 = fileBody0.getBuffer();
      assertEquals(16384, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileBody fileBody0 = new FileBody();
      StringReader stringReader0 = new StringReader("I-t!");
      fileBody0.readData(stringReader0);
      boolean boolean0 = fileBody0.setReplacement('\u0000', 4, "I-t!");
      assertFalse(boolean0);
  }
}
