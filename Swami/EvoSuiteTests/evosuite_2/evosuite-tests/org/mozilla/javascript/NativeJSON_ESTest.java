/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 17:05:46 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ArrowFunction;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeBoolean;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.NativeIterator;
import org.mozilla.javascript.NativeJSON;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeNumber;
import org.mozilla.javascript.NativeString;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeJSON_ESTest extends NativeJSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      NativeString nativeString0 = new NativeString("error reporter");
      // Undeclared exception!
      try { 
        NativeJSON.stringify(context0, nativeUint32Array0, nativeUint32Array0, nativeUint32Array0, nativeString0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(4);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeFloat32Array0, 0);
      BaseFunction baseFunction0 = new BaseFunction();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) 0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object object1 = NativeJSON.stringify((Context) null, baseFunction0, object0, nativeArray0, object0);
      assertEquals("0", object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      Scriptable scriptable0 = ScriptableObject.getArrayPrototype(scriptableObject0);
      NativeNumber nativeNumber0 = new NativeNumber(18);
      nativeNumber0.setPrototype(scriptableObject0);
      Object object0 = NativeJSON.stringify(context0, scriptableObject0, nativeNumber0, nativeNumber0, scriptable0);
      assertEquals("null", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[16];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object object0 = NativeJSON.stringify((Context) null, nativeArray0, "ArrayBuffer", (Object) null, (Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      NativeNumber nativeNumber0 = new NativeNumber((-1));
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        NativeJSON.stringify(context0, nativeNumber0, nativeArray0, nativeJavaClass0, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(9);
      NativeString nativeString0 = new NativeString("error reporter");
      Short short0 = new Short((short)456);
      // Undeclared exception!
      try { 
        NativeJSON.stringify(context0, nativeArrayBuffer0, nativeString0, contextFactory0, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      BaseFunction baseFunction0 = new BaseFunction(nativeIterator_StopIteration0, (Scriptable) null);
      ArrowFunction arrowFunction0 = null;
      try {
        arrowFunction0 = new ArrowFunction(context0, nativeIterator_StopIteration0, baseFunction0, nativeIterator_StopIteration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(10);
      Object object0 = NativeJSON.stringify(context0, nativeUint8ClampedArray0, nativeUint8ClampedArray0, context0, nativeUint8ClampedArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(4);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object object0 = NativeJSON.stringify((Context) null, nativeFloat32Array0, importerTopLevel0, nativeArray0, (Object) null);
      assertEquals("{}", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(1);
      Context context0 = Context.getCurrentContext();
      Object object0 = NativeJSON.stringify(context0, nativeFloat64Array0, nativeFloat64Array0, nativeFloat64Array0, "error reporter");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      Object[] objectArray0 = new Object[16];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeCall nativeCall0 = new NativeCall();
      Object object0 = NativeJSON.stringify((Context) null, nativeArrayBuffer0, nativeArray0, objectArray0[1], nativeCall0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.enter();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(17);
      Scriptable scriptable0 = context0.newArray((Scriptable) nativeUint32Array0, 2);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Object object0 = NativeJSON.stringify(context0, nativeBoolean0, scriptable0, context0, "true");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      Scriptable scriptable0 = ScriptableObject.getArrayPrototype(scriptableObject0);
      Object object0 = NativeJSON.stringify(context0, scriptable0, scriptable0, context0, scriptable0);
      assertEquals("[]", object0);
  }
}
