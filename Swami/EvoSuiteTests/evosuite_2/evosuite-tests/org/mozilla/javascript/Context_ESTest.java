/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 04:47:18 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.io.Reader;
import java.io.StringReader;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ArrowFunction;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Callable;
import org.mozilla.javascript.ClassShutter;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextAction;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.DefaultErrorReporter;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.Evaluator;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.InterpretedFunction;
import org.mozilla.javascript.InterpreterData;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeBoolean;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.NativeIterator;
import org.mozilla.javascript.NativeJavaTopPackage;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.NativeSymbol;
import org.mozilla.javascript.PolicySecurityController;
import org.mozilla.javascript.RegExpProxy;
import org.mozilla.javascript.Script;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.WrapFactory;
import org.mozilla.javascript.debug.DebuggableScript;
import org.mozilla.javascript.debug.Debugger;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Context_ESTest extends Context_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context context0 = new Context();
      Context.ClassShutterSetter context_ClassShutterSetter0 = context0.getClassShutterSetter();
      context_ClassShutterSetter0.setClassShutter((ClassShutter) null);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = new Context();
      Context.ClassShutterSetter context_ClassShutterSetter0 = context0.getClassShutterSetter();
      assertNotNull(context_ClassShutterSetter0);
      
      context_ClassShutterSetter0.getClassShutter();
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.unseal("Rhino 1.8.0-SNAPSHOT 2018 07 30");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      String string0 = Context.toString((Object) nativeJavaTopPackage0);
      assertEquals("[JavaPackage ]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Scriptable scriptable0 = Context.toObject((Object) topLevel0, (Scriptable) topLevel0);
      assertEquals("global", scriptable0.getClassName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = Context.toNumber("))");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Synchronizer synchronizer0 = new Synchronizer(nativeIterator_StopIteration0);
      // Undeclared exception!
      try { 
        synchronizer0.newInstance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: org.mozilla.javascript.Synchronizer
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = new Context();
      WrapFactory wrapFactory0 = new WrapFactory();
      context0.setWrapFactory(wrapFactory0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = Context.enter();
      PolicySecurityController policySecurityController0 = new PolicySecurityController();
      // Undeclared exception!
      try { 
        context0.setSecurityController(policySecurityController0);
       //  fail("Expecting exception: SecurityException");
       // Unstable assertion
      } catch(SecurityException e) {
         //
         // Can not overwrite existing SecurityController object
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      PolicySecurityController policySecurityController0 = new PolicySecurityController();
      context0.setSecurityController(policySecurityController0);
      // Undeclared exception!
      try { 
        context0.setSecurityController(policySecurityController0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Can not overwrite existing SecurityController object
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      context0.setOptimizationLevel((-2));
      assertEquals((-1), context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        context0.setMaximumInterpreterStackDepth(9);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set maximumInterpreterStackDepth when optimizationLevel != -1
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = new Context();
      context0.setGeneratingDebug(true);
      assertTrue(context0.isGeneratingDebugChanged());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      context0.setErrorReporter(errorReporter0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = new Context();
      context0.setDebugger((Debugger) null, (Object) null);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.setClassShutter((ClassShutter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context.setCachingEnabled(false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = new Context();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        context0.setApplicationClassLoader(classLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Loader can not resolve Rhino classes
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertNotNull(classLoader0);
      
      context0.setApplicationClassLoader(classLoader0);
      assertFalse(context0.generateObserverCount);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      context0.setApplicationClassLoader((ClassLoader) null);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      Context context0 = contextFactory0.makeContext();
      context0.seal(contextFactory_GlobalSetter0);
      assertTrue(context0.isSealed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Context context0 = new Context();
      Float float0 = new Float(0.0F);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      // Undeclared exception!
      try { 
        context0.resumeContinuation(float0, nativeArray0, nativeArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to org.mozilla.javascript.NativeContinuation
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportError("2^sNX@W", "language version", (-897), "org.mozilla.javascript.typedarrays.NativeFloat64Array", 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -897
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportError(",");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // ,
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      context0.removeThreadLocal((Object) null);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Context context0 = new Context();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("language version", propertyChangeListener0);
      context0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      context0.removeActivationName("error reporter");
      assertEquals(150, Context.VERSION_1_5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      context0.removeActivationName("org.mzilla.javascript.Context$1");
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = new Context();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      // Undeclared exception!
      try { 
        NativeSymbol.construct(context0, nativeBoolean0, context0.emptyArgs);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Le constructeur de \"Symbol\" est introuvable
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        context0.newObject((Scriptable) importerTopLevel0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Le constructeur de \"\" est introuvable
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      context0.newArray((Scriptable) nativeUint16Array0, context0.emptyArgs);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Function;
      BaseFunction baseFunction0 = (BaseFunction)importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      NativeArray nativeArray0 = (NativeArray)context0.newArray((Scriptable) baseFunction0, 8);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(baseFunction0.isSealed());
      assertEquals(8L, nativeArray0.getLength());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Context context0 = new Context();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(13);
      // Undeclared exception!
      try { 
        Context.javaToJS(context0, nativeInt8Array0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("org.mozilla.javascript.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Character character0 = new Character('[');
      TopLevel topLevel0 = new TopLevel();
      Object object0 = Context.javaToJS(character0, topLevel0);
      assertEquals("[", object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      context0.isSealed();
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Context context0 = new Context();
      boolean boolean0 = context0.isActivationNeeded("error reporter");
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Context context0 = Context.enter();
      context0.initStandardObjects();
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Context context0 = new Context();
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(wrapFactory0);
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = Context.getUndefinedValue();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      context0.getThreadLocal((Object) null);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<ArrowFunction> class0 = ArrowFunction.class;
      try { 
        Context.toType("Rhino 1.8.0-SNAPSHOT 2018 07 30", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Impossible de convertir Rhino 1.8.0-SNAPSHOT 2018 07 30 en org.mozilla.javascript.ArrowFunction
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      RegExpProxy regExpProxy0 = context0.getRegExpProxy();
      assertNotNull(regExpProxy0);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Locale locale0 = context0.getLocale();
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      int int0 = context0.getInstructionObserverThreshold();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Context context0 = new Context();
      String string0 = context0.getImplementationVersion();
      assertEquals("Rhino 1.8.0-SNAPSHOT 2018 07 30", string0);
      
      String string1 = context0.getImplementationVersion();
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertTrue(context0.isGeneratingSource());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      ErrorReporter errorReporter0 = DefaultErrorReporter.forEval(defaultErrorReporter0);
      ErrorReporter errorReporter1 = context0.setErrorReporter(errorReporter0);
      ErrorReporter errorReporter2 = context0.setErrorReporter(errorReporter1);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertNotSame(errorReporter2, errorReporter1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Context context0 = new Context();
      context0.getDebuggerContextData();
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Context context0 = new Context();
      context0.getDebugger();
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DebuggableScript debuggableScript0 = Context.getDebuggableView((Script) null);
      assertNull(debuggableScript0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(classLoader0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Context context0 = new Context();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 120, 18);
      // Undeclared exception!
      try { 
        context0.executeScriptWithContinuations((Script) null, nativeUint32Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Script argument was not a script or was not created by interpreted mode 
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.decompileScript((Script) null, (-1973304693));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      String string0 = context0.decompileFunctionBody((Function) null, 13);
      assertEquals("[native code]\n", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeObject nativeObject0 = new NativeObject();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeObject0, nativeIterator_StopIteration0, 130, "error reporter", 16, nativeObject0);
      String string0 = context0.decompileFunctionBody(idFunctionObject0, 1970);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertEquals("[native code for Object.error reporter, arity=16]\n", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        context0.decompileFunction((Function) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Context context0 = new Context();
      NativeCall nativeCall0 = new NativeCall();
      BaseFunction baseFunction0 = new BaseFunction(nativeCall0, nativeCall0);
      String string0 = context0.decompileFunction(baseFunction0, 18);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("function () {\n\t[native code, arity=0]\n}\n", string0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Context context0 = Context.enter();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      // Undeclared exception!
      try { 
        context0.evaluateString(importerTopLevel0, "Loader can not resolve Rhino classes", "p|dF4s", (-1485), contextFactory0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // il manque ';' avant une instruction
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        context0.evaluateString((Scriptable) null, "ArrayBuffer", "ArrayBuffer", 2, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      StringReader stringReader0 = new StringReader("error reporter");
      Synchronizer synchronizer0 = new Synchronizer((Scriptable) null);
      // Undeclared exception!
      try { 
        context0.compileReader((Scriptable) null, (Reader) stringReader0, "<evosuite>.java", (-385), (Object) synchronizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // securityDomain should be null if setSecurityController() was never called
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      PolicySecurityController policySecurityController0 = new PolicySecurityController();
      context0.setSecurityController(policySecurityController0);
      StringReader stringReader0 = new StringReader("error reporter");
      context0.isTopLevelStrict = true;
      Synchronizer synchronizer0 = new Synchronizer((Scriptable) null, "<evosuite>.java");
      // Undeclared exception!
      try { 
        context0.compileReader((Scriptable) null, (Reader) stringReader0, "<evosuite>.java", 1431, (Object) synchronizer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // il manque ';' avant une instruction (<evosuite>.java#1431)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Context context0 = new Context();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      StringReader stringReader0 = new StringReader("ArrayBuffer");
      // Undeclared exception!
      try { 
        context0.evaluateReader(nativeArrayBuffer0, stringReader0, "ArrayBuffer", 4083, (Object) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"ArrayBuffer\" n'est pas d\u00E9fini
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Evaluator evaluator0 = Context.createInterpreter();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      // Undeclared exception!
      try { 
        context0.compileFunction((Scriptable) nativeIterator_StopIteration0, "getClass", evaluator0, (ErrorReporter) defaultErrorReporter0, "!@a<~-Hlhq-K-7MP}ir", 180, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // compileFunction only accepts source with single JS function: getClass
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.compileFunction((Scriptable) null, "@G)>o_m&.:ViJ.%", "msg.non.js.object.warning", 9, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      // Undeclared exception!
      try { 
        context0.setOptimizationLevel((-792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Optimization level outside [-1..9]: -792
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Context context0 = new Context();
      context0.setOptimizationLevel(5);
      context0.setGeneratingDebug(true);
      assertTrue(context0.isGeneratingDebug());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        context0.setLanguageVersion(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad language version: 2
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Context context0 = new Context();
      context0.setLanguageVersion(140);
      assertEquals(140, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        context0.captureContinuation();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Interpreter frames not found
         //
         verifyException("org.mozilla.javascript.Interpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      // Undeclared exception!
      try { 
        context0.callFunctionWithContinuations((Callable) null, nativeArrayBuffer0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function argument was not created by interpreted mode 
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Context context0 = Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(120, "msg.arg.isnt.array", "error reporter", true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript(interpreterData0, (Object) null);
      // Undeclared exception!
      try { 
        context0.executeScriptWithContinuations(interpretedFunction0, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Context context0 = new Context();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Context.call((ContextFactory) null, (Callable) nativeJavaTopPackage0, (Scriptable) nativeJavaTopPackage0, (Scriptable) nativeJavaTopPackage0, context0.emptyArgs);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ContextAction contextAction0 = mock(ContextAction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(contextAction0).run(any(org.mozilla.javascript.Context.class));
      Object object0 = Context.call(contextAction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("error reporter", propertyChangeListener0);
      context0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(200, Context.VERSION_ES6);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Context context0 = null;
      try {
        context0 = new Context((ContextFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factory == null
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Context context0 = new Context();
      context0.addActivationName("Boolean");
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
  }
}
