/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 06:11:01 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.EmbeddedSlotMap;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeInt32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedSlotMap_ESTest extends EmbeddedSlotMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      embeddedSlotMap0.get(object0, 2047, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(scriptableObject_SlotAccess0, 244, scriptableObject_SlotAccess0);
      embeddedSlotMap0.remove(scriptableObject_SlotAccess0, (-221));
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      embeddedSlotMap0.iterator();
      Object object0 = new Object();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(object0, 0, 0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      scriptableObject_GetterSlot0.name = null;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get(object0, 0, scriptableObject_SlotAccess0);
      scriptableObject_GetterSlot0.next = scriptableObject_Slot0;
      scriptableObject_Slot0.next = (ScriptableObject.Slot) scriptableObject_GetterSlot0;
      embeddedSlotMap0.remove(object0, 0);
      embeddedSlotMap0.addSlot(scriptableObject_GetterSlot0.next);
      // Undeclared exception!
      try { 
        embeddedSlotMap0.remove((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.EmbeddedSlotMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get(object0, 5, scriptableObject_SlotAccess0);
      // Undeclared exception!
      try { 
        embeddedSlotMap0.remove(object0, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(embeddedSlotMap0, 124, 124);
      ScriptableObject.Slot scriptableObject_Slot0 = new ScriptableObject.Slot((Object) null, 4, 124);
      embeddedSlotMap0.addSlot(scriptableObject_Slot0);
      embeddedSlotMap0.remove(object0, 124);
      assertEquals(1, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      embeddedSlotMap0.get("", 3602, scriptableObject_SlotAccess0);
      embeddedSlotMap0.query("", 1);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      boolean boolean0 = embeddedSlotMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot((Object) null, (-1413), (-1413));
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      embeddedSlotMap0.get((Object) null, (-1413), scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(scriptableObject_GetterSlot0, (-1413), scriptableObject_SlotAccess0);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.Slot scriptableObject_Slot0 = new ScriptableObject.Slot(embeddedSlotMap0, 0, 0);
      embeddedSlotMap0.addSlot(scriptableObject_Slot0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.QUERY;
      embeddedSlotMap0.get(embeddedSlotMap0, 0, scriptableObject_SlotAccess0);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(embeddedSlotMap0, 124, 124);
      ScriptableObject.Slot scriptableObject_Slot0 = new ScriptableObject.Slot((Object) null, 4, 124);
      embeddedSlotMap0.addSlot(scriptableObject_Slot0);
      embeddedSlotMap0.get(object0, 124, scriptableObject_SlotAccess0);
      assertEquals(2, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.QUERY;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get(scriptableObject_SlotAccess0, 1503, scriptableObject_SlotAccess0);
      assertNull(scriptableObject_Slot0);
      assertEquals(0, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Integer integer0 = new Integer((-2176));
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get(nativeInt32Array0, 2, scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.MODIFY;
      embeddedSlotMap0.get(scriptableObject_Slot0, (int) integer0, scriptableObject_SlotAccess1);
      embeddedSlotMap0.get(scriptableObject_Slot0, (int) integer0, scriptableObject_SlotAccess0);
      assertEquals(2, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      embeddedSlotMap0.iterator();
      Object object0 = new Object();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(object0, 0, 0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      scriptableObject_GetterSlot0.name = null;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get(object0, 0, scriptableObject_SlotAccess0);
      scriptableObject_GetterSlot0.next = scriptableObject_Slot0;
      scriptableObject_Slot0.next = (ScriptableObject.Slot) scriptableObject_GetterSlot0;
      embeddedSlotMap0.remove(object0, 0);
      embeddedSlotMap0.addSlot(scriptableObject_GetterSlot0.next);
      embeddedSlotMap0.get((Object) null, 0, scriptableObject_SlotAccess0);
      assertEquals(1, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(object0, 0, 0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      scriptableObject_GetterSlot0.name = null;
      scriptableObject_GetterSlot0.next = (ScriptableObject.Slot) scriptableObject_GetterSlot0;
      embeddedSlotMap0.addSlot(scriptableObject_GetterSlot0.next);
      embeddedSlotMap0.get((Object) null, 0, scriptableObject_SlotAccess0);
      assertEquals(1, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.getContext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      embeddedSlotMap0.get(nativeInt32Array0, 2, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(nativeInt32Array0, (-2176), scriptableObject_SlotAccess0);
      assertFalse(embeddedSlotMap0.isEmpty());
  }
}
