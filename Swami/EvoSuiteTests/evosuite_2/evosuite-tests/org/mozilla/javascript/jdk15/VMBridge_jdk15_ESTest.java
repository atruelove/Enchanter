/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 08:28:57 GMT 2018
 */

package org.mozilla.javascript.jdk15;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.InterfaceAdapter;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.jdk15.VMBridge_jdk15;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VMBridge_jdk15_ESTest extends VMBridge_jdk15_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VMBridge_jdk15 vMBridge_jdk15_0 = new VMBridge_jdk15();
      AccessibleObject accessibleObject0 = mock(AccessibleObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(accessibleObject0).isAccessible();
      boolean boolean0 = vMBridge_jdk15_0.tryToMakeAccessible(accessibleObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VMBridge_jdk15 vMBridge_jdk15_0 = new VMBridge_jdk15();
      AccessibleObject accessibleObject0 = mock(AccessibleObject.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(accessibleObject0).isAccessible();
      boolean boolean0 = vMBridge_jdk15_0.tryToMakeAccessible(accessibleObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VMBridge_jdk15 vMBridge_jdk15_0 = new VMBridge_jdk15();
      ContextFactory contextFactory0 = new ContextFactory();
      InterfaceAdapter interfaceAdapter0 = mock(InterfaceAdapter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vMBridge_jdk15_0.newInterfaceProxy((Object) null, contextFactory0, interfaceAdapter0, (Object) null, (Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.jdk15.VMBridge_jdk15", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VMBridge_jdk15 vMBridge_jdk15_0 = new VMBridge_jdk15();
      boolean boolean0 = vMBridge_jdk15_0.isDefaultMethod((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VMBridge_jdk15 vMBridge_jdk15_0 = new VMBridge_jdk15();
      Object object0 = vMBridge_jdk15_0.getThreadContextHelper();
      Context context0 = Context.enter();
      vMBridge_jdk15_0.setContext(object0, context0);
      assertEquals(17, Context.FEATURE_THREAD_SAFE_OBJECTS);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      VMBridge_jdk15 vMBridge_jdk15_0 = new VMBridge_jdk15();
      Context context0 = Context.enter();
      Iterator<?> iterator0 = vMBridge_jdk15_0.getJavaIterator(context0, (Scriptable) null, context0);
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      VMBridge_jdk15 vMBridge_jdk15_0 = new VMBridge_jdk15();
      ContextFactory contextFactory0 = new ContextFactory();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        vMBridge_jdk15_0.getInterfaceProxyHelper(contextFactory0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
