/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 05:04:56 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.NodeTransformer;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.FunctionCall;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.LetNode;
import org.mozilla.javascript.ast.NewExpression;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.SwitchStatement;
import org.mozilla.javascript.ast.TryStatement;
import org.mozilla.javascript.ast.VariableInitializer;
import org.mozilla.javascript.ast.XmlExpression;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeTransformer_ESTest extends NodeTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      VariableInitializer variableInitializer0 = new VariableInitializer(0);
      AstRoot astRoot0 = new AstRoot(21);
      Node node0 = new Node(4, variableInitializer0, 16);
      XmlExpression xmlExpression0 = new XmlExpression();
      variableInitializer0.addChildrenToFront(xmlExpression0);
      astRoot0.addChildToFront(node0);
      node0.addChildToBack(variableInitializer0);
      // Undeclared exception!
      try { 
        nodeTransformer0.visitLet(false, astRoot0, astRoot0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      VariableInitializer variableInitializer0 = new VariableInitializer();
      AstRoot astRoot0 = new AstRoot(21);
      Node node0 = new Node(4, variableInitializer0, 16);
      astRoot0.addChildToFront(node0);
      node0.addChildToBack(variableInitializer0);
      nodeTransformer0.visitLet(false, astRoot0, astRoot0, node0);
      assertEquals("130", node0.toString());
      assertEquals(130, node0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      VariableInitializer variableInitializer0 = new VariableInitializer(0, 0);
      AstRoot astRoot0 = new AstRoot(21);
      Node node0 = new Node(4, variableInitializer0, 16);
      XmlExpression xmlExpression0 = new XmlExpression();
      variableInitializer0.addChildrenToFront(xmlExpression0);
      astRoot0.addChildToFront(node0);
      node0.addChildToBack(variableInitializer0);
      // Undeclared exception!
      try { 
        nodeTransformer0.visitLet(true, astRoot0, astRoot0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      VariableInitializer variableInitializer0 = new VariableInitializer(0);
      AstRoot astRoot0 = new AstRoot(0);
      Node node0 = new Node(65534, variableInitializer0, (-727));
      node0.type = 156;
      astRoot0.addChildToFront(node0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      nodeTransformer0.transform((ScriptNode) astRoot0, compilerEnvirons0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      VariableInitializer variableInitializer0 = new VariableInitializer(0);
      AstRoot astRoot0 = new AstRoot(21);
      Node node0 = new Node(4, variableInitializer0, 16);
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      XmlExpression xmlExpression0 = new XmlExpression();
      variableInitializer0.addChildrenToFront(xmlExpression0);
      astRoot0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        nodeTransformer0.transform((ScriptNode) astRoot0, true, compilerEnvirons0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      AstRoot astRoot0 = new AstRoot(21);
      LetNode letNode0 = new LetNode(14, 0);
      astRoot0.addChildToFront(letNode0);
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      // Undeclared exception!
      try { 
        nodeTransformer0.transform((ScriptNode) astRoot0, false, compilerEnvirons0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NodeTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      AstRoot astRoot0 = new AstRoot(0);
      NewExpression newExpression0 = new NewExpression(4);
      astRoot0.addChildToFront(newExpression0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      nodeTransformer0.transform((ScriptNode) astRoot0, compilerEnvirons0);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(0);
      FunctionCall functionCall0 = new FunctionCall();
      astRoot0.addChildToFront(functionCall0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      nodeTransformer0.transform((ScriptNode) astRoot0, false, compilerEnvirons0);
      assertEquals(0, Node.NON_SPECIALCALL);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      AstRoot astRoot0 = new AstRoot(0);
      ContinueStatement continueStatement0 = new ContinueStatement(8);
      astRoot0.addChildToFront(continueStatement0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      // Undeclared exception!
      try { 
        nodeTransformer0.transform((ScriptNode) astRoot0, compilerEnvirons0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      FunctionNode functionNode0 = new FunctionNode((-214748364));
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      TryStatement tryStatement0 = new TryStatement();
      functionNode0.addChild(tryStatement0);
      // Undeclared exception!
      try { 
        nodeTransformer0.transform((ScriptNode) functionNode0, true, compilerEnvirons0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.ast.TryStatement cannot be cast to org.mozilla.javascript.ast.Jump
         //
         verifyException("org.mozilla.javascript.NodeTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      VariableInitializer variableInitializer0 = new VariableInitializer(0, 0);
      AstRoot astRoot0 = new AstRoot(21);
      Node node0 = new Node(4, variableInitializer0, 16);
      astRoot0.addChildToFront(node0);
      node0.addChildToBack(variableInitializer0);
      nodeTransformer0.visitLet(true, astRoot0, astRoot0, node0);
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      nodeTransformer0.transform((ScriptNode) astRoot0, true, compilerEnvirons0);
      assertEquals(2, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      AstRoot astRoot0 = new AstRoot();
      SwitchStatement switchStatement0 = new SwitchStatement((-698), 1);
      astRoot0.addChildToFront(switchStatement0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      nodeTransformer0.transform((ScriptNode) astRoot0, compilerEnvirons0);
      assertEquals(19, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      AstRoot astRoot0 = new AstRoot(0);
      FunctionNode functionNode0 = new FunctionNode();
      astRoot0.addFunction(functionNode0);
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      nodeTransformer0.transform((ScriptNode) astRoot0, true, compilerEnvirons0);
      assertNull(astRoot0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      VariableInitializer variableInitializer0 = new VariableInitializer();
      AstRoot astRoot0 = new AstRoot(21);
      Node node0 = new Node(4, variableInitializer0, 16);
      astRoot0.addChildToFront(node0);
      node0.addChildToBack(variableInitializer0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      nodeTransformer0.transform((ScriptNode) astRoot0, compilerEnvirons0);
      assertEquals(2, Node.RIGHT);
  }
}
