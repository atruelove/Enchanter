/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 07:39:22 GMT 2018
 */

package org.mozilla.javascript.optimizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.ConsString;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeFunction;
import org.mozilla.javascript.NativeGenerator;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.ScriptRuntime;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.optimizer.OptRuntime;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptRuntime_ESTest extends OptRuntime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = OptRuntime.wrapDouble((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = OptRuntime.wrapDouble(1.0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = OptRuntime.wrapDouble(0.0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = Context.enter();
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      NativeGenerator nativeGenerator0 = new NativeGenerator(baseFunction0, nativeFunction0, context0);
      // Undeclared exception!
      try { 
        OptRuntime.throwStopIteration(nativeGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        OptRuntime.padStart(context0.emptyArgs, 3254);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      OptRuntime.GeneratorState optRuntime_GeneratorState0 = new OptRuntime.GeneratorState(nativeArrayBuffer0, 11, (-535));
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        OptRuntime.newObjectSpecial(context0, optRuntime_GeneratorState0, context0.emptyArgs, nativeContinuation0, nativeContinuation0, (-1525));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(nativeFunction0).getFunctionName();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      OptRuntime.initFunction(nativeFunction0, 1, (Scriptable) nativeFunction0, context0);
      assertEquals(130, Context.VERSION_1_3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptRuntime.GeneratorState optRuntime_GeneratorState0 = new OptRuntime.GeneratorState((Scriptable) null, (-1571), (-1571));
      Object[] objectArray0 = new Object[5];
      optRuntime_GeneratorState0.stackState = objectArray0;
      Object[] objectArray1 = OptRuntime.getGeneratorStackState(optRuntime_GeneratorState0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptRuntime.GeneratorState optRuntime_GeneratorState0 = new OptRuntime.GeneratorState((Scriptable) null, (-1550), (-1550));
      // Undeclared exception!
      try { 
        OptRuntime.getGeneratorStackState(optRuntime_GeneratorState0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      OptRuntime.GeneratorState optRuntime_GeneratorState0 = new OptRuntime.GeneratorState(nativeJavaClass0, 16, 120);
      Object[] objectArray0 = OptRuntime.getGeneratorLocalsState(optRuntime_GeneratorState0);
      assertNotNull(objectArray0);
      assertEquals(16, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[10];
      String string0 = OptRuntime.encodeIntArray(intArray0);
      assertEquals("\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        OptRuntime.elemIncrDecr((Object) "P~sOK:MV", 0.0, context0, 298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        OptRuntime.newArrayLiteral(context0.emptyArgs, "language version", 3, context0, (Scriptable) importerTopLevel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = ScriptRuntime.getGlobal(context0);
      // Undeclared exception!
      try { 
        OptRuntime.newArrayLiteral((Object[]) null, (String) null, 0, context0, (Scriptable) scriptableObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      Context context0 = Context.getCurrentContext();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      // Undeclared exception!
      try { 
        OptRuntime.newArrayLiteral(objectArray0, "\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", 3, context0, (Scriptable) nativeInt8Array0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        OptRuntime.callSpecial(context0, baseFunction0, baseFunction0, context0.emptyArgs, baseFunction0, baseFunction0, (-10), "language version", 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, baseFunction0, 8, "I", 16, baseFunction0);
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      NativeGenerator nativeGenerator0 = new NativeGenerator(idFunctionObjectES6_0, nativeFunction0, "I");
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        OptRuntime.callProp0(nativeGenerator0, "I", context0, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        OptRuntime.callName0("eval", context0, importerTopLevel0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"eval\" is not defined.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nativeFunction0).getAssociatedValue(any());
      doReturn((Scriptable) null, (Scriptable) null).when(nativeFunction0).getParentScope();
      doReturn((Scriptable) null).when(nativeFunction0).getPrototype();
      Scriptable scriptable0 = OptRuntime.createNativeGenerator(nativeFunction0, nativeFunction0, nativeFunction0, (-6365), 1);
      Synchronizer synchronizer0 = new Synchronizer(scriptable0, scriptable0);
      NativeFunction nativeFunction1 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn(synchronizer0).when(nativeFunction1).get(anyString() , any(org.mozilla.javascript.Scriptable.class));
      doReturn(scriptable0).when(nativeFunction1).getParentScope();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        OptRuntime.callName(context0.emptyArgs, "language version", context0, nativeFunction1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.NativeGenerator cannot be cast to org.mozilla.javascript.Function
         //
         verifyException("org.mozilla.javascript.Synchronizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Object object0 = OptRuntime.callN(baseFunction0, baseFunction0, (Object[]) null, (Context) null, baseFunction0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = Context.enter();
      Object object0 = OptRuntime.call2(baseFunction0, baseFunction0, baseFunction0, baseFunction0, context0, baseFunction0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Delegator delegator0 = new Delegator((Scriptable) null);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        OptRuntime.call1(delegator0, (Scriptable) null, (Object) null, context0, (Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = Context.enter();
      Object object0 = OptRuntime.call0(baseFunction0, baseFunction0, context0, baseFunction0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        OptRuntime.bindThis((NativeFunction) null, (Context) null, (Scriptable) null, (Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = OptRuntime.add((Object) null, 1962.973466);
      assertEquals(1962.973466, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConsString consString0 = (ConsString)OptRuntime.add((Object) "java/lang/Integger", (-1.0));
      assertEquals(20, consString0.length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        OptRuntime.add((Object) importerTopLevel0, (double) 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptRuntime.GeneratorState optRuntime_GeneratorState0 = new OptRuntime.GeneratorState((Scriptable) null, (-1550), (-1550));
      Object object0 = OptRuntime.add((-364.42965326059084), (Object) optRuntime_GeneratorState0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ConsString consString0 = (ConsString)OptRuntime.add(40.11306274551251, (Object) importerTopLevel0);
      assertEquals(32, consString0.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptRuntime optRuntime0 = new OptRuntime();
      assertEquals(6, ScriptRuntime.ENUMERATE_VALUES_IN_ORDER);
  }
}
