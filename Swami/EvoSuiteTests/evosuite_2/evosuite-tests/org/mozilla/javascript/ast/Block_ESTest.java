/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 18:40:56 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.Block;
import org.mozilla.javascript.ast.ReturnStatement;
import org.mozilla.javascript.ast.VariableInitializer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Block_ESTest extends Block_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Block block0 = new Block((-1514), 0);
      StringBuilder stringBuilder0 = new StringBuilder(152);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      ReturnStatement returnStatement0 = new ReturnStatement(17);
      block0.addStatement(returnStatement0);
      block0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1514\tBLOCK -1514 1532\n17\t  RETURN 1531 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals("130", block0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Block block0 = new Block((-1514), 0);
      ReturnStatement returnStatement0 = new ReturnStatement(17);
      block0.addStatement(returnStatement0);
      String string0 = block0.toSource(40);
      assertEquals("                                                                                {\n                                                                                  return;\n                                                                                }\n", string0);
      assertEquals("130", block0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Block block0 = new Block(19);
      VariableInitializer variableInitializer0 = new VariableInitializer(27);
      block0.addStatement(variableInitializer0);
      assertEquals(130, block0.getType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Block block0 = new Block();
      // Undeclared exception!
      try { 
        block0.addStatement((AstNode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // arg cannot be null
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }
}
