/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 19:14:09 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.ArrayComprehension;
import org.mozilla.javascript.ast.Assignment;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.GeneratorExpression;
import org.mozilla.javascript.ast.InfixExpression;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.ObjectProperty;
import org.mozilla.javascript.ast.XmlDotQuery;
import org.mozilla.javascript.ast.Yield;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InfixExpression_ESTest extends InfixExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral(3);
      InfixExpression infixExpression0 = new InfixExpression(3, 3, numberLiteral0, numberLiteral0);
      infixExpression0.setType(10);
      String string0 = infixExpression0.toSource(4);
      assertEquals((-1), infixExpression0.getOperatorPosition());
      assertEquals("        <null> ^ <null>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      // Undeclared exception!
      try { 
        objectProperty0.setOperator((-1060));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid token: -1060
         //
         verifyException("org.mozilla.javascript.ast.InfixExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      objectProperty0.setOperator(105);
      objectProperty0.setLeftAndRight(arrayComprehension0, arrayComprehension0);
      boolean boolean0 = objectProperty0.hasSideEffects();
      assertEquals("105", objectProperty0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      objectProperty0.setOperator(90);
      boolean boolean0 = objectProperty0.hasSideEffects();
      assertEquals("90", objectProperty0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Assignment assignment0 = new Assignment(0, 79);
      assignment0.getRight();
      assertEquals((-1), assignment0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      InfixExpression infixExpression0 = new InfixExpression(0, 0, generatorExpression0, generatorExpression0);
      int int0 = infixExpression0.getOperatorPosition();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InfixExpression infixExpression0 = new InfixExpression(2647, 2647);
      infixExpression0.getOperator();
      assertEquals((-1), infixExpression0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(0);
      // Undeclared exception!
      try { 
        xmlDotQuery0.toSource(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.XmlDotQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Yield yield0 = new Yield();
      InfixExpression infixExpression0 = new InfixExpression(yield0, yield0);
      assertEquals(0, yield0.getPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement(56);
      InfixExpression infixExpression0 = new InfixExpression(56, continueStatement0, continueStatement0, 26);
      StringBuffer stringBuffer0 = new StringBuffer(27);
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      infixExpression0.visit(astNode_DebugPrintVisitor0);
      assertEquals(0, continueStatement0.getPosition());
      assertEquals((-30), infixExpression0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      objectProperty0.hasSideEffects();
      assertEquals((-1), objectProperty0.getOperatorPosition());
  }
}
