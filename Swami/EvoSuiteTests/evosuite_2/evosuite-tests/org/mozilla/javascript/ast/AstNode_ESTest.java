/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 17:46:09 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Token;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.CatchClause;
import org.mozilla.javascript.ast.Comment;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.ErrorNode;
import org.mozilla.javascript.ast.ExpressionStatement;
import org.mozilla.javascript.ast.GeneratorExpression;
import org.mozilla.javascript.ast.GeneratorExpressionLoop;
import org.mozilla.javascript.ast.IfStatement;
import org.mozilla.javascript.ast.LabeledStatement;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NewExpression;
import org.mozilla.javascript.ast.ReturnStatement;
import org.mozilla.javascript.ast.Scope;
import org.mozilla.javascript.ast.ThrowStatement;
import org.mozilla.javascript.ast.TryStatement;
import org.mozilla.javascript.ast.WhileLoop;
import org.mozilla.javascript.ast.XmlMemberGet;
import org.mozilla.javascript.ast.XmlPropRef;
import org.mozilla.javascript.ast.Yield;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AstNode_ESTest extends AstNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabeledStatement labeledStatement0 = new LabeledStatement((-317), 695);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(23, 95, token_CommentType0, "");
      AstNode.PositionComparator astNode_PositionComparator0 = new AstNode.PositionComparator();
      int int0 = astNode_PositionComparator0.compare((AstNode) labeledStatement0, (AstNode) comment0);
      assertEquals(23, comment0.getAbsolutePosition());
      assertEquals((-340), int0);
      assertEquals(95, comment0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scope scope0 = new Scope(0);
      String string0 = scope0.toSource();
      assertEquals(1, scope0.getLength());
      assertEquals("{\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Yield yield0 = new Yield(0, 0);
      String string0 = yield0.shortName();
      assertEquals("Yield", string0);
      assertEquals(0, yield0.getAbsolutePosition());
      assertEquals(0, yield0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CatchClause catchClause0 = new CatchClause(359, 1926);
      ThrowStatement throwStatement0 = new ThrowStatement(catchClause0);
      IfStatement ifStatement0 = new IfStatement();
      ifStatement0.setElsePart(catchClause0);
      assertEquals(1, catchClause0.depth());
      assertEquals(359, catchClause0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      generatorExpression0.addLoop(generatorExpressionLoop0);
      generatorExpression0.addChild(generatorExpressionLoop0);
      assertEquals(1, generatorExpressionLoop0.depth());
      assertEquals((-1), generatorExpression0.getPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression(135, 135);
      XmlPropRef xmlPropRef0 = new XmlPropRef(1);
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(generatorExpression0, xmlPropRef0);
      assertEquals(1, xmlPropRef0.depth());
      assertEquals((-133), xmlMemberGet0.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef((-1358));
      LinkedList<WhileLoop> linkedList0 = new LinkedList<WhileLoop>();
      StringBuilder stringBuilder0 = new StringBuilder("^");
      WhileLoop whileLoop0 = new WhileLoop();
      linkedList0.add(whileLoop0);
      // Undeclared exception!
      try { 
        xmlPropRef0.printList((List<WhileLoop>) linkedList0, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.WhileLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef((-1358));
      LinkedList<WhileLoop> linkedList0 = new LinkedList<WhileLoop>();
      StringBuilder stringBuilder0 = new StringBuilder("^");
      xmlPropRef0.printList((List<WhileLoop>) linkedList0, stringBuilder0);
      assertEquals((-1358), xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        AstNode.operatorToString(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operator: 2
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = AstNode.operatorToString(22);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(0);
      // Undeclared exception!
      try { 
        newExpression0.toSource(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.NewExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(0);
      newExpression0.setType(0);
      boolean boolean0 = newExpression0.hasSideEffects();
      assertEquals(1, newExpression0.getLength());
      assertFalse(boolean0);
      assertEquals(0, newExpression0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorNode errorNode0 = new ErrorNode(71, 71);
      boolean boolean0 = errorNode0.hasSideEffects();
      assertTrue(boolean0);
      assertEquals(71, errorNode0.getPosition());
      assertEquals(71, errorNode0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReturnStatement returnStatement0 = new ReturnStatement();
      returnStatement0.setLineno(8);
      int int0 = returnStatement0.getLineno();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CatchClause catchClause0 = new CatchClause();
      ThrowStatement throwStatement0 = new ThrowStatement(catchClause0);
      ExpressionStatement expressionStatement0 = new ExpressionStatement(12, 16, throwStatement0);
      assertEquals(1, throwStatement0.depth());
      assertEquals((-13), throwStatement0.getPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Name name0 = new Name(21);
      ContinueStatement continueStatement0 = new ContinueStatement(13, 10, name0);
      name0.isLocalName();
      assertEquals(1, name0.depth());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      WhileLoop whileLoop0 = new WhileLoop(27, 4);
      generatorExpression0.parentScope = (Scope) whileLoop0;
      ReturnStatement returnStatement0 = new ReturnStatement(0, 16, whileLoop0);
      assertEquals(1, whileLoop0.depth());
      
      generatorExpression0.parentScope.getEnclosingFunction();
      assertEquals((-1), generatorExpression0.getPosition());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression(3250, 3250);
      AstRoot astRoot0 = generatorExpression0.getAstRoot();
      assertNull(astRoot0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorNode errorNode0 = new ErrorNode((-6));
      String string0 = errorNode0.debugPrint();
      assertEquals("-6\tERROR -6 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      WhileLoop whileLoop0 = new WhileLoop();
      int int0 = generatorExpression0.compareTo((AstNode) whileLoop0);
      assertEquals(1, whileLoop0.getLength());
      assertEquals((-1), whileLoop0.getAbsolutePosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression(3250, 3250);
      // Undeclared exception!
      try { 
        generatorExpression0.getDefault();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement(24, 14);
      // Undeclared exception!
      try { 
        tryStatement0.setTryBlock((AstNode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // arg cannot be null
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Name name0 = new Name(21);
      ContinueStatement continueStatement0 = new ContinueStatement(13, 10, name0);
      StringBuilder stringBuilder0 = new StringBuilder(3);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      continueStatement0.visit(astNode_DebugPrintVisitor0);
      assertEquals(8, name0.getPosition());
      assertEquals(21, name0.getAbsolutePosition());
  }
}
