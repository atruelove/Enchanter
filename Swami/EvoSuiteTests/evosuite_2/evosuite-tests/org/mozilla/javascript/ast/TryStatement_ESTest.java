/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 18:51:23 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.Block;
import org.mozilla.javascript.ast.CatchClause;
import org.mozilla.javascript.ast.ErrorNode;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.TryStatement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TryStatement_ESTest extends TryStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      Name name0 = new Name();
      tryStatement0.setTryBlock(name0);
      Block block0 = new Block(18);
      tryStatement0.setFinallyBlock(block0);
      assertEquals(1, block0.depth());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "                      try <null> finally                       {\n                      }\n");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      tryStatement0.visit(astNode_DebugPrintVisitor0);
      assertEquals("82", tryStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      ErrorNode errorNode0 = new ErrorNode();
      tryStatement0.setTryBlock(errorNode0);
      StringBuilder stringBuilder0 = new StringBuilder(1286);
      CatchClause catchClause0 = new CatchClause();
      tryStatement0.addCatchClause(catchClause0);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        tryStatement0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.CatchClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      Name name0 = new Name(0);
      Block block0 = new Block(14);
      tryStatement0.setFinallyBlock(block0);
      assertEquals(15, block0.getPosition());
      
      tryStatement0.setTryBlock(name0);
      String string0 = tryStatement0.toSource();
      assertEquals("try <null> finally {\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      Name name0 = new Name(4);
      CatchClause catchClause0 = new CatchClause();
      tryStatement0.addCatchClause(catchClause0);
      tryStatement0.setTryBlock(name0);
      // Undeclared exception!
      try { 
        tryStatement0.toSource(27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.CatchClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      tryStatement0.setFinallyPosition(146);
      assertEquals(146, tryStatement0.getFinallyPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      LinkedList<CatchClause> linkedList0 = new LinkedList<CatchClause>();
      CatchClause catchClause0 = new CatchClause(3, 1);
      linkedList0.addFirst(catchClause0);
      tryStatement0.setCatchClauses(linkedList0);
      assertEquals((-1), tryStatement0.getFinallyPosition());
      assertEquals(82, tryStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      List<CatchClause> list0 = tryStatement0.getCatchClauses();
      assertNotNull(list0);
      
      CatchClause catchClause0 = new CatchClause();
      tryStatement0.addCatchClause(catchClause0);
      tryStatement0.setCatchClauses(list0);
      assertEquals((-1), tryStatement0.getFinallyPosition());
      assertEquals("82", tryStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      tryStatement0.setCatchClauses((List<CatchClause>) null);
      assertEquals("82", tryStatement0.toString());
      assertEquals((-1), tryStatement0.getFinallyPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      tryStatement0.getTryBlock();
      assertEquals((-1), tryStatement0.getFinallyPosition());
      assertEquals(82, tryStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      int int0 = tryStatement0.getFinallyPosition();
      assertEquals((-1), int0);
      assertEquals(82, tryStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      tryStatement0.getFinallyBlock();
      assertEquals(82, tryStatement0.getType());
      assertEquals((-1), tryStatement0.getFinallyPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement(56, 56);
      assertEquals("82", tryStatement0.toString());
      assertEquals((-1), tryStatement0.getFinallyPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement((-1287));
      assertEquals(82, tryStatement0.getType());
      assertEquals((-1), tryStatement0.getFinallyPosition());
  }
}
