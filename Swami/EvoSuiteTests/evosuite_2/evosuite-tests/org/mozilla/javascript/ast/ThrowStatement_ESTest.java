/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 18:39:56 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.BreakStatement;
import org.mozilla.javascript.ast.RegExpLiteral;
import org.mozilla.javascript.ast.ThrowStatement;
import org.mozilla.javascript.ast.VariableDeclaration;
import org.mozilla.javascript.ast.XmlElemRef;
import org.mozilla.javascript.ast.XmlMemberGet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThrowStatement_ESTest extends ThrowStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThrowStatement throwStatement0 = new ThrowStatement(50);
      StringBuilder stringBuilder0 = new StringBuilder(50);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        throwStatement0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ThrowStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      ThrowStatement throwStatement0 = new ThrowStatement(regExpLiteral0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      throwStatement0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tTHROW -1 1\n-1\t  REGEXP 0 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals("50", throwStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VariableDeclaration variableDeclaration0 = new VariableDeclaration((-1889), 0);
      XmlElemRef xmlElemRef0 = new XmlElemRef(1);
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(variableDeclaration0, xmlElemRef0, 0);
      ThrowStatement throwStatement0 = new ThrowStatement((-139), xmlMemberGet0);
      assertEquals(50, throwStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BreakStatement breakStatement0 = new BreakStatement(320);
      ThrowStatement throwStatement0 = new ThrowStatement(0, 0, breakStatement0);
      String string0 = throwStatement0.toSource(1);
      assertEquals("  throw break;\n;\n", string0);
      assertEquals("50", throwStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ThrowStatement throwStatement0 = new ThrowStatement((-1110), 0);
      assertEquals("50", throwStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ThrowStatement throwStatement0 = new ThrowStatement();
      throwStatement0.getExpression();
      assertEquals("50", throwStatement0.toString());
  }
}
