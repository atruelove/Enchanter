/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 18:16:03 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.ParseProblem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParseProblem_ESTest extends ParseProblem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParseProblem.Type parseProblem_Type0 = ParseProblem.Type.Error;
      ParseProblem parseProblem0 = new ParseProblem(parseProblem_Type0, " ", " ", 200, (-1));
      String string0 = parseProblem0.toString();
      assertEquals(" :offset=200,length=-1,error:  ", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParseProblem.Type parseProblem_Type0 = ParseProblem.Type.Error;
      ParseProblem parseProblem0 = new ParseProblem(parseProblem_Type0, " ", " ", 200, (-1));
      parseProblem0.getType();
      assertEquals(200, parseProblem0.getFileOffset());
      assertEquals((-1), parseProblem0.getLength());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParseProblem.Type parseProblem_Type0 = ParseProblem.Type.Error;
      ParseProblem parseProblem0 = new ParseProblem(parseProblem_Type0, " ", " ", 200, (-1));
      parseProblem0.getSourceName();
      assertEquals((-1), parseProblem0.getLength());
      assertEquals(200, parseProblem0.getFileOffset());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParseProblem.Type parseProblem_Type0 = ParseProblem.Type.Error;
      ParseProblem parseProblem0 = new ParseProblem(parseProblem_Type0, " ", " ", 200, (-1));
      parseProblem0.getMessage();
      assertEquals(200, parseProblem0.getFileOffset());
      assertEquals((-1), parseProblem0.getLength());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParseProblem.Type parseProblem_Type0 = ParseProblem.Type.Error;
      ParseProblem parseProblem0 = new ParseProblem(parseProblem_Type0, "uk[}DlZMb,K-Yt", "uk[}DlZMb,K-Yt", (-717), 0);
      int int0 = parseProblem0.getFileOffset();
      assertEquals((-717), int0);
      assertEquals(0, parseProblem0.getLength());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParseProblem.Type parseProblem_Type0 = ParseProblem.Type.Error;
      ParseProblem parseProblem0 = new ParseProblem(parseProblem_Type0, " ", " ", 200, (-1));
      int int0 = parseProblem0.getLength();
      assertEquals(200, parseProblem0.getFileOffset());
      assertEquals((-1), int0);
  }
}
