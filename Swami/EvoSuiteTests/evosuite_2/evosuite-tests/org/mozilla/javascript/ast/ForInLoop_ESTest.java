/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 18:09:45 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.ArrayComprehensionLoop;
import org.mozilla.javascript.ast.ArrayLiteral;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.ForInLoop;
import org.mozilla.javascript.ast.UnaryExpression;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForInLoop_ESTest extends ForInLoop_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(90, 90);
      ContinueStatement continueStatement0 = new ContinueStatement(24);
      forInLoop0.iteratedObject = (AstNode) continueStatement0;
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(15, 17);
      forInLoop0.setIterator(arrayLiteral0);
      StringBuilder stringBuilder0 = new StringBuilder("else");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        forInLoop0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ForInLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      ContinueStatement continueStatement0 = new ContinueStatement();
      forInLoop0.iterator = (AstNode) continueStatement0;
      forInLoop0.iteratedObject = (AstNode) continueStatement0;
      // Undeclared exception!
      try { 
        forInLoop0.toSource((-644));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ForInLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(0, 0);
      UnaryExpression unaryExpression0 = new UnaryExpression();
      arrayComprehensionLoop0.setIteratedObject(unaryExpression0);
      assertEquals((-1), arrayComprehensionLoop0.getEachPosition());
      assertEquals((-1), arrayComprehensionLoop0.getInPosition());
      assertEquals("120", arrayComprehensionLoop0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      forInLoop0.setIsForOf(true);
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      forInLoop0.setIterator(arrayLiteral0);
      // Undeclared exception!
      try { 
        forInLoop0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ForInLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      forInLoop0.setIsForEach(true);
      // Undeclared exception!
      try { 
        forInLoop0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ForInLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(96, 1546);
      forInLoop0.setInPosition(13);
      assertEquals(13, forInLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(298, 1);
      forInLoop0.setEachPosition(298);
      assertEquals(298, forInLoop0.getEachPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      arrayComprehensionLoop0.isForOf();
      assertEquals((-1), arrayComprehensionLoop0.getInPosition());
      assertEquals((-1), arrayComprehensionLoop0.getEachPosition());
      assertEquals(120, arrayComprehensionLoop0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(136);
      forInLoop0.getIterator();
      assertEquals((-1), forInLoop0.getInPosition());
      assertEquals("120", forInLoop0.toString());
      assertEquals((-1), forInLoop0.getEachPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(96, 1546);
      forInLoop0.getIteratedObject();
      assertEquals((-1), forInLoop0.getEachPosition());
      assertEquals((-1), forInLoop0.getInPosition());
      assertEquals("120", forInLoop0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(0);
      int int0 = arrayComprehensionLoop0.getInPosition();
      assertEquals((-1), arrayComprehensionLoop0.getEachPosition());
      assertEquals((-1), int0);
      assertEquals(120, arrayComprehensionLoop0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop((-1));
      int int0 = arrayComprehensionLoop0.getEachPosition();
      assertEquals((-1), arrayComprehensionLoop0.getInPosition());
      assertEquals((-1), int0);
      assertEquals(120, arrayComprehensionLoop0.getType());
  }
}
