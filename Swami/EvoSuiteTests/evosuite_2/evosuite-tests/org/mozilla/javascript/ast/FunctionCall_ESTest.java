/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 18:28:21 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.Assignment;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ErrorNode;
import org.mozilla.javascript.ast.FunctionCall;
import org.mozilla.javascript.ast.NewExpression;
import org.mozilla.javascript.ast.SwitchCase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionCall_ESTest extends FunctionCall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(447, 447);
      ErrorNode errorNode0 = new ErrorNode(25);
      functionCall0.target = (AstNode) errorNode0;
      functionCall0.addArgument(errorNode0);
      StringBuilder stringBuilder0 = new StringBuilder("  ()");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      functionCall0.visit(astNode_DebugPrintVisitor0);
      assertEquals("  ()447\tCALL 447 447\n25\t  ERROR -422 1\n25\t  ERROR -422 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals((-1), functionCall0.getRp());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(447, 447);
      ErrorNode errorNode0 = new ErrorNode(25);
      functionCall0.target = (AstNode) errorNode0;
      functionCall0.addArgument(errorNode0);
      String string0 = functionCall0.toSource(1);
      assertEquals("38", functionCall0.toString());
      assertEquals((-1), functionCall0.getRp());
      assertEquals((-1), functionCall0.getLp());
      assertEquals("  ()", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(1, 89);
      Assignment assignment0 = new Assignment(1479, 18, newExpression0, newExpression0);
      newExpression0.setTarget(assignment0);
      assertEquals((-1), newExpression0.getRp());
      assertEquals((-1), newExpression0.getLp());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(145, 145);
      newExpression0.setRp(145);
      assertEquals(145, newExpression0.getRp());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(1, 89);
      newExpression0.setParens(89, 619);
      assertEquals(89, newExpression0.getLp());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(0);
      assertEquals((-1), functionCall0.getLp());
      
      functionCall0.setLp(0);
      assertEquals(0, functionCall0.getLp());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(839);
      newExpression0.setArguments((List<AstNode>) null);
      assertEquals((-1), newExpression0.getRp());
      assertEquals((-1), newExpression0.getLp());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(145, 145);
      newExpression0.getTarget();
      assertEquals((-1), newExpression0.getLp());
      assertEquals((-1), newExpression0.getRp());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(145, 145);
      int int0 = newExpression0.getRp();
      assertEquals((-1), newExpression0.getLp());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(839);
      List<AstNode> list0 = newExpression0.getArguments();
      assertNotNull(list0);
      
      newExpression0.setArguments(list0);
      assertEquals((-1), newExpression0.getLp());
      assertEquals((-1), newExpression0.getRp());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(839);
      SwitchCase switchCase0 = new SwitchCase(17, 1);
      newExpression0.addArgument(switchCase0);
      List<AstNode> list0 = newExpression0.getArguments();
      assertFalse(list0.isEmpty());
      
      newExpression0.setArguments(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall();
      int int0 = functionCall0.getLp();
      assertEquals("38", functionCall0.toString());
      assertEquals((-1), int0);
      assertEquals((-1), functionCall0.getRp());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall((-3960), (-3960));
      LinkedList<AstNode> linkedList0 = new LinkedList<AstNode>();
      linkedList0.add((AstNode) functionCall0);
      functionCall0.setArguments(linkedList0);
      assertEquals(0, functionCall0.getPosition());
  }
}
