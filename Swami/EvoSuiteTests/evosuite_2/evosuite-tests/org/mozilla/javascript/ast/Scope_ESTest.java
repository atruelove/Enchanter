/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 17:34:30 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.ArrayComprehension;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.DoLoop;
import org.mozilla.javascript.ast.ForInLoop;
import org.mozilla.javascript.ast.ForLoop;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.Scope;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.Symbol;
import org.mozilla.javascript.ast.WhileLoop;
import org.mozilla.javascript.ast.Yield;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scope scope0 = new Scope((-689), (-689));
      Yield yield0 = new Yield(4, 19);
      scope0.addChild(yield0);
      StringBuilder stringBuilder0 = new StringBuilder("                                                                                                                                                                                                                                                                                  {\nyield                                                                                                                                                                                                                                                                                  }\n");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      scope0.visit(astNode_DebugPrintVisitor0);
      assertEquals("                                                                                                                                                                                                                                                                                  {\nyield                                                                                                                                                                                                                                                                                  }\n-689\tBLOCK -689 712\n4\t  YIELD 693 19\n", astNode_DebugPrintVisitor0.toString());
      assertEquals((-689), scope0.getPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scope scope0 = new Scope((-689), (-689));
      Yield yield0 = new Yield(4, 19);
      scope0.addChild(yield0);
      scope0.toSource(137);
      assertEquals(712, scope0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      ScriptNode scriptNode0 = new ScriptNode();
      scriptNode0.addChildScope(forInLoop0);
      Scope.splitScope(forInLoop0);
      assertEquals(1, forInLoop0.depth());
      assertEquals(119, forInLoop0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      ScriptNode scriptNode0 = new ScriptNode();
      scriptNode0.addChildScope(forInLoop0);
      scriptNode0.replaceWith(forInLoop0);
      assertFalse(forInLoop0.isForEach());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      Symbol symbol0 = new Symbol();
      symbol0.setName(" G]669#yyg(C8OO00'");
      functionNode0.putSymbol(symbol0);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      Symbol symbol0 = new Symbol();
      // Undeclared exception!
      try { 
        functionNode0.putSymbol(symbol0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null symbol name
         //
         verifyException("org.mozilla.javascript.ast.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      ScriptNode scriptNode0 = new ScriptNode();
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      Symbol symbol0 = new Symbol();
      BiFunction<Symbol, Symbol, Symbol> biFunction0 = (BiFunction<Symbol, Symbol, Symbol>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("T5T+gBH", symbol0, biFunction0);
      forInLoop0.setSymbolTable(hashMap0);
      forInLoop0.replaceWith(scriptNode0);
      // Undeclared exception!
      try { 
        scriptNode0.replaceWith(forInLoop0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      ScriptNode scriptNode1 = scriptNode0.getTop();
      assertFalse(scriptNode1.isInStrictMode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForLoop forLoop0 = new ForLoop();
      Symbol symbol0 = forLoop0.getSymbol("");
      assertNull(symbol0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop((-1128));
      WhileLoop whileLoop0 = new WhileLoop();
      forInLoop0.addChildToBack(whileLoop0);
      List<AstNode> list0 = forInLoop0.getStatements();
      assertEquals((-1128), forInLoop0.getAbsolutePosition());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      arrayComprehension0.symbolTable = (Map<String, Symbol>) hashMap0;
      Symbol symbol0 = new Symbol();
      hashMap0.put((String) null, symbol0);
      Scope scope0 = arrayComprehension0.getDefiningScope((String) null);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      Scope scope0 = functionNode0.getDefiningScope("C");
      assertNull(scope0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      List<Scope> list0 = doLoop0.getChildScopes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WhileLoop whileLoop0 = new WhileLoop();
      AstRoot astRoot0 = new AstRoot();
      whileLoop0.setTop(astRoot0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop((-1128));
      forInLoop0.clearParentScope();
      assertEquals((-1128), forInLoop0.getPosition());
  }
}
