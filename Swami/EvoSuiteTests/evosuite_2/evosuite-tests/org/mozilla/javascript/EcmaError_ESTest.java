/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 05:48:54 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.EcmaError;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeUint16Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EcmaError_ESTest extends EcmaError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("_O-J^z2sAS\"", "", (String) null, 44, "_O-J^z2sAS\"", 0);
      String string0 = ecmaError0.getSourceName();
      assertNull(string0);
      assertEquals("", ecmaError0.getErrorMessage());
      assertEquals(44, ecmaError0.lineNumber());
      assertEquals("_O-J^z2sAS\"", ecmaError0.getName());
      assertEquals(0, ecmaError0.getColumnNumber());
      assertEquals("_O-J^z2sAS\"", ecmaError0.lineSource());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Context context0 = Context.enter();
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(9);
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, nativeUint16Array0);
      context0.initStandardObjects((ScriptableObject) nativeUint16Array0);
      EcmaError ecmaError0 = new EcmaError(nativeWith0, (String) null, 0, 7, "error reporter");
      String string0 = ecmaError0.getName();
      assertEquals(7, ecmaError0.columnNumber());
      assertNotNull(string0);
      assertEquals("[object Uint16Array]", ecmaError0.getErrorMessage());
      assertEquals("InternalError", string0);
      assertEquals(0, ecmaError0.lineNumber());
      assertEquals("error reporter", ecmaError0.lineSource());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("_O-J^z2sAS\"", "", (String) null, 44, "_O-J^z2sAS\"", 0);
      String string0 = ecmaError0.getLineSource();
      assertNotNull(string0);
      assertEquals("_O-J^z2sAS\"", ecmaError0.getName());
      assertEquals("_O-J^z2sAS\"", string0);
      assertEquals("", ecmaError0.getErrorMessage());
      assertEquals(0, ecmaError0.getColumnNumber());
      assertEquals(44, ecmaError0.lineNumber());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("_O-J^z2sAS\"", "", (String) null, 44, "_O-J^z2sAS\"", 0);
      int int0 = ecmaError0.getLineNumber();
      assertEquals(0, ecmaError0.columnNumber());
      assertEquals("_O-J^z2sAS\"", ecmaError0.getName());
      assertEquals(44, int0);
      assertEquals("_O-J^z2sAS\"", ecmaError0.getLineSource());
      assertEquals("", ecmaError0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("_O-J^z2sAS\"", "", (String) null, 44, "_O-J^z2sAS\"", 0);
      ecmaError0.getErrorObject();
      assertEquals("_O-J^z2sAS\"", ecmaError0.getName());
      assertEquals(0, ecmaError0.columnNumber());
      assertEquals("", ecmaError0.getErrorMessage());
      assertEquals(44, ecmaError0.getLineNumber());
      assertEquals("_O-J^z2sAS\"", ecmaError0.lineSource());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Context context0 = Context.enter();
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(9);
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, nativeUint16Array0);
      context0.initStandardObjects((ScriptableObject) nativeUint16Array0);
      EcmaError ecmaError0 = new EcmaError(nativeWith0, (String) null, 0, 7, "error reporter");
      String string0 = ecmaError0.getErrorMessage();
      assertEquals("InternalError", ecmaError0.getName());
      assertEquals("[object Uint16Array]", string0);
      assertEquals("error reporter", ecmaError0.getLineSource());
      assertEquals(0, ecmaError0.lineNumber());
      assertNotNull(string0);
      assertEquals(7, ecmaError0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError((Scriptable) null, "language version", 4, 9, "language version");
      String string0 = ecmaError0.details();
      assertEquals(9, ecmaError0.getColumnNumber());
      assertEquals("language version", ecmaError0.sourceName());
      assertEquals(4, ecmaError0.getLineNumber());
      assertEquals("InternalError: null", string0);
      assertEquals("language version", ecmaError0.getLineSource());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Context context0 = Context.enter();
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(9);
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, nativeUint16Array0);
      context0.initStandardObjects((ScriptableObject) nativeUint16Array0);
      EcmaError ecmaError0 = new EcmaError(nativeWith0, (String) null, 0, 7, "error reporter");
      int int0 = ecmaError0.getColumnNumber();
      assertEquals("InternalError", ecmaError0.getName());
      assertEquals("[object Uint16Array]", ecmaError0.getErrorMessage());
      assertEquals(7, int0);
      assertEquals(0, ecmaError0.lineNumber());
      assertEquals("error reporter", ecmaError0.lineSource());
  }
}
