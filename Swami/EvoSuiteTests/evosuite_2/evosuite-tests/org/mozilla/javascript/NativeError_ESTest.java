/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 05:20:53 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeError;
import org.mozilla.javascript.RhinoException;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeError_ESTest extends NativeError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.setStackProvider((RhinoException) null);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      nativeError0.setStackDelegated(nativeFloat32Array0, nativeFloat32Array0);
      assertFalse(nativeError0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        nativeError0.initPrototypeId((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1
         //
         verifyException("org.mozilla.javascript.NativeError", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Object object0 = nativeError0.getStackDelegated(nativeError0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeError0, "Error", (-1414), 2);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        nativeError0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1414
         //
         verifyException("org.mozilla.javascript.NativeError", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Context context0 = Context.enter();
      NativeError nativeError0 = new NativeError();
      NativeError nativeError1 = (NativeError)context0.initStandardObjects((ScriptableObject) nativeError0);
      assertTrue(nativeError1.isExtensible());
  }
}
