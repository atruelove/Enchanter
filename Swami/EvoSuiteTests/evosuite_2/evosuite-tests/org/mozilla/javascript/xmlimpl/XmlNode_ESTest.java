/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 16:06:01 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlNode_ESTest extends XmlNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XmlNode.QNme [", ".do4*51?qk");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      Node node0 = xmlProcessor0.toXml("XmlNode.QNme [", ".do4*51?qk");
      xmlNode_QName0.lookupPrefix(node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("org.mozilla.javascript.xmlimpl.XmlNode$Namespaces");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "htS`X{2+;CLZF|Z|");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "htS`X{2+;CLZF|Z|");
      // Undeclared exception!
      try { 
        xmlNode0.renameNode(xmlNode_QName0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.TextImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("pDw)a8yL;2UK7Bu8", "pDw)a8yL;2UK7Bu8");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "pDw)a8yL;2UK7Bu8");
      boolean boolean0 = xmlNode_QName0.equals(xmlNode_QName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "LdheT:mD^{C{a0");
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespace();
      Document document0 = xmlProcessor0.newDocument();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "XmlNode.Namespace [{}]");
      boolean boolean0 = xmlNode_QName0.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("exp", "exp");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      xmlNode_QName0.qualify((Node) null);
      String string0 = xmlNode_QName0.toString();
      assertEquals("XmlNode.QName [exp,XmlNode.Namespace [{exp}]]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("org.mozilla.javascript.xmlimpl.XmlNode$Namespaces");
      boolean boolean0 = xmlNode_Namespace0.isUnspecifiedPrefix();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("@", "b*wK5_J#{[Hxm[B");
      boolean boolean0 = xmlNode_Namespace0.isGlobal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("@", "b*wK5_J#{[Hxm[B");
      boolean boolean0 = xmlNode_Namespace0.isDefault();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNode.Namespace.create("6bM", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Namespace may not lack a URI
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("");
      assertNotNull(xmlNode_Namespace0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      // Undeclared exception!
      try { 
        xmlNode_InternalList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "htS`X{2+;CLZF|Z|");
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      xmlNode_InternalList0.addToList(xmlNode0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(6);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null);
      ScriptableObject.putProperty((Scriptable) xMLList0, 523, (Object) xMLList0);
      assertEquals("xml", xMLList0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeJavaClass0, (XMLObject) null);
      XmlNode.InternalList xmlNode_InternalList0 = xMLList0.getNodeList();
      // Undeclared exception!
      try { 
        xmlNode_InternalList0.add((XmlNode.InternalList) null, (-595), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$InternalList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      xmlNode_InternalList0.add(xmlNode_InternalList0, (-1717986916), (-1717986916));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      xmlNode_InternalList0.add(xmlNode_InternalList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(nativeArrayBuffer0, 2, 2);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat32Array0, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat32Array0, xMLList0, xmlNode0);
      xmlNode_InternalList0.add(xML0);
      assertFalse(xML0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      xmlNode_InternalList0.add((XmlNode) null);
      // Undeclared exception!
      xmlNode_InternalList0.add(xmlNode_InternalList0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLName xMLName0 = XMLName.create(" GMT-", " GMT-");
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.PROCESSING_INSTRUCTION(xMLName0);
      assertNotNull(xmlNode_Filter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      String string0 = xmlNode0.toXmlString(xmlProcessor0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "5i");
      String string0 = xmlNode0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "5i");
      // Undeclared exception!
      try { 
        xmlNode0.setLocalName("XmlNode: type=3 dom=com.sun.org.apache.xerces.internal.dom.TextImpl@0000000007");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.formProperty("exp", "exp");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "exp");
      xmlNode0.setAttribute(xmlNode_QName0, "exp");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "8l;");
      XmlNode xmlNode1 = XmlNode.createText(xmlProcessor0, "8l;");
      // Undeclared exception!
      try { 
        xmlNode0.replaceWith(xmlNode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.formProperty("exp", "exp");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "exp");
      xmlNode0.renameNode(xmlNode_QName0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("@", "b*wK5_J#{[Hxm[B");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "5i");
      // Undeclared exception!
      try { 
        xmlNode0.removeNamespace(xmlNode_Namespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      // Undeclared exception!
      try { 
        xmlNode0.removeChild(611);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "]BiVTKI+fPd#6gJw[");
      xmlNode0.normalize();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "org.mozilla.javascript.xmlimpl.XmlNode$Filter");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      // Undeclared exception!
      try { 
        XmlNode.newElementWithText((XmlProcessor) null, xmlNode0, xmlNode_QName0, (String) null);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      boolean boolean0 = xmlNode0.isSameNode(xmlNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XmlNode: type=", "P56b");
      boolean boolean0 = xmlNode0.isProcessingInstructionType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "|F>Q9)r>pBx?lVJ9");
      boolean boolean0 = xmlNode0.isParentType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "5i");
      boolean boolean0 = xmlNode0.isCommentType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.formProperty("exp", "exp");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "exp");
      // Undeclared exception!
      try { 
        xmlNode0.invalidateNamespacePrefix();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty string represents default namespace prefix
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "5i");
      XmlNode[] xmlNodeArray0 = new XmlNode[0];
      xmlNode0.insertChildrenAt((-44), xmlNodeArray0);
      assertEquals(0, xmlNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode[] xmlNodeArray0 = new XmlNode[8];
      xmlNodeArray0[0] = xmlNode0;
      // Undeclared exception!
      try { 
        xmlNode0.insertChildrenAt((-1618167431), xmlNodeArray0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "prefix must not be null");
      // Undeclared exception!
      try { 
        xmlNode0.insertChildAt(1624, xmlNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index=1624 length=0
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XmlNode: type=", "P56b");
      XmlNode[] xmlNodeArray0 = new XmlNode[8];
      xmlNodeArray0[0] = xmlNode0;
      // Undeclared exception!
      try { 
        xmlNode0.insertChildrenAt(0, xmlNodeArray0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "a_0QDCOHuD");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "*");
      boolean boolean0 = xmlNode0.hasChildElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "");
      XML xML0 = xmlNode0.getXml();
      assertNull(xML0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.Namespace[] xmlNode_NamespaceArray0 = xmlNode0.getNamespaceDeclarations();
      assertEquals(0, xmlNode_NamespaceArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "a_0QDCOHuD");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "*");
      XmlNode.Namespace xmlNode_Namespace1 = xmlNode0.getNamespaceDeclaration();
      //  // Unstable assertion: assertNull(xmlNode_Namespace1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.formProperty("exp", "exp");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "exp");
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.TEXT;
      XmlNode[] xmlNodeArray0 = xmlNode0.getMatchingChildren(xmlNode_Filter0);
      assertEquals(1, xmlNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.formProperty("ex", "ex");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "ex");
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.COMMENT;
      XmlNode[] xmlNodeArray0 = xmlNode0.getMatchingChildren(xmlNode_Filter0);
      assertEquals(0, xmlNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      int int0 = xmlNode0.getChildIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XmlNode: type=", "XmlNode: type=");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(0);
      assertEquals("XMLList", xMLList0.getClassName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "8l;");
      // Undeclared exception!
      try { 
        xmlNode0.getChild(895);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.formProperty("exp", "exp");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "exp");
      xmlNode0.declareNamespace("exp", "WgfnkOm8IzA^xv<S#");
      XmlNode[] xmlNodeArray0 = xmlNode0.getAttributes();
      assertEquals(1, xmlNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "V%3O^JRLtdRn!w]");
      // Undeclared exception!
      try { 
        xmlNode0.getAttributeValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.TextImpl cannot be cast to org.w3c.dom.Attr
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      String string0 = xmlNode0.ecmaValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      String string0 = xmlNode0.ecmaToXMLString(xmlProcessor0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.formProperty("exp", "exp");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "exp");
      String string0 = xmlNode0.ecmaToXMLString(xmlProcessor0);
      assertEquals("<exp xmlns=\"exp\">exp</exp>", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "Array");
      String string0 = xmlNode0.debug();
      assertEquals("Array", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      Document document0 = xmlProcessor0.newDocument();
      // Undeclared exception!
      try { 
        XmlNode.createElementFromNode(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      Node node0 = xmlNode0.toDomNode();
      XmlNode xmlNode1 = XmlNode.createElementFromNode(node0);
      assertSame(xmlNode1, xmlNode0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "htS`X{2+;CLZF|Z|");
      XmlNode xmlNode1 = xmlNode0.copy();
      assertFalse(xmlNode1.equals((Object)xmlNode0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.formProperty("ex", "ex");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "ex");
      xmlNode0.declareNamespace("ex", "WgfnkOm8IzA^xv<S#");
      XmlNode.Namespace[] xmlNode_NamespaceArray0 = xmlNode0.getNamespaceDeclarations();
      assertEquals(2, xmlNode_NamespaceArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "5i");
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.TEXT;
      xmlNode0.addMatchingChildren((XMLList) null, xmlNode_Filter0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "org.mozilla.javascript.xmlimpl.XmlNode$Filter", "org.mozilla.javascript.xmlimpl.XmlNode$Filter");
      xmlNode0.deleteMe();
  }
}
