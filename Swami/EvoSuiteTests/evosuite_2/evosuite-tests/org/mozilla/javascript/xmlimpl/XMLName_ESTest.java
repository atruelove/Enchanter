/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 16:23:34 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLName_ESTest extends XMLName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty((String) null, "H:wt");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "H:wt");
      XML xML0 = xmlNode0.getXml();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, xML0);
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn(xML0, xMLList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty((String) null, "H:wt");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "H:wt");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      xMLName0.setMyValueOn(xML0, xML0);
      assertEquals("xml", xML0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLName xMLName0 = XMLName.create(">>CV(6qauY/lHc9~", ">>CV(6qauY/lHc9~");
      xMLName0.setAttributeName();
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn((XML) null, ">>CV(6qauY/lHc9~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn((XML) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLName xMLName0 = XMLName.create(">>CV(6qauY/lHc9~", ">>CV(6qauY/lHc9~");
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn((XML) null, ">>CV(6qauY/lHc9~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("o,Q+cU<!Y%+A`]k4v", "o,Q+cU<!Y%+A`]k4v");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "p:(u3[c81o)O", "'A$a");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      xMLName0.initXMLObject(xML0);
      Context context0 = Context.getCurrentContext();
      Object object0 = new Object();
      Object object1 = xMLName0.set(context0, object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        xMLName0.set(context0, (Object) 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"*\" of undefined to \"11\"
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("und>efined", "");
      boolean boolean0 = xMLName0.matchesLocalName("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("gW4}FvZ,}y3", "gW4}FvZ,}y3");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XMLName xMLName1 = XMLName.formProperty("gW4}FvZ,}y3", "+Kdu ]3D4-j%");
      boolean boolean0 = xMLName1.matchesElement(xmlNode_QName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("gW4}FvZ,}y3", "gW4}FvZ,}y3");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      boolean boolean0 = xMLName0.matchesElement(xmlNode_QName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLName xMLName0 = XMLName.create((String) null, ">>CV(6qauY/lHc9~");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      boolean boolean0 = xMLName0.matches(xML0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLName xMLName0 = XMLName.create(">>CV(6qauY/lHc9~", ">>CV(6qauY/lHc9~");
      xMLName0.setAttributeName();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, ">>CV(6qauY/lHc9~");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      boolean boolean0 = xMLName0.matches(xML0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = XMLName.accept("_i");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("o,Q+cU<!Y%+A`]k4v", "o,Q+cU<!Y%+A`]k4v");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "o,Q+cU<!Y%+A`]k4v");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      xMLName0.initXMLObject(xML0);
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = xMLName0.has(context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("o,Q+cU<!Y%+A`]k4v", "o,Q+cU<!Y%+A`]k4v");
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = xMLName0.has(context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty(">>CV(6qauY/lHc9~", ">>CV(6qauY/lHc9~");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.processingInstructions(xMLName0);
      xMLName0.initXMLObject(xMLList0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      XMLList xMLList1 = (XMLList)xMLName0.get(context0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("gW4}FvZ,}y3", "gW4}FvZ,}y3");
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xMLName0.get(context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"\"gW4}FvZ,}y3\":gW4}FvZ,}y3\" from undefined
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLName xMLName0 = XMLName.create(">>CV(6qauY/lHc9~", ">>CV(6qauY/lHc9~");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      Context context0 = Context.enter();
      XMLList xMLList0 = xML0.text();
      xMLName0.initXMLObject(xMLList0);
      boolean boolean0 = xMLName0.delete(context0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("gW4}FvZ,}y3", "gW4}FvZ,}y3");
      Context context0 = Context.enter();
      boolean boolean0 = xMLName0.delete(context0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("FS", "FS");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XMLName xMLName1 = XMLName.create(xmlNode_QName0);
      assertNotSame(xMLName0, xMLName1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("@*", "@*");
      assertNotNull(xMLName0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLName.create((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("org.mozilla.javascript.ContextFactory", "0~2p9;h*rOK@(4_");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "org.mozilla.javascript.ContextFactory");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "2oX");
      XMLName xMLName0 = XMLName.formProperty((XmlNode.Namespace) null, "Q!7p2R\"H=p]");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      XML xML0 = new XML(xMLLibImpl0, nativeInt8Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLName0.addMatchingAttributes(xMLList0, xML0);
      assertFalse(xML0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("H:wt", "oWZ|l;");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      xMLName0.setIsDescendants();
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl1, (Scriptable) null, (XMLObject) null);
      xMLName0.addMatches(xMLList0, xML0);
      assertFalse(xML0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLName xMLName0 = XMLName.create(">>CV(6qauY/lHc9~", ">>CV(6qauY/lHc9~");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      XMLList xMLList1 = xMLName0.matchDescendantAttributes(xMLList0, xML0);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "{m");
      XMLName xMLName0 = XMLName.create(xmlNode_QName0, true, true);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      // Undeclared exception!
      try { 
        xMLName0.addDescendants(xMLList0, (XML) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLName xMLName0 = XMLName.create(">>CV(6qauY/lHc9~", ">>CV(6qauY/lHc9~");
      xMLName0.setAttributeName();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, ">>CV(6qauY/lHc9~");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.getPropertyList(xMLName0);
      assertFalse(xMLList0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = XMLName.accept("I9L_y-g");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = XMLName.accept("gW4}FvZ,}y3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      boolean boolean0 = XMLName.accept(nativeArrayBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = XMLName.accept(">>CV(6qauY/lHc9~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("*", "*");
      assertNotNull(xMLName0);
  }
}
