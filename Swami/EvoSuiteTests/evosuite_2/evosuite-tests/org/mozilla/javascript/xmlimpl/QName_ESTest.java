/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 16:48:16 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.Namespace;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QName_ESTest extends QName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("keyFor", "keyFor");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "keyFor");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "keyFor");
      XML xML0 = new XML(xMLLibImpl0, nativeInt32Array0, (XMLObject) null, xmlNode0);
      QName qName0 = xML0.newQName(xmlNode_QName0);
      String string0 = qName0.toString();
      assertEquals("keyFor::keyFor", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2147);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      XmlNode.QName xmlNode_QName1 = qName0.toNodeQname();
      assertSame(xmlNode_QName0, xmlNode_QName1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2154);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      String string0 = qName0.prefix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeObject nativeObject0 = new NativeObject();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "uri");
      XML xML0 = new XML(xMLLibImpl0, nativeObject0, (XMLObject) null, xmlNode0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("-z&2T");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "uri");
      QName qName0 = xML0.newQName(xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.newQName(xMLLibImpl1, "hqEy]&.", "new QName(", "hqEy]&.");
      assertEquals("new QName(", qName1.localName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2154);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespaceDeclaration();
      Context context0 = Context.getCurrentContext();
      QName qName1 = qName0.constructQName((XMLLibImpl) null, context0, (Object) null, xmlNode_Namespace0);
      Class<Object> class0 = Object.class;
      Object object0 = qName1.getDefaultValue(class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2147);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      qName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, xMLList0, xmlNode0);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, (String) null);
      QName qName0 = xML0.newQName(xmlNode_QName0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        qName0.defineOwnProperties(context0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      Object object0 = qName0.getInstanceIdValue(1);
      assertNotNull(object0);
      assertEquals("*", object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2137);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.getInstanceIdValue(150);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 150
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.getInstanceIdName(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      XmlNode.QName xmlNode_QName1 = qName0.getDelegate();
      assertSame(xmlNode_QName0, xmlNode_QName1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      Context context0 = Context.getCurrentContext();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(qName0, xmlNode0, 2, 100);
      // Undeclared exception!
      try { 
        qName0.execIdCall(idFunctionObject0, context0, (Scriptable) null, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=2 MASTER=*
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2186);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      Object object0 = qName0.equivalentValues(qName0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2154);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      boolean boolean0 = qName0.equals(qName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      Context context0 = Context.getCurrentContext();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("language version");
      Namespace namespace0 = Namespace.create(nativeUint8Array0, (Namespace) null, xmlNode_Namespace0);
      Float float0 = new Float((float) 2);
      QName qName1 = qName0.constructQName((XMLLibImpl) null, context0, namespace0, float0);
      assertEquals("2", qName1.localName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, xMLList0, xmlNode0);
      Context context0 = Context.enter();
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = xML0.newQName((XmlNode.QName) null);
      QName qName1 = qName0.constructQName(xMLLibImpl1, context0, "*");
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2137);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      Context context0 = Context.getCurrentContext();
      QName qName1 = qName0.constructQName((XMLLibImpl) null, context0, qName0);
      assertSame(qName1, qName0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("keyFor", "keyFor");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "keyFor");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "keyFor");
      XML xML0 = new XML(xMLLibImpl0, nativeInt32Array0, (XMLObject) null, xmlNode0);
      QName qName0 = xML0.newQName(xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        qName0.castToQName(xMLLibImpl1, (Context) null, float0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2168);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      Context context0 = Context.getCurrentContext();
      QName qName1 = qName0.castToQName((XMLLibImpl) null, context0, qName0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = QName.create((XMLLibImpl) null, nativeUint8Array0, (QName) null, xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.constructQName((XMLLibImpl) null, (Context) null, 8, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.QName", e);
      }
  }
}
