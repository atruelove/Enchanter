/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 03:28:39 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.HashSlotMap;
import org.mozilla.javascript.ScriptableObject;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HashSlotMap_ESTest extends HashSlotMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      int int0 = hashSlotMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      hashSlotMap0.get(object0, (-11), scriptableObject_SlotAccess0);
      hashSlotMap0.remove(object0, (-11));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      hashSlotMap0.get((Object) null, 2, scriptableObject_SlotAccess0);
      // Undeclared exception!
      try { 
        hashSlotMap0.remove((Object) null, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      ScriptableObject.Slot scriptableObject_Slot0 = hashSlotMap0.query(scriptableObject_SlotAccess0, 2);
      assertNull(scriptableObject_Slot0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      Spliterator<ScriptableObject.Slot> spliterator0 = hashSlotMap0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      boolean boolean0 = hashSlotMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      ScriptableObject.Slot scriptableObject_Slot0 = hashSlotMap0.get((Object) null, 935, scriptableObject_SlotAccess0);
      assertNull(scriptableObject_Slot0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot("Z*W^", 0, 0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.QUERY;
      ScriptableObject.Slot scriptableObject_Slot0 = hashSlotMap0.get(scriptableObject_GetterSlot0, 0, scriptableObject_SlotAccess0);
      assertNull(scriptableObject_Slot0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      hashSlotMap0.get((Object) null, 1, scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      ScriptableObject.Slot scriptableObject_Slot0 = hashSlotMap0.get((Object) null, 1, scriptableObject_SlotAccess1);
      assertNotNull(scriptableObject_Slot0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(hashSlotMap0, (-2025), (-2025));
      hashSlotMap0.addSlot(scriptableObject_GetterSlot0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      ScriptableObject.Slot scriptableObject_Slot0 = hashSlotMap0.get(hashSlotMap0, (-2025), scriptableObject_SlotAccess0);
      assertNotNull(scriptableObject_Slot0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      ScriptableObject.Slot scriptableObject_Slot0 = hashSlotMap0.get(object0, 18, scriptableObject_SlotAccess0);
      ScriptableObject.Slot scriptableObject_Slot1 = hashSlotMap0.get(object0, 18, scriptableObject_SlotAccess0);
      assertNotNull(scriptableObject_Slot1);
      assertSame(scriptableObject_Slot1, scriptableObject_Slot0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashSlotMap hashSlotMap0 = new HashSlotMap();
      Object object0 = new Object();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(object0, 11, 11);
      hashSlotMap0.addSlot(scriptableObject_GetterSlot0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      ScriptableObject.Slot scriptableObject_Slot0 = hashSlotMap0.get(object0, 11, scriptableObject_SlotAccess0);
      assertSame(scriptableObject_Slot0, scriptableObject_GetterSlot0);
  }
}
