/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 06:50:15 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.Parser;
import org.mozilla.javascript.TokenStream;
import org.mozilla.javascript.ast.AstRoot;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenStream_ESTest extends TokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("MODIFY_CONST");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 94);
      int int0 = tokenStream0.getToken();
      assertEquals(11, tokenStream0.getTokenEnd());
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      StringReader stringReader0 = new StringReader("language version");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "language version", 1900);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (language version#1900)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword(".J-(#s", 86, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("source", (-1743), false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("callWithDomain should be overridden", "", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("Ubp,b@.kx4th0?f6?M");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "hasInstance", 27);
      assertEquals(18, astRoot0.getLength());
      assertEquals(27, astRoot0.getLineno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      StringReader stringReader0 = new StringReader("error reporter");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "language version", 1900);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (language version#1900)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "while", 65536);
      int int0 = tokenStream0.getToken();
      assertEquals(4, tokenStream0.getTokenEnd());
      assertEquals(118, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("u-p3Wh|vbh");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "hasInstance", (-4860));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("let", (-4049), true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("?hHbp:0GE~", 2451, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("Nv-GH/b1cAv0+9");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 109);
      // Undeclared exception!
      try { 
        tokenStream0.readRegExp(2342);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader(" ^IGP");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 5);
      tokenStream0.readAndClearRegExpFlags();
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "lfbDULK", 128);
      tokenStream0.isXMLAttribute();
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("catch", 0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = TokenStream.isJSSpace(65536);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "", 20);
      int int0 = tokenStream0.getTokenLength();
      assertEquals(0, tokenStream0.getCursor());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "wYdKyA::R", 65536);
      int int0 = tokenStream0.getTokenEnd();
      assertEquals(0, tokenStream0.getCursor());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("catch");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 0);
      int int0 = tokenStream0.getTokenBeg();
      assertEquals(0, int0);
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("rsc8_uZMl`");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "rsc8_uZMl`", (-5796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5796
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("Nv-GH/b1cAv0+9");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "byte", 108);
      assertEquals(108, astRoot0.getLineno());
      assertEquals(15, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("~bp,b@.kx4thO;0?f6?M");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "hasInstance", (-4860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4860
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("%Z,");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "hasInstance", (-4860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4860
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("SlXr*zgeC^cs}bwBf", "SlXr*zgeC^cs}bwBf", 65536);
      assertEquals(17, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("Ng-GH/b1c>v0}+9");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "byte", 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (byte#108)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("=a", "External array index out of bounds ", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (External array index out of bounds #5)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("u-&p3WY|O");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "hasInstance", (-4860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4860
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("org.mozilla.javascript.ast.Assigment", "switch", 57343);
      assertEquals(36, astRoot0.getLength());
      assertEquals(57343, astRoot0.getLineno());
      assertTrue(parser0.eof());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("!{a?/M)+/qka", "switch", 57343);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( before function parameters. (switch#57343)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("]p2/");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "language version", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("((L[[", "((L[[", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ] after element list
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("zy|t^ofl\"T");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "language version", 1900);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated string literal (language version#1900)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("boolean", "--", 0);
      assertEquals(0, astRoot0.getEndLineno());
      assertEquals(7, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "", 65536);
      String string0 = tokenStream0.getSourceString();
      assertNotNull(string0);
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^|]Ebqv1-z7mCKcm9v");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 111);
      char char0 = tokenStream0.getQuoteChar();
      assertEquals(0, tokenStream0.getCursor());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("/8^R");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 5);
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader(" ^IGP");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 5);
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "Ng-GH/b1c>v0}+9", (-2726));
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.TokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z5iUBb9??'ilz.");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 1066);
      int int0 = tokenStream0.getCursor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("catch");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 0);
      tokenStream0.getCommentType();
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "O4reQ8T6T],O", (-461));
      String string0 = tokenStream0.getAndResetCurrentComment();
      assertEquals(0, tokenStream0.getCursor());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader(" ^IGP");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 5);
      // Undeclared exception!
      try { 
        tokenStream0.getAndResetCurrentComment();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader(" ^IGP");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 5);
      boolean boolean0 = tokenStream0.eof();
      assertFalse(boolean0);
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader(" ^IGP");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 5);
      String string0 = tokenStream0.getLine();
      assertEquals(" ^IGP", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^|]Ebqv1-z7mCKcm9v");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 111);
      tokenStream0.sourceCursor = 111;
      // Undeclared exception!
      try { 
        tokenStream0.getNextXMLToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("org.mozilla.javascript.TokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("u-p3W^;O");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "hasInstance", (-4860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4860
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("$s}<l:3jgm3p!Rv5");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "language version", 0);
      assertEquals(0, astRoot0.getEndLineno());
      assertEquals(16, astRoot0.getLength());
  }
}
