/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 03:07:29 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.InterpretedFunction;
import org.mozilla.javascript.JavaAdapter;
import org.mozilla.javascript.JavaMembers;
import org.mozilla.javascript.NativeBoolean;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeJavaMethod;
import org.mozilla.javascript.NativeJavaPackage;
import org.mozilla.javascript.NativeJavaTopPackage;
import org.mozilla.javascript.NativeString;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaMembers_ESTest extends JavaMembers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<NativeJavaTopPackage> class0 = NativeJavaTopPackage.class;
      BaseFunction baseFunction0 = new BaseFunction();
      JavaMembers javaMembers0 = new JavaMembers(baseFunction0, class0, false);
      Class<ImporterTopLevel>[] classArray0 = (Class<ImporterTopLevel>[]) Array.newInstance(Class.class, 2);
      Synchronizer synchronizer0 = new Synchronizer(baseFunction0, javaMembers0);
      // Undeclared exception!
      try { 
        javaMembers0.put(synchronizer0, "org.mozilla.javascript.ImporterTopLevel", classArray0[0], synchronizer0, false);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Java class \"org.mozilla.javascript.NativeJavaTopPackage\" has no public instance field or method named \"org.mozilla.javascript.ImporterTopLevel\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(false, "", classLoader0);
      NativeString nativeString0 = new NativeString("");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("is", nativeString0);
      Class<String> class0 = String.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeJavaPackage1, class0, true);
      // Undeclared exception!
      try { 
        javaMembers0.put(nativeJavaPackage1, "", "is", "", true);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Java class \"java.lang.String\" has no public instance field or method named \"\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<NativeJavaTopPackage> class0 = NativeJavaTopPackage.class;
      JavaMembers javaMembers0 = new JavaMembers((Scriptable) null, class0, false);
      boolean boolean0 = javaMembers0.has("isExtensible", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(false, "", classLoader0);
      NativeString nativeString0 = new NativeString("");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("is", nativeString0);
      Class<String> class0 = String.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeJavaPackage1, class0, true);
      Object[] objectArray0 = javaMembers0.getIds(true);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<Field> class0 = Field.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeContinuation0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeJavaMethod nativeJavaMethod0 = (NativeJavaMethod)javaMembers0.get(nativeContinuation0, "get", nativeJavaTopPackage0, false);
      assertFalse(nativeJavaMethod0.isSealed());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<NativeJavaTopPackage> class0 = NativeJavaTopPackage.class;
      BaseFunction baseFunction0 = new BaseFunction();
      JavaMembers javaMembers0 = new JavaMembers(baseFunction0, class0, false);
      Class<ImporterTopLevel> class1 = ImporterTopLevel.class;
      Object object0 = javaMembers0.get(baseFunction0, "(org.mozilla.javascript.ImporterTopLevel,org.mozilla.javascript.ImporterTopLevel)", class1, false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(false, "", classLoader0);
      NativeString nativeString0 = new NativeString("");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("is", nativeString0);
      Class<String> class0 = String.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeJavaPackage1, class0, true);
      Object object0 = javaMembers0.get(nativeJavaPackage1, "(", nativeJavaPackage1, true);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      Scriptable scriptable0 = JavaAdapter.createAdapterWrapper(scriptableObject0, context0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      scriptableObject0.put("language version", scriptable0, (Object) nativeBoolean0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      JavaMembers javaMembers0 = new JavaMembers((Scriptable) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(nativeArrayBuffer0, 8, 1);
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeInt16Array0, class0);
      // Undeclared exception!
      try { 
        javaMembers0.put(nativeArrayBuffer0, "wait", nativeArrayBuffer0, "wait", false);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Java method \"wait\" cannot be assigned to.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }
}
