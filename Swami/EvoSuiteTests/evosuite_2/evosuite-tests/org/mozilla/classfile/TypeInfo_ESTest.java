/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 08:50:14 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ClassFileWriter;
import org.mozilla.classfile.ConstantPool;
import org.mozilla.classfile.TypeInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeInfo_ESTest extends TypeInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((ClassFileWriter) null);
      String string0 = TypeInfo.toString(6, constantPool0);
      assertEquals("uninitialized_this", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 5;
      ClassFileWriter classFileWriter0 = new ClassFileWriter("dnJ<R", "wd:MV]", "Psd/nC%C*phw^ZB+.-");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      TypeInfo.print(intArray0, intArray0, constantPool0);
      assertArrayEquals(new int[] {5, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(";Z-", ";Z-", ";Z-");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        TypeInfo.merge(7, 3, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad merge attempt between null and double
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("No method to add to", "No method to add to", "No method to add to");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        TypeInfo.merge((short)2, (short)8, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad merge attempt between float and uninitialized
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((ClassFileWriter) null);
      String string0 = TypeInfo.toString(1, constantPool0);
      assertEquals("int", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.merge(4, 4856, (ConstantPool) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad type
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = TypeInfo.merge(5, 1287, (ConstantPool) null);
      assertEquals(1287, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(";Z-", ";Z-", ";Z-");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = TypeInfo.merge((short)32, (short)1024, constantPool0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = TypeInfo.merge(1287, 5, (ConstantPool) null);
      assertEquals(1287, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = TypeInfo.isTwoWords(3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((ClassFileWriter) null);
      // Undeclared exception!
      try { 
        TypeInfo.getPayloadAsType(6, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expecting object type
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("D#3^CCZc%CMe4 $\":", "D#3^CCZc%CMe4 $\":", "D#3^CCZc%CMe4 $\":");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        TypeInfo.merge(519, 7, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Z]jJ", "Z]jJ", "Z]jJ");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        TypeInfo.fromType("M", constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad type
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = TypeInfo.fromType("J", (ConstantPool) null);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Sg&", "Sg&", "Sg&");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = TypeInfo.fromType("F", constantPool0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("bad operand [8:ze", "bad operand [8:ze", "bad operand [8:ze");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = TypeInfo.fromType("B", constantPool0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("bU eArg/ sBGe", "bU eArg/ sBGe", "bU eArg/ sBGe");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = TypeInfo.fromType("D", constantPool0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = TypeInfo.UNINITIALIZED_VARIABLE(5);
      assertEquals(1288, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("D#3^CCZc%CMe4 $\":", "D#3^CCZc%CMe4 $\":", "D#3^CCZc%CMe4 $\":");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      TypeInfo.fromType("D#3^CCZc%CMe4 $\":", constantPool0);
      // Undeclared exception!
      try { 
        TypeInfo.merge(519, 7, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
