/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 09:02:29 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ClassFileWriter;
import org.mozilla.classfile.ConstantPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPool_ESTest extends ConstantPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(",]9[/4;9&?Z(x", "<utyK8iA^i", "org.mozilla.classfile.FieldOrMethodRef");
      byte[] byteArray0 = classFileWriter0.toByteArray();
      assertEquals(122, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)", "aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)", "aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      boolean boolean0 = constantPool0.isUnderUtfEncodingLimit("aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44).aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44) (0)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(",]9[.4;9&?Z(x", ",]9[.4;9&?Z(x", "|zv7@");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.getWriteSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)/aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0,  O60)/org/mozilla/classfile/ConstantP\"olorg/mozilla/classfile/ExceptionTableEntry (44)aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0, (-60)/org/mozilla/classfile/ConstantPoolorg#mozilla/classfile/ExceptJonTableEntry (44) (127)", "aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)/aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0,  O60)/org/mozilla/classfile/ConstantP\"olorg/mozilla/classfile/ExceptionTableEntry (44)aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0, (-60)/org/mozilla/classfile/ConstantPoolorg#mozilla/classfile/ExceptJonTableEntry (44) (127)", "aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)/aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0,  O60)/org/mozilla/classfile/ConstantP\"olorg/mozilla/classfile/ExceptionTableEntry (44)aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0, (-60)/org/mozilla/classfile/ConstantPoolorg#mozilla/classfile/ExceptJonTableEntry (44) (127)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        constantPool0.getUtfEncodingLimit("aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)/aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0,  O60)/org/mozilla/classfile/ConstantP\"olorg/mozilla/classfile/ExceptionTableEntry (44)aM?K+<{6,//org/mozilla/classfile/ClassFileWriter$MHandle \u2209 [0, (-60)/org/mozilla/classfile/ConstantPoolorg#mozilla/classfile/ExceptJonTableEntry (44) (127)", (short)8, 32064);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.getUtfEncodingLimit("", (short)64, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "VVzJ17+t;", "");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      byte byte0 = constantPool0.getConstantType((short)16);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(",]9[.4;9&?Z(x", ",]9[.4;9&?Z(x", "|zv7@");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Object object0 = constantPool0.getConstantData((short)32);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(",]9[/4;9?Z(x", ",]9[/4;9?Z(x", ",]9[/4;9?Z(x");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      short short0 = constantPool0.addInvokeDynamic(",]9[/4;9?Z(x", ",]9[/4;9?Z(x", (short)2);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("p][4;9(", "p][4;9(", "p][4;9(");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)9, "p][4;9(", "p][4;9(", "p][4;9(");
      short short0 = constantPool0.addMethodHandle(classFileWriter_MHandle0);
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)", "aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)", "aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)0, "aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)", "aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)", "aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)");
      short short0 = constantPool0.addMethodHandle(classFileWriter_MHandle0);
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Too big string", "Too big string", "Too big string");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        constantPool0.addConstant(classFileWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mozilla.classfile.ClassFileWriter@e
         //
         verifyException("org.mozilla.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)48, "", "", "");
      int int0 = constantPool0.addConstant(classFileWriter_MHandle0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(">", ">", ">");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.addConstant(">");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(">", ">", ">");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Character character0 = Character.valueOf('J');
      int int0 = constantPool0.addConstant(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("I{S,7$T", "I{S,7$T", "I{S,7$T");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.addConstant((short)32);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("p][4;9(", "p][4;9(", "p][4;9(");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Long long0 = new Long((short)1024);
      int int0 = constantPool0.addConstant(long0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(">", ">", ">");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Boolean boolean0 = Boolean.TRUE;
      int int0 = constantPool0.addConstant(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)", "aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)", "aM?K+<{6,//org/mozilla/classfileClassFileWriter$MHandle \u2209 [0,  -60)/org/mozilla/classfile/ConstantPoolorg/mozilla/classfile/ExceptionTableEntry (44)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Double double0 = new Double((short)1024);
      int int0 = constantPool0.addConstant(double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Float float0 = new Float((float) (short)256);
      int int0 = constantPool0.addConstant(float0);
      assertEquals(1, int0);
  }
}
