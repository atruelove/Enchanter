/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 04:43:25 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BoundFunction;
import org.mozilla.javascript.Callable;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.FunctionObject;
import org.mozilla.javascript.JavaAdapter;
import org.mozilla.javascript.NativeDate;
import org.mozilla.javascript.NativeIterator;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.NativeString;
import org.mozilla.javascript.Script;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      FunctionObject.findSingleMethod(methodArray0, "toString");
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      BoundFunction boundFunction0 = null;
      try {
        boundFunction0 = new BoundFunction(context0, nativeInt8Array0, (Callable) null, nativeInt8Array0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      FunctionObject functionObject0 = new FunctionObject("java.lang.Boolen", method0, nativeInt8Array0);
      functionObject0.getMethodOrConstructor();
      assertEquals("java.lang.Boolen", functionObject0.getFunctionName());
      assertEquals(25, methodArray0.length);
      assertEquals(0, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "isBridge");
      assertNotNull(method0);
      
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      FunctionObject functionObject0 = new FunctionObject(":{E=ib]Sk,Vd#Z2~_jl", method0, nativeInt8Array0);
      int int0 = functionObject0.getLength();
      assertEquals(25, methodArray0.length);
      assertEquals(0, int0);
      assertEquals(":{E=ib]Sk,Vd#Z2~_jl", functionObject0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "parseUnsignedInt");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Method \"parseUnsignedInt\" occurs multiple times in class \"java.lang.Integer\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(200);
      FunctionObject functionObject0 = new FunctionObject("java.lang.Boolean", method0, nativeInt8Array0);
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeInt8Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: java.lang.reflect.Method
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<BoundFunction> class0 = BoundFunction.class;
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) class0, (Class<?>) class1);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.annotation.Annotation\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Delegator delegator0 = new Delegator();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg((Context) null, (Scriptable) nativeIterator_StopIteration0, (Object) delegator0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<NativeDate> class0 = NativeDate.class;
      NativeIterator.StopIteration nativeIterator_StopIteration1 = (NativeIterator.StopIteration)FunctionObject.convertArg(context0, (Scriptable) null, (Object) nativeIterator_StopIteration0, (Class<?>) class0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = Context.enter();
      NativeString nativeString0 = new NativeString("error reporter");
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) nativeString0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(10);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeUint32Array0, (Object) context0.FEATURE_INTEGER_WITHOUT_DECIMAL_PLACE, 3);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(160);
      Class<Integer> class0 = Integer.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeUint32Array0, (Object) contextFactory0, (Class<?>) class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeInt8Array0, (Object) "msg.bad.ctor.return", 1);
      assertEquals("msg.bad.ctor.return", object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Delegator delegator0 = new Delegator();
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) delegator0, (Object) null, 1);
      assertNotNull(object0);
      assertEquals("null", object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) contextFactory0, 6);
      assertSame(object0, contextFactory0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      FunctionObject functionObject0 = new FunctionObject("java.lang.Boolen", method0, nativeInt8Array0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeInt8Array0, nativeInt8Array0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"java.lang.Boolen\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getDefaultValue");
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("[netinve codeefo2^r ", method0, nativeObject0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.Class\" in method \"getDefaultValue\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "isBridge");
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      FunctionObject functionObject0 = new FunctionObject(":{E=ib]Sk,Vd#Z2~_jl", method0, nativeInt8Array0);
      NativeObject nativeObject0 = new NativeObject();
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeObject0, nativeObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \":{E=ib]Sk,Vd#Z2~_jl\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }
}
