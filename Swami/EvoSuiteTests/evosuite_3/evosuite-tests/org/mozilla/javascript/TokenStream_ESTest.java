/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 03:14:16 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.DefaultErrorReporter;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.Parser;
import org.mozilla.javascript.TokenStream;
import org.mozilla.javascript.ast.AstRoot;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenStream_ESTest extends TokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("msg.unterminated.string.lit");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 0);
      String string0 = tokenStream0.tokenToString((-3132));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("synchronized", 0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("org.mozilla.javascript.BoundFunction");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "org.mozilla.javascript.BoundFunction", (-679));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parser parser0 = new Parser();
      AstRoot astRoot0 = parser0.parse("s62ilm", "s62ilm", 65536);
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(6, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("public", 162, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("native");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "j|;_{qk", 21);
      assertEquals(6, astRoot0.getLength());
      assertTrue(parser0.eof());
      assertEquals(21, astRoot0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("[at3ve");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "j|;_{qk", 21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ] after element list (j|;_{qk#21)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      // Undeclared exception!
      try { 
        parser0.parse("mqsg.invalid.rflag", "package", (-21));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      // Undeclared exception!
      try { 
        parser0.parse("acage", "acage", (-21));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("ative");
      stringReader0.read();
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "j;|;_{k", 21);
      assertEquals(21, astRoot0.getEndLineno());
      assertEquals(4, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 65536);
      // Undeclared exception!
      try { 
        tokenStream0.readRegExp(65536);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "acage", 0);
      String string0 = tokenStream0.readAndClearRegExpFlags();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parser parser0 = new Parser();
      String string0 = "s&x I`@&";
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, string0, 65536);
      boolean boolean0 = tokenStream0.isXMLAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("7", 512, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = TokenStream.isJSSpace(65536);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("msg.unterminated.string.lit");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 0);
      int int0 = tokenStream0.getTokenLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("msg.unterminated.string.lit");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 0);
      int int0 = tokenStream0.getTokenEnd();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "packUVa^e", 0);
      int int0 = tokenStream0.getTokenBeg();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      // Undeclared exception!
      try { 
        parser0.parse("msg.inv-alid.re.flag", "package", (-21));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",nq0");
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      Parser parser0 = new Parser((CompilerEnvirons) null, defaultErrorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, (-360));
      int int0 = tokenStream0.getToken();
      assertEquals(1, tokenStream0.getTokenLength());
      assertEquals(90, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      // Undeclared exception!
      try { 
        parser0.parse("Uz4o})F", "Uz4o})F", (-1127));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("{|\u0007qk", "", 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (#14)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      // Undeclared exception!
      try { 
        parser0.parse("]jt&gG", "]jt&gG", 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (]jt&gG#47)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("j|;_{qk", "", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (#16)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      // Undeclared exception!
      try { 
        parser0.parse("('X8`4tr2", "('X8`4tr2", (-1127));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("while");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "while", (-679));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -679
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "(D)Ljava/lang/Double;", (-725));
      String string0 = tokenStream0.getSourceString();
      assertEquals("(D)Ljava/lang/Double;", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "(D)Ljava/lang/Double;", (-725));
      char char0 = tokenStream0.getQuoteChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "package", 0);
      parser0.parse("package", (String) null, 7);
      int int0 = tokenStream0.getNextXMLToken();
      assertEquals(7, tokenStream0.getCursor());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("e/i:ma)_K^_.!9?||kW");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 110);
      tokenStream0.getToken();
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      Parser parser0 = new Parser(compilerEnvirons0, defaultErrorReporter0);
      StringReader stringReader0 = new StringReader("language version");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 3);
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("}M/Sg'Wvn]Pic");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 110);
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("}M/>Eg'Wvn]Pic");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 110);
      int int0 = tokenStream0.getFirstXMLToken();
      assertEquals(4, tokenStream0.getTokenEnd());
      assertEquals(149, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      // Undeclared exception!
      try { 
        parser0.parse("([Xw`4tr2", "([Xw`4tr2", (-1127));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "msg.fn.redecl", (-1578));
      assertEquals(0, tokenStream0.getCursor());
      
      int[] intArray0 = new int[2];
      tokenStream0.cursor = 65536;
      tokenStream0.getLine(0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("msg.unterminated.string.lit");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 0);
      int int0 = tokenStream0.getCursor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("msg.unterminated.string.lit");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 0);
      tokenStream0.getCommentType();
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      Parser parser0 = new Parser(compilerEnvirons0, defaultErrorReporter0);
      StringReader stringReader0 = new StringReader("!");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "@t5", 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (@t5#61)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("na%ive");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "{|\u0007qk", 21);
      assertEquals(7, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      // Undeclared exception!
      try { 
        parser0.parse("packUVa^e", "packUVa^e", (-21));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 2149);
      // Undeclared exception!
      try { 
        tokenStream0.getAndResetCurrentComment();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "packUVa^e", 0);
      String string0 = tokenStream0.getAndResetCurrentComment();
      assertEquals(0, tokenStream0.getCursor());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "(D)Ljava/lang/Double;", (-725));
      boolean boolean0 = tokenStream0.eof();
      assertFalse(boolean0);
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("msg.unterminated.string.lit");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 0);
      stringReader0.close();
      String string0 = tokenStream0.getLine();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("msg.unterminated.string.lit");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 0);
      String string0 = tokenStream0.getLine();
      assertEquals("msg.unterminated.string.lit", string0);
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("msg.unterminated.string.lit");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, 0);
      tokenStream0.sourceCursor = 170;
      // Undeclared exception!
      try { 
        tokenStream0.getNextXMLToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("org.mozilla.javascript.TokenStream", e);
      }
  }
}
