/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 18:19:24 GMT 2018
 */

package org.mozilla.javascript.v8dtoa;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.v8dtoa.FastDtoa;
import org.mozilla.javascript.v8dtoa.FastDtoaBuilder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDtoa_ESTest extends FastDtoa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FastDtoa.numberToString((double) 1000000000);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(18, 83);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(7, 7);
      assertEquals(4294967296L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(49, 7);
      assertEquals(42949672961L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(10000, 7);
      assertEquals(429496729602L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDtoaBuilder fastDtoaBuilder0 = new FastDtoaBuilder();
      boolean boolean0 = FastDtoa.grisu3(0.30102999566398114, fastDtoaBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen((-1158), 22);
      assertEquals(4294967295L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDtoaBuilder fastDtoaBuilder0 = new FastDtoaBuilder();
      boolean boolean0 = FastDtoa.dtoa(494.37411197967083, fastDtoaBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = FastDtoa.numberToString((-5084.9039895));
      assertNotNull(string0);
      assertEquals("-5084.9039895", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(100000045, 29);
      assertEquals(429496729600000008L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(1073741690, 30);
      assertEquals(4294967296000000009L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(10019, 30);
      assertEquals(42949672960004L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDtoa fastDtoa0 = new FastDtoa();
  }
}
