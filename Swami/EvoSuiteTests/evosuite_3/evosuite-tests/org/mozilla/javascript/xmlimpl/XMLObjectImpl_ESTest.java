/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 14:46:26 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.Namespace;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XMLObjectImpl;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLObjectImpl_ESTest extends XMLObjectImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XN.}LD]H.jFKxtP?9~", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("", ")Xg(T??}+w#yLg]J");
      XMLList xMLList0 = xML0.elements(xMLName0);
      XML xML1 = xMLList0.xmlFromNode(xmlNode0);
      assertSame(xML1, xML0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2571);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 745, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XN.}L]H.jFKxtP?9~", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xML0.put(context0, (Object) context0, (Object) xML0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      // Undeclared exception!
      try { 
        xMLList0.newXMLFromJs((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2571);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      XMLObjectImpl xMLObjectImpl0 = xML0.copy();
      assertNotSame(xML0, xMLObjectImpl0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2571);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XN.}L]H.jFKxtP?9~", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("", "");
      XMLList xMLList0 = xML0.elements(xMLName0);
      // Undeclared exception!
      try { 
        xMLList0.put(11, (Scriptable) nativeInt8Array0, (Object) xmlNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      QName qName0 = xMLList0.newQName(xmlNode_QName0);
      assertEquals("QName", qName0.getClassName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 0, 13);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("ArrayBuffer", "");
      XMLList xMLList0 = xML0.getPropertyList(xMLName0);
      // Undeclared exception!
      try { 
        xMLList0.newQName("replace", "", "ArrayBuffer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 702, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XN.}L]H.jFKxtP?9~", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xML0.memberRef(context0, (Object) "", (Object) xmlNode0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2561);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, 737);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xML0.memberRef(context0, (Object) "", 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2571);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XN.}L]H.jFKxtP?9~", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xML0.initPrototypeId((-2121));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2121
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLObjectImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2571);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XN.}L]H.jFKxtP?9~", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xML0.initPrototypeId(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xMLLibImpl0).toString();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      XMLLibImpl xMLLibImpl1 = xMLList0.getLib();
      assertFalse(xMLLibImpl1.isPrettyPrinting());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.getCurrentContext();
      XMLList xMLList1 = new XMLList(xMLLibImpl1, (Scriptable) null, xMLList0);
      Object object0 = xMLList1.getFunctionProperty(context0, "X)]yp|Eg3");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.getCurrentContext();
      XMLList xMLList1 = new XMLList(xMLLibImpl1, (Scriptable) null, xMLList0);
      Object object0 = xMLList1.getFunctionProperty(context0, 2085);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("", "XmlNode.QName [,XmlNode.Namespace [{}]]");
      Context context0 = Context.getCurrentContext();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "");
      XML xML0 = new XML((XMLLibImpl) null, (Scriptable) null, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xMLName0.set(context0, (Scriptable) null, (Object) xML0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"\"\":XmlNode.QName [,XmlNode.Namespace [{}]]\" of undefined to \"\"
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, scriptableObject0, (XMLObject) null);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getTypedProperty((Scriptable) xMLList0, "", class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      int int0 = xMLList0.findPrototypeId("insertChildBefore");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      XMLName xMLName0 = XMLName.formProperty("setChildren", "language version");
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2165);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 0, 13);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "yc,=!+}!0oX~u?", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("ArrayBuffer", "yc,=!+}!0oX~u?");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2571);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 0, 13);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XN.}L]H.jFKxtP?9~", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("XN.}L]H.jFKxtP?9~", "ArrayBuffer");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      int int0 = xMLList0.findPrototypeId("@GGTcnXpZ=");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      int int0 = xMLList0.findPrototypeId("@GGcnpZ=");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      int int0 = xMLList0.findPrototypeId("Ioc[L");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "With");
      XMLName xMLName0 = XMLName.create(xmlNode_QName0, true, true);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint16Array0, (XMLObject) null);
      xMLList0.exportAsJSClass(true);
      assertTrue(xMLList0.isSealed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      Context context0 = Context.getCurrentContext();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      IdFunctionObject idFunctionObject0 = xMLList0.exportAsJSClass(20, nativeInt16Array0, true);
      xMLList0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals(1, idFunctionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      Object object0 = xMLList0.equivalentValues((Object) null);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      NativeWith nativeWith0 = xMLList0.enterWith((Scriptable) null);
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2571);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XN.}L]H.jFKxtP?9~", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      NativeWith nativeWith0 = xML0.enterDotQuery(nativeInt8Array0);
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      // Undeclared exception!
      try { 
        xMLList0.ecmaToXml((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot convert null to XML
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xMLLibImpl0).escapeAttributeValue(any());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      // Undeclared exception!
      try { 
        xMLList0.ecmaEscapeAttributeValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLObjectImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("0BH`I@K0", "find");
      XMLList xMLList0 = xML0.elements(xMLName0);
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = xMLList0.delete(context0, (Object) xMLName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2571);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "XN.}L]H.jFKxtP?9~", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      Namespace[] namespaceArray0 = xML0.namespaceDeclarations();
      assertEquals(0, namespaceArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2571);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 737, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.formProperty("", "*");
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "yw}^l,ERUS");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, nativeInt8Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.elements(xMLName0);
      // Undeclared exception!
      try { 
        xMLList0.createEmptyXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      Context context0 = Context.getCurrentContext();
      Object object0 = xMLList0.addValues(context0, true, "YjoX");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      Context context0 = Context.getCurrentContext();
      XMLList xMLList1 = (XMLList)xMLList0.addValues(context0, true, xMLList0);
      assertEquals("xml", xMLList1.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      Context context0 = Context.getCurrentContext();
      Object object0 = xMLList0.addValues(context0, false, xMLList0);
      assertNotSame(xMLList0, object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 20, (-3446));
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "ArrayBuffer");
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0, (Object) null);
      XML xML0 = new XML(xMLLibImpl0, synchronizer0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("ArrayBuffer", "t");
      XMLList xMLList0 = xML0.elements(xMLName0);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespace();
      // Undeclared exception!
      try { 
        xMLList0.createNamespace(xmlNode_Namespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }
}
