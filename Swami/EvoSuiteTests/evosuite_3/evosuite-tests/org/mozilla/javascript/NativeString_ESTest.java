/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 17:46:18 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeString;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Symbol;
import org.mozilla.javascript.SymbolKey;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeString_ESTest extends NativeString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1);
      NativeString nativeString0 = new NativeString(stringBuilder0);
      CharSequence charSequence0 = nativeString0.toCharSequence();
      assertSame(charSequence0, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NativeString nativeString0 = new NativeString(stringBuilder0);
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(17);
      BaseFunction baseFunction0 = new BaseFunction(nativeString0, nativeString0);
      Object object0 = ScriptableObject.getProperty((Scriptable) baseFunction0, (-2996));
      nativeString0.put((int) '5', (Scriptable) nativeFloat32Array0, object0);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[3];
      stringBuilder0.append(charArray0);
      NativeString nativeString0 = new NativeString(stringBuilder0);
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(0);
      BaseFunction baseFunction0 = new BaseFunction(nativeString0, nativeString0);
      Object object0 = ScriptableObject.getProperty((Scriptable) baseFunction0, (-2996));
      nativeString0.put(0, (Scriptable) nativeFloat32Array0, object0);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NativeString nativeString0 = new NativeString(stringBuilder0);
      stringBuilder0.insert(0, (double) 13);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      boolean boolean0 = nativeString0.has(0, (Scriptable) nativeUint32Array0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NativeString nativeString0 = new NativeString(stringBuilder0);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      boolean boolean0 = nativeString0.has(0, (Scriptable) nativeUint32Array0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("valueOf");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      NativeString nativeString0 = new NativeString(charBuffer0);
      int int0 = nativeString0.getLength();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NativeString nativeString0 = new NativeString(stringBuilder0);
      Object object0 = nativeString0.getInstanceIdValue(1);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("prototype");
      NativeString nativeString0 = new NativeString(stringBuffer0);
      // Undeclared exception!
      try { 
        nativeString0.getInstanceIdValue(4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("to7owerCase");
      NativeString nativeString0 = new NativeString(stringBuffer0);
      // Undeclared exception!
      try { 
        nativeString0.getInstanceIdName(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NativeString nativeString0 = new NativeString(stringBuilder0);
      stringBuilder0.insert(0, (double) 13);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeString0, 0);
      assertEquals("1", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("? $1,%Yy9C]");
      NativeString nativeString0 = new NativeString(stringBuffer0);
      int int0 = nativeString0.findPrototypeId("? $1,%Yy9C]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("prototype");
      NativeString nativeString0 = new NativeString(stringBuffer0);
      int int0 = nativeString0.findPrototypeId("prototype");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("prototype");
      NativeString nativeString0 = new NativeString(stringBuffer0);
      int int0 = nativeString0.findPrototypeId("1#<0#CH");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NativeString nativeString0 = new NativeString(stringBuilder0);
      int int0 = nativeString0.findPrototypeId("ZS/U@");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.enter();
      NativeString nativeString0 = new NativeString("F\"=[v<+h:}'N");
      SymbolKey symbolKey0 = SymbolKey.TO_STRING_TAG;
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeString0, (Symbol) symbolKey0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Array;
      Scriptable scriptable0 = importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeString0, object0, 847, "trimLeft", 3047, scriptable0);
      // Undeclared exception!
      try { 
        nativeString0.execIdCall(idFunctionObject0, context0, idFunctionObject0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=847 MASTER=F\"=[v<+h:}'N
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }
}
