/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 02:39:06 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.EmbeddedSlotMap;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.ScriptableObject;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedSlotMap_ESTest extends EmbeddedSlotMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.Slot scriptableObject_Slot0 = new ScriptableObject.Slot(embeddedSlotMap0, 1782, 1782);
      embeddedSlotMap0.addSlot(scriptableObject_Slot0);
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      ScriptableObject.Slot scriptableObject_Slot1 = embeddedSlotMap0.get(object0, 1782, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(scriptableObject_Slot1, 1782, scriptableObject_SlotAccess0);
      embeddedSlotMap0.remove(scriptableObject_Slot1, 1782);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      embeddedSlotMap0.spliterator();
      ScriptableObject.Slot scriptableObject_Slot0 = new ScriptableObject.Slot(embeddedSlotMap0, 1782, 1782);
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(embeddedSlotMap0, 1486, 1782);
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      ScriptableObject.Slot scriptableObject_Slot1 = embeddedSlotMap0.get(object0, 1782, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(scriptableObject_Slot1, 1782, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get((Object) null, 1782, scriptableObject_SlotAccess0);
      embeddedSlotMap0.remove(scriptableObject_Slot1, 1782);
      assertEquals(2, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get(importerTopLevel0, 13, scriptableObject_SlotAccess0);
      embeddedSlotMap0.remove(importerTopLevel0, 1);
      assertEquals(1, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(embeddedSlotMap0, 1486, 1782);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      embeddedSlotMap0.get(scriptableObject_GetterSlot0, 1782, scriptableObject_SlotAccess0);
      assertFalse(embeddedSlotMap0.isEmpty());
      
      embeddedSlotMap0.remove(scriptableObject_GetterSlot0, 1782);
      assertEquals(0, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get((Object) null, 4, scriptableObject_SlotAccess0);
      embeddedSlotMap0.remove(importerTopLevel0, 1);
      assertEquals(1, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get((Object) null, 3, scriptableObject_SlotAccess0);
      Object object0 = new Object();
      embeddedSlotMap0.query(object0, 3);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      boolean boolean0 = embeddedSlotMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get(embeddedSlotMap0, 3, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(scriptableObject_Slot0, 3, scriptableObject_SlotAccess0);
      assertEquals(1, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(object0, 3, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(object0, 3, scriptableObject_SlotAccess0);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      embeddedSlotMap0.get(embeddedSlotMap0, 3, scriptableObject_SlotAccess0);
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.QUERY;
      embeddedSlotMap0.get(object0, 3, scriptableObject_SlotAccess1);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.QUERY;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get(embeddedSlotMap0, 2600, scriptableObject_SlotAccess0);
      assertNull(scriptableObject_Slot0);
      assertEquals(0, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.Slot scriptableObject_Slot0 = new ScriptableObject.Slot(embeddedSlotMap0, 1782, 1782);
      embeddedSlotMap0.addSlot(scriptableObject_Slot0);
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      ScriptableObject.Slot scriptableObject_Slot1 = embeddedSlotMap0.get(object0, 1782, scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(scriptableObject_Slot1, 1782, scriptableObject_SlotAccess1);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess2 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      embeddedSlotMap0.get(scriptableObject_Slot1, 1782, scriptableObject_SlotAccess2);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get(importerTopLevel0, 13, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get((Object) null, 4, scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(importerTopLevel0, 2, scriptableObject_SlotAccess1);
      assertEquals(2, embeddedSlotMap0.size());
  }
}
