/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 03:19:40 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeGenerator;
import org.mozilla.javascript.NativeIterator;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.UniqueTag;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeWith_ESTest extends NativeWith_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Synchronizer synchronizer0 = new Synchronizer(nativeContinuation0, nativeContinuation0.READONLY);
      NativeWith nativeWith0 = new NativeWith(synchronizer0, synchronizer0);
      // Undeclared exception!
      try { 
        nativeWith0.updateDotQuery(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeWith", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeWith nativeWith0 = new NativeWith(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      nativeIterator_StopIteration0.put("language version", (Scriptable) nativeWith0, (Object) "error reporter");
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeWith nativeWith0 = new NativeWith(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      nativeIterator_StopIteration0.put(100, (Scriptable) nativeWith0, (Object) nativeWith0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      boolean boolean0 = NativeWith.isWithFunction(uniqueTag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeWith nativeWith0 = new NativeWith(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeWith0, nativeIterator_StopIteration0, 0, "language version", 15, importerTopLevel0);
      boolean boolean0 = NativeWith.isWithFunction(idFunctionObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      NativeWith nativeWith0 = new NativeWith(scriptableObject0, scriptableObject0);
      boolean boolean0 = nativeWith0.has("concat", (Scriptable) scriptableObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      NativeWith nativeWith0 = new NativeWith(nativeFloat64Array0, nativeFloat64Array0);
      boolean boolean0 = nativeWith0.has(182, (Scriptable) nativeFloat64Array0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      NativeWith nativeWith0 = new NativeWith(nativeUint8ClampedArray0, nativeUint8ClampedArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        nativeWith0.getDefaultValue(class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class java.lang.Object
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 2, 85);
      NativeWith nativeWith0 = new NativeWith(nativeInt32Array0, nativeInt32Array0);
      String string0 = nativeWith0.getClassName();
      assertEquals("With", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, (Scriptable) null);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        NativeWith.newWithSpecial(context0, nativeWith0, context0.emptyArgs);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeWith", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, false);
      NativeWith nativeWith0 = new NativeWith(nativeGenerator0, nativeGenerator0);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeGenerator0, "With", 0, "With", 13, nativeWith0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        nativeWith0.execIdCall(idFunctionObjectES6_0, context0, idFunctionObjectES6_0, nativeGenerator0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=0 MASTER=org.mozilla.javascript.NativeGenerator@3
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      NativeWith nativeWith0 = new NativeWith(nativeInt8Array0, nativeInt8Array0);
      nativeWith0.delete("V?[9d:P,+zOD*aJf");
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      NativeWith nativeWith0 = new NativeWith(nativeFloat64Array0, nativeFloat64Array0);
      nativeWith0.delete(182);
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeWith nativeWith0 = new NativeWith(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeWith0, 2);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertEquals("global", importerTopLevel0.getClassName());
  }
}
