/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 03:58:45 GMT 2018
 */

package org.mozilla.javascript.optimizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Callable;
import org.mozilla.javascript.ConsString;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeArrayIterator;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeFunction;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.ScriptRuntime;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.optimizer.OptRuntime;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptRuntime_ESTest extends OptRuntime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = OptRuntime.add((Object) null, (-1.0));
      assertEquals((-1.0), object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = OptRuntime.wrapDouble(0.0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        OptRuntime.throwStopIteration(nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = OptRuntime.padStart(objectArray0, 60);
      assertEquals(60, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeUint32Array0, ">>>=", 1450, ">>>=", 2, nativeUint32Array0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        OptRuntime.newObjectSpecial((Context) null, idFunctionObjectES6_0, objectArray0, nativeUint32Array0, idFunctionObjectES6_0, (-10));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(nativeFunction0).getFunctionName();
      Context context0 = Context.getCurrentContext();
      OptRuntime.initFunction(nativeFunction0, 1, (Scriptable) nativeFunction0, context0);
      assertEquals(150, Context.VERSION_1_5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      OptRuntime.GeneratorState optRuntime_GeneratorState0 = new OptRuntime.GeneratorState(nativeUint8Array0, 2, 130);
      Object[] objectArray0 = OptRuntime.getGeneratorStackState(optRuntime_GeneratorState0);
      assertNotNull(objectArray0);
      assertEquals(130, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptRuntime.GeneratorState optRuntime_GeneratorState0 = new OptRuntime.GeneratorState((Scriptable) null, 3, 3);
      Object[] objectArray0 = OptRuntime.getGeneratorLocalsState(optRuntime_GeneratorState0);
      assertEquals(3, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      String string0 = OptRuntime.encodeIntArray(intArray0);
      assertEquals("\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        OptRuntime.elemIncrDecr((Object) "\u0001\uFFFF\uFFB8\u0000\u0010\uFFFF\uFFE8\u0000\u0010\u0000\u0CF3\uFFFF\uFF8C", (double) (-72), context0, 9);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OptRuntime.newArrayLiteral(context0.emptyArgs, "\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", 5, context0, (Scriptable) nativeFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        OptRuntime.newArrayLiteral((Object[]) null, (String) null, 0, (Context) null, (Scriptable) nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nativeFunction0).getAssociatedValue(any());
      doReturn((Scriptable) null, (Scriptable) null).when(nativeFunction0).getParentScope();
      doReturn((Scriptable) null).when(nativeFunction0).getPrototype();
      Scriptable scriptable0 = OptRuntime.createNativeGenerator(nativeFunction0, nativeFunction0, nativeFunction0, 4, 1);
      Object[] objectArray0 = new Object[5];
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        OptRuntime.newArrayLiteral(objectArray0, "wvnLty5>4f^n", 8, context0, scriptable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(4);
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 0, 1750);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeInt32Array0, context0, 15, 955);
      // Undeclared exception!
      try { 
        OptRuntime.callSpecial(context0, idFunctionObject0, nativeArrayBuffer0, context0.emptyArgs, idFunctionObject0, nativeInt32Array0, 0, "thisObj", 16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[8];
      Scriptable scriptable0 = ScriptRuntime.createArrowFunctionActivation(nativeFunction0, nativeFunction0, objectArray0, false);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        OptRuntime.callN((Callable) null, scriptable0, objectArray0, context0, scriptable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = OptRuntime.wrapDouble(1.0E11);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(nativeArrayBuffer0, 2, 2);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        OptRuntime.call2((Callable) null, nativeFloat32Array0, double0, (Object) null, context0, nativeArrayBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Context context0 = Context.enter();
      Object object0 = ScriptRuntime.getObjectIndex((Scriptable) topLevel0, (-275), context0);
      Synchronizer synchronizer0 = new Synchronizer(topLevel0, object0);
      NativeObject nativeObject0 = new NativeObject();
      // Undeclared exception!
      try { 
        OptRuntime.call1(synchronizer0, topLevel0, nativeObject0, context0, synchronizer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.TopLevel cannot be cast to org.mozilla.javascript.Function
         //
         verifyException("org.mozilla.javascript.Synchronizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Context context0 = Context.getCurrentContext();
      Object object0 = new Object();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeObject0, object0, 12, "language version", 2285, nativeObject0);
      // Undeclared exception!
      try { 
        OptRuntime.call0(idFunctionObject0, nativeObject0, context0, idFunctionObject0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=12 MASTER=[object Object]
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nativeFunction0).get(anyString() , any(org.mozilla.javascript.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null).when(nativeFunction0).getParentScope();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        OptRuntime.bindThis(nativeFunction0, context0, nativeFunction0, nativeFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConsString consString0 = (ConsString)OptRuntime.add((-14.076918665797626), (Object) "(YsfbMcioJ");
      assertEquals(29, consString0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      NativeArrayIterator nativeArrayIterator0 = new NativeArrayIterator(nativeUint8ClampedArray0, nativeUint8Array0);
      // Undeclared exception!
      try { 
        OptRuntime.add((-128.0), (Object) nativeArrayIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double double0 = OptRuntime.oneObj;
      Object object0 = OptRuntime.add(0.0, (Object) double0);
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptRuntime optRuntime0 = new OptRuntime();
      Object object0 = OptRuntime.add((Object) optRuntime0, (double) 0);
      assertEquals(Double.NaN, object0);
  }
}
