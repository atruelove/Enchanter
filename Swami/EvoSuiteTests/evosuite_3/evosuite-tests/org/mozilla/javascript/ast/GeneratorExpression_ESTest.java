/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 15:47:33 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.GeneratorExpression;
import org.mozilla.javascript.ast.GeneratorExpressionLoop;
import org.mozilla.javascript.ast.ReturnStatement;
import org.mozilla.javascript.ast.Yield;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GeneratorExpression_ESTest extends GeneratorExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      ReturnStatement returnStatement0 = new ReturnStatement(18);
      Yield yield0 = new Yield(4);
      generatorExpression0.setFilter(yield0);
      assertEquals(1, yield0.depth());
      
      generatorExpression0.setResult(returnStatement0);
      String string0 = generatorExpression0.debugPrint();
      assertEquals("-1\tGENEXPR -1 1\n18\t  RETURN 19 1\n4\t  YIELD 5 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression(1);
      ReturnStatement returnStatement0 = new ReturnStatement();
      generatorExpression0.setResult(returnStatement0);
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop(806, 380);
      generatorExpression0.addLoop(generatorExpressionLoop0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "(return;\n)");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        generatorExpression0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.GeneratorExpressionLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      ReturnStatement returnStatement0 = new ReturnStatement(15);
      generatorExpression0.setFilter(returnStatement0);
      assertEquals(16, returnStatement0.getPosition());
      
      generatorExpression0.setResult(returnStatement0);
      String string0 = generatorExpression0.toSource(23);
      assertEquals("(return;\n if (return;\n))", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      ReturnStatement returnStatement0 = new ReturnStatement();
      generatorExpression0.setResult(returnStatement0);
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      generatorExpression0.addLoop(generatorExpressionLoop0);
      // Undeclared exception!
      try { 
        generatorExpression0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.GeneratorExpressionLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression(0);
      assertEquals((-1), generatorExpression0.getIfPosition());
      
      generatorExpression0.setIfPosition(1);
      assertEquals(1, generatorExpression0.getIfPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      generatorExpression0.setFilterRp((-2401));
      assertEquals((-2401), generatorExpression0.getFilterRp());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression((-1647));
      generatorExpression0.setFilterLp((-1647));
      assertEquals((-1647), generatorExpression0.getFilterLp());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression(0);
      generatorExpression0.getResult();
      assertEquals(163, generatorExpression0.getType());
      assertEquals((-1), generatorExpression0.getFilterLp());
      assertEquals((-1), generatorExpression0.getIfPosition());
      assertEquals((-1), generatorExpression0.getFilterRp());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression(38);
      generatorExpression0.getLoops();
      assertEquals((-1), generatorExpression0.getIfPosition());
      assertEquals((-1), generatorExpression0.getFilterLp());
      assertEquals(163, generatorExpression0.getType());
      assertEquals((-1), generatorExpression0.getFilterRp());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression((-3091), (-428));
      int int0 = generatorExpression0.getIfPosition();
      assertEquals((-1), int0);
      assertEquals((-1), generatorExpression0.getFilterRp());
      assertEquals("163", generatorExpression0.toString());
      assertEquals((-1), generatorExpression0.getFilterLp());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      int int0 = generatorExpression0.getFilterLp();
      assertEquals((-1), int0);
      assertEquals((-1), generatorExpression0.getFilterRp());
      assertEquals("163", generatorExpression0.toString());
      assertEquals((-1), generatorExpression0.getIfPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      generatorExpression0.getFilter();
      assertEquals((-1), generatorExpression0.getFilterRp());
      assertEquals((-1), generatorExpression0.getIfPosition());
      assertEquals((-1), generatorExpression0.getFilterLp());
      assertEquals(163, generatorExpression0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression(2076, 2076);
      int int0 = generatorExpression0.getFilterRp();
      assertEquals((-1), generatorExpression0.getIfPosition());
      assertEquals((-1), int0);
      assertEquals(163, generatorExpression0.getType());
      assertEquals((-1), generatorExpression0.getFilterLp());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      LinkedList<GeneratorExpressionLoop> linkedList0 = new LinkedList<GeneratorExpressionLoop>();
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      linkedList0.add(generatorExpressionLoop0);
      generatorExpression0.setLoops(linkedList0);
      assertEquals((-1), generatorExpression0.getIfPosition());
      assertEquals((-1), generatorExpression0.getFilterRp());
      assertEquals((-1), generatorExpression0.getFilterLp());
      assertEquals(163, generatorExpression0.getType());
  }
}
