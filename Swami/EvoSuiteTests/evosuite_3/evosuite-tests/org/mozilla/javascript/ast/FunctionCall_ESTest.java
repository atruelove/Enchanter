/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 16:50:07 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.ForLoop;
import org.mozilla.javascript.ast.FunctionCall;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.SwitchCase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionCall_ESTest extends FunctionCall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall();
      Name name0 = new Name();
      functionCall0.addArgument(name0);
      ContinueStatement continueStatement0 = new ContinueStatement(2, name0);
      functionCall0.setTarget(continueStatement0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      functionCall0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tCALL -1 1\n2\t  CONTINUE 3 -1\n-1\t    NAME -3 1 null\n-1\t    NAME -3 1 null\n", astNode_DebugPrintVisitor0.toString());
      assertEquals("38", functionCall0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall();
      Name name0 = new Name();
      functionCall0.addArgument(name0);
      ContinueStatement continueStatement0 = new ContinueStatement(2, name0);
      functionCall0.setTarget(continueStatement0);
      String string0 = functionCall0.toSource(0);
      assertEquals("38", functionCall0.toString());
      assertEquals((-1), functionCall0.getRp());
      assertEquals("continue <null>;\n(<null>)", string0);
      assertEquals((-1), functionCall0.getLp());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(508);
      SwitchCase switchCase0 = new SwitchCase(8, 0);
      functionCall0.setTarget(switchCase0);
      assertEquals((-1), functionCall0.getLp());
      assertEquals((-1), functionCall0.getRp());
      assertEquals(38, functionCall0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(1198, 1198);
      assertEquals((-1), functionCall0.getRp());
      
      functionCall0.setRp(0);
      assertEquals(0, functionCall0.getRp());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(1198, 1198);
      functionCall0.setParens(1122, 24);
      assertEquals(24, functionCall0.getRp());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(1198, 1198);
      functionCall0.setLp(19);
      assertEquals(19, functionCall0.getLp());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(1198, 1198);
      functionCall0.setArguments((List<AstNode>) null);
      assertEquals((-1), functionCall0.getLp());
      assertEquals("38", functionCall0.toString());
      assertEquals((-1), functionCall0.getRp());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(1198, 1198);
      functionCall0.getTarget();
      assertEquals((-1), functionCall0.getRp());
      assertEquals((-1), functionCall0.getLp());
      assertEquals(38, functionCall0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(508);
      int int0 = functionCall0.getRp();
      assertEquals((-1), functionCall0.getLp());
      assertEquals("38", functionCall0.toString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(1198, 1198);
      int int0 = functionCall0.getLp();
      assertEquals((-1), functionCall0.getRp());
      assertEquals((-1), int0);
      assertEquals("38", functionCall0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(508);
      SwitchCase switchCase0 = new SwitchCase(8, 0);
      ForLoop forLoop0 = new ForLoop(82, 2);
      switchCase0.addStatement(forLoop0);
      List<AstNode> list0 = switchCase0.getStatements();
      functionCall0.setArguments(list0);
      functionCall0.setArguments(list0);
      assertEquals((-1), functionCall0.getLp());
      assertEquals((-1), functionCall0.getRp());
      assertEquals(38, functionCall0.getType());
  }
}
