/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 17:10:12 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.ExpressionStatement;
import org.mozilla.javascript.ast.VariableDeclaration;
import org.mozilla.javascript.ast.XmlExpression;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExpressionStatement_ESTest extends ExpressionStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      ExpressionStatement expressionStatement0 = new ExpressionStatement(variableDeclaration0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "                      var ;\n");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      expressionStatement0.visit(astNode_DebugPrintVisitor0);
      assertEquals("                      var ;\n-1\tEXPR_VOID -1 1\n-1\t  VAR 0 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(134, expressionStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      ExpressionStatement expressionStatement0 = new ExpressionStatement(variableDeclaration0);
      String string0 = expressionStatement0.toSource(11);
      assertEquals("                      var ;\n", string0);
      assertEquals("134", expressionStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ExpressionStatement expressionStatement0 = new ExpressionStatement(astRoot0);
      boolean boolean0 = expressionStatement0.hasSideEffects();
      assertFalse(boolean0);
      assertEquals(134, expressionStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlExpression xmlExpression0 = new XmlExpression(1122, 1122);
      ExpressionStatement expressionStatement0 = new ExpressionStatement(xmlExpression0, true);
      assertEquals(135, expressionStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement(0, 1091);
      assertEquals(134, expressionStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      StringBuilder stringBuilder0 = new StringBuilder("org.mozilla.javascript.ast.ExpressionStatement");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        expressionStatement0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ExpressionStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ExpressionStatement expressionStatement0 = new ExpressionStatement(astRoot0);
      AstNode astNode0 = expressionStatement0.getExpression();
      assertEquals("134", expressionStatement0.toString());
      assertNotNull(astNode0);
  }
}
