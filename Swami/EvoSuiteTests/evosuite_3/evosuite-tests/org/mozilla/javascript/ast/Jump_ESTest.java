/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 15:34:46 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.BreakStatement;
import org.mozilla.javascript.ast.ConditionalExpression;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.GeneratorExpression;
import org.mozilla.javascript.ast.Jump;
import org.mozilla.javascript.ast.Label;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.SwitchStatement;
import org.mozilla.javascript.ast.VariableInitializer;
import org.mozilla.javascript.ast.WhileLoop;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Jump_ESTest extends Jump_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Jump jump0 = new Jump(1246);
      // Undeclared exception!
      try { 
        jump0.toSource(1246);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 1246
         //
         verifyException("org.mozilla.javascript.ast.Jump", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Label label0 = new Label();
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      label0.setLoop(generatorExpression0);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BreakStatement breakStatement0 = new BreakStatement((-1168));
      ContinueStatement continueStatement0 = new ContinueStatement(1, 4);
      continueStatement0.setJumpStatement(breakStatement0);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BreakStatement breakStatement0 = new BreakStatement();
      ConditionalExpression conditionalExpression0 = new ConditionalExpression(4);
      // Undeclared exception!
      try { 
        breakStatement0.setFinally(conditionalExpression0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SwitchStatement switchStatement0 = new SwitchStatement();
      Node node0 = Node.newTarget();
      switchStatement0.setDefault(node0);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newTarget();
      Jump jump0 = new Jump(133, 2);
      assertEquals("133", jump0.toString());
      
      jump0.setContinue(node0);
      assertEquals(2, jump0.getLineno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Label label0 = new Label(2221, 2221);
      Jump jump0 = label0.getLoop();
      assertNull(jump0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SwitchStatement switchStatement0 = new SwitchStatement();
      // Undeclared exception!
      try { 
        switchStatement0.getJumpStatement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      // Undeclared exception!
      try { 
        scriptNode0.getFinally();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SwitchStatement switchStatement0 = new SwitchStatement((-353), 133);
      Node node0 = switchStatement0.getDefault();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WhileLoop whileLoop0 = new WhileLoop();
      // Undeclared exception!
      try { 
        whileLoop0.getContinue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Label label0 = new Label(0, 121);
      Jump jump0 = new Jump(9, label0, 278);
      StringBuilder stringBuilder0 = new StringBuilder("'+ZkkGb>Mj$fp|");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        jump0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 9
         //
         verifyException("org.mozilla.javascript.ast.Jump", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      Jump jump0 = new Jump(121, variableInitializer0);
      // Undeclared exception!
      try { 
        jump0.hasConsistentReturnUsage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Jump jump0 = new Jump(133, 2);
      assertEquals(133, jump0.getType());
      
      jump0.getContinue();
      assertEquals(2, jump0.getLineno());
  }
}
