/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 16:12:29 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.UnaryExpression;
import org.mozilla.javascript.ast.VariableDeclaration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnaryExpression_ESTest extends UnaryExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(12, 4);
      unaryExpression0.setOperand(variableDeclaration0);
      String string0 = unaryExpression0.debugPrint();
      assertEquals("-1\tERROR -1 1\n12\t  VAR 13 4\n", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral((-1), "", (-1));
      UnaryExpression unaryExpression0 = new UnaryExpression(2, (-3630), numberLiteral0, true);
      // Undeclared exception!
      try { 
        unaryExpression0.toSource((-2222));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operator: 2
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      // Undeclared exception!
      try { 
        unaryExpression0.setOperator((-2696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid token: -2696
         //
         verifyException("org.mozilla.javascript.ast.UnaryExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      unaryExpression0.setIsPostfix(true);
      assertFalse(unaryExpression0.isPrefix());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      boolean boolean0 = unaryExpression0.isPrefix();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression(0, 0);
      boolean boolean0 = unaryExpression0.isPostfix();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression(108);
      int int0 = unaryExpression0.getOperator();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      UnaryExpression unaryExpression0 = new UnaryExpression(127, 4, astRoot0);
      String string0 = unaryExpression0.toSource();
      assertEquals((-5), astRoot0.getPosition());
      assertEquals("void ", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      AstNode astNode0 = unaryExpression0.getOperand();
      assertNull(astNode0);
  }
}
