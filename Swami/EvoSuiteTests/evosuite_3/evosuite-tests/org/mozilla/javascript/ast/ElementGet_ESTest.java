/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 17:01:58 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ElementGet;
import org.mozilla.javascript.ast.RegExpLiteral;
import org.mozilla.javascript.ast.ReturnStatement;
import org.mozilla.javascript.ast.StringLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElementGet_ESTest extends ElementGet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral((-2141), 0);
      ElementGet elementGet0 = new ElementGet(stringLiteral0, stringLiteral0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      elementGet0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tGETELEM -1 1\n-2141\t  STRING -2140 0\n-2141\t  STRING -2140 0\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(36, elementGet0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet((-1533));
      ReturnStatement returnStatement0 = new ReturnStatement(35, 1, elementGet0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        returnStatement0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ElementGet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      ElementGet elementGet0 = new ElementGet(regExpLiteral0, regExpLiteral0);
      String string0 = elementGet0.toSource(15);
      assertEquals((-1), elementGet0.getLb());
      assertEquals(36, elementGet0.getType());
      assertEquals("                              /null/[/null/]", string0);
      assertEquals((-1), elementGet0.getRb());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet(0, 0);
      // Undeclared exception!
      try { 
        elementGet0.toSource((-2634));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ElementGet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet(0, 0);
      elementGet0.setRb(55);
      assertEquals(55, elementGet0.getRb());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      ElementGet elementGet0 = new ElementGet(regExpLiteral0, regExpLiteral0);
      elementGet0.setLb(25);
      assertEquals(25, elementGet0.getLb());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet(0);
      elementGet0.getTarget();
      assertEquals((-1), elementGet0.getRb());
      assertEquals(36, elementGet0.getType());
      assertEquals((-1), elementGet0.getLb());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      ElementGet elementGet0 = new ElementGet(regExpLiteral0, regExpLiteral0);
      int int0 = elementGet0.getRb();
      assertEquals((-1), elementGet0.getLb());
      assertEquals((-1), int0);
      assertEquals(36, elementGet0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      ElementGet elementGet0 = new ElementGet(regExpLiteral0, regExpLiteral0);
      int int0 = elementGet0.getLb();
      assertEquals((-1), int0);
      assertEquals("36", elementGet0.toString());
      assertEquals((-1), elementGet0.getRb());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      ElementGet elementGet0 = new ElementGet(regExpLiteral0, regExpLiteral0);
      AstNode astNode0 = elementGet0.getElement();
      assertEquals((-1), elementGet0.getRb());
      assertEquals((-1), elementGet0.getLb());
      assertNotNull(astNode0);
      assertEquals("36", elementGet0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet(0, 0);
      elementGet0.setParens(0, 0);
      assertEquals(0, elementGet0.getRb());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet();
      assertEquals((-1), elementGet0.getRb());
      assertEquals("36", elementGet0.toString());
      assertEquals((-1), elementGet0.getLb());
  }
}
