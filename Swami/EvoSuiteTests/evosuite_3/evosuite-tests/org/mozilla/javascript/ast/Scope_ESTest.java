/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 15:55:15 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.ArrayComprehensionLoop;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.GeneratorExpression;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.Scope;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.Symbol;
import org.mozilla.javascript.ast.WhileLoop;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scope scope0 = new Scope();
      StringBuilder stringBuilder0 = new StringBuilder(7);
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement(1464, name0);
      scope0.addChildToFront(continueStatement0);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      scope0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tBLOCK -1 1\n1464\tCONTINUE 1464 -1\n-1\t  NAME -1465 1 null\n", astNode_DebugPrintVisitor0.toString());
      assertEquals("130", scope0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scope scope0 = new Scope();
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement(1464, name0);
      scope0.addChildToFront(continueStatement0);
      scope0.toSource(2367);
      assertEquals(130, scope0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      WhileLoop whileLoop0 = new WhileLoop(24, 21);
      generatorExpression0.setParentScope(whileLoop0);
      Scope.splitScope(generatorExpression0);
      assertEquals(1, generatorExpression0.depth());
      assertEquals(162, generatorExpression0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Scope scope0 = new Scope((-368), (-368));
      ScriptNode scriptNode0 = new ScriptNode();
      scope0.setTop(scriptNode0);
      assertEquals((-368), scope0.getLength());
      assertEquals((-368), scope0.getAbsolutePosition());
      assertEquals(130, scope0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      WhileLoop whileLoop0 = new WhileLoop(27, 21);
      FunctionNode functionNode0 = new FunctionNode((-1600));
      whileLoop0.top = (ScriptNode) functionNode0;
      whileLoop0.addChildScope(generatorExpression0);
      Symbol symbol0 = new Symbol();
      symbol0.setName("e.v_Y_BM@f&J[2pq|D");
      generatorExpression0.putSymbol(symbol0);
      assertEquals((-1), generatorExpression0.getPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      Symbol symbol0 = new Symbol();
      // Undeclared exception!
      try { 
        generatorExpression0.putSymbol(symbol0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null symbol name
         //
         verifyException("org.mozilla.javascript.ast.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      WhileLoop whileLoop0 = new WhileLoop(2, 21);
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      Symbol symbol0 = new Symbol();
      hashMap0.put("{\n", symbol0);
      whileLoop0.setSymbolTable(hashMap0);
      whileLoop0.replaceWith(generatorExpression0);
      // Undeclared exception!
      try { 
        Scope.joinScopes(generatorExpression0, whileLoop0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression((-1550), (-1550));
      generatorExpression0.getTop();
      assertEquals((-1550), generatorExpression0.getLength());
      assertEquals((-1550), generatorExpression0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      Symbol symbol0 = generatorExpression0.getSymbol("3{\n");
      assertNull(symbol0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WhileLoop whileLoop0 = new WhileLoop();
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      arrayComprehensionLoop0.addChild(whileLoop0);
      List<AstNode> list0 = arrayComprehensionLoop0.getStatements();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WhileLoop whileLoop0 = new WhileLoop(27, 21);
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      Symbol symbol0 = new Symbol();
      hashMap0.put("e.v_Y_BM@f&J[2pq|D", symbol0);
      whileLoop0.setSymbolTable(hashMap0);
      Scope scope0 = whileLoop0.getDefiningScope("e.v_Y_BM@f&J[2pq|D");
      assertNotNull(scope0);
      assertEquals(27, scope0.getPosition());
      assertEquals(21, scope0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WhileLoop whileLoop0 = new WhileLoop(27, 21);
      whileLoop0.getDefiningScope("e.v_Y_BM@f&J[2pq|D");
      assertEquals(21, whileLoop0.getLength());
      assertEquals(27, whileLoop0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression(55, 25);
      generatorExpression0.getChildScopes();
      assertEquals(55, generatorExpression0.getAbsolutePosition());
      assertEquals(25, generatorExpression0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      arrayComprehensionLoop0.clearParentScope();
      assertEquals(12, Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      WhileLoop whileLoop0 = new WhileLoop(27, 21);
      whileLoop0.addChildScope(generatorExpression0);
      whileLoop0.replaceWith(generatorExpression0);
      assertEquals(21, whileLoop0.getLength());
      assertEquals(27, whileLoop0.getPosition());
  }
}
