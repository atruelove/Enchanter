/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 17:37:55 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.ArrayComprehensionLoop;
import org.mozilla.javascript.ast.Assignment;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.InfixExpression;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.ObjectProperty;
import org.mozilla.javascript.ast.XmlMemberGet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InfixExpression_ESTest extends InfixExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Name name0 = new Name(557);
      ContinueStatement continueStatement0 = new ContinueStatement(557, name0);
      Assignment assignment0 = new Assignment(continueStatement0, name0);
      StringBuilder stringBuilder0 = new StringBuilder(7);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      assignment0.visit(astNode_DebugPrintVisitor0);
      assertEquals(1, name0.depth());
      assertEquals((-556), assignment0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet();
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        xmlMemberGet0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.InfixExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Name name0 = new Name(557);
      ContinueStatement continueStatement0 = new ContinueStatement(557, name0);
      Assignment assignment0 = new Assignment(continueStatement0, name0);
      assignment0.setOperator(26);
      String string0 = assignment0.toSource(24);
      assertEquals(0, continueStatement0.getPosition());
      assertEquals("                                                continue <null>;\n ! <null>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty(105, 105);
      // Undeclared exception!
      try { 
        objectProperty0.setOperator(2289);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid token: 2289
         //
         verifyException("org.mozilla.javascript.ast.InfixExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty(105, 105);
      objectProperty0.setOperator(105);
      NumberLiteral numberLiteral0 = new NumberLiteral();
      objectProperty0.setLeftAndRight(numberLiteral0, numberLiteral0);
      boolean boolean0 = objectProperty0.hasSideEffects();
      assertEquals((-1), objectProperty0.getAbsolutePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      objectProperty0.setOperator(90);
      boolean boolean0 = objectProperty0.hasSideEffects();
      assertEquals(90, objectProperty0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InfixExpression infixExpression0 = new InfixExpression();
      infixExpression0.getOperator();
      assertEquals((-1), infixExpression0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet();
      // Undeclared exception!
      try { 
        xmlMemberGet0.toSource(1780);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.XmlMemberGet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Name name0 = new Name(557);
      ContinueStatement continueStatement0 = new ContinueStatement(557, name0);
      Assignment assignment0 = new Assignment(continueStatement0, name0);
      assignment0.getRight();
      assertEquals(1, name0.depth());
      assertEquals((-556), assignment0.getLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      InfixExpression infixExpression0 = new InfixExpression(0, arrayComprehensionLoop0, arrayComprehensionLoop0, 6);
      assertEquals(0, arrayComprehensionLoop0.getPosition());
      assertEquals(7, infixExpression0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral(4953, 4953);
      InfixExpression infixExpression0 = new InfixExpression(4953, 4953, numberLiteral0, numberLiteral0);
      int int0 = infixExpression0.getOperatorPosition();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      objectProperty0.hasSideEffects();
      assertEquals((-1), objectProperty0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty(1);
      assertEquals((-1), objectProperty0.getOperatorPosition());
  }
}
