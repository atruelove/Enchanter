/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 16:20:42 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.ArrayComprehension;
import org.mozilla.javascript.ast.ArrayLiteral;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.EmptyStatement;
import org.mozilla.javascript.ast.FunctionCall;
import org.mozilla.javascript.ast.SwitchCase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayLiteral_ESTest extends ArrayLiteral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      SwitchCase switchCase0 = new SwitchCase(1);
      arrayLiteral0.addElement(switchCase0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      arrayLiteral0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tARRAYLIT -1 1\n1\t  CASE 2 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals("-1\tARRAYLIT -1 1\n1\t  CASE 2 1\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      String string0 = arrayLiteral0.toSource(364);
      assertEquals(66, arrayLiteral0.getType());
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral((-2132), (-2132));
      arrayLiteral0.setSkipCount((-2132));
      assertEquals((-2132), arrayLiteral0.getSkipCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      arrayLiteral0.setIsDestructuring(false);
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals("66", arrayLiteral0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      arrayLiteral0.setElements((List<AstNode>) null);
      assertEquals("66", arrayLiteral0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      List<AstNode> list0 = arrayComprehension0.getStatements();
      arrayLiteral0.setElements(list0);
      assertEquals(66, arrayLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      arrayLiteral0.setDestructuringLength(364);
      assertEquals(364, arrayLiteral0.getDestructuringLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      arrayLiteral0.isDestructuring();
      assertEquals("66", arrayLiteral0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      int int0 = arrayLiteral0.getSkipCount();
      assertEquals(0, int0);
      assertEquals("66", arrayLiteral0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      int int0 = arrayLiteral0.getSize();
      assertEquals("66", arrayLiteral0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      arrayLiteral0.addElement(arrayComprehension0);
      // Undeclared exception!
      try { 
        arrayLiteral0.getElement(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      // Undeclared exception!
      try { 
        arrayLiteral0.getElement(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no elements
         //
         verifyException("org.mozilla.javascript.ast.ArrayLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      int int0 = arrayLiteral0.getDestructuringLength();
      assertEquals(0, int0);
      assertEquals("66", arrayLiteral0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral((-1157));
      assertEquals(66, arrayLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      EmptyStatement emptyStatement0 = new EmptyStatement(25);
      arrayLiteral0.addElement(emptyStatement0);
      List<AstNode> list0 = FunctionCall.NO_ARGS;
      arrayLiteral0.setElements(list0);
      assertEquals(0, arrayLiteral0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral((-2132), (-2132));
      LinkedList<AstNode> linkedList0 = new LinkedList<AstNode>();
      linkedList0.add((AstNode) arrayLiteral0);
      arrayLiteral0.setElements(linkedList0);
      // Undeclared exception!
      try { 
        arrayLiteral0.toSource(24);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
