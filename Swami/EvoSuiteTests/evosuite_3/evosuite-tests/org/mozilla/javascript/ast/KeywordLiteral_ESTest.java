/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 16:13:53 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.KeywordLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeywordLiteral_ESTest extends KeywordLiteral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      StringBuilder stringBuilder0 = new StringBuilder("Invalid node type: ");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      keywordLiteral0.visit(astNode_DebugPrintVisitor0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      // Undeclared exception!
      try { 
        keywordLiteral0.toSource();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid keyword literal type: -1
         //
         verifyException("org.mozilla.javascript.ast.KeywordLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(44, 44, 44);
      String string0 = keywordLiteral0.toSource(44);
      assertEquals("                                                                                        false", string0);
      assertEquals(44, keywordLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(42, (-1094), 42);
      String string0 = keywordLiteral0.toSource((-1094));
      assertEquals(42, keywordLiteral0.getType());
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      KeywordLiteral keywordLiteral1 = keywordLiteral0.setType(43);
      String string0 = keywordLiteral1.toSource(0);
      assertEquals("43", keywordLiteral0.toString());
      assertEquals("this", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(1045, 1045, 45);
      assertEquals("45", keywordLiteral0.toString());
      
      String string0 = keywordLiteral0.toSource();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral((-757), (-757), 161);
      assertEquals(161, keywordLiteral0.getType());
      
      String string0 = keywordLiteral0.toSource(1);
      assertEquals("  debugger;\n", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = null;
      try {
        keywordLiteral0 = new KeywordLiteral(21, 18, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid node type: 4
         //
         verifyException("org.mozilla.javascript.ast.KeywordLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(61, 61);
      assertEquals("-1", keywordLiteral0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(14);
      assertEquals("-1", keywordLiteral0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      boolean boolean0 = keywordLiteral0.isBooleanLiteral();
      assertFalse(boolean0);
  }
}
