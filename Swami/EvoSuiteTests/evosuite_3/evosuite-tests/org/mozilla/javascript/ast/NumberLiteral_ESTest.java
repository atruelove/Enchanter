/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 16:20:58 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.NumberLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumberLiteral_ESTest extends NumberLiteral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral();
      StringBuilder stringBuilder0 = new StringBuilder(2);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      numberLiteral0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tNUMBER -1 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(40, numberLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral();
      String string0 = numberLiteral0.toSource((-3269));
      assertEquals("<null>", string0);
      assertEquals(40, numberLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral(1, "", 963.31141691);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(963.31141691, numberLiteral0.getNumber(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral(1, "while (");
      double double0 = numberLiteral0.getNumber();
      assertEquals(0.0, double0, 0.01);
      assertEquals(40, numberLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral((-3961), (-3961));
      assertEquals(40, numberLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral(2347);
      assertEquals(40, numberLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral((-1.0));
      assertEquals("-1.0", numberLiteral0.getValue());
      assertEquals((-1.0), numberLiteral0.getNumber(), 0.01);
      assertEquals("40", numberLiteral0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral();
      numberLiteral0.getValue();
      assertEquals("40", numberLiteral0.toString());
  }
}
