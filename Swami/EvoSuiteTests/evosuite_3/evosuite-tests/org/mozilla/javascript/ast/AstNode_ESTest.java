/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 16:07:15 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.Block;
import org.mozilla.javascript.ast.BreakStatement;
import org.mozilla.javascript.ast.ConditionalExpression;
import org.mozilla.javascript.ast.ErrorNode;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.GeneratorExpression;
import org.mozilla.javascript.ast.GeneratorExpressionLoop;
import org.mozilla.javascript.ast.Label;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NewExpression;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.ObjectLiteral;
import org.mozilla.javascript.ast.PropertyGet;
import org.mozilla.javascript.ast.ReturnStatement;
import org.mozilla.javascript.ast.StringLiteral;
import org.mozilla.javascript.ast.ThrowStatement;
import org.mozilla.javascript.ast.TryStatement;
import org.mozilla.javascript.ast.VariableInitializer;
import org.mozilla.javascript.ast.WithStatement;
import org.mozilla.javascript.ast.XmlElemRef;
import org.mozilla.javascript.ast.XmlMemberGet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AstNode_ESTest extends AstNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode((-2500));
      AstNode.PositionComparator astNode_PositionComparator0 = new AstNode.PositionComparator();
      int int0 = astNode_PositionComparator0.compare((AstNode) functionNode0, (AstNode) functionNode0);
      assertEquals(0, int0);
      assertEquals(1, functionNode0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GeneratorExpression generatorExpression0 = new GeneratorExpression();
      // Undeclared exception!
      try { 
        generatorExpression0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.GeneratorExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThrowStatement throwStatement0 = new ThrowStatement();
      ReturnStatement returnStatement0 = new ReturnStatement(27, 861, throwStatement0);
      String string0 = returnStatement0.shortName();
      assertEquals(1, throwStatement0.depth());
      assertEquals("ReturnStatement", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name name0 = new Name(2336, 2336);
      FunctionNode functionNode0 = new FunctionNode(2336, name0);
      PropertyGet propertyGet0 = new PropertyGet(functionNode0, name0, 2);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        propertyGet0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.FunctionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral(10);
      LinkedList<BreakStatement> linkedList0 = new LinkedList<BreakStatement>();
      BreakStatement breakStatement0 = new BreakStatement();
      linkedList0.add(breakStatement0);
      linkedList0.add(breakStatement0);
      StringBuilder stringBuilder0 = new StringBuilder();
      numberLiteral0.printList((List<BreakStatement>) linkedList0, stringBuilder0);
      assertEquals("break;\n, break;\n", stringBuilder0.toString());
      assertEquals(10, numberLiteral0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = AstNode.operatorToString(13);
      assertEquals("!=", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        AstNode.operatorToString(5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operator: 5
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Name name0 = new Name(7);
      boolean boolean0 = name0.hasSideEffects();
      assertFalse(boolean0);
      assertEquals(1, name0.getLength());
      assertEquals(7, name0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorNode errorNode0 = new ErrorNode();
      boolean boolean0 = errorNode0.hasSideEffects();
      assertEquals(1, errorNode0.getLength());
      assertTrue(boolean0);
      assertEquals((-1), errorNode0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      XmlElemRef xmlElemRef0 = new XmlElemRef(1);
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(tryStatement0, xmlElemRef0);
      xmlMemberGet0.setLineno(27);
      VariableInitializer variableInitializer0 = new VariableInitializer(27);
      xmlMemberGet0.setLeftAndRight(xmlElemRef0, variableInitializer0);
      assertEquals(1, variableInitializer0.depth());
      assertEquals(0, tryStatement0.getPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConditionalExpression conditionalExpression0 = new ConditionalExpression();
      Name name0 = new Name(23, 2);
      name0.parent = (AstNode) conditionalExpression0;
      name0.isLocalName();
      assertEquals(22, name0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      NewExpression newExpression0 = new NewExpression();
      newExpression0.setInitializer(objectLiteral0);
      objectLiteral0.getEnclosingFunction();
      assertEquals(1, objectLiteral0.depth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      tryStatement0.getAstRoot();
      assertEquals(1, tryStatement0.getLength());
      assertEquals((-1), tryStatement0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral((-1339));
      String string0 = stringLiteral0.debugPrint();
      assertEquals("-1339\tSTRING -1339 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Label label0 = new Label();
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(label0, xmlElemRef0);
      int int0 = xmlMemberGet0.compareTo((AstNode) label0);
      assertEquals(0, xmlElemRef0.getPosition());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Name name0 = new Name(7);
      FunctionNode functionNode0 = new FunctionNode((-1772), name0);
      // Undeclared exception!
      try { 
        functionNode0.getJumpStatement();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThrowStatement throwStatement0 = null;
      try {
        throwStatement0 = new ThrowStatement((AstNode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // arg cannot be null
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop(0, 0);
      Block block0 = new Block(1676, 14);
      block0.addStatement(generatorExpressionLoop0);
      assertEquals(1, generatorExpressionLoop0.depth());
      assertEquals((-1676), block0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      // Undeclared exception!
      try { 
        withStatement0.toSource(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.WithStatement", e);
      }
  }
}
