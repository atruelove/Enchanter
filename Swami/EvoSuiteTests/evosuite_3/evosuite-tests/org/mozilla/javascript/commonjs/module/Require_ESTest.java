/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 23:09:03 GMT 2018
 */

package org.mozilla.javascript.commonjs.module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.Script;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.commonjs.module.ModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.Require;
import org.mozilla.javascript.commonjs.module.provider.MultiModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.provider.SoftCachingModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Require_ESTest extends Require_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ArrayDeque<URI> arrayDeque0 = new ArrayDeque<URI>(nativeArray0);
      PriorityQueue<URI> priorityQueue0 = new PriorityQueue<URI>(1);
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(arrayDeque0, priorityQueue0);
      SoftCachingModuleScriptProvider softCachingModuleScriptProvider0 = new SoftCachingModuleScriptProvider(urlModuleSourceProvider0);
      Require require0 = new Require(context0, scriptableObject0, softCachingModuleScriptProvider0, (Script) null, (Script) null, false);
      // Undeclared exception!
      try { 
        require0.requireMain(context0, "language version");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = Context.enter();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      NativeArray nativeArray0 = new NativeArray(13);
      HashSet<ModuleScriptProvider> hashSet0 = new HashSet<ModuleScriptProvider>(nativeArray0);
      MultiModuleScriptProvider multiModuleScriptProvider0 = new MultiModuleScriptProvider(hashSet0);
      Require require0 = new Require(context0, nativeUint8ClampedArray0, multiModuleScriptProvider0, (Script) null, (Script) null, true);
      // Undeclared exception!
      try { 
        require0.requireMain(context0, "error reporter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.commonjs.module.provider.MultiModuleScriptProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(3);
      Delegator delegator0 = new Delegator(nativeFloat64Array0);
      LinkedHashSet<ModuleScriptProvider> linkedHashSet0 = new LinkedHashSet<ModuleScriptProvider>();
      MultiModuleScriptProvider multiModuleScriptProvider0 = new MultiModuleScriptProvider(linkedHashSet0);
      Require require0 = new Require(context0, delegator0, multiModuleScriptProvider0, (Script) null, (Script) null, true);
      require0.requireMain(context0, "language version");
      Scriptable scriptable0 = require0.requireMain(context0, "language version");
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      LinkedHashSet<ModuleScriptProvider> linkedHashSet0 = new LinkedHashSet<ModuleScriptProvider>();
      MultiModuleScriptProvider multiModuleScriptProvider0 = new MultiModuleScriptProvider(linkedHashSet0);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      Require require0 = new Require(context0, nativeArrayBuffer0, multiModuleScriptProvider0, (Script) null, (Script) null, true);
      require0.requireMain(context0, "");
      // Undeclared exception!
      try { 
        require0.requireMain(context0, "error reporter");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Main module already set to 
         //
         verifyException("org.mozilla.javascript.commonjs.module.Require", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      Stack<SoftCachingModuleScriptProvider> stack0 = new Stack<SoftCachingModuleScriptProvider>();
      MultiModuleScriptProvider multiModuleScriptProvider0 = new MultiModuleScriptProvider(stack0);
      Require require0 = new Require(context0, nativeUint8Array0, multiModuleScriptProvider0, (Script) null, (Script) null, true);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      require0.install(importerTopLevel0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      Stack<SoftCachingModuleScriptProvider> stack0 = new Stack<SoftCachingModuleScriptProvider>();
      MultiModuleScriptProvider multiModuleScriptProvider0 = new MultiModuleScriptProvider(stack0);
      Require require0 = new Require(context0, nativeUint8Array0, multiModuleScriptProvider0, (Script) null, (Script) null, true);
      int int0 = require0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 15, (-4185));
      Synchronizer synchronizer0 = new Synchronizer(nativeUint8ClampedArray0, context0);
      ArrayDeque<URI> arrayDeque0 = new ArrayDeque<URI>();
      TreeSet<URI> treeSet0 = new TreeSet<URI>(arrayDeque0);
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(treeSet0, treeSet0);
      SoftCachingModuleScriptProvider softCachingModuleScriptProvider0 = new SoftCachingModuleScriptProvider(urlModuleSourceProvider0);
      Script script0 = context0.compileString("ArrayBuffer", "ArrayBuffer", 1, (Object) null);
      Require require0 = new Require(context0, synchronizer0, softCachingModuleScriptProvider0, script0, script0, true);
      String string0 = require0.getFunctionName();
      assertEquals("require", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(138);
      LinkedHashSet<URI> linkedHashSet0 = new LinkedHashSet<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(linkedHashSet0, linkedHashSet0);
      SoftCachingModuleScriptProvider softCachingModuleScriptProvider0 = new SoftCachingModuleScriptProvider(urlModuleSourceProvider0);
      Require require0 = new Require(context0, nativeInt16Array0, softCachingModuleScriptProvider0, (Script) null, (Script) null, true);
      int int0 = require0.getArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = Context.enter();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(1);
      ArrayList<URI> arrayList0 = new ArrayList<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(arrayList0, arrayList0);
      SoftCachingModuleScriptProvider softCachingModuleScriptProvider0 = new SoftCachingModuleScriptProvider(urlModuleSourceProvider0);
      Require require0 = new Require(context0, nativeUint8ClampedArray0, softCachingModuleScriptProvider0, (Script) null, (Script) null, true);
      // Undeclared exception!
      try { 
        require0.construct(context0, nativeUint8ClampedArray0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"Error\" not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      LinkedHashSet<ModuleScriptProvider> linkedHashSet0 = new LinkedHashSet<ModuleScriptProvider>();
      MultiModuleScriptProvider multiModuleScriptProvider0 = new MultiModuleScriptProvider(linkedHashSet0);
      Context context0 = Context.enter();
      Require require0 = new Require(context0, nativeArrayBuffer0, multiModuleScriptProvider0, (Script) null, (Script) null, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) linkedHashSet0;
      // Undeclared exception!
      try { 
        require0.call(context0, nativeArrayBuffer0, nativeArrayBuffer0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"Error\" not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      LinkedHashSet<ModuleScriptProvider> linkedHashSet0 = new LinkedHashSet<ModuleScriptProvider>();
      MultiModuleScriptProvider multiModuleScriptProvider0 = new MultiModuleScriptProvider(linkedHashSet0);
      Require require0 = new Require(context0, nativeArrayBuffer0, multiModuleScriptProvider0, (Script) null, (Script) null, true);
      // Undeclared exception!
      try { 
        require0.call(context0, nativeArrayBuffer0, nativeArrayBuffer0, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"Error\" not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }
}
