/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 23:03:35 GMT 2018
 */

package org.mozilla.javascript.commonjs.module.provider;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.net.URI;
import java.util.Comparator;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.commonjs.module.ModuleScript;
import org.mozilla.javascript.commonjs.module.provider.MultiModuleScriptProvider;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiModuleScriptProvider_ESTest extends MultiModuleScriptProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Comparator<MultiModuleScriptProvider> comparator0 = (Comparator<MultiModuleScriptProvider>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-632)).when(comparator0).compare(any(org.mozilla.javascript.commonjs.module.provider.MultiModuleScriptProvider.class) , any(org.mozilla.javascript.commonjs.module.provider.MultiModuleScriptProvider.class));
      TreeSet<MultiModuleScriptProvider> treeSet0 = new TreeSet<MultiModuleScriptProvider>(comparator0);
      NativeObject nativeObject0 = new NativeObject();
      MultiModuleScriptProvider multiModuleScriptProvider0 = new MultiModuleScriptProvider(treeSet0);
      treeSet0.add(multiModuleScriptProvider0);
      MultiModuleScriptProvider multiModuleScriptProvider1 = new MultiModuleScriptProvider(treeSet0);
      Context context0 = Context.enter();
      ModuleScript moduleScript0 = multiModuleScriptProvider1.getModuleScript(context0, "language version", (URI) null, (URI) null, nativeObject0);
      assertNull(moduleScript0);
  }
}
