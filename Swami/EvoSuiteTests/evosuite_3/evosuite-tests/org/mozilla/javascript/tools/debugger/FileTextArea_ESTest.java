/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 20:05:00 GMT 2018
 */

package org.mozilla.javascript.tools.debugger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.IllegalComponentStateException;
import java.awt.event.ActionEvent;
import java.awt.event.MouseWheelEvent;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLayeredPane;
import javax.swing.JViewport;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.event.PopupMenuEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.debugger.FileTextArea;
import org.mozilla.javascript.tools.debugger.FileWindow;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileTextArea_ESTest extends FileTextArea_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      fileTextArea0.select(3067);
      assertFalse(fileTextArea0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      fileTextArea0.insert("\"RTI(),:`gG{N.O", 1);
      fileTextArea0.setSize(1, 1);
      // Undeclared exception!
      try { 
        fileTextArea0.select(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.FileTextArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      fileTextArea0.setSize(1, 1);
      // Undeclared exception!
      try { 
        fileTextArea0.select(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.FileTextArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      fileTextArea0.select(0);
      assertFalse(fileTextArea0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      fileTextArea0.popupMenuWillBecomeVisible((PopupMenuEvent) null);
      assertFalse(fileTextArea0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      PopupMenuEvent popupMenuEvent0 = new PopupMenuEvent(fileTextArea0);
      fileTextArea0.popupMenuWillBecomeInvisible(popupMenuEvent0);
      assertFalse(fileTextArea0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      PopupMenuEvent popupMenuEvent0 = new PopupMenuEvent("Alt+Ctrl+Shift+Alt Graph+Button1+Button2+Button3");
      fileTextArea0.popupMenuCanceled(popupMenuEvent0);
      assertFalse(fileTextArea0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(fileTextArea0, (-225), (-225), (-225), (-225), 170, 170, 170, (-225), false, 0, (-225), (-2437), 0);
      fileTextArea0.mouseReleased(mouseWheelEvent0);
      assertFalse(mouseWheelEvent0.isAltGraphDown());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultListCellRenderer0, 127, 127, 127, 181, 181, 181, 181, 158, false, 89, (-244), 181);
      fileTextArea0.mouseExited(mouseWheelEvent0);
      assertEquals(181, mouseWheelEvent0.getXOnScreen());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(fileTextArea0, (-225), (-225), (-225), (-225), 170, 170, 170, (-225), false, 0, (-225), (-2437), 0);
      fileTextArea0.mouseEntered(mouseWheelEvent0);
      assertEquals(548325, mouseWheelEvent0.getUnitsToScroll());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(fileTextArea0, (-225), (-225), (-225), (-225), 170, 170, 170, (-225), false, 0, (-225), (-2437), 0);
      fileTextArea0.mouseClicked(mouseWheelEvent0);
      assertEquals(0, mouseWheelEvent0.getButton());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(fileTextArea0, (-430), 1, 3, (-430), '/', menuElementArray0, menuSelectionManager0);
      fileTextArea0.keyTyped(menuKeyEvent0);
      assertEquals(0, menuKeyEvent0.getKeyLocation());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(fileTextArea0, 0, (-225), (-1636), 91, 'W', menuElementArray0, menuSelectionManager0);
      fileTextArea0.keyReleased(menuKeyEvent0);
      assertFalse(fileTextArea0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(fileTextArea0, 32, 32, 32, 8, '9', (MenuElement[]) null, menuSelectionManager0);
      fileTextArea0.keyPressed(menuKeyEvent0);
      assertEquals(0, menuKeyEvent0.getKeyLocation());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultListCellRenderer0, 127, 127, 127, 181, 181, 181, 181, 158, false, 89, (-244), 181);
      fileTextArea0.mousePressed(mouseWheelEvent0);
      assertEquals((-44164), mouseWheelEvent0.getUnitsToScroll());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(fileTextArea0, (-1544), (-1544), (-1544), (-1544), (-1544), (-1544), (-1544), (-1544), true, (-1544), (-1544), (-1544), (-1544));
      // Undeclared exception!
      try { 
        fileTextArea0.mousePressed(mouseWheelEvent0);
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      JViewport jViewport0 = new JViewport();
      ActionEvent actionEvent0 = new ActionEvent(jViewport0, (-569), "", (-2437));
      fileTextArea0.actionPerformed(actionEvent0);
      assertEquals((-2437), actionEvent0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 0, "Clear Breakpoint", (-3303));
      // Undeclared exception!
      try { 
        fileTextArea0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.FileTextArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      fileTextArea0.setSize(164, 1986);
      ActionEvent actionEvent0 = new ActionEvent(fileTextArea0, (-55), "Set Breakpoint", (-55), (-55));
      // Undeclared exception!
      try { 
        fileTextArea0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.FileTextArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileTextArea fileTextArea0 = new FileTextArea((FileWindow) null);
      JViewport jViewport0 = new JViewport();
      ActionEvent actionEvent0 = new ActionEvent(jViewport0, (-2534), "Run", (-2534));
      // Undeclared exception!
      try { 
        fileTextArea0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.FileTextArea", e);
      }
  }
}
