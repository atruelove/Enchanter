/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 05:29:50 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ClassFileField;
import org.mozilla.classfile.ClassFileWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassFileWriter_ESTest extends ClassFileWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Q8R^Rgtk=x[r\"r$'B", "Q8R^Rgtk=x[r\"r$'B", "]b.,sJ(5gt+3n");
      ClassFileWriter.StackMapTable classFileWriter_StackMapTable0 = classFileWriter0.new StackMapTable();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        classFileWriter_StackMapTable0.write(byteArray0, (byte) (-88));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -88
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(":{RkSxGKU", ":{RkSxGKU", ":{RkSxGKU");
      ClassFileWriter.StackMapTable classFileWriter_StackMapTable0 = classFileWriter0.new StackMapTable();
      // Undeclared exception!
      try { 
        classFileWriter_StackMapTable0.computeWriteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter$StackMapTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)55, "\"`DkOSX_=<h`:", "D`p.n f8", "");
      String string0 = classFileWriter_MHandle0.toString();
      assertEquals("\"`DkOSX_=<h`:.D`p.n f8 (55)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte) (-33), (String) null, " at index: ", " at index: ");
      ClassFileField classFileField0 = new ClassFileField((byte) (-33), (byte) (-33), (short)0);
      boolean boolean0 = classFileWriter_MHandle0.equals(classFileField0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("bad merge attempt", "bad merge attempt", "");
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)32, "bad merge attempt", "bad merge attempt", "Code");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      ClassFileWriter.BootstrapEntry classFileWriter_BootstrapEntry0 = classFileWriter0.new BootstrapEntry(classFileWriter_MHandle0, objectArray0);
      classFileWriter_BootstrapEntry0.equals(classFileWriter0.ACC_SYNCHRONIZED);
      assertEquals("bad merge attempt", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Pej/:8k%ms", "Pej/:8k%ms", "l");
      // Undeclared exception!
      try { 
        classFileWriter0.addAStore(3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("v+L0I\"]{(=~}NZ", "h56/*5[N+", "v+L0I\"]{(=~}NZ");
      // Undeclared exception!
      try { 
        classFileWriter0.addAStore(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org/mozilla/classfile/ClassFileWriter.class", "org/mozilla/classfile/ClassFileWriter.class", "org/mozilla/classfile/ClassFileWriter.class");
      File file0 = MockFile.createTempFile("%csMh[3}n{l5tM", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      classFileWriter0.write(bufferedOutputStream0);
      assertEquals((short)64, ClassFileWriter.ACC_VOLATILE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(" at index: ", "5G", "w]Q=q5lyn>jIZ0\"e");
      // Undeclared exception!
      try { 
        classFileWriter0.stopMethod((short)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No method to stop
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("7@FNB.]8sv", "e!(|+y)%qe;36b:X<nA", "e!(|+y)%qe;36b:X<nA");
      // Undeclared exception!
      try { 
        classFileWriter0.add((-1674), "7@FNB.]8sv", "e!(|+y)%qe;36b:X<nA", "7@FNB.]8sv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad opcode: -1674
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("9A,+3t", "", "}UJY_?f>$#iyp^FE");
      // Undeclared exception!
      try { 
        classFileWriter0.add(85, "<VWas6l+<AV7Vg");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -3
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("value ", "value ", "V");
      // Undeclared exception!
      try { 
        classFileWriter0.setTableSwitchJump(2543, (-915), (-915));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad jump target: -915
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("ConstantValue", "%2rRBS<G%(\")t3J<;", "ConstantValue");
      classFileWriter0.setStackTop((short)0);
      assertEquals((short)0, classFileWriter0.getStackTop());
      assertEquals("ConstantValue", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("W.)RfwQXko!'86la", "|ra=XNhAt?0TzSrs}8", "g");
      classFileWriter0.setFlags((short)218);
      assertEquals("W.)RfwQXko!'86la", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.SuperBlock", "org.mozilla.classfile.SuperBlock", "");
      // Undeclared exception!
      try { 
        classFileWriter0.add(2459);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad opcode: 2459
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("5.G,y(0GF< 2B", "", "5.G,y(0GF< 2B");
      // Undeclared exception!
      try { 
        classFileWriter0.markTableSwitchCase(453, (-1477), 127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad stack index: 127
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("~*S6=)p;i0\"%/ww", "~*S6=)p;i0\"%/ww", "TeZVJQZn0l5#*Q");
      // Undeclared exception!
      try { 
        classFileWriter0.markTableSwitchCase((-219), 14, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(" >&", "}/jV 1", "}/jV 1");
      // Undeclared exception!
      try { 
        classFileWriter0.markTableSwitchCase(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "O ~M,v a#d|", (String) null);
      // Undeclared exception!
      try { 
        classFileWriter0.markLabel(0, (short) (-788));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label, no biscuit
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("[G*N", "[G*N", "[G*N");
      // Undeclared exception!
      try { 
        classFileWriter0.markLabel((-578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.markHandler((short)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label, no biscuit
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("K9c25/I)p", "toString", "K9c25/I)p");
      classFileWriter0.isUnderStringSizeLimit("");
      assertEquals("K9c25/I)p", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)4467);
      // Undeclared exception!
      try { 
        classFileWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.addField("", "", (short)16, (-506L));
      byte[] byteArray0 = classFileWriter0.toByteArray();
      //  // Unstable assertion: assertEquals(101, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("7@FNB.]8sv", "e!(|+y)%qe;36b:X<nA", "e!(|+y)%qe;36b:X<nA");
      short short0 = classFileWriter0.getStackTop();
      assertEquals("7@FNB.]8sv", classFileWriter0.getClassName());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.getLabelPC((-2144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("D`p.n f8", "D`p.n f8", "D`p.n f8");
      // Undeclared exception!
      try { 
        classFileWriter0.getLabelPC((byte)55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label, no biscuit
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("out of range byte", "out of range byte", "out of range byte");
      int int0 = classFileWriter0.getCurrentCodeOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("q:NO`)Hr.", "q:NO`)Hr.", "bad merge attempt");
      String string0 = classFileWriter0.getClassName();
      assertEquals("q:NO`)Hr.", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Bad prameter signature: ", "", "Too big string");
      char[] charArray0 = classFileWriter0.getCharBuffer(2093);
      assertEquals("Bad prameter signature: ", classFileWriter0.getClassName());
      assertEquals(2093, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "b", "b");
      ClassFileWriter.StackMapTable classFileWriter_StackMapTable0 = classFileWriter0.new StackMapTable();
      // Undeclared exception!
      try { 
        classFileWriter_StackMapTable0.generate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = ClassFileWriter.classNameToSignature("org.mozilla.classfile.ClassFileField");
      assertEquals("Lorg/mozilla/classfile/ClassFileField;", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.adjustStackTop(12);
      assertEquals((short)12, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileWriter$StackMapTable", ".E>uuR%", ".E>uuR%");
      // Undeclared exception!
      try { 
        classFileWriter0.adjustStackTop((-888));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -888
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.addVariableDescriptor("", "", 1284, 492);
      assertEquals((short)4, ClassFileWriter.ACC_PROTECTED);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("#su%z.PJL>Y{Iq,jj", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addTableSwitch(489, 489);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("W.)RfwQXko!'86la", "|ra=XNhAt?0TzSrs}8", "g");
      // Undeclared exception!
      try { 
        classFileWriter0.addTableSwitch(127, 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad bounds: 127 20
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)0);
      // Undeclared exception!
      try { 
        classFileWriter0.markTableSwitchDefault((-2499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2499 is outside a possible range of tableswitch in already generated code
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)0);
      classFileWriter0.addPush(true);
      assertEquals(1, classFileWriter0.getCurrentCodeOffset());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)0);
      classFileWriter0.addPush("n&s+tveLrWtvIv");
      assertEquals((short)1, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("ENqwb", "ENqwb", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(16777215L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush((int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("#p_:,nw~wi$I@OOeeD", "J*Bm_ZQfu`jA:[ER", "<!)");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("(^bF", "URQvRzj", (String) null);
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)256);
      classFileWriter0.addPush((double) 0);
      assertEquals(1, classFileWriter0.getCurrentCodeOffset());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)4467);
      classFileWriter0.addLoadConstant(2148);
      assertEquals(2, classFileWriter0.getCurrentCodeOffset());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("pq{ETXja3AB[p", "Yj7=dm@.Yj7=dm@pq{ETXja3AB[p (0)", "Yj7=dm@.Yj7=dm@pq{ETXja3AB[p (0)");
      // Undeclared exception!
      try { 
        classFileWriter0.addLoadConstant(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addLoadConstant((-1915.944F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)0);
      classFileWriter0.addLoadConstant((double) (-2499));
      assertEquals((short)2, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("W.)RfwQXko!'86la", "|ra=XNhAt?0TzSrs}8", "g");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(2343.56803396);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)4467);
      classFileWriter0.addLineNumberEntry((short)1444);
      classFileWriter0.addLineNumberEntry((short)0);
      assertEquals((short)2, ClassFileWriter.ACC_PRIVATE);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addLineNumberEntry((short)1444);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to stop
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addLStore((-1702));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -2
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)32);
      classFileWriter0.addLLoad(1284);
      assertEquals((short)2, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)0, "S,V#DN-OP2kp+{,", "K", "Bad label");
      Object[] objectArray0 = new Object[19];
      // Undeclared exception!
      try { 
        classFileWriter0.addInvokeDynamic("0", "", classFileWriter_MHandle0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad parameter signature: 
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("fRes6+n,", "fRes6+n,", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addInvoke(2047, "out of range dimensions", (String) null, "org.mozilla.javascript.ObjArray");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad parameter signature: org.mozilla.javascript.ObjArray
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("out of range byte", "out of range byte", "out of range byte");
      classFileWriter0.addInterface("out of range byte");
      assertEquals((short)32, ClassFileWriter.ACC_SYNCHRONIZED);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("QM8B=grQ", "QM8B=grQ", "QM8B=grQ");
      classFileWriter0.addField("QM8B=grQ", "f", (short) (-339), (int) (short) (-339));
      assertEquals((short)256, ClassFileWriter.ACC_NATIVE);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "out of range variable", "out of range variable");
      classFileWriter0.addField("", "s'", (short)0, (double) (short)0);
      assertEquals((short)1, ClassFileWriter.ACC_PUBLIC);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileWriter", "j:-mi", "org.mozilla.classfile.ClassFileWriter");
      classFileWriter0.addField("org.mozilla.classfile.ClassFileWriter", "org.mozilla.classfile.SuperBlock", (short) (-3530));
      assertEquals("org.mozilla.classfile.ClassFileWriter", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "org/mozillazclassfile/ClassFilCWriter.class");
      // Undeclared exception!
      try { 
        classFileWriter0.addFStore((short)1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("W.)RfwQXko!'86la", "|ra=XNhAt?0TzSrs}8", "g");
      classFileWriter0.addExceptionHandler((-2731), (-1496), (-1496), "bad method type");
      assertEquals("W.)RfwQXko!'86la", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("uo0 _Hq9:-d\"`g?j9\"", "uo0 _Hq9:-d\"`g?j9\"", "uo0 _Hq9:-d\"`g?j9\"");
      // Undeclared exception!
      try { 
        classFileWriter0.addExceptionHandler((-641), 18, (-1434), "uo0 _Hq9:-d\"`g?j9\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad endLabel
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addExceptionHandler(1284, (-2499), 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad startLabel
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addDStore(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -2
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Y^@e:n]&wB*z:c0-A", "Y^@e:n]&wB*z:c0-A", "Y^@e:n]&wB*z:c0-A");
      classFileWriter0.startMethod("2#2W;*", "2#2W;*", (short) (-1));
      classFileWriter0.addDLoad(236);
      assertEquals(2, classFileWriter0.getCurrentCodeOffset());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)0);
      classFileWriter0.addALoad(238);
      assertEquals(2, classFileWriter0.getCurrentCodeOffset());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("9A,+3t", "", "}UJY_?f>$#iyp^FE");
      // Undeclared exception!
      try { 
        classFileWriter0.add(64, "J*Bm_ZQfu`jA:[ER", "r){2Fz=Ftt(SW.C#/", "r){2Fz=Ftt(SW.C#/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad opcode for field reference
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("0)sO)Ry2?k;A`Xu]", "0)sO)Ry2?k;A`Xu]", "0)sO)Ry2?k;A`Xu]");
      // Undeclared exception!
      try { 
        classFileWriter0.add(0, "0)sO)Ry2?k;A`Xu]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad opcode for class reference
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileMethod", "}2QwE0jmh)'?vN.[U", "org.mozilla.classfile.ClassFileMethod");
      // Undeclared exception!
      try { 
        classFileWriter0.add(0, 5201, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected opcode for 2 operands
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileWriter", "j:-mi", "org.mozilla.classfile.ClassFileWriter");
      // Undeclared exception!
      try { 
        classFileWriter0.add(87, (int) (short) (-3530), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ExceptionTableEntry", "9Oi", "");
      // Undeclared exception!
      try { 
        classFileWriter0.add(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected opcode for 1 operand
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)0);
      classFileWriter0.addILoad(224);
      assertEquals((short)1, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("D`p.n f8", "D`p.n f8", "D`p.n f8");
      classFileWriter0.startMethod("{8N5r$j", "{8N5r$j", (short)167);
      classFileWriter0.addFLoad(1731);
      assertEquals((short)1, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("LqF8TZ[~i)$,p;", "qF8TZ[~i)$,p", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addFLoad((-1490));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of range variable
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)4467);
      classFileWriter0.addLoadConstant((long) (short)1444);
      assertEquals(3, classFileWriter0.getCurrentCodeOffset());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)4467);
      classFileWriter0.addPush((-722L));
      assertEquals((short)2, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("sb ", "IS?m`Kl", "Bad endLabel");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("ConstantValue", "%2rRBS<G%(\")t3J<;", "ConstantValue");
      // Undeclared exception!
      try { 
        classFileWriter0.addIStore((short)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "out of range variable", "out of range variable");
      // Undeclared exception!
      try { 
        classFileWriter0.add(17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected operands
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Bad prameter signature: ", "", "Too big string");
      int int0 = classFileWriter0.acquireLabel();
      assertEquals("Bad prameter signature: ", classFileWriter0.getClassName());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      classFileWriter0.startMethod("", "", (short)0);
      classFileWriter0.addLoadThis();
      classFileWriter0.addIStore((short)0);
      assertEquals(2, classFileWriter0.getCurrentCodeOffset());
  }
}
