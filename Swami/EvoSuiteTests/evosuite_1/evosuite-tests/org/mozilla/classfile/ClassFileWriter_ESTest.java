/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 08:26:04 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ClassFileWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassFileWriter_ESTest extends ClassFileWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      ClassFileWriter.StackMapTable classFileWriter_StackMapTable0 = classFileWriter0.new StackMapTable();
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        classFileWriter_StackMapTable0.write(byteArray0, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter$StackMapTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      ClassFileWriter.StackMapTable classFileWriter_StackMapTable0 = classFileWriter0.new StackMapTable();
      // Undeclared exception!
      try { 
        classFileWriter_StackMapTable0.computeWriteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter$StackMapTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)12, "r?FQz!G", "r?FQz!G", "r?FQz!G");
      String string0 = classFileWriter_MHandle0.toString();
      assertEquals("r?FQz!G.r?FQz!Gr?FQz!G (12)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte) (-102), "&AfE3<+", "", "Bad stack index: ");
      boolean boolean0 = classFileWriter_MHandle0.equals("Bad stack index: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("br\"npO@<Dy", "(6j&MFE#D=Ah", "(6j&MFE#D=Ah");
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte) (-20), "(6j&MFE#D=Ah", "hKb@s(e2p)", "bad instance");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "br\"npO@<Dy";
      objectArray0[1] = (Object) "bad instance";
      ClassFileWriter.BootstrapEntry classFileWriter_BootstrapEntry0 = classFileWriter0.new BootstrapEntry(classFileWriter_MHandle0, objectArray0);
      assertEquals("br\"npO@<Dy", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("JY#51da,PP'H+MjN", "G-7`>1R:?qx@}G`B", "JY#51da,PP'H+MjN");
      // Undeclared exception!
      try { 
        classFileWriter0.addLLoad(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("eWj3Y", "eWj3Y", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addAStore(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addILoad((short)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("2Scvb<X", "", "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      classFileWriter0.write(mockPrintStream0);
      //  // Unstable assertion: assertEquals(67, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u00004\u0000\u0007\u0001\u0000\u00072Scvb<X\u0007\u0000\u0001\u0001\u0000\u0000\u0007\u0000\u0003\u0001\u0000\u0000\u0001\u0000\nSourceFile\u0000!\u0000\u0002\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0006\u0000\u0000\u0000\u0002\u0000\u0005", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Btx~L", "", "_i0>L5bA!~?;");
      // Undeclared exception!
      try { 
        classFileWriter0.stopMethod((short) (-2076));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No method to stop
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "org.mozilla.classfile.ClassFileField");
      // Undeclared exception!
      try { 
        classFileWriter0.add(377, "Wyc}!Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad opcode: 377
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("out of range variable", "", "r?FQz!G");
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)12, "r?FQz!G", "r?FQz!G", "r?FQz!G");
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        classFileWriter0.addInvokeDynamic("out of range variable", "out of range variable", classFileWriter_MHandle0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad parameter signature: out of range variable
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "Empty stack", " at index: ");
      // Undeclared exception!
      try { 
        classFileWriter0.setTableSwitchJump((short) (-767), (short) (-767), (short) (-767));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad jump target: -767
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("?3$dxC&E?5(yo", "end label not defined", (String) null);
      // Undeclared exception!
      try { 
        classFileWriter0.setTableSwitchJump(75, 75, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 75 is outside a possible range of tableswitch in already generated code
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("lm", "lm", "lm");
      classFileWriter0.setStackTop((short) (-2890));
      assertEquals((short) (-2890), classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "BU'^.IK");
      classFileWriter0.setFlags((short) (-2710));
      assertEquals("", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("&xrSt0V9d", "", "&xrSt0V9d");
      // Undeclared exception!
      try { 
        classFileWriter0.add(371);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad opcode: 371
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("2Scvb<X", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.markTableSwitchDefault(192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("i%GVQ;9F+]&x/Z+n", "5ajT3R-J^a", "");
      // Undeclared exception!
      try { 
        classFileWriter0.markTableSwitchCase(300, 300, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("unM,gG", "unM,gG", "unM,gG");
      // Undeclared exception!
      try { 
        classFileWriter0.markTableSwitchCase(758, 758, 758);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad stack index: 758
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("8i,l", "No method to add to", "8i,l");
      // Undeclared exception!
      try { 
        classFileWriter0.markTableSwitchCase((-3376), (-3376));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.markLabel(0, (short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label, no biscuit
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("DOthb,:B", "DOthb,:B", "DOthb,:B");
      // Undeclared exception!
      try { 
        classFileWriter0.markLabel((-1571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ConstantPool", "TrWUr!2=8P?0bfMS*", "TrWUr!2=8P?0bfMS*");
      // Undeclared exception!
      try { 
        classFileWriter0.markHandler(3000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label, no biscuit
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "Empty stack", " at index: ");
      classFileWriter0.isUnderStringSizeLimit("");
      assertEquals("", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.javascript.UintMap", "GG", "org.mozilla.javascript.UintMap");
      short short0 = classFileWriter0.getStackTop();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.getLabelPC(18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label, no biscuit
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.getLabelPC((-837));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad label
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("E(F;.r;9xUU?Z", "DOUBLE_MARK", "E(F;.r;9xUU?Z");
      int int0 = classFileWriter0.getCurrentCodeOffset();
      assertEquals("E(F;.r;9xUU?Z", classFileWriter0.getClassName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("n+|'*dF0gr&[8lf%eR*", "", "t=q`MpL6L>5r +o");
      String string0 = classFileWriter0.getClassName();
      assertEquals("n+|'*dF0gr&[8lf%eR*", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "java/lang/String");
      char[] charArray0 = classFileWriter0.getCharBuffer(867);
      assertEquals("", classFileWriter0.getClassName());
      assertEquals(867, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      ClassFileWriter.StackMapTable classFileWriter_StackMapTable0 = classFileWriter0.new StackMapTable();
      // Undeclared exception!
      try { 
        classFileWriter_StackMapTable0.generate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = ClassFileWriter.classNameToSignature("jH(D!JIn>&.zh:Cr");
      assertEquals("LjH(D!JIn>&/zh:Cr;", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("bad opcode for field reference", "bad instance", "bad instance");
      classFileWriter0.adjustStackTop(3553);
      assertEquals((short)3553, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(";\"yFxj^_H}m(A! H7", ";\"yFxj^_H}m(A! H7", ";\"yFxj^_H}m(A! H7");
      // Undeclared exception!
      try { 
        classFileWriter0.adjustStackTop((-241));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -241
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ConstantPool", "TrWUr!2=8P?0bfMS*", "TrWUr!2=8P?0bfMS*");
      classFileWriter0.addVariableDescriptor("org.mozilla.classfile.ConstantPool", "bad merge attempt", 3000, (short)15);
      assertEquals("org.mozilla.classfile.ConstantPool", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addTableSwitch(1318, (-4611));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad bounds: 1318 -4611
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addTableSwitch((-3475), 230);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(" \u2209 [0, ", " \u2209 [0, ", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("bad opcode for field reference", "bad instance", "bad instance");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("bad opcode for field reference", "bad intanOce", "bad intanOce");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("bad opcode for field reference", "bad instance", "bad instance");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("<Wu", "", (String) null);
      // Undeclared exception!
      try { 
        classFileWriter0.addLoadThis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "org/mozilla/classfile/ClassFileWriter.class");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("AN{V[c5v8Q<*cM", "AN{V[c5v8Q<*cM", "AN{V[c5v8Q<*cM");
      // Undeclared exception!
      try { 
        classFileWriter0.addLoadConstant((-384L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Attempt to modify sealed array", "Attempt to modify sealed array", "Attempt to modify sealed array");
      // Undeclared exception!
      try { 
        classFileWriter0.addLoadConstant((int) (short)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileMethod", "Attempt to modify sealed array", "value ");
      // Undeclared exception!
      try { 
        classFileWriter0.addLoadConstant(0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ConstantPool", "TrWUr!2=8P?0bfMS*", "TrWUr!2=8P?0bfMS*");
      classFileWriter0.startMethod("TrWUr!2=8P?0bfMS*", "org.mozilla.classfile.ConstantPool", (short)15);
      classFileWriter0.addLineNumberEntry((short)15);
      assertEquals("org.mozilla.classfile.ConstantPool", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ConstantPool", "TrWUr!2=8P?0bfMS*", "TrWUr!2=8P?0bfMS*");
      // Undeclared exception!
      try { 
        classFileWriter0.addLineNumberEntry((short)15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to stop
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("^H8'4% ", "", "^H8'4% ");
      // Undeclared exception!
      try { 
        classFileWriter0.addLStore(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -2
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("['2NxT", "['2NxT", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addInvoke((short) (-1280), (String) null, "p>T?['_)c2TgruNS'F", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad parameter signature: 
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("*8Z%)*Ry-", "*8Z%)*Ry-", "*8Z%)*Ry-");
      classFileWriter0.addInterface("E&,jC");
      assertEquals(0, classFileWriter0.getCurrentCodeOffset());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addIStore(63);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("v <qO\"", "X[GPL;`]_`ma{", "v <qO\"");
      // Undeclared exception!
      try { 
        classFileWriter0.addILoad(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("YZ-$lN-7Q", "", "YZ-$lN-7Q");
      classFileWriter0.addField(":Dx", "", (short) (-1275), 2117L);
      assertEquals((short)0, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("*8Z%)*Ry-", "*8Z%)*Ry-", "*8Z%)*Ry-");
      classFileWriter0.addField("", "", (short)372, 0);
      assertEquals("*8Z%)*Ry-", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "org/mozilla/classfile/ClassFileWriter.class");
      classFileWriter0.addField("", "", (short)18, 0.0);
      assertEquals((short)256, ClassFileWriter.ACC_NATIVE);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "java/lang/String");
      classFileWriter0.addField("", "UQ>uq3iW", (short) (-790));
      assertEquals("", classFileWriter0.getClassName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ConstantPool", "TrWUr!2=8P?0bfMS*", "TrWUr!2=8P?0bfMS*");
      classFileWriter0.startMethod("TrWUr!2=8P?0bfMS*", "org.mozilla.classfile.ConstantPool", (short)15);
      classFileWriter0.addFLoad(3365);
      assertEquals((short)1, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addExceptionHandler((-1065), 0, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad endLabel
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("SourceFile", "org.mozilla.classfile.SuperBlock", "SourceFile");
      // Undeclared exception!
      try { 
        classFileWriter0.addExceptionHandler(0, (-1), 140, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad startLabel
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("lm", "lm", "lm");
      classFileWriter0.addExceptionHandler((-1065), (-11), (-11), "lm");
      assertEquals((short)32, ClassFileWriter.ACC_SUPER);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ExceptionTableEntry", "v95LqJ4J}a]lk7sZv", "org.mozilla.classfile.ExceptionTableEntry");
      // Undeclared exception!
      try { 
        classFileWriter0.addDStore(1941);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -2
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("\"PG6Rtjl", "\"PG6Rtjl", "\"PG6Rtjl");
      // Undeclared exception!
      try { 
        classFileWriter0.addDLoad(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("*8Z%)*Ry-", "*8Z%)*Ry-", "*8Z%)*Ry-");
      // Undeclared exception!
      try { 
        classFileWriter0.add(0, "", "'GEa-%jj37*A#R9B", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("SR28'Gz", "Uuu2+^q2y_K~N@`+Pzn", "SR28'Gz");
      // Undeclared exception!
      try { 
        classFileWriter0.add(1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad opcode for class reference
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Bad endLabel", "Bad endLabel", "Bad endLabel");
      // Undeclared exception!
      try { 
        classFileWriter0.add(76, "Attempt to modify sealed array");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.add((int) (short)128, (-2781), (int) (short)128);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(" \u2209 [0, ", " \u2209 [0, ", " \u2209 [0, ");
      // Undeclared exception!
      try { 
        classFileWriter0.add(4, 2901, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected opcode for 2 operands
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("%gN;FaP 9f>dlR[(;5", "1'g.2qm\"!1", "1'g.2qm\"!1");
      // Undeclared exception!
      try { 
        classFileWriter0.add(11, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected opcode for 1 operand
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ConstantPool", "TrWUr!2=8P?0bfMS*", "TrWUr!2=8P?0bfMS*");
      classFileWriter0.startMethod("TrWUr!2=8P?0bfMS*", "org.mozilla.classfile.ConstantPool", (short)15);
      classFileWriter0.addALoad(998);
      assertEquals((short)1, classFileWriter0.getStackTop());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("ConstantValue", "ConstantValue", "ConstantValue");
      // Undeclared exception!
      try { 
        classFileWriter0.addALoad((-1563));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of range variable
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("G$d", "", (String) null);
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(843.33);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Attempt to modify sealed array", "Attempt to modify sealed array", "iPD!NmNy<L");
      // Undeclared exception!
      try { 
        classFileWriter0.addLoadConstant((-772));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("bad method type", "java/lang/Throwable", "java/lang/Throwable");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(919);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("bad opcode for field reference", "bad instance", "bad instance");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(17L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("lm", "lm", "lm");
      // Undeclared exception!
      try { 
        classFileWriter0.addFStore((short) (-2890));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack underflow: -1
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("ClassFileWriter.class", "", "");
      // Undeclared exception!
      try { 
        classFileWriter0.addPush(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No method to add to
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("94G", "94G", "f.jnQBuLGP{2yU58e");
      // Undeclared exception!
      try { 
        classFileWriter0.add(158);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected operands
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(" \u2209 [0, ", " \u2209 [0, ", " \u2209 [0, ");
      int int0 = classFileWriter0.acquireLabel();
      assertEquals(Integer.MIN_VALUE, int0);
  }
}
