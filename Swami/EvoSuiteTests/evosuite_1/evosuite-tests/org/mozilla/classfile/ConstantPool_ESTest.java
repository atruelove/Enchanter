/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 08:15:14 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ClassFileWriter;
import org.mozilla.classfile.ConstantPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ConstantPool_ESTest extends ConstantPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("V7o({ CbfIiOpIs%]iQg", "V7o({ CbfIiOpIs%]iQg", "V7o({ CbfIiOpIs%]iQg");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte) (-12), "V7o({ CbfIiOpIs%]iQg", "+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)/+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25\" (-54)/+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)/+L/Hb0v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25) (454)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)/+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (5) (-54) (-22)", "+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)/+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25\" (-54)/+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)/+L/Hb0v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25) (454)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)/+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (5) (-54) (-22)");
      String string0 = classFileWriter_MHandle0.toString();
      boolean boolean0 = constantPool0.isUnderUtfEncodingLimit(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Too big string", "xSP^oGVSb`q\"QTO;S#", "A/-AZg6\"");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.getWriteSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("V7o({ CbfIiOpIs%]iQg", "V7o({ CbfIiOpIs%]iQg", "V7o({ CbfIiOpIs%]iQg");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.getUtfEncodingLimit("+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)/+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25\" (-54)/+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)/+L/Hb0v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25) (454)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)/+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o/+L/Hb05v8GS;y/LW`oAK`od?OS>GL (5) (-54) (-22)", (short)128, (short)4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("U7_v-:j^'3Mq2h$", " \u2209[0m, ", " \u2209[0m, ");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        constantPool0.getUtfEncodingLimit(" \u2209[0m, ", 0, 65535);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("}ubn!V{>b!", "}ubn!V{>b!", "value ");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      byte byte0 = constantPool0.getConstantType((short)1);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("W}.SKzjZtK?fj", "W}.SKzjZtK?fj", "W}.SKzjZtK?fj");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Object object0 = constantPool0.getConstantData(118);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)", "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)", "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)0, "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)", "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)", "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)");
      constantPool0.addMethodHandle(classFileWriter_MHandle0);
      ClassFileWriter.MHandle classFileWriter_MHandle1 = new ClassFileWriter.MHandle((byte)24, "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25).+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25) (0)", "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25).+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25) (0)", "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25).+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25) (0)");
      int int0 = constantPool0.addConstant(classFileWriter_MHandle1);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("H5U!h1", "H5U!h1", "H5U!h1");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      short short0 = constantPool0.addInvokeDynamic("H5U!h1", "H5U!h1", (byte) (-59));
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileWriter$ClassFileFormatException", "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException", "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)9, "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException", "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException", "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException");
      short short0 = constantPool0.addMethodHandle(classFileWriter_MHandle0);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(".n=H-)", ".n=H-)", ".n=H-)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        constantPool0.addConstant(classFileWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mozilla.classfile.ClassFileWriter@e
         //
         verifyException("org.mozilla.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("U7_v-:j^'3Mq2h$", " \u2209[0m, ", " \u2209[0m, ");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.addConstant(" \u2209[0m, ");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileWriter$ClassFileFormatException", "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException", "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Boolean boolean0 = Boolean.TRUE;
      int int0 = constantPool0.addConstant(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("H5U!h1", "H5U!h1", "H5U!h1");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Character character0 = new Character('4');
      int int0 = constantPool0.addConstant(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("V7o({ CbfIiOpIs%]iQg", "V7o({ CbfIiOpIs%]iQg", "V7o({ CbfIiOpIs%]iQg");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.addConstant((short)32);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Too big string", "Too big string", "Too big string");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Float float0 = new Float((double) (short)256);
      int int0 = constantPool0.addConstant(float0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((ClassFileWriter) null);
      Double double0 = new Double(46.55606326205362);
      int int0 = constantPool0.addConstant(double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)", "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)", "+L/Hb05v8GS;y/LW`o.+L/Hb05v8GS;y/LW`oAK`od?OS>GL (25)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Long long0 = Long.valueOf((long) (short)4);
      int int0 = constantPool0.addConstant(long0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      byte[] byteArray0 = new byte[6];
      int int0 = constantPool0.write(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, int0);
  }
}
