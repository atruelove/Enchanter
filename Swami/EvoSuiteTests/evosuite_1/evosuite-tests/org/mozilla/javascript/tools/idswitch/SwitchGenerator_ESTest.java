/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 22:37:33 GMT 2018
 */

package org.mozilla.javascript.tools.idswitch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.ToolErrorReporter;
import org.mozilla.javascript.tools.idswitch.CodePrinter;
import org.mozilla.javascript.tools.idswitch.IdValuePair;
import org.mozilla.javascript.tools.idswitch.SwitchGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SwitchGenerator_ESTest extends SwitchGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      switchGenerator0.setSourceFileName("");
      assertEquals("", switchGenerator0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      switchGenerator0.setReporter((ToolErrorReporter) null);
      assertNull(switchGenerator0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      CodePrinter codePrinter0 = new CodePrinter();
      switchGenerator0.setCodePrinter(codePrinter0);
      IdValuePair[] idValuePairArray0 = new IdValuePair[7];
      IdValuePair idValuePair0 = new IdValuePair("org.mozilla.javascript.ImporterTopLevel", ".Ye='){61jkR");
      idValuePairArray0[0] = idValuePair0;
      IdValuePair idValuePair1 = new IdValuePair(".length()) {", "org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider");
      idValuePairArray0[1] = idValuePair1;
      idValuePairArray0[2] = idValuePairArray0[1];
      idValuePairArray0[3] = idValuePairArray0[0];
      idValuePairArray0[4] = idValuePairArray0[0];
      idValuePairArray0[5] = idValuePairArray0[0];
      idValuePairArray0[6] = idValuePairArray0[5];
      // Undeclared exception!
      try { 
        switchGenerator0.generateSwitch(idValuePairArray0, "Symbol.toPrimitive");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.idswitch.SwitchGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      CodePrinter codePrinter0 = new CodePrinter();
      switchGenerator0.setCodePrinter(codePrinter0);
      String[] stringArray0 = new String[11];
      stringArray0[0] = "s";
      stringArray0[2] = "s";
      stringArray0[4] = "s";
      stringArray0[6] = "s";
      stringArray0[8] = "Flot64Array";
      // Undeclared exception!
      try { 
        switchGenerator0.generateSwitch(stringArray0, "Flot64Array");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.idswitch.SwitchGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      String string0 = switchGenerator0.getSourceFileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      ToolErrorReporter toolErrorReporter0 = switchGenerator0.getReporter();
      assertNull(toolErrorReporter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      CodePrinter codePrinter0 = switchGenerator0.getCodePrinter();
      assertNull(codePrinter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      String[] stringArray0 = new String[6];
      CodePrinter codePrinter0 = new CodePrinter();
      switchGenerator0.setCodePrinter(codePrinter0);
      stringArray0[0] = "L";
      stringArray0[2] = "NKKM/aGjV@0RF99";
      stringArray0[4] = "-";
      stringArray0[5] = "L";
      // Undeclared exception!
      try { 
        switchGenerator0.generateSwitch(stringArray0, "L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.idswitch.CodePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      CodePrinter codePrinter0 = new CodePrinter();
      switchGenerator0.setCodePrinter(codePrinter0);
      IdValuePair[] idValuePairArray0 = new IdValuePair[1];
      IdValuePair idValuePair0 = new IdValuePair("R\"", "R\"");
      idValuePairArray0[0] = idValuePair0;
      switchGenerator0.generateSwitch(idValuePairArray0, "R\"");
      assertEquals(1, idValuePairArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      CodePrinter codePrinter0 = new CodePrinter();
      switchGenerator0.setCodePrinter(codePrinter0);
      String[] stringArray0 = new String[6];
      switchGenerator0.use_if_threshold = (-583);
      stringArray0[0] = "YLleR_.)B%R85";
      stringArray0[1] = "YLleR_.)B%R85";
      stringArray0[2] = "YLleR_.a!%R85";
      stringArray0[3] = "YLleR_.)B%R85";
      stringArray0[4] = ";}";
      stringArray0[5] = "YLleR_.)B%R85";
      switchGenerator0.generateSwitch(stringArray0, "YLleR_.)B%R85");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      CodePrinter codePrinter0 = new CodePrinter();
      switchGenerator0.setCodePrinter(codePrinter0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YLleR_.)B%R85";
      stringArray0[1] = "YLleR_.)B%R85";
      stringArray0[2] = "YLleR_.a!%R85";
      stringArray0[3] = "YLleR_.)B%R85";
      stringArray0[4] = ";}";
      stringArray0[5] = "YLleR_.)B%R85";
      switchGenerator0.generateSwitch(stringArray0, "YLleR_.)B%R85");
      assertNull(switchGenerator0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SwitchGenerator switchGenerator0 = new SwitchGenerator();
      CodePrinter codePrinter0 = new CodePrinter();
      switchGenerator0.setCodePrinter(codePrinter0);
      IdValuePair[] idValuePairArray0 = new IdValuePair[7];
      IdValuePair idValuePair0 = new IdValuePair("org.mozilla.javascript.Importe,TopLevel", "boolvan");
      idValuePairArray0[0] = idValuePair0;
      IdValuePair idValuePair1 = new IdValuePair("YLleR_.)B%R85", "org.mozilla.javascript.Importe,TopLevel");
      idValuePairArray0[1] = idValuePair1;
      IdValuePair idValuePair2 = new IdValuePair("Symbol.toPcmitiv", "org.mozilla.javascript.Importe,TopLevel");
      idValuePairArray0[2] = idValuePair2;
      IdValuePair idValuePair3 = new IdValuePair("boolvan", "Symbol.toPcmitiv");
      idValuePairArray0[3] = idValuePair3;
      IdValuePair idValuePair4 = new IdValuePair("id", "id");
      idValuePairArray0[4] = idValuePair4;
      IdValuePair idValuePair5 = new IdValuePair("_length", "Symbol.toPcmitiv");
      idValuePairArray0[5] = idValuePair5;
      IdValuePair idValuePair6 = new IdValuePair("]wN{hQ", "_length");
      idValuePairArray0[6] = idValuePair6;
      switchGenerator0.generateSwitch(idValuePairArray0, "Symbol.toPcmitiv");
      assertNull(switchGenerator0.getSourceFileName());
  }
}
