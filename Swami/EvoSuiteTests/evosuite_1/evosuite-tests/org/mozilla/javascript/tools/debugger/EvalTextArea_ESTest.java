/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 21:32:46 GMT 2018
 */

package org.mozilla.javascript.tools.debugger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.KeyEvent;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.AbstractDocument;
import javax.swing.text.GapContent;
import javax.swing.text.PlainDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.debugger.EvalTextArea;
import org.mozilla.javascript.tools.debugger.SwingGui;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EvalTextArea_ESTest extends EvalTextArea_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      evalTextArea0.write("toUTCString");
      assertFalse(evalTextArea0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 10, 10, 37, 10, 'w');
      PlainDocument plainDocument0 = new PlainDocument();
      evalTextArea0.setDocument(plainDocument0);
      // Undeclared exception!
      try { 
        evalTextArea0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.EvalTextArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.REMOVE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((-1219), (-1219), documentEvent_EventType0);
      evalTextArea0.removeUpdate(abstractDocument_DefaultDocumentEvent0);
      assertFalse(evalTextArea0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      PlainDocument plainDocument0 = new PlainDocument();
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent(0, 4, (DocumentEvent.EventType) null);
      evalTextArea0.removeUpdate(abstractDocument_DefaultDocumentEvent0);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 1, 1, 5, 4, '\b', 3);
      evalTextArea0.keyTyped(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 46, 46, 38, 46, 'v');
      evalTextArea0.keyTyped(keyEvent0);
      assertFalse(evalTextArea0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, (-34), 0L, (-34), 0, '/');
      evalTextArea0.keyReleased(keyEvent0);
      assertFalse(keyEvent0.isAltGraphDown());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 113, 40, 40, 40, 'd');
      evalTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 46, 46, 38, 46, 'v');
      keyEvent0.setKeyCode(38);
      evalTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 10, 10, 10, 10, 'q');
      // Undeclared exception!
      try { 
        evalTextArea0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.EvalTextArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.REMOVE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((-1219), (-1219), documentEvent_EventType0);
      evalTextArea0.insertUpdate(abstractDocument_DefaultDocumentEvent0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(evalTextArea0, (byte)44, 0, (byte)44, 36, 'I', (MenuElement[]) null, menuSelectionManager0);
      // Undeclared exception!
      try { 
        evalTextArea0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad position: -1217
         //
         verifyException("javax.swing.text.JTextComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      evalTextArea0.postUpdateUI();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(evalTextArea0, 0, 0, 0, 36, '8', (MenuElement[]) null, menuSelectionManager0);
      evalTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      evalTextArea0.postUpdateUI();
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 8, 8, 8, 8, '^');
      evalTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.INSERT;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((-1189), (-1189), documentEvent_EventType0);
      evalTextArea0.insertUpdate(abstractDocument_DefaultDocumentEvent0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(evalTextArea0, (-1189), 32, (-1291), 36, 'K', (MenuElement[]) null, menuSelectionManager0);
      // Undeclared exception!
      try { 
        evalTextArea0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad position: -1187
         //
         verifyException("javax.swing.text.JTextComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      GapContent gapContent0 = new GapContent((-1219));
      PlainDocument plainDocument0 = new PlainDocument(gapContent0);
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.CHANGE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((-1219), (-1219), documentEvent_EventType0);
      evalTextArea0.changedUpdate(abstractDocument_DefaultDocumentEvent0);
      assertTrue(evalTextArea0.getFocusTraversalKeysEnabled());
  }
}
