/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 19:54:07 GMT 2018
 */

package org.mozilla.javascript.tools.shell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.io.PrintStream;
import javax.swing.JTabbedPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.PlainDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.shell.ConsoleTextArea;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ConsoleTextArea_ESTest extends ConsoleTextArea_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.REMOVE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((-60), (-60), documentEvent_EventType0);
      consoleTextArea0.insertUpdate(abstractDocument_DefaultDocumentEvent0);
      // Undeclared exception!
      try { 
        consoleTextArea0.returnPressed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      consoleTextArea0.write("2F2FgG2^");
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.INSERT;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((byte)1, (byte)0, documentEvent_EventType0);
      consoleTextArea0.removeUpdate(abstractDocument_DefaultDocumentEvent0);
      assertFalse(consoleTextArea0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.CHANGE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0.new DefaultDocumentEvent((-468), 3123, documentEvent_EventType0);
      consoleTextArea0.removeUpdate(abstractDocument_DefaultDocumentEvent0);
      assertFalse(consoleTextArea0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTabbedPane0, (-1505), (-1505), (-1505), 40, '\\', (MenuElement[]) null, menuSelectionManager0);
      consoleTextArea0.append("org.mozilla.javascript.toolx.debugge.FileTextAre");
      consoleTextArea0.returnPressed();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(consoleTextArea0, 40, 40, (-1505), 38, '\\', (MenuElement[]) null, menuSelectionManager0);
      consoleTextArea0.keyPressed(menuKeyEvent1);
      consoleTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea((String[]) null);
      consoleTextArea0.postUpdateUI();
      assertTrue(consoleTextArea0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      KeyEvent keyEvent0 = new KeyEvent(consoleTextArea0, 553, 553, 73, 40, '~');
      consoleTextArea0.returnPressed();
      consoleTextArea0.keyTyped(keyEvent0);
      assertTrue(keyEvent0.isShiftDown());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      KeyEvent keyEvent0 = new KeyEvent(consoleTextArea0, 0, 4205L, 1, 0, 'K');
      consoleTextArea0.keyReleased(keyEvent0);
      assertFalse(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTabbedPane0, (-1510), (-1510), (-1510), 38, 'z', (MenuElement[]) null, menuSelectionManager0);
      consoleTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.REMOVE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((-60), (-60), documentEvent_EventType0);
      consoleTextArea0.insertUpdate(abstractDocument_DefaultDocumentEvent0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, 36, 36, 29, 36, '\u0089', menuElementArray0, menuSelectionManager0);
      // Undeclared exception!
      try { 
        consoleTextArea0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad position: -60
         //
         verifyException("javax.swing.text.JTextComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, 36, 36, (-60), 36, '~', menuElementArray0, menuSelectionManager0);
      consoleTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      KeyEvent keyEvent0 = new KeyEvent(consoleTextArea0, 14, 14, 14, 37, '4', 1);
      consoleTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.REMOVE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((-60), (-60), documentEvent_EventType0);
      consoleTextArea0.insertUpdate(abstractDocument_DefaultDocumentEvent0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, 36, 36, (-60), 36, '~', menuElementArray0, menuSelectionManager0);
      // Undeclared exception!
      try { 
        consoleTextArea0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad position: -60
         //
         verifyException("javax.swing.text.JTextComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[10];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      KeyEvent keyEvent0 = new KeyEvent(consoleTextArea0, (-3417), (-3417), (-3417), 10, '\u0084');
      consoleTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      InputStream inputStream0 = consoleTextArea0.getIn();
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      PrintStream printStream0 = consoleTextArea0.getErr();
      assertNotNull(printStream0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      consoleTextArea0.eval("org.mozilla.javascript.tools.shell.ConsoleTextArea");
      assertFalse(consoleTextArea0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.INSERT;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0.new DefaultDocumentEvent(37, 37, documentEvent_EventType0);
      consoleTextArea0.changedUpdate(abstractDocument_DefaultDocumentEvent0);
      assertFalse(consoleTextArea0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea((String[]) null);
      PrintStream printStream0 = consoleTextArea0.getOut();
      assertNotNull(printStream0);
  }
}
