/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 20:34:31 GMT 2018
 */

package org.mozilla.javascript.tools.shell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.commonjs.module.Require;
import org.mozilla.javascript.tools.shell.Global;
import org.mozilla.javascript.tools.shell.QuitAction;
import org.mozilla.javascript.tools.shell.ShellConsole;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Global_ESTest extends Global_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Context context0 = Context.enter();
      Global global0 = new Global();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      double double0 = Global.version(context0, global0, objectArray0, nativeJavaClass0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Global global0 = new Global();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object object0 = Global.toint32(context0, global0, context0.emptyArgs, nativeJavaClass0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      BaseFunction baseFunction0 = new BaseFunction();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) baseFunction0;
      Object object0 = Global.sync(context0, global0, objectArray0, baseFunction0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        Global.sync(context0, global0, context0.emptyArgs, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.sync.args
         //
         verifyException("org.mozilla.javascript.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) nativeJavaClass0;
      objectArray0[0] = (Object) nativeJavaClass0;
      // Undeclared exception!
      try { 
        Global.spawn((Context) null, nativeJavaClass0, objectArray0, nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) nativeJavaClass0;
      // Undeclared exception!
      try { 
        Global.spawn((Context) null, nativeJavaClass0, objectArray0, nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, true);
      // Undeclared exception!
      try { 
        Global.spawn(context0, require0, context0.emptyArgs, require0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Argument to spawn() must be a function or script.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      global0.setSealedStdLib(false);
      assertFalse(global0.isSealed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.enter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, false);
      // Undeclared exception!
      try { 
        Global.serialize(context0, global0, context0.emptyArgs, require0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected an object to serialize and a filename to write the serialization to
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) global0;
      Global.seal(context0, require0, objectArray0, require0);
      assertTrue(global0.isSealed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) nativeJavaClass0;
      // Undeclared exception!
      try { 
        Global.seal((Context) null, nativeJavaClass0, objectArray0, nativeJavaClass0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // seal function supports only sealing of ScriptableObject instances
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 6, 1);
      Delegator delegator0 = new Delegator(nativeFloat64Array0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Global.seal(context0, delegator0, objectArray0, delegator0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // seal function can only be applied to objects
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      // Undeclared exception!
      try { 
        global0.runDoctest(context0, global0, "js>Ic;>f2cFs&H>87xY", "error reporter", 1968);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // doctest failure running:
         // Ic;>f2cFs&H>87xY
         // expected: actual: js: \"doctest input\", line 1: syntax error
         // js: Ic;>f2cFs&H>87xY
         // js: ....^
         // js: \"doctest input\", line 1: Compilation produced 1 syntax errors.
         // 
         // 
         //  (error reporter#1968)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      Object[] objectArray0 = new Object[6];
      objectArray0[5] = (Object) nativeUint8Array0;
      // Undeclared exception!
      try { 
        Global.runCommand((Context) null, nativeUint8Array0, objectArray0, (Function) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(7);
      // Undeclared exception!
      try { 
        Global.runCommand(context0, nativeInt16Array0, context0.emptyArgs, (Function) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The first argument to runCommand must be a command name.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Global global0 = new Global();
      Object[] objectArray0 = new Object[8];
      BaseFunction baseFunction0 = new BaseFunction(global0, global0);
      try { 
        Global.runCommand((Context) null, global0, objectArray0, baseFunction0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Global global0 = new Global();
      Object[] objectArray0 = new Object[8];
      BaseFunction baseFunction0 = new BaseFunction(global0, global0);
      // Undeclared exception!
      try { 
        Global.readline((Context) null, global0, objectArray0, baseFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Global global0 = new Global(context0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) global0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[object global]");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "language version");
      try { 
        Global.readFile(context0, nativeInt32Array0, objectArray0, require0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, false);
      Object[] objectArray0 = new Object[7];
      try { 
        Global.readUrl(context0, (Scriptable) null, objectArray0, require0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: null
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Global global0 = new Global(context0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, false);
      Object[] objectArray0 = new Object[7];
      try { 
        Global.readFile(context0, nativeInt32Array0, objectArray0, require0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File not found: null
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Global global0 = new Global(context0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, false);
      // Undeclared exception!
      try { 
        Global.readFile(context0, nativeInt32Array0, context0.emptyArgs, require0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // readFile require at least file path to be specified
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Global global0 = new Global();
      Object[] objectArray0 = new Object[8];
      BaseFunction baseFunction0 = new BaseFunction(global0, global0);
      Global.quit((Context) null, baseFunction0, objectArray0, baseFunction0);
      assertFalse(baseFunction0.isSealed());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, false);
      Scriptable scriptable0 = global0.getPrototype();
      // Undeclared exception!
      try { 
        Global.quit(context0, scriptable0, context0.emptyArgs, require0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.bad.shell.function.scope
         //
         verifyException("org.mozilla.javascript.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("error reporter");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("error reporter");
      Global.pipe(false, bufferedInputStream0, mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Global global0 = new Global();
      InputStream inputStream0 = global0.getIn();
      MockPrintStream mockPrintStream0 = new MockPrintStream("function");
      SystemInUtil.addInputLine("D0/t r,7<");
      try { 
        Global.pipe(false, inputStream0, mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated exception in System.in
         //
         verifyException("org.evosuite.runtime.util.SystemInUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      InputStream inputStream0 = global0.getIn();
      MockPrintStream mockPrintStream0 = new MockPrintStream("function");
      SystemInUtil.addInputLine("D0/t r,7<");
      Global.pipe(true, inputStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.enter();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Global.load(context0, global0, objectArray0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read source file \"null\": null.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, false);
      Global.load(context0, (Scriptable) null, context0.emptyArgs, require0);
      assertEquals(170, Context.VERSION_1_7);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Global global0 = new Global();
      boolean boolean0 = global0.isInitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.enter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("language version");
      // Undeclared exception!
      try { 
        global0.installRequire(context0, linkedList0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 8: language version
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Av_P");
      Require require0 = global0.installRequire(context0, linkedList0, false);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Global global0 = new Global();
      QuitAction quitAction0 = mock(QuitAction.class, new ViolatedAssumptionAnswer());
      global0.initQuitAction(quitAction0);
      QuitAction quitAction1 = mock(QuitAction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        global0.initQuitAction(quitAction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method is once-call.
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Global global0 = new Global();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      global0.init(contextFactory0);
      assertFalse(global0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Global global0 = new Global();
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = global0.getConsole(charset0);
      assertNotNull(shellConsole0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) nativeJavaClass0;
      // Undeclared exception!
      try { 
        Global.loadClass((Context) null, nativeJavaClass0, objectArray0, nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      // Undeclared exception!
      try { 
        Global.defineClass(context0, (Scriptable) nativeArrayBuffer0, context0.emptyArgs, (Function) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a string argument.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Global global0 = new Global();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Global.gc(context0, global0, context0.emptyArgs, (Function) null);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Object[] objectArray0 = new Object[6];
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        Global.doctest(context0, (Scriptable) null, objectArray0, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.bad.shell.function.scope
         //
         verifyException("org.mozilla.javascript.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Object[] objectArray0 = new Object[3];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      try { 
        Global.deserialize((Context) null, nativeInt16Array0, objectArray0, (Function) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, false);
      // Undeclared exception!
      try { 
        Global.deserialize(context0, require0, context0.emptyArgs, require0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a filename to read the serialization from
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Global.defineClass((Context) null, (Scriptable) null, objectArray0, (Function) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Class \"null\" not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      Synchronizer synchronizer0 = new Synchronizer(global0, (Object) null);
      Object object0 = Global.doctest(context0, global0, context0.emptyArgs, synchronizer0);
      assertEquals(false, object0);
  }
}
