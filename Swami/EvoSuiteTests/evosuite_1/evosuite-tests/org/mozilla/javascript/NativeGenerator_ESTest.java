/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 05:39:54 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.NativeGenerator;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeGenerator_ESTest extends NativeGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeCall0, false);
      // Undeclared exception!
      try { 
        nativeGenerator0.initPrototypeId(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13
         //
         verifyException("org.mozilla.javascript.NativeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeUint8Array0, true);
      String string0 = nativeGenerator0.getClassName();
      assertEquals("Generator", string0);
      assertTrue(nativeGenerator0.isSealed());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, false);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeGenerator0, "throw", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // undefined
         //
         verifyException("org.mozilla.javascript.NativeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, false);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeGenerator0, "send", context0.emptyArgs);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // null
         //
         verifyException("org.mozilla.javascript.NativeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(138);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeFloat64Array0, true);
      Object[] objectArray0 = new Object[7];
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeGenerator0, 1);
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeGenerator0, "send", objectArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TypeError: Attempt to send value to newborn generator
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeUint8Array0, true);
      Context context0 = Context.getCurrentContext();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint8Array0, "Generator", 0, "language version", 13, nativeUint8Array0);
      // Undeclared exception!
      try { 
        nativeGenerator0.execIdCall(idFunctionObject0, context0, nativeUint8Array0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"language version\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeInt32Array0, true);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeInt32Array0, nativeGenerator0, 16, 100);
      // Undeclared exception!
      try { 
        nativeGenerator0.execIdCall(idFunctionObject0, context0, nativeInt32Array0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=16 MASTER=org.mozilla.javascript.typedarrays.NativeInt32Array@0
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }
}
