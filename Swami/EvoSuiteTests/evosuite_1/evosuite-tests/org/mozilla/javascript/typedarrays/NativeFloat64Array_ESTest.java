/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 00:09:17 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeFloat64Array_ESTest extends NativeFloat64Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(0);
      Double double0 = new Double(1.0);
      // Undeclared exception!
      try { 
        nativeFloat64Array0.set(0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeFloat64Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(0);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 4647, (-2250));
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeArrayBuffer0, nativeArrayBuffer0, 0, "ArrayBuffer", 0, nativeUint8ClampedArray0);
      // Undeclared exception!
      try { 
        nativeFloat64Array0.realThis(nativeUint8ClampedArray0, idFunctionObjectES6_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"ArrayBuffer\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      nativeFloat64Array0.setArrayElement(5, (Object) null);
      assertEquals(0, nativeFloat64Array0.getByteLength());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(65533);
      Double double0 = new Double((-1.0));
      Double double1 = nativeFloat64Array0.set(33, double0);
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeFloat64Array0, 13);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(2757);
      // Undeclared exception!
      try { 
        nativeFloat64Array0.get((-1960));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeFloat64Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(65533);
      Double double0 = nativeFloat64Array0.get(8);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(65533);
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeTypedArrayView nativeTypedArrayView0 = nativeFloat64Array0.construct(nativeArrayBuffer0, (-978), (-978));
      assertEquals((-978), nativeTypedArrayView0.getByteOffset());
      assertEquals((-978), nativeTypedArrayView0.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 925, 12);
      NativeFloat64Array.init(context0, nativeUint8ClampedArray0, false);
      assertTrue(context0.isGeneratingSource());
  }
}
