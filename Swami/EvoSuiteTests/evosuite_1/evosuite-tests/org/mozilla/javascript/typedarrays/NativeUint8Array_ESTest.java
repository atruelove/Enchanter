/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 00:23:32 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeUint8Array_ESTest extends NativeUint8Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      // Undeclared exception!
      try { 
        nativeUint8Array0.set(36, (Integer) nativeUint8Array0.EMPTY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint8Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(0);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      Class<NativeUint8Array> class0 = NativeUint8Array.class;
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeArrayBuffer0, class0, 8, "Uint8Array", 4, nativeArrayBuffer0);
      // Undeclared exception!
      try { 
        nativeUint8Array0.realThis(nativeArrayBuffer0, idFunctionObjectES6_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"Uint8Array\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(5);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      // Undeclared exception!
      try { 
        nativeUint8Array0.exportAsJSClass(5, nativeArrayBuffer0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(0);
      Object object0 = nativeUint8Array0.js_set(0, (Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(0);
      Object object0 = nativeUint8Array0.js_get(2);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(0);
      Class<NativeUint8Array> class0 = NativeUint8Array.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeUint8Array0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2894);
      // Undeclared exception!
      try { 
        nativeUint8Array0.get((-13));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint8Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2894);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      nativeUint8Array0.forEach(consumer0);
      assertEquals("Uint8Array", nativeUint8Array0.getClassName());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(0);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeTypedArrayView nativeTypedArrayView0 = nativeUint8Array0.construct(nativeArrayBuffer0, 2, 1);
      assertEquals(2, nativeTypedArrayView0.getByteOffset());
      assertEquals(1, nativeTypedArrayView0.getByteLength());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint8Array0, nativeUint8Array0, 0, 7);
      NativeTypedArrayView nativeTypedArrayView0 = nativeUint8Array0.realThis(nativeUint8Array0, idFunctionObject0);
      assertEquals(1, ScriptableObject.READONLY);
  }
}
