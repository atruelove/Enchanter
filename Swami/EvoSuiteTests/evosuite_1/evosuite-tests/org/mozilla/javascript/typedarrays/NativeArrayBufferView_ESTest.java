/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 00:22:06 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeArrayBufferView;
import org.mozilla.javascript.typedarrays.NativeDataView;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArrayBufferView_ESTest extends NativeArrayBufferView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = NativeArrayBufferView.isArg(objectArray0, 13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      Object object0 = nativeFloat32Array0.getInstanceIdValue(2);
      assertEquals(0, nativeFloat32Array0.getByteLength());
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      nativeFloat32Array0.getInstanceIdValue(1);
      assertEquals(0, nativeFloat32Array0.getByteOffset());
      assertEquals(0, nativeFloat32Array0.getByteLength());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      // Undeclared exception!
      try { 
        nativeInt16Array0.defineOwnProperties((Context) null, nativeInt8Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(0);
      int int0 = nativeInt32Array0.getByteOffset();
      assertEquals(0, int0);
      assertEquals(0, nativeInt32Array0.getByteLength());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeDataView nativeDataView0 = new NativeDataView();
      int int0 = nativeDataView0.getByteLength();
      assertEquals(0, int0);
      assertEquals(0, nativeDataView0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2677);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(4);
      NativeTypedArrayView nativeTypedArrayView0 = nativeUint8Array0.construct(nativeArrayBuffer0, 0, 8);
      NativeArrayBuffer nativeArrayBuffer1 = nativeTypedArrayView0.getBuffer();
      assertEquals(0, nativeTypedArrayView0.getByteOffset());
      assertEquals(2677, nativeUint8Array0.getByteLength());
      assertNotNull(nativeArrayBuffer1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Context context0 = Context.getCurrentContext();
      NativeDataView nativeDataView0 = new NativeDataView();
      // Undeclared exception!
      try { 
        nativeInt16Array0.defineOwnProperties(context0, nativeDataView0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type number
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 1, 13);
      // Undeclared exception!
      try { 
        nativeUint32Array0.getInstanceIdValue(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      Context context0 = Context.enter();
      NativeUint16Array.init(context0, nativeFloat32Array0, true);
      assertEquals(0, nativeFloat32Array0.getByteOffset());
      assertEquals(0, nativeFloat32Array0.getByteLength());
  }
}
