/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 00:03:05 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeInt8Array_ESTest extends NativeInt8Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 50, (-1502));
      Byte byte0 = new Byte((byte)61);
      // Undeclared exception!
      try { 
        nativeInt8Array0.set((-2801), byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeInt8Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 0, (-599));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeInt8Array0, nativeInt8Array0, (-1), 0);
      NativeTypedArrayView nativeTypedArrayView0 = nativeInt8Array0.realThis(nativeInt8Array0, idFunctionObject0);
      assertTrue(nativeTypedArrayView0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      BaseFunction baseFunction0 = new BaseFunction(nativeUint8ClampedArray0, nativeUint8ClampedArray0);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, baseFunction0, 1, "", 8, nativeInt8Array0);
      // Undeclared exception!
      try { 
        nativeInt8Array0.realThis(nativeUint8ClampedArray0, idFunctionObjectES6_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(2063);
      Object object0 = nativeInt8Array0.js_set(0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 30, 5);
      Byte byte0 = new Byte((byte)80);
      // Undeclared exception!
      try { 
        nativeInt8Array0.set(0, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.mozilla.javascript.typedarrays.ByteIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      Byte byte0 = new Byte((byte) (-109));
      Object object0 = nativeInt8Array0.js_set(13, byte0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        NativeInt8Array.init(context0, nativeInt8Array0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array((NativeArrayBuffer) null, (-1646), (-1646));
      // Undeclared exception!
      try { 
        nativeInt8Array0.get((-1646));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeInt8Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(655);
      Byte byte0 = nativeInt8Array0.get(5);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeTypedArrayView nativeTypedArrayView0 = nativeInt8Array0.construct(nativeArrayBuffer0, (-65), (-598));
      nativeInt8Array0.get(5, (Scriptable) nativeTypedArrayView0);
      assertEquals((-65), nativeTypedArrayView0.getByteOffset());
      assertEquals((-598), nativeTypedArrayView0.getByteLength());
      assertEquals((-598), nativeTypedArrayView0.getArrayLength());
  }
}
