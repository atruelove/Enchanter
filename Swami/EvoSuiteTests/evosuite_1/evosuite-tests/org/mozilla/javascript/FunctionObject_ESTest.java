/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 07:35:37 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ArrowFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.FieldAndMethods;
import org.mozilla.javascript.FunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.JavaAdapter;
import org.mozilla.javascript.JavaMembers;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeError;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeJavaMethod;
import org.mozilla.javascript.NativeJavaPackage;
import org.mozilla.javascript.Script;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "compare");
      assertNotNull(method0);
      
      TopLevel topLevel0 = new TopLevel();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(topLevel0, "compare", 4, "t=", 8, topLevel0);
      FunctionObject functionObject0 = new FunctionObject("q8jU&2(k(DDFYwIy", method0, idFunctionObjectES6_0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "compare");
      assertNotNull(method0);
      
      TopLevel topLevel0 = new TopLevel();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(topLevel0, "compare", 4, "compare", 8, topLevel0);
      FunctionObject functionObject0 = new FunctionObject("q8jU&2(k(DDFYwIy", method0, idFunctionObjectES6_0);
      functionObject0.getMethodOrConstructor();
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "compare");
      assertNotNull(method0);
      
      TopLevel topLevel0 = new TopLevel();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(topLevel0, "compare", 4, "compare", 8, topLevel0);
      FunctionObject functionObject0 = new FunctionObject("q8jU&2(k(DDFYwIy", method0, idFunctionObjectES6_0);
      functionObject0.getFunctionName();
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "compare");
      assertNotNull(method0);
      
      TopLevel topLevel0 = new TopLevel();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(topLevel0, "compare", 4, "t=", 8, topLevel0);
      FunctionObject functionObject0 = new FunctionObject("q8jU&2(k(DDFYwIy", method0, idFunctionObjectES6_0);
      int int0 = functionObject0.getLength();
      assertEquals(2, int0);
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "compareTo");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Method \"compareTo\" occurs multiple times in class \"java.lang.String\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(170);
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeInt16Array0, (Object) "9", 170);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(200);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeUint8ClampedArray0, (Object) nativeJavaClass0, 6);
      assertSame(object0, nativeJavaClass0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(nativeArrayBuffer0, 4, 1);
      Class<ArrowFunction> class0 = ArrowFunction.class;
      NativeArrayBuffer nativeArrayBuffer1 = (NativeArrayBuffer)FunctionObject.convertArg((Context) null, (Scriptable) nativeUint16Array0, (Object) nativeArrayBuffer0, (Class<?>) class0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(170);
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeInt16Array0, class0);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaMethod0, (Object) 130, 2);
      assertEquals(130, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(170);
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeInt16Array0, class0);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaMethod0, (Object) 9, 1);
      assertEquals("9", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<NativeJavaPackage> class0 = NativeJavaPackage.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      FunctionObject functionObject0 = new FunctionObject("size", method0, nativeArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeArray0, nativeArray0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"size\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "compare");
      assertNotNull(method0);
      
      TopLevel topLevel0 = new TopLevel();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(topLevel0, "compare", 4, "t=", 832, topLevel0);
      FunctionObject functionObject0 = new FunctionObject("q8jU&2(k(DDFYwIy", method0, idFunctionObjectES6_0);
      functionObject0.addAsConstructor(idFunctionObjectES6_0, topLevel0);
      assertEquals("q8jU&2(k(DDFYwIy", functionObject0.getFunctionName());
      assertEquals(2, functionObject0.getArity());
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<NativeError> class0 = NativeError.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "execIdCall");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("execIdCall", method0, (Scriptable) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"org.mozilla.javascript.Context\" in method \"execIdCall\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.JavaAdapter$2", e);
      }
  }
}
