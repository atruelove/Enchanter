/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 17:12:18 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.KeywordLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class KeywordLiteral_ESTest extends KeywordLiteral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral((-1632), 161, 161);
      String string0 = keywordLiteral0.toSource(4);
      assertEquals("        debugger;\n", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      KeywordLiteral keywordLiteral1 = keywordLiteral0.setType(44);
      String string0 = keywordLiteral1.toSource();
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(3303, 3303, 42);
      String string0 = keywordLiteral0.toSource(21);
      assertEquals(42, keywordLiteral0.getType());
      assertEquals("                                          null", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      keywordLiteral0.setType(43);
      keywordLiteral0.toSource();
      assertEquals("43", keywordLiteral0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      // Undeclared exception!
      try { 
        keywordLiteral0.toSource();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid keyword literal type: -1
         //
         verifyException("org.mozilla.javascript.ast.KeywordLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      // Undeclared exception!
      try { 
        keywordLiteral0.setType(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid node type: 2
         //
         verifyException("org.mozilla.javascript.ast.KeywordLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral('l', 45, 45);
      String string0 = keywordLiteral0.toSource((int) 'l');
      assertEquals("45", keywordLiteral0.toString());
      assertEquals("                                                                                                                                                                                                                        true", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral((-756), (-756));
      StringBuilder stringBuilder0 = new StringBuilder("KjqQ]sA>pD!b#3");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      keywordLiteral0.visit(astNode_DebugPrintVisitor0);
      assertEquals(5, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral((-1995));
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      boolean boolean0 = keywordLiteral0.isBooleanLiteral();
      assertFalse(boolean0);
  }
}
