/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 16:54:29 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.ForLoop;
import org.mozilla.javascript.ast.Name;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ContinueStatement_ESTest extends ContinueStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Name name0 = new Name(20);
      ContinueStatement continueStatement0 = new ContinueStatement(name0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      continueStatement0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tCONTINUE -1 1\n20\t  NAME 21 1 null\n", astNode_DebugPrintVisitor0.toString());
      assertEquals("-1\tCONTINUE -1 1\n20\t  NAME 21 1 null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement(60);
      StringBuilder stringBuilder0 = new StringBuilder("d;:k");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      continueStatement0.visit(astNode_DebugPrintVisitor0);
      assertEquals("d;:k60\tCONTINUE 60 -1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(60, continueStatement0.getPosition());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement(2142, (-2046), name0);
      String string0 = continueStatement0.toSource(16);
      assertEquals((-2143), name0.getPosition());
      assertEquals("                                continue <null>;\n", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement((Name) null);
      ForLoop forLoop0 = new ForLoop();
      continueStatement0.setTarget(forLoop0);
      assertEquals(122, continueStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Name name0 = new Name(20);
      ContinueStatement continueStatement0 = new ContinueStatement(name0);
      continueStatement0.getTarget();
      assertEquals("122", continueStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Name name0 = new Name(20);
      ContinueStatement continueStatement0 = new ContinueStatement(name0);
      continueStatement0.getLabel();
      assertEquals("122", continueStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement(355, (Name) null);
      assertEquals(355, continueStatement0.getAbsolutePosition());
      assertEquals((-1), continueStatement0.getLength());
      assertEquals("122", continueStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement();
      assertEquals(122, continueStatement0.getType());
  }
}
