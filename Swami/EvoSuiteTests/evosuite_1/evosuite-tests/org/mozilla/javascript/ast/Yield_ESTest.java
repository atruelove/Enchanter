/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 17:47:58 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.InfixExpression;
import org.mozilla.javascript.ast.Yield;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Yield_ESTest extends Yield_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Yield yield0 = new Yield();
      InfixExpression infixExpression0 = new InfixExpression();
      yield0.setValue(infixExpression0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        yield0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.InfixExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Yield yield0 = new Yield();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      yield0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tYIELD -1 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(73, yield0.getType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Yield yield0 = new Yield();
      String string0 = yield0.toSource();
      assertEquals("yield", string0);
      assertEquals("73", yield0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Yield yield0 = new Yield(0, 0);
      yield0.getValue();
      assertEquals("73", yield0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Yield yield0 = new Yield(4014);
      assertEquals(73, yield0.getType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Yield yield0 = new Yield();
      Yield yield1 = new Yield((-9), 1, yield0);
      String string0 = yield1.toSource();
      assertEquals(1, yield0.depth());
      assertEquals("yield yield", string0);
  }
}
