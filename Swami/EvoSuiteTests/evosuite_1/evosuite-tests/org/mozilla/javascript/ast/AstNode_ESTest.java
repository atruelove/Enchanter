/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 17:06:02 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.ArrayLiteral;
import org.mozilla.javascript.ast.Assignment;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.Block;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.ElementGet;
import org.mozilla.javascript.ast.EmptyExpression;
import org.mozilla.javascript.ast.ExpressionStatement;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.KeywordLiteral;
import org.mozilla.javascript.ast.Label;
import org.mozilla.javascript.ast.LabeledStatement;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NewExpression;
import org.mozilla.javascript.ast.ObjectProperty;
import org.mozilla.javascript.ast.RegExpLiteral;
import org.mozilla.javascript.ast.StringLiteral;
import org.mozilla.javascript.ast.SwitchCase;
import org.mozilla.javascript.ast.ThrowStatement;
import org.mozilla.javascript.ast.UnaryExpression;
import org.mozilla.javascript.ast.WhileLoop;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AstNode_ESTest extends AstNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(2);
      UnaryExpression unaryExpression0 = new UnaryExpression(7, 2, regExpLiteral0, false);
      FunctionNode functionNode0 = new FunctionNode((-1111));
      AstNode.PositionComparator astNode_PositionComparator0 = new AstNode.PositionComparator();
      int int0 = astNode_PositionComparator0.compare((AstNode) unaryExpression0, (AstNode) functionNode0);
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals((-1111), functionNode0.getPosition());
      assertEquals(1113, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral(434, 434);
      Assignment assignment0 = new Assignment(73, 0, stringLiteral0, stringLiteral0);
      // Undeclared exception!
      try { 
        assignment0.toSource(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Label label0 = new Label((-895));
      String string0 = label0.shortName();
      assertEquals("Label", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement((-1486), (-1486), name0);
      ElementGet elementGet0 = new ElementGet(15, 11);
      elementGet0.setTarget(name0);
      assertEquals((-16), name0.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Name name0 = new Name();
      StringBuilder stringBuilder0 = new StringBuilder(3);
      LinkedList<SwitchCase> linkedList0 = new LinkedList<SwitchCase>();
      SwitchCase switchCase0 = new SwitchCase(14);
      linkedList0.add(switchCase0);
      linkedList0.add(switchCase0);
      name0.printList((List<SwitchCase>) linkedList0, stringBuilder0);
      assertEquals("default:\n, default:\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AstNode.operatorToString((-943));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operator: -943
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = AstNode.operatorToString(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(21);
      String string0 = regExpLiteral0.toSource(20);
      assertEquals(21, regExpLiteral0.getAbsolutePosition());
      assertEquals("                                        /null/", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty(248, 248);
      boolean boolean0 = objectProperty0.hasSideEffects();
      assertEquals(248, objectProperty0.getLength());
      assertFalse(boolean0);
      assertEquals(248, objectProperty0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      boolean boolean0 = keywordLiteral0.hasSideEffects();
      assertTrue(boolean0);
      assertEquals((-1), keywordLiteral0.getAbsolutePosition());
      assertEquals(1, keywordLiteral0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LabeledStatement labeledStatement0 = new LabeledStatement();
      labeledStatement0.setLineno(11);
      ExpressionStatement expressionStatement0 = new ExpressionStatement(24, 1, labeledStatement0);
      assertEquals(11, labeledStatement0.getLineno());
      assertEquals((-25), labeledStatement0.getPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement((-1486), (-1486), name0);
      name0.isLocalName();
      assertEquals(1, name0.depth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet();
      ThrowStatement throwStatement0 = new ThrowStatement(elementGet0);
      elementGet0.getEnclosingFunction();
      assertEquals(1, elementGet0.depth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet();
      elementGet0.getAstRoot();
      assertEquals(1, elementGet0.getLength());
      assertEquals((-1), elementGet0.getPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement((-1486), (-1486), name0);
      StringBuilder stringBuilder0 = new StringBuilder(3);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      continueStatement0.visit(astNode_DebugPrintVisitor0);
      assertEquals(1, name0.depth());
      assertEquals("-1486\tCONTINUE -1486 -1486\n-1\t  NAME 1485 1 null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Name name0 = new Name(2067);
      String string0 = name0.debugPrint();
      assertEquals("2067\tNAME 2067 1 null\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression();
      EmptyExpression emptyExpression0 = new EmptyExpression();
      int int0 = newExpression0.compareTo((AstNode) emptyExpression0);
      assertEquals((-1), int0);
      assertEquals((-1), emptyExpression0.getAbsolutePosition());
      assertEquals(1, emptyExpression0.getLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WhileLoop whileLoop0 = new WhileLoop(22, 2);
      // Undeclared exception!
      try { 
        whileLoop0.getDefault();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(8, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // arg cannot be null
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(0, (-62));
      Block block0 = new Block(1);
      arrayLiteral0.addChild(block0);
      assertEquals(1, block0.depth());
      assertEquals(2, arrayLiteral0.getLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(21);
      ExpressionStatement expressionStatement0 = new ExpressionStatement(regExpLiteral0);
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals(21, expressionStatement0.getAbsolutePosition());
  }
}
