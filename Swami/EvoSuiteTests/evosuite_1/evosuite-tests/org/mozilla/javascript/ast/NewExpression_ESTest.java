/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 17:21:47 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.NewExpression;
import org.mozilla.javascript.ast.ObjectLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NewExpression_ESTest extends NewExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(3342, 3342);
      ObjectLiteral objectLiteral0 = new ObjectLiteral(8);
      newExpression0.target = (AstNode) objectLiteral0;
      newExpression0.setInitializer(objectLiteral0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      newExpression0.visit(astNode_DebugPrintVisitor0);
      assertEquals("3342\tNEW 3342 3342\n8\t  OBJECTLIT -3334 1\n8\t  OBJECTLIT -3334 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals("30", newExpression0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(3342, 3342);
      ObjectLiteral objectLiteral0 = new ObjectLiteral(8);
      newExpression0.target = (AstNode) objectLiteral0;
      newExpression0.addArgument(objectLiteral0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      newExpression0.visit(astNode_DebugPrintVisitor0);
      assertEquals("3342\tNEW 3342 3342\n8\t  OBJECTLIT -3334 1\n8\t  OBJECTLIT -3334 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(30, newExpression0.getType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(3342, 3342);
      ObjectLiteral objectLiteral0 = new ObjectLiteral(8);
      newExpression0.target = (AstNode) objectLiteral0;
      newExpression0.setInitializer(objectLiteral0);
      assertEquals((-3334), objectLiteral0.getPosition());
      
      String string0 = newExpression0.toSource(8);
      assertEquals("                new {}() {}", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(3342, 3342);
      ObjectLiteral objectLiteral0 = new ObjectLiteral(8);
      newExpression0.target = (AstNode) objectLiteral0;
      newExpression0.addArgument(objectLiteral0);
      String string0 = newExpression0.toSource(8);
      assertEquals(30, newExpression0.getType());
      assertEquals("                new {}({})", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression();
      assertEquals("30", newExpression0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(1);
      newExpression0.getInitializer();
      assertEquals(30, newExpression0.getType());
  }
}
