/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 17:54:30 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ObjectLiteral;
import org.mozilla.javascript.ast.VariableInitializer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class VariableInitializer_ESTest extends VariableInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      variableInitializer0.setInitializer(objectLiteral0);
      variableInitializer0.setTarget(objectLiteral0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      variableInitializer0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tVAR -1 1\n-1\t  OBJECTLIT 0 1\n-1\t  OBJECTLIT 0 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals("-1\tVAR -1 1\n-1\t  OBJECTLIT 0 1\n-1\t  OBJECTLIT 0 1\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      // Undeclared exception!
      try { 
        variableInitializer0.toSource(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.VariableInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      variableInitializer0.setTarget(objectLiteral0);
      String string0 = variableInitializer0.toSource(14);
      assertEquals("                            {}", string0);
      assertEquals("123", variableInitializer0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      // Undeclared exception!
      try { 
        variableInitializer0.setTarget((AstNode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid target arg
         //
         verifyException("org.mozilla.javascript.ast.VariableInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      variableInitializer0.setNodeType(123);
      assertEquals("123", variableInitializer0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      // Undeclared exception!
      try { 
        variableInitializer0.setNodeType(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid node type
         //
         verifyException("org.mozilla.javascript.ast.VariableInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      variableInitializer0.setInitializer(objectLiteral0);
      assertEquals(1, objectLiteral0.depth());
      
      variableInitializer0.setTarget(objectLiteral0);
      String string0 = variableInitializer0.toSource(14);
      assertEquals("                            {} = {}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      boolean boolean0 = variableInitializer0.isDestructuring();
      assertTrue(boolean0);
      assertEquals(123, variableInitializer0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      variableInitializer0.getTarget();
      assertEquals(123, variableInitializer0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer((-1), 146);
      assertEquals("123", variableInitializer0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer(38);
      assertEquals("123", variableInitializer0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer();
      variableInitializer0.getInitializer();
      assertEquals("123", variableInitializer0.toString());
  }
}
