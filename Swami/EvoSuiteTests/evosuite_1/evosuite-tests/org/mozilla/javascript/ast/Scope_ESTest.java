/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 16:54:10 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.ArrayComprehensionLoop;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.DoLoop;
import org.mozilla.javascript.ast.EmptyStatement;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.LetNode;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.Scope;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.Symbol;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scope scope0 = new Scope(1691);
      EmptyStatement emptyStatement0 = new EmptyStatement(22, (-1));
      scope0.addChildrenToBack(emptyStatement0);
      StringBuilder stringBuilder0 = new StringBuilder("                                                                                              {\n                                                                                                ;\n                                                                                              }\n");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      scope0.visit(astNode_DebugPrintVisitor0);
      assertEquals("                                                                                              {\n                                                                                                ;\n                                                                                              }\n1691\tBLOCK 1691 1\n22\tEMPTY 22 -1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(1691, scope0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scope scope0 = new Scope(1691);
      EmptyStatement emptyStatement0 = new EmptyStatement(22, (-1));
      scope0.addChildrenToBack(emptyStatement0);
      String string0 = scope0.toSource(47);
      assertEquals("                                                                                              {\n                                                                                                ;\n                                                                                              }\n", string0);
      assertEquals("130", scope0.toString());
      assertEquals(1691, scope0.getPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      scriptNode0.addChild(scriptNode0);
      // Undeclared exception!
      scriptNode0.toSource(12);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode(130);
      scriptNode0.setParentScope(scriptNode0);
      Scope.splitScope(scriptNode0);
      assertEquals(1, scriptNode0.depth());
      assertEquals(267, scriptNode0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(2254);
      Name name0 = new Name(4);
      FunctionNode functionNode0 = new FunctionNode(1, name0);
      astRoot0.setTop(functionNode0);
      assertEquals(3, name0.getPosition());
      assertEquals(2254, astRoot0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Scope scope0 = new Scope();
      scope0.setSymbolTable((Map<String, Symbol>) null);
      assertEquals("130", scope0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Symbol symbol0 = new Symbol();
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(4);
      // Undeclared exception!
      try { 
        arrayComprehensionLoop0.putSymbol(symbol0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null symbol name
         //
         verifyException("org.mozilla.javascript.ast.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot((-1763));
      Symbol symbol0 = new Symbol();
      symbol0.setName("org.mozilla.javascript.ast.Scope");
      astRoot0.putSymbol(symbol0);
      FunctionNode functionNode0 = new FunctionNode();
      astRoot0.replaceWith(functionNode0);
      assertEquals((-1763), astRoot0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot((-1766));
      Symbol symbol0 = new Symbol();
      symbol0.setName("org.mozilla.javascript.ast.Scope");
      astRoot0.putSymbol(symbol0);
      // Undeclared exception!
      try { 
        Scope.joinScopes(astRoot0, astRoot0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      ScriptNode scriptNode1 = scriptNode0.getTop();
      assertEquals((-1), scriptNode1.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop(0, 0);
      doLoop0.getSymbol((String) null);
      assertEquals(0, doLoop0.getPosition());
      assertEquals(0, doLoop0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      scriptNode0.addChild(scriptNode0);
      List<AstNode> list0 = scriptNode0.getStatements();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode(2);
      functionNode0.getDefiningScope("m1o;e=");
      assertEquals(2, functionNode0.getPosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Scope scope0 = new Scope();
      scope0.getChildScopes();
      assertEquals(130, scope0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LetNode letNode0 = new LetNode(55, 32);
      letNode0.clearParentScope();
      assertEquals(55, letNode0.getPosition());
      assertEquals(32, letNode0.getLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(4);
      arrayComprehensionLoop0.addChildScope(scriptNode0);
      arrayComprehensionLoop0.replaceWith(scriptNode0);
      assertEquals(4, arrayComprehensionLoop0.getPosition());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot((-1763));
      Symbol symbol0 = new Symbol();
      symbol0.setName("org.mozilla.javascript.ast.Scope");
      astRoot0.putSymbol(symbol0);
      Scope scope0 = astRoot0.getDefiningScope("org.mozilla.javascript.ast.Scope");
      assertNotNull(scope0);
      assertEquals((-1763), scope0.getAbsolutePosition());
  }
}
