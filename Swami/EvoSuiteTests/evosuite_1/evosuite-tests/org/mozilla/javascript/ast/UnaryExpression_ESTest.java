/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 17:06:56 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.EmptyStatement;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.UnaryExpression;
import org.mozilla.javascript.ast.VariableDeclaration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UnaryExpression_ESTest extends UnaryExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(3070, 32);
      UnaryExpression unaryExpression0 = new UnaryExpression(32, 3070, variableDeclaration0, false);
      String string0 = unaryExpression0.debugPrint();
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals("3070\tTYPEOF 3070 32\n3070\t  VAR 0 32\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyStatement emptyStatement0 = new EmptyStatement();
      UnaryExpression unaryExpression0 = new UnaryExpression(24, 24, emptyStatement0, true);
      String string0 = unaryExpression0.toSource(4);
      assertEquals(0, emptyStatement0.getPosition());
      assertEquals("        ;\n/", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(3070, 32);
      UnaryExpression unaryExpression0 = new UnaryExpression(32, 3070, variableDeclaration0, false);
      String string0 = unaryExpression0.toSource(32);
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals("                                                                typeof var ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      // Undeclared exception!
      try { 
        unaryExpression0.setOperator(1820);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid token: 1820
         //
         verifyException("org.mozilla.javascript.ast.UnaryExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      unaryExpression0.setIsPostfix(true);
      assertFalse(unaryExpression0.isPrefix());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      boolean boolean0 = unaryExpression0.isPrefix();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(3070, 32);
      UnaryExpression unaryExpression0 = new UnaryExpression(32, 3070, variableDeclaration0, false);
      unaryExpression0.isPostfix();
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals("32", unaryExpression0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(3070, 32);
      UnaryExpression unaryExpression0 = new UnaryExpression(32, 3070, variableDeclaration0, false);
      int int0 = unaryExpression0.getOperator();
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Name name0 = new Name(21);
      UnaryExpression unaryExpression0 = new UnaryExpression(21, 25, name0);
      assertEquals((-4), name0.getPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression(52, 52);
      assertEquals(10, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression(0);
      assertEquals(7, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      AstNode astNode0 = unaryExpression0.getOperand();
      assertNull(astNode0);
  }
}
