/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 16:52:36 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.Block;
import org.mozilla.javascript.ast.FunctionCall;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.KeywordLiteral;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.XmlExpression;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionNode_ESTest extends FunctionNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      ScriptNode scriptNode0 = new ScriptNode(27);
      functionNode0.setBody(scriptNode0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      functionNode0.setMemberExprNode(scriptNode0);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      functionNode0.visit(astNode_DebugPrintVisitor0);
      assertEquals(29, functionNode0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Name name0 = new Name(8);
      FunctionNode functionNode0 = new FunctionNode(8, name0);
      functionNode0.addParam(name0);
      // Undeclared exception!
      try { 
        functionNode0.debugPrint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.FunctionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      Name name0 = new Name(2, 0);
      functionNode0.setIsExpressionClosure(true);
      functionNode0.setBody(name0);
      functionNode0.toSource(1);
      assertEquals(2, functionNode0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      Name name0 = new Name(2, 0);
      functionNode0.addParam(name0);
      functionNode0.setFunctionType(4);
      // Undeclared exception!
      try { 
        functionNode0.toSource(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.FunctionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Name name0 = new Name();
      FunctionNode functionNode0 = new FunctionNode(20, name0);
      // Undeclared exception!
      try { 
        functionNode0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.FunctionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Name name0 = new Name(8);
      FunctionNode functionNode0 = new FunctionNode(8, name0);
      assertEquals((-1), functionNode0.getRp());
      
      functionNode0.setRp(1);
      assertEquals(1, functionNode0.getRp());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.setRequiresActivation();
      assertTrue(functionNode0.requiresActivation());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.setParens((-2807), 2380);
      assertEquals(2380, functionNode0.getRp());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      LinkedList<AstNode> linkedList0 = new LinkedList<AstNode>();
      linkedList0.push(functionNode0);
      functionNode0.setParams(linkedList0);
      // Undeclared exception!
      try { 
        functionNode0.toSource(8);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      XmlExpression xmlExpression0 = new XmlExpression(8, 1);
      functionNode0.addParam(xmlExpression0);
      List<AstNode> list0 = FunctionCall.NO_ARGS;
      functionNode0.setParams(list0);
      // Undeclared exception!
      try { 
        functionNode0.toSource(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.FunctionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.setParams((List<AstNode>) null);
      assertEquals((-1), functionNode0.getRp());
      assertEquals((-1), functionNode0.getLp());
      assertEquals("110", functionNode0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.setLp(3);
      assertEquals(3, functionNode0.getLp());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.setIsGenerator();
      assertTrue(functionNode0.isGenerator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.setFunctionIsSetterMethod();
      Name name0 = new Name(2, 0);
      functionNode0.setBody(name0);
      functionNode0.toSource(1);
      assertTrue(functionNode0.isMethod());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.setFunctionIsNormalMethod();
      assertEquals((-1), functionNode0.getRp());
      assertEquals("110", functionNode0.toString());
      assertEquals((-1), functionNode0.getLp());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Name name0 = new Name();
      FunctionNode functionNode0 = new FunctionNode(20, name0);
      functionNode0.setFunctionIsGetterMethod();
      assertEquals((-1), functionNode0.getLp());
      assertEquals(110, functionNode0.getType());
      assertEquals((-1), functionNode0.getRp());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.requiresActivation();
      assertEquals((-1), functionNode0.getRp());
      assertEquals("110", functionNode0.toString());
      assertEquals((-1), functionNode0.getLp());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      boolean boolean0 = functionNode0.isSetterMethod();
      assertEquals((-1), functionNode0.getRp());
      assertEquals((-1), functionNode0.getLp());
      assertFalse(boolean0);
      assertEquals("110", functionNode0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      boolean boolean0 = functionNode0.isParam(functionNode0);
      assertEquals((-1), functionNode0.getRp());
      assertFalse(boolean0);
      assertEquals("110", functionNode0.toString());
      assertEquals((-1), functionNode0.getLp());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      boolean boolean0 = functionNode0.isNormalMethod();
      assertFalse(boolean0);
      assertEquals(110, functionNode0.getType());
      assertEquals((-1), functionNode0.getRp());
      assertEquals((-1), functionNode0.getLp());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Name name0 = new Name();
      FunctionNode functionNode0 = new FunctionNode(20, name0);
      boolean boolean0 = functionNode0.isGetterMethod();
      assertEquals((-1), functionNode0.getLp());
      assertFalse(boolean0);
      assertEquals((-1), functionNode0.getRp());
      assertEquals(110, functionNode0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.isGenerator();
      assertEquals((-1), functionNode0.getLp());
      assertEquals((-1), functionNode0.getRp());
      assertEquals("110", functionNode0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.isExpressionClosure();
      assertEquals((-1), functionNode0.getLp());
      assertEquals((-1), functionNode0.getRp());
      assertEquals("110", functionNode0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode(0, (Name) null);
      int int0 = functionNode0.getRp();
      assertEquals((-1), functionNode0.getLp());
      assertEquals((-1), int0);
      assertEquals(110, functionNode0.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Name name0 = new Name(8);
      FunctionNode functionNode0 = new FunctionNode(8, name0);
      functionNode0.getResumptionPoints();
      assertEquals(1, name0.depth());
      assertEquals((-1), functionNode0.getRp());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.getName();
      assertEquals((-1), functionNode0.getLp());
      assertEquals("110", functionNode0.toString());
      assertEquals((-1), functionNode0.getRp());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode(0);
      functionNode0.getMemberExprNode();
      assertEquals((-1), functionNode0.getRp());
      assertEquals((-1), functionNode0.getLp());
      assertEquals("110", functionNode0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      int int0 = functionNode0.getLp();
      assertEquals((-1), int0);
      assertEquals((-1), functionNode0.getRp());
      assertEquals(110, functionNode0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.getLiveLocals();
      assertEquals((-1), functionNode0.getLp());
      assertEquals("110", functionNode0.toString());
      assertEquals((-1), functionNode0.getRp());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode(0);
      int int0 = functionNode0.getFunctionType();
      assertEquals((-1), functionNode0.getRp());
      assertEquals(0, int0);
      assertEquals((-1), functionNode0.getLp());
      assertEquals("110", functionNode0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Name name0 = new Name();
      FunctionNode functionNode0 = new FunctionNode(0, name0);
      functionNode0.getFunctionName();
      assertEquals(1, name0.depth());
      assertEquals((-1), functionNode0.getRp());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(22);
      functionNode0.addResumptionPoint(keywordLiteral0);
      assertEquals((-1), functionNode0.getLp());
      assertEquals((-1), functionNode0.getRp());
      assertEquals("110", functionNode0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      Block block0 = new Block();
      int[] intArray0 = new int[6];
      functionNode0.addLiveLocals(block0, intArray0);
      assertEquals((-1), functionNode0.getLp());
      assertEquals((-1), functionNode0.getRp());
      assertEquals("110", functionNode0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      int int0 = functionNode0.addFunction(functionNode0);
      assertTrue(functionNode0.requiresActivation());
      assertEquals(0, int0);
  }
}
