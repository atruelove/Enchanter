/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 19:13:09 GMT 2018
 */

package org.mozilla.javascript.v8dtoa;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.v8dtoa.FastDtoa;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FastDtoa_ESTest extends FastDtoa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(2058005162, 2058005162);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen((-32), 29);
      assertEquals(4294967295L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = FastDtoa.numberToString(1000000.0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(1000, 32);
      assertEquals(4294967296003L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = FastDtoa.numberToString(5.957269548427817);
      assertNotNull(string0);
      assertEquals("5.957269548427817", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = FastDtoa.numberToString((double) 32);
      assertNotNull(string0);
      assertEquals("32", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = FastDtoa.numberToString((double) (-7403949918844649648L));
      assertEquals("-7403949918844649000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = FastDtoa.numberToString(4975.6775539722785);
      assertNotNull(string0);
      assertEquals("4975.6775539722785", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(48, 32);
      assertEquals(42949672961L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(2058005162, 32);
      assertEquals(4294967296000000009L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(100000008, 31);
      assertEquals(429496729600000008L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(1, 1);
      assertEquals(4294967296L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDtoa fastDtoa0 = new FastDtoa();
  }
}
