/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 04:19:11 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ImporterTopLevel_ESTest extends ImporterTopLevel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        importerTopLevel0.initPrototypeId(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("org.mozilla.javascript.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Object[] objectArray0 = importerTopLevel0.getAllIds();
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals(59, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      BaseFunction baseFunction0 = new BaseFunction(nativeObject0, nativeUint32Array0);
      ImporterTopLevel.init(context0, baseFunction0, true);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, "StopIteration", (Object) context0);
      assertEquals("global", importerTopLevel0.getClassName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(importerTopLevel0, "Importer", 8, "error reporter", 14, importerTopLevel0);
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      // Undeclared exception!
      try { 
        importerTopLevel0.execIdCall(idFunctionObjectES6_0, context0, nativeArrayBuffer0, nativeArrayBuffer0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("org.mozilla.javascript.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      IdFunctionObject idFunctionObject0 = importerTopLevel0.exportAsJSClass(4, importerTopLevel0, false);
      ImporterTopLevel importerTopLevel1 = (ImporterTopLevel)importerTopLevel0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
      assertFalse(importerTopLevel1.hasPrototypeMap());
      assertEquals(0, idFunctionObject0.getArity());
      assertEquals("JavaImporter", importerTopLevel1.getClassName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, class0, 150, "error reporter", 11, importerTopLevel0);
      // Undeclared exception!
      try { 
        importerTopLevel0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=150 MASTER=org.mozilla.javascript.ImporterTopLevel@3
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      Delegator delegator0 = new Delegator();
      importerTopLevel0.importPackage(context0, scriptableObject0, context0.emptyArgs, delegator0);
      assertEquals("global", importerTopLevel0.getClassName());
  }
}
