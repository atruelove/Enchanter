/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 06:03:30 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.DefaultErrorReporter;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.Parser;
import org.mozilla.javascript.TokenStream;
import org.mozilla.javascript.ast.AstRoot;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TokenStream_ESTest extends TokenStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("w");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 1);
      String string0 = tokenStream0.tokenToString((-2155));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("msg.java.inernal.fieldtype");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "msg.java.inernal.fieldtype", 65536);
      assertEquals(26, astRoot0.getLength());
      assertEquals(65536, astRoot0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = new Parser();
      AstRoot astRoot0 = parser0.parse("org.mozilla.javascript.TokenStream", ";v-5^UB(CR[RQVsN+", 65536);
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(34, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      AstRoot astRoot0 = parser0.parse("msg.missing.exponent", (String) null, 160);
      assertEquals(20, astRoot0.getLength());
      assertEquals(160, astRoot0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("searcjh");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "searcjh", 162);
      assertEquals(162, astRoot0.getEndLineno());
      assertEquals(7, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("valueOf");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "valueOf", (-1524));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      Parser parser0 = new Parser(compilerEnvirons0, defaultErrorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "RETURN", 30);
      int int0 = tokenStream0.getToken();
      assertEquals(5, tokenStream0.getCursor());
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("Symbol.species");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "org.mozilla.javascript.TokenStream", 162);
      assertEquals(14, astRoot0.getLength());
      assertEquals(162, astRoot0.getLineno());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("5u}@Kp", 0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("import", 43, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("msg.java.internal.field.type");
      stringReader0.skip(11L);
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "msg.java.internal.field.type", 91);
      assertEquals(91, astRoot0.getEndLineno());
      assertEquals(17, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("msg.caught.nfe");
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "org.mozilla.javascript.TokenStream", 162);
      assertEquals(162, astRoot0.getBaseLineno());
      assertEquals(14, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("let", 0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("8[AH;x=)2/", 1952, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("searcjh", 373, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("sJnear", 373, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("star?h", 373, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("true", 373, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("Lc", 643, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "null", 65536);
      // Undeclared exception!
      try { 
        tokenStream0.readRegExp(65536);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      Parser parser0 = new Parser(compilerEnvirons0, defaultErrorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "RETURN", 30);
      tokenStream0.readAndClearRegExpFlags();
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("DW=ng-4'=\"$L&V`ScO");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 65536);
      tokenStream0.isXMLAttribute();
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("search", 373, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = TokenStream.isJSSpace(65536);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "/w7 !de", 116);
      // Undeclared exception!
      try { 
        tokenStream0.readRegExp(101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.TokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "synchronized", 1065);
      int int0 = tokenStream0.getTokenLength();
      assertEquals(0, tokenStream0.getCursor());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "null", 65536);
      int int0 = tokenStream0.getTokenEnd();
      assertEquals(0, int0);
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "y@Q~#V0", 60);
      int int0 = tokenStream0.getTokenBeg();
      assertEquals(0, tokenStream0.getCursor());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("`kg\"$g+,]vA'y1zgQ#/", " )Bo!aK49z", (-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -39
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("%", (String) null, (-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -23
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("A[z*eD!srPIQ<Oay!");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, ",s{'l L2CA", (-304));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -304
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      // Undeclared exception!
      try { 
        parser0.parse("=TqDt", "language version", 2155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (language version#2155)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      Parser parser0 = new Parser(compilerEnvirons0, defaultErrorReporter0);
      // Undeclared exception!
      try { 
        parser0.parse("&=", "", 674);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (#674)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("9,H5^9/", "xtTT!c$]", 3530);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (xtTT!c$]#3530)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      Parser parser0 = new Parser(compilerEnvirons0, defaultErrorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, ")cz'uvfF_3*Zt", 65536);
      int int0 = tokenStream0.getToken();
      assertEquals(1, tokenStream0.getTokenLength());
      assertEquals(89, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("0x");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "org.mozilla.javascript.TokenStream", 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number format error (org.mozilla.javascript.TokenStream#162)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "class", 105);
      int int0 = tokenStream0.getToken();
      assertEquals(4, tokenStream0.getCursor());
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "null", 65536);
      int int0 = tokenStream0.getToken();
      assertEquals(3, tokenStream0.getTokenLength());
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "null", 65536);
      String string0 = tokenStream0.getSourceString();
      assertEquals(0, tokenStream0.getCursor());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "/w7 !de", 116);
      char char0 = tokenStream0.getQuoteChar();
      assertEquals(0, tokenStream0.getCursor());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "/w7 !de", 116);
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.TokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("=i?iU");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 65536);
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "`kg\"$g+,]vA'y1zgQ#/", (-2144));
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("5']Rzibe>b qUqzV=}r", "", 637);
      assertEquals(1, astRoot0.getLength());
      assertTrue(parser0.eof());
      assertEquals(637, astRoot0.getLineno());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      DefaultErrorReporter defaultErrorReporter0 = DefaultErrorReporter.instance;
      Parser parser0 = new Parser(compilerEnvirons0, defaultErrorReporter0);
      // Undeclared exception!
      try { 
        parser0.parse("*/}\n", "", 637);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (#637)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/!^'v}Z<");
      TokenStream tokenStream0 = new TokenStream((Parser) null, stringReader0, (String) null, (-4));
      int int0 = tokenStream0.getCursor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Parser parser0 = new Parser();
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "TYPEOFNAME", 65536);
      tokenStream0.getCommentType();
      assertEquals(0, tokenStream0.getCursor());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader(";v-5^UB(CR[RQVsN+");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, ";v-5^UB(CR[RQVsN+", 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (;v-5^UB(CR[RQVsN+#162)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Parser parser0 = new Parser();
      // Undeclared exception!
      try { 
        parser0.parse("--", "xtTT!c$]", 3530);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (xtTT!c$]#3530)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, 65536);
      // Undeclared exception!
      try { 
        tokenStream0.getAndResetCurrentComment();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "/w7 !de", 116);
      String string0 = tokenStream0.getAndResetCurrentComment();
      assertEquals(0, tokenStream0.getCursor());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Parser parser0 = new Parser();
      StringReader stringReader0 = new StringReader("0i");
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, "org.mozilla.javascript.TokenStream", 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (org.mozilla.javascript.TokenStream#162)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      StringReader stringReader0 = new StringReader("YR~&OD>ykpPf");
      TokenStream tokenStream0 = new TokenStream(parser0, stringReader0, (String) null, (-1542));
      // Undeclared exception!
      try { 
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      Parser parser0 = new Parser(compilerEnvirons0);
      AstRoot astRoot0 = parser0.parse("*/}\n", "", 637);
      assertEquals(3, astRoot0.getLength());
      assertTrue(parser0.eof());
      assertEquals(637, astRoot0.getEndLineno());
  }
}
