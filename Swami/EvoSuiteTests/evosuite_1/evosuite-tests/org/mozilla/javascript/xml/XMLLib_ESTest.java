/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 07:06:45 GMT 2018
 */

package org.mozilla.javascript.xml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.xml.XMLLib;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class XMLLib_ESTest extends XMLLib_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      // Undeclared exception!
      try { 
        XMLLib.extractFromScope(nativeInt16Array0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // XML runtime not available
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 2, 130);
      ScriptableObject scriptableObject0 = context0.initStandardObjects((ScriptableObject) nativeUint32Array0, false);
      XMLLibImpl xMLLibImpl0 = (XMLLibImpl)XMLLib.extractFromScope(scriptableObject0);
      // Undeclared exception!
      try { 
        ((XMLLib)xMLLibImpl0).bindToScope(nativeArrayBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xml.XMLLib", e);
      }
  }
}
