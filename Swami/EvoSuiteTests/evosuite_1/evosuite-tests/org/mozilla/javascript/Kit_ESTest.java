/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 02:06:07 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Kit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Kit_ESTest extends Kit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = Kit.makeHashKeyFromPair("u+*n9p}[KbAka$@", "u+*n9p}[KbAka$@");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object1 = Kit.makeHashKeyFromPair(classLoader0, classLoader0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.putIfAbsent(object0, object1);
      Object object2 = hashMap0.put(object1, object1);
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = Kit.makeHashKeyFromPair("u+*n9p}[KbAka$@", "u+*n9p}[KbAka$@");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Kit.initHash(hashMap0, (Object) null, "");
      hashMap0.putIfAbsent(object0, object0);
      assertEquals(2, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Kit.xDigitToInt(102, (byte) (-65));
      assertEquals((-1025), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Kit.xDigitToInt('`', '`');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Kit.xDigitToInt(70, 70);
      assertEquals(1135, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = Kit.xDigitToInt(1, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = Kit.makeHashKeyFromPair("u+*n9p}[KbAka$@", "u+*n9p}[KbAka$@");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object1 = Kit.addListener(classLoader0, "u+*n9p}[KbAka$@");
      Kit kit0 = new Kit();
      Object object2 = Kit.addListener(object1, kit0);
      Object object3 = Kit.removeListener(object2, object0);
      assertNotSame(object3, object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Object object0 = Kit.addListener(classLoader0, mockFileInputStream0);
      Object object1 = Kit.removeListener(object0, mockFileInputStream0);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = Kit.makeHashKeyFromPair("u+*n9p}[KbAka$@", "u+*n9p}[KbAka$@");
      Kit kit0 = new Kit();
      Object object1 = Kit.addListener(object0, kit0);
      Object object2 = Kit.removeListener(object1, object0);
      assertSame(object2, kit0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = Kit.removeListener(hashMap0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = Kit.readStream(byteArrayInputStream0, (byte)1);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      // Undeclared exception!
      try { 
        Kit.readStream(sequenceInputStream0, (-1425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad initialBufferCapacity: -1425
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xA");
      String string0 = Kit.readReader(stringReader0);
      assertEquals("xA", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = Kit.makeHashKeyFromPair("u+*n9p}[KbAka$@", "u+*n9p}[KbAka$@");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("", object0);
      Object object1 = Kit.initHash(hashMap0, "", (Object) null);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RuntimeException runtimeException0 = Kit.initCause((RuntimeException) null, (Throwable) null);
      assertNull(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      RuntimeException runtimeException0 = Kit.initCause(mockRuntimeException0, mockRuntimeException0);
      assertSame(mockRuntimeException0, runtimeException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object0 = Kit.addListener(classLoader0, classLoader0);
      Object object1 = Kit.getListener(object0, 2);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Object object0 = new Object();
      Object object1 = Kit.addListener(class0, object0);
      // Undeclared exception!
      try { 
        Kit.getListener(object1, (-1661));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1661
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Kit.addListener(";", object0);
      Object object2 = Kit.getListener(object1, 1);
      assertFalse(object2.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Kit.getListener(object0, 1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Object object0 = new Object();
      Object object1 = Kit.addListener(class0, object0);
      Class class1 = (Class)Kit.getListener(object1, 0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Kit.getListener(object0, 0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = Kit.getListener((Object) null, 0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        Kit.codeBug("'TJi6{W");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: 'TJi6{W
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        Kit.codeBug();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<?> class0 = Kit.classOrNull("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = Kit.classOrNull(classLoader0, "org/mozilla/javascript/Undefined");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      boolean boolean0 = Kit.testIfCanLoadRhinoClasses(classLoader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Kit.addListener((Object) null, object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object0 = Kit.addListener(classLoader0, "u+*n9p}[KbAka$@");
      Kit kit0 = new Kit();
      Object object1 = Kit.addListener(object0, kit0);
      Object object2 = Kit.removeListener(classLoader0, "u+*n9p}[KbAka$@");
      assertNotNull(object2);
      
      Object object3 = Kit.removeListener(object1, object2);
      assertNotSame(object3, object1);
  }
}
