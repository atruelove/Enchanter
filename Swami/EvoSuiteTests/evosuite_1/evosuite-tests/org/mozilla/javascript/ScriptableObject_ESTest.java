/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 05:07:56 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ArrowFunction;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Callable;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.FieldAndMethods;
import org.mozilla.javascript.IdFunctionCall;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.InterpretedFunction;
import org.mozilla.javascript.InterpreterData;
import org.mozilla.javascript.LazilyLoadedCtor;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeBoolean;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeError;
import org.mozilla.javascript.NativeIterator;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeJavaObject;
import org.mozilla.javascript.NativeJavaPackage;
import org.mozilla.javascript.NativeJavaTopPackage;
import org.mozilla.javascript.NativeNumber;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.NativeString;
import org.mozilla.javascript.NativeStringIterator;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Symbol;
import org.mozilla.javascript.SymbolKey;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        importerTopLevel0.initStandardObjects(context0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ScriptableObject.Slot scriptableObject_Slot0 = new ScriptableObject.Slot(contextFactory0, 515, (-1790321860));
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(6);
      scriptableObject_Slot0.getPropertyDescriptor(context0, nativeFloat64Array0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScriptableObject.KeyComparator scriptableObject_KeyComparator0 = new ScriptableObject.KeyComparator();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      scriptableObject_KeyComparator0.compare((Object) null, nativeContinuation0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(importerTopLevel0, 1, 0);
      scriptableObject_GetterSlot0.setter = (Object) importerTopLevel0;
      Context context0 = Context.getCurrentContext();
      scriptableObject_GetterSlot0.getPropertyDescriptor(context0, importerTopLevel0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(importerTopLevel0, 1, 0);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      scriptableObject_GetterSlot0.getter = (Object) nativeJavaClass0;
      Context context0 = Context.getCurrentContext();
      scriptableObject_GetterSlot0.getPropertyDescriptor(context0, importerTopLevel0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(importerTopLevel0, 1, 0);
      Context context0 = Context.getCurrentContext();
      scriptableObject_GetterSlot0.getPropertyDescriptor(context0, importerTopLevel0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      nativeArrayBuffer0.size();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        importerTopLevel0.setGetterOrSetter("PE;9NWu (oYFs", 4, (Callable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PE;9NWu (oYFs
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(901.204);
      Delegator delegator0 = new Delegator(nativeNumber0);
      nativeNumber0.setGetterOrSetter("keySet", 0, delegator0, false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1L));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(false, "init", classLoader0);
      nativeArray0.setAttributes("init", (Scriptable) nativeJavaPackage0, 8);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeArrayBuffer0, nativeArray0, (-408), "{J.[", 0, nativeArray0);
      idFunctionObjectES6_0.setAttributes(1, (Scriptable) nativeArrayBuffer0, 8);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      NativeStringIterator nativeStringIterator0 = new NativeStringIterator(nativeJavaTopPackage0, nativeJavaTopPackage0);
      nativeStringIterator0.sameValue((Object) null, nativeStringIterator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(3263);
      ScriptableObject.redefineProperty(nativeUint8ClampedArray0, "msg.change.property.data.to.accessor.with.configurable.false", false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ScriptableObject.putProperty((Scriptable) nativeContinuation0, (Symbol) null, (Object) nativeContinuation0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      ScriptableObject.putProperty((Scriptable) interpretedFunction0, (-1934222226), (Object) contextFactory0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeNumber nativeNumber0 = new NativeNumber(1.0E64);
      ScriptableObject.putConstProperty(nativeError0, "msg.setter1.parms", nativeNumber0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      NativeObject nativeObject0 = new NativeObject();
      SymbolKey symbolKey0 = SymbolKey.UNSCOPABLES;
      nativeObject0.put((Symbol) symbolKey0, (Scriptable) nativeInt8Array0, (Object) contextFactory0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      NativeString nativeString0 = new NativeString("error reporter");
      nativeString0.put(1228, (Scriptable) nativeArray0, (Object) "global");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      nativeCall0.isGetterOrSetter("", 0, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(0);
      BaseFunction baseFunction0 = new BaseFunction(nativeInt8Array0, nativeInt8Array0);
      baseFunction0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.isConst("OLcc0");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Synchronizer synchronizer0 = new Synchronizer(importerTopLevel0);
      ScriptableObject.hasProperty((Scriptable) synchronizer0, 0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<Synchronizer> class0 = Synchronizer.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeCall0, "error reporter", class0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      ScriptableObject.getPropertyIds(nativeUint32Array0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScriptableObject.getPropertyIds((Scriptable) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      SymbolKey symbolKey0 = SymbolKey.IS_REGEXP;
      ScriptableObject.getProperty((Scriptable) nativeIterator_StopIteration0, (Symbol) symbolKey0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.toArray();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeArray0.getOwnPropertyDescriptor(context0, contextFactory0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ScriptableObject.defineConstProperty(nativeObject0, (String) null);
      nativeObject0.getIds(false, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      importerTopLevel0.getIds(true, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Synchronizer synchronizer0 = new Synchronizer(importerTopLevel0);
      synchronizer0.getIds();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(889);
      // Undeclared exception!
      try { 
        nativeInt16Array0.getGetterOrSetter("^[+~omm-.=$E_Pxi", 889, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ^[+~omm-.=$E_Pxi
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      nativeCall0.getExternalArrayData();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<NativeJavaTopPackage> class0 = NativeJavaTopPackage.class;
      NativeArray nativeArray0 = new NativeArray(130);
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class org.mozilla.javascript.NativeJavaTopPackage
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      TopLevel.NativeErrors topLevel_NativeErrors0 = TopLevel.NativeErrors.SyntaxError;
      IdFunctionObject idFunctionObject0 = (IdFunctionObject)importerTopLevel0.getNativeErrorCtor(topLevel_NativeErrors0);
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) idFunctionObject0;
      NativeError.make(context0, nativeIterator_StopIteration0, idFunctionObject0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      // Undeclared exception!
      try { 
        nativeBoolean0.getDefaultValue((Class<?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(954);
      NativeStringIterator nativeStringIterator0 = null;
      try {
        nativeStringIterator0 = new NativeStringIterator(nativeUint32Array0, nativeUint32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 13, 109);
      // Undeclared exception!
      try { 
        ScriptableObject.putProperty((Scriptable) nativeInt8Array0, 10, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.mozilla.javascript.typedarrays.ByteIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      // Undeclared exception!
      try { 
        nativeUint16Array0.getAttributes("", (Scriptable) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Property  not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.getArrayPrototype((Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(0);
      // Undeclared exception!
      try { 
        nativeUint16Array0.getAllIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Double double0 = new Double(0);
      nativeIterator_StopIteration0.replace((Object) double0, (Object) "StopIteration");
      assertTrue(nativeIterator_StopIteration0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      Object object0 = nativeInt8Array0.get((Object) contextFactory0);
      assertNull(object0);
      assertTrue(nativeInt8Array0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeArray0, 32, class0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.getAttributes(172, (Scriptable) nativeArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Property 172 not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureSymbolScriptable((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Object object does not support Symbol keys
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      SymbolKey symbolKey0 = SymbolKey.TO_PRIMITIVE;
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, (Symbol) symbolKey0);
      assertFalse(boolean0);
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      NativeStringIterator nativeStringIterator0 = new NativeStringIterator(nativeJavaTopPackage0, nativeJavaTopPackage0);
      ScriptableObject scriptableObject0 = ScriptableObject.ensureScriptableObject(nativeStringIterator0);
      assertTrue(scriptableObject0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeJavaTopPackage nativeJavaTopPackage1 = (NativeJavaTopPackage)ScriptableObject.ensureScriptable(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage1.isExtensible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(nativeObject0, 13, 0);
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable(scriptableObject_GetterSlot0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type org.mozilla.javascript.ScriptableObject$GetterSlot
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeInt8Array0, "");
      assertTrue(nativeInt8Array0.isExtensible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(0);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeUint16Array0, 0);
      assertTrue(boolean0);
      assertTrue(nativeUint16Array0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      SymbolKey symbolKey0 = SymbolKey.TO_PRIMITIVE;
      nativeError0.delete((Symbol) symbolKey0);
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(nativeArrayBuffer0, (-58), (-768));
      nativeError0.setStackDelegated(nativeInt16Array0, nativeArrayBuffer0);
      assertTrue(nativeInt16Array0.isExtensible());
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.delete(144);
      assertTrue(nativeBoolean0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      nativeArray0.setExternalArrayData(nativeUint8Array0);
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeArray0, 32, class0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Class<Object> class0 = Object.class;
      nativeBoolean0.defineProperty("|MGW3TE:jM|b8=.8", class0, 0);
      assertTrue(nativeBoolean0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "language version";
      Class<NativeObject> class0 = NativeObject.class;
      // Undeclared exception!
      try { 
        nativeObject0.defineFunctionProperties(stringArray0, class0, 33);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Method \"language version\" not found in \"org.mozilla.javascript.NativeObject\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 13, 109);
      nativeArrayBuffer0.defineConst("toISOString", nativeInt8Array0);
      assertTrue(nativeInt8Array0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeNumber nativeNumber0 = new NativeNumber(901.204);
      // Undeclared exception!
      try { 
        ScriptableObject.defineProperty((Scriptable) importerTopLevel0, "0s3}e\"%2rz$K!2scC9", (Object) nativeNumber0, 1653);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1653
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = Context.enter();
      nativeArray0.checkPropertyChange(context0, nativeArray0, nativeArray0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        NativeCall.init((Scriptable) null, true);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: java.lang.String@0000000010.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeArrayBuffer0, "R`,&Fe}9+", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000002 is not a function, it is object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeError0, class0, true, true);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Can't define constructor or class org.mozilla.javascript.NativeJavaObject since more than one constructor has multiple parameters.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Synchronizer synchronizer0 = new Synchronizer(importerTopLevel0);
      Class<Synchronizer> class0 = Synchronizer.class;
      // Undeclared exception!
      try { 
        ScriptableObject.buildClassCtor((Scriptable) synchronizer0, class0, false, false);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot load class \"org.mozilla.javascript.Synchronizer\" which has no zero-parameter constructor.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(nativeArrayBuffer0, (-58), (-768));
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Synchronizer synchronizer0 = new Synchronizer(nativeArrayBuffer0, (Object) null);
      ArrowFunction arrowFunction0 = null;
      try {
        arrowFunction0 = new ArrowFunction(context0, nativeError0, synchronizer0, nativeInt16Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      Context context0 = Context.enter();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      nativeArrayBuffer0.defineOwnProperty(context0, context0, nativeFloat64Array0);
      assertTrue(nativeFloat64Array0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        nativeCall0.addLazilyInitializedValue("getFunction", 12, (LazilyLoadedCtor) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getFunction
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      IdFunctionObjectES6 idFunctionObjectES6_0 = null;
      try {
        idFunctionObjectES6_0 = new IdFunctionObjectES6((IdFunctionCall) null, context0, 130, "", 18, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      importerTopLevel0.sealObject();
      assertTrue(importerTopLevel0.isSealed());
  }
}
