/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 01:44:03 GMT 2018
 */

package org.mozilla.javascript.commonjs.module.provider;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.commonjs.module.ModuleScript;
import org.mozilla.javascript.commonjs.module.provider.DefaultUrlConnectionExpiryCalculator;
import org.mozilla.javascript.commonjs.module.provider.StrongCachingModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlConnectionSecurityDomainProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StrongCachingModuleScriptProvider_ESTest extends StrongCachingModuleScriptProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<URI> linkedHashSet0 = new LinkedHashSet<URI>();
      ArrayDeque<URI> arrayDeque0 = new ArrayDeque<URI>(linkedHashSet0);
      DefaultUrlConnectionExpiryCalculator defaultUrlConnectionExpiryCalculator0 = new DefaultUrlConnectionExpiryCalculator(9221120237041090560L);
      UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider0 = mock(UrlConnectionSecurityDomainProvider.class, new ViolatedAssumptionAnswer());
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(arrayDeque0, linkedHashSet0, defaultUrlConnectionExpiryCalculator0, urlConnectionSecurityDomainProvider0);
      StrongCachingModuleScriptProvider strongCachingModuleScriptProvider0 = new StrongCachingModuleScriptProvider(urlModuleSourceProvider0);
      strongCachingModuleScriptProvider0.putLoadedModule("", (ModuleScript) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comparator<URI> comparator0 = (Comparator<URI>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<URI> priorityQueue0 = new PriorityQueue<URI>(comparator0);
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(priorityQueue0, priorityQueue0);
      StrongCachingModuleScriptProvider strongCachingModuleScriptProvider0 = new StrongCachingModuleScriptProvider(urlModuleSourceProvider0);
      Context context0 = Context.getCurrentContext();
      URI uRI0 = MockURI.URI("");
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(nativeArrayBuffer0, 0, 3);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeInt16Array0, (Object) null, 8, "", 12, nativeInt16Array0);
      try { 
        strongCachingModuleScriptProvider0.getModuleScript(context0, "qyh6K@l mT", uRI0, uRI0, idFunctionObject0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }
}
