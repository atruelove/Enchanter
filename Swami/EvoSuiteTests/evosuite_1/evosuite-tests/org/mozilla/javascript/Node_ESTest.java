/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 07:29:21 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.Token;
import org.mozilla.javascript.ast.ArrayComprehension;
import org.mozilla.javascript.ast.ArrayLiteral;
import org.mozilla.javascript.ast.Block;
import org.mozilla.javascript.ast.BreakStatement;
import org.mozilla.javascript.ast.Comment;
import org.mozilla.javascript.ast.EmptyExpression;
import org.mozilla.javascript.ast.ExpressionStatement;
import org.mozilla.javascript.ast.ForInLoop;
import org.mozilla.javascript.ast.ForLoop;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.GeneratorExpression;
import org.mozilla.javascript.ast.IfStatement;
import org.mozilla.javascript.ast.KeywordLiteral;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NewExpression;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.ObjectLiteral;
import org.mozilla.javascript.ast.ObjectProperty;
import org.mozilla.javascript.ast.ParenthesizedExpression;
import org.mozilla.javascript.ast.PropertyGet;
import org.mozilla.javascript.ast.RegExpLiteral;
import org.mozilla.javascript.ast.ThrowStatement;
import org.mozilla.javascript.ast.TryStatement;
import org.mozilla.javascript.ast.UnaryExpression;
import org.mozilla.javascript.ast.VariableDeclaration;
import org.mozilla.javascript.ast.XmlDotQuery;
import org.mozilla.javascript.ast.XmlExpression;
import org.mozilla.javascript.ast.XmlLiteral;
import org.mozilla.javascript.ast.XmlMemberGet;
import org.mozilla.javascript.ast.XmlPropRef;
import org.mozilla.javascript.ast.Yield;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(25);
      Node node0 = new Node(25, variableDeclaration0, variableDeclaration0);
      Node.NodeIterator node_NodeIterator0 = node0.new NodeIterator();
      assertTrue(node_NodeIterator0.hasNext());
      
      node_NodeIterator0.next();
      node_NodeIterator0.remove();
      node_NodeIterator0.remove();
      assertFalse(node_NodeIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      XmlExpression xmlExpression0 = new XmlExpression((-1034), 20);
      objectProperty0.addChild(xmlExpression0);
      Node.NodeIterator node_NodeIterator0 = objectProperty0.new NodeIterator();
      objectProperty0.removeChildren();
      node_NodeIterator0.next();
      node_NodeIterator0.remove();
      assertEquals((-1), objectProperty0.getLineno());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForLoop forLoop0 = new ForLoop(2, 0);
      Node.NodeIterator node_NodeIterator0 = forLoop0.new NodeIterator();
      // Undeclared exception!
      try { 
        node_NodeIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // next() has not been called
         //
         verifyException("org.mozilla.javascript.Node$NodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name name0 = (Name)Node.newString(0, "");
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber(15);
      numberLiteral0.addChild(name0);
      Node.NodeIterator node_NodeIterator0 = numberLiteral0.new NodeIterator();
      assertTrue(numberLiteral0.hasChildren());
      
      Name name1 = (Name)node_NodeIterator0.next();
      assertEquals("0", name1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newNumber(15);
      Node.NodeIterator node_NodeIterator0 = node0.new NodeIterator();
      // Undeclared exception!
      try { 
        node_NodeIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Node$NodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement(2063, 2063);
      Name name0 = new Name((-1086), "");
      FunctionNode functionNode0 = new FunctionNode(1, name0);
      tryStatement0.toStringTree(functionNode0);
      assertEquals((-1), functionNode0.getLineno());
      assertEquals((-1), tryStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BreakStatement breakStatement0 = new BreakStatement((-1272), (-1272));
      String string0 = breakStatement0.toString();
      assertEquals("121", string0);
      assertEquals((-1), breakStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = Node.newString(1716, "remove() already called for current element");
      node0.setString("remove() already called for current element");
      assertEquals((-1), node0.getLineno());
      assertEquals("1716", node0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(124, 124);
      ForInLoop forInLoop0 = new ForInLoop(20, 4);
      // Undeclared exception!
      try { 
        xmlPropRef0.setScope(forInLoop0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Yield yield0 = new Yield();
      yield0.setLineno((-1669));
      assertEquals((-1669), yield0.getLineno());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = Node.newString(1716, "remove() already called for current element");
      // Undeclared exception!
      try { 
        node0.resetTargets();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = Node.newNumber(15);
      Node node2 = Node.newString("");
      node0.addChildToBack(node0);
      node0.addChildAfter(node2, node0);
      assertEquals(41, node2.getType());
      
      node0.replaceChild(node0, node1);
      node0.replaceChildAfter(node1, node1);
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = Node.newNumber(15);
      node0.addChildToBack(node0);
      node0.addChildAfter(node0, node0);
      assertTrue(node0.hasChildren());
      
      node0.replaceChild(node0, node1);
      node0.replaceChildAfter(node1, node1);
      assertEquals("0", node0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Yield yield0 = new Yield();
      ForLoop forLoop0 = new ForLoop(1, 0);
      forLoop0.addChildToFront(yield0);
      forLoop0.addChildrenToFront(forLoop0);
      forLoop0.replaceChild(yield0, yield0);
      assertEquals((-1), forLoop0.getLineno());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(124, 124);
      xmlPropRef0.putProp(3, xmlPropRef0);
      xmlPropRef0.putIntProp(15, 2);
      xmlPropRef0.removeProp(3);
      assertEquals((-1), xmlPropRef0.getLineno());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(124, 124);
      xmlPropRef0.putProp(3, xmlPropRef0);
      xmlPropRef0.removeProp(3);
      assertEquals((-1), xmlPropRef0.getLineno());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newTarget();
      assertEquals(132, node0.getType());
      
      node0.labelId(27);
      node0.removeProp(1);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery();
      xmlDotQuery0.setJsDocNode((Comment) null);
      assertEquals((-1), xmlDotQuery0.getLineno());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(124, 124);
      xmlPropRef0.putProp(3, xmlPropRef0);
      int int0 = xmlPropRef0.getIntProp(7, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Block block0 = new Block(0);
      block0.toSource();
      assertEquals((-1), block0.getLineno());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(134, 134);
      Node node0 = new Node(134, regExpLiteral0, regExpLiteral0);
      assertTrue(node0.hasChildren());
      
      node0.removeChildren();
      boolean boolean0 = node0.hasSideEffects();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(124, 124);
      Node node0 = new Node(124, xmlPropRef0, xmlPropRef0, xmlPropRef0);
      boolean boolean0 = node0.hasSideEffects();
      assertEquals((-1), xmlPropRef0.getLineno());
      assertEquals("124", node0.toString());
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = Node.newString(1716, "remove() already called for current element");
      boolean boolean0 = node0.hasChildren();
      assertEquals((-1), node0.getLineno());
      assertEquals("1716", node0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      boolean boolean0 = node0.hasSideEffects();
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement(44);
      // Undeclared exception!
      try { 
        ifStatement0.getString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.ast.IfStatement cannot be cast to org.mozilla.javascript.ast.Name
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyGet propertyGet0 = new PropertyGet(4322, 4322);
      // Undeclared exception!
      try { 
        propertyGet0.getScope();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.ast.PropertyGet cannot be cast to org.mozilla.javascript.ast.Name
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      keywordLiteral0.getNext();
      assertEquals((-1), keywordLiteral0.getLineno());
      assertEquals((-1), keywordLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression(0, 345);
      newExpression0.getLastChild();
      assertEquals((-1), newExpression0.getLineno());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      node0.getJsDoc();
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = Node.newTarget();
      assertEquals("132", node0.toString());
      
      node0.labelId(27);
      int int0 = node0.labelId();
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(0, 0);
      parenthesizedExpression0.getFirstChild();
      assertEquals((-1), parenthesizedExpression0.getLineno());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral(3949, "org.mozilla.javascript.ast.NumberLiteral", 3949);
      numberLiteral0.putIntProp(3949, 3949);
      int int0 = numberLiteral0.getExistingIntProp(3949);
      assertEquals((-1), numberLiteral0.getLineno());
      assertEquals(3949.0, numberLiteral0.getNumber(), 0.01);
      assertEquals(3949, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Block block0 = new Block(159);
      // Undeclared exception!
      try { 
        block0.getDouble();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlExpression xmlExpression0 = new XmlExpression();
      XmlLiteral xmlLiteral0 = new XmlLiteral(13, 1);
      xmlExpression0.addChildrenToFront(xmlLiteral0);
      EmptyExpression emptyExpression0 = new EmptyExpression(2);
      // Undeclared exception!
      try { 
        xmlExpression0.addChildBefore(emptyExpression0, emptyExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(129, 129);
      Node node0 = new Node(121, xmlPropRef0, xmlPropRef0, xmlPropRef0);
      assertTrue(node0.hasChildren());
      
      node0.removeChild(xmlPropRef0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(12, 22, token_CommentType0, "");
      node0.setJsDocNode(comment0);
      String string0 = node0.getJsDoc();
      assertNotNull(string0);
      assertEquals("0", node0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BreakStatement breakStatement0 = new BreakStatement(1716, 1716);
      // Undeclared exception!
      try { 
        breakStatement0.hasConsistentReturnUsage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Block block0 = new Block(0);
      boolean boolean0 = block0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals((-1), block0.getLineno());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = Node.newTarget();
      Name name0 = new Name(1, 17);
      node0.next = (Node) name0;
      boolean boolean0 = node0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = Node.newTarget();
      boolean boolean0 = node0.hasConsistentReturnUsage();
      assertEquals((-1), node0.getLineno());
      assertEquals("132", node0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ThrowStatement throwStatement0 = new ThrowStatement(1707, 1707);
      boolean boolean0 = throwStatement0.hasConsistentReturnUsage();
      assertEquals((-1), throwStatement0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Yield yield0 = new Yield();
      boolean boolean0 = yield0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals((-1), yield0.getLineno());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement(1724, 1724);
      ObjectLiteral objectLiteral0 = new ObjectLiteral(14);
      expressionStatement0.addChildrenToFront(objectLiteral0);
      boolean boolean0 = expressionStatement0.hasConsistentReturnUsage();
      assertTrue(expressionStatement0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement(1724, 1724);
      boolean boolean0 = expressionStatement0.hasConsistentReturnUsage();
      assertEquals((-1), expressionStatement0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(25);
      variableDeclaration0.addChildToFront(variableDeclaration0);
      // Undeclared exception!
      variableDeclaration0.addChildrenToBack(variableDeclaration0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      node0.addChildToFront(node0);
      node0.addChildToBack(node0);
      assertEquals("0", node0.toString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlExpression xmlExpression0 = new XmlExpression(0, 0);
      XmlLiteral xmlLiteral0 = new XmlLiteral(96, 1);
      xmlExpression0.addChildrenToFront(xmlLiteral0);
      assertTrue(xmlExpression0.hasChildren());
      
      EmptyExpression emptyExpression0 = new EmptyExpression(2);
      xmlExpression0.addChildBefore(emptyExpression0, (Node) null);
      assertEquals((-1), xmlExpression0.getLineno());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Yield yield0 = new Yield();
      ForLoop forLoop0 = new ForLoop(2);
      forLoop0.addChildToFront(yield0);
      forLoop0.addChildBefore(yield0, yield0);
      assertTrue(forLoop0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Yield yield0 = new Yield();
      ForLoop forLoop0 = new ForLoop(2);
      forLoop0.addChildToFront(yield0);
      forLoop0.addChildrenToFront(forLoop0);
      // Undeclared exception!
      try { 
        yield0.addChildBefore(forLoop0, forLoop0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // newChild had siblings in addChildBefore
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NewExpression newExpression0 = new NewExpression();
      UnaryExpression unaryExpression0 = new UnaryExpression(8);
      newExpression0.addChildrenToBack(unaryExpression0);
      newExpression0.addChildrenToFront(unaryExpression0);
      ArrayComprehension arrayComprehension0 = new ArrayComprehension(10);
      Node node0 = Node.newNumber(1);
      // Undeclared exception!
      try { 
        arrayComprehension0.addChildAfter(unaryExpression0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // newChild had siblings in addChildAfter
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet();
      Node node0 = new Node(16, xmlMemberGet0, xmlMemberGet0, xmlMemberGet0, 875);
      int int0 = node0.getLineno();
      assertEquals((-1), xmlMemberGet0.getLineno());
      assertEquals(875, int0);
      assertEquals(16, node0.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(122, 122);
      Node node0 = new Node(124, xmlPropRef0, xmlPropRef0, xmlPropRef0);
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral((-651));
      Node node0 = new Node(0, arrayLiteral0, arrayLiteral0, 2);
      assertEquals((-1), arrayLiteral0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(2, node0.getLineno());
      assertEquals("0", node0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      Node node0 = new Node(134, regExpLiteral0, regExpLiteral0);
      boolean boolean0 = node0.hasSideEffects();
      assertEquals(134, node0.getType());
      assertTrue(node0.hasChildren());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), regExpLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(9, 19);
      Node node0 = new Node(0, arrayLiteral0, 21);
      boolean boolean0 = node0.hasSideEffects();
      assertTrue(node0.hasChildren());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals("0", node0.toString());
      assertFalse(boolean0);
      assertEquals(21, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Node node0 = new Node(0, 23);
      assertEquals(0, node0.getType());
      assertEquals(23, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Block block0 = new Block((-20));
      GeneratorExpression generatorExpression0 = new GeneratorExpression((-5275));
      generatorExpression0.setType(4);
      block0.addStatement(generatorExpression0);
      boolean boolean0 = block0.hasConsistentReturnUsage();
      assertTrue(block0.hasChildren());
      assertTrue(boolean0);
  }
}
