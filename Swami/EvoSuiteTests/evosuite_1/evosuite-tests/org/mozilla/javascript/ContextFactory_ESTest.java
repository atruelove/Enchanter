/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 03:35:32 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextAction;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.DefiningClassLoader;
import org.mozilla.javascript.GeneratedClassLoader;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.xml.XMLLib;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContextFactory_ESTest extends ContextFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.seal();
      assertTrue(contextFactory0.isSealed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      // Undeclared exception!
      try { 
        contextFactory0.removeListener((ContextFactory.Listener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ContextFactory.Listener contextFactory_Listener0 = mock(ContextFactory.Listener.class, new ViolatedAssumptionAnswer());
      contextFactory0.removeListener(contextFactory_Listener0);
      assertFalse(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ContextFactory.Listener contextFactory_Listener0 = mock(ContextFactory.Listener.class, new ViolatedAssumptionAnswer());
      contextFactory0.addListener(contextFactory_Listener0);
      contextFactory0.onContextReleased(context0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      Context context0 = Context.getCurrentContext();
      contextFactory0.onContextReleased(context0);
      assertTrue(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      Context context0 = contextFactory0.enter();
      contextFactory_GlobalSetter0.setContextFactoryGlobal(contextFactory0);
      contextFactory0.makeContext();
      contextFactory0.enterContext();
      Context context1 = Context.enter(context0, contextFactory0);
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(6);
      XMLLib.extractFromScopeOrNull(nativeInt16Array0);
      context1.cachedXMLLib = null;
      Context.ClassShutterSetter context_ClassShutterSetter0 = context1.getClassShutterSetter();
      assertNotNull(context_ClassShutterSetter0);
      
      context1.stringIsCompilableUnit("");
      contextFactory0.onContextCreated(context1);
      contextFactory0.exit();
      assertTrue(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      Context context0 = Context.getCurrentContext();
      contextFactory0.observeInstructionCount(context0, 18);
      assertTrue(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      contextFactory0.isSealed();
      assertTrue(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ContextFactory.initGlobal(contextFactory0);
      // Undeclared exception!
      try { 
        ContextFactory.initGlobal(contextFactory0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ContextFactory.initGlobal((ContextFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      DefiningClassLoader definingClassLoader0 = new DefiningClassLoader((ClassLoader) null);
      // Undeclared exception!
      try { 
        contextFactory0.initApplicationClassLoader(definingClassLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Loader can not resolve Rhino classes
         //
         verifyException("org.mozilla.javascript.ContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      // Undeclared exception!
      try { 
        contextFactory0.initApplicationClassLoader((ClassLoader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loader is null
         //
         verifyException("org.mozilla.javascript.ContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      DefiningClassLoader definingClassLoader0 = new DefiningClassLoader();
      contextFactory0.initApplicationClassLoader(definingClassLoader0);
      // Undeclared exception!
      try { 
        contextFactory0.initApplicationClassLoader(definingClassLoader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // applicationClassLoader can only be set once
         //
         verifyException("org.mozilla.javascript.ContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      // Undeclared exception!
      try { 
        contextFactory0.hasFeature((Context) null, 170);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 170
         //
         verifyException("org.mozilla.javascript.ContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      contextFactory0.hasFeature((Context) null, 18);
      assertTrue(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      boolean boolean0 = contextFactory0.hasFeature(context0, 16);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      Context context0 = new Context(contextFactory0);
      boolean boolean0 = contextFactory0.hasFeature(context0, 15);
      assertTrue(boolean0);
      assertTrue(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = Context.enter();
      boolean boolean0 = contextFactory0.hasFeature(context0, 10);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = contextFactory0.hasFeature(context0, 9);
      assertTrue(contextFactory0.hasExplicitGlobal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      boolean boolean0 = contextFactory0.hasFeature(context0, 8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      boolean boolean0 = contextFactory0.hasFeature(context0, 5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      boolean boolean0 = contextFactory0.hasFeature(context0, 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = ContextFactory.hasExplicitGlobal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ContextFactory.initGlobal(contextFactory0);
      // Undeclared exception!
      try { 
        ContextFactory.getGlobalSetter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ContextFactory.GlobalSetter contextFactory_GlobalSetter0 = ContextFactory.getGlobalSetter();
      ContextFactory contextFactory0 = contextFactory_GlobalSetter0.getContextFactoryGlobal();
      contextFactory0.getApplicationClassLoader();
      assertTrue(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      BaseFunction baseFunction0 = new BaseFunction();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(13);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 9, 3);
      Object object0 = contextFactory0.doTopCall(baseFunction0, context0, baseFunction0, nativeUint8Array0, context0.emptyArgs);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      GeneratedClassLoader generatedClassLoader0 = contextFactory0.createClassLoader(classLoader0);
      assertFalse(generatedClassLoader0.equals((Object)classLoader0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      // Undeclared exception!
      try { 
        contextFactory0.call((ContextAction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.disableContextListening();
      ContextFactory.Listener contextFactory_Listener0 = mock(ContextFactory.Listener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        contextFactory0.addListener(contextFactory_Listener0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ContextFactory", e);
      }
  }
}
