/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 06:08:22 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeBoolean;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeIterator;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeWith_ESTest extends NativeWith_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeWith nativeWith0 = new NativeWith(baseFunction0, baseFunction0);
      // Undeclared exception!
      try { 
        nativeWith0.updateDotQuery(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeWith", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeWith nativeWith0 = new NativeWith(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      nativeIterator_StopIteration0.put(2, (Scriptable) nativeWith0, (Object) "");
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.enter();
      IdFunctionObjectES6 idFunctionObjectES6_0 = (IdFunctionObjectES6)context0.typeErrorThrower;
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        NativeWith.newWithSpecial(context0, idFunctionObjectES6_0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      NativeWith nativeWith0 = new NativeWith(nativeInt32Array0, nativeInt32Array0);
      Object object0 = nativeWith0.get(4, (Scriptable) nativeInt32Array0);
      boolean boolean0 = NativeWith.isWithFunction(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeWith nativeWith0 = new NativeWith(nativeArrayBuffer0, nativeArrayBuffer0);
      Object object0 = nativeWith0.get(4, (Scriptable) nativeArrayBuffer0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, object0, 1, 13);
      boolean boolean0 = NativeWith.isWithFunction(idFunctionObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeWith.init(nativeArrayBuffer0, true);
      assertFalse(nativeArrayBuffer0.isSealed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(0);
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeFloat64Array0, nativeFloat64Array0, 0);
      NativeWith nativeWith0 = new NativeWith(scriptableObject0, scriptableObject0);
      boolean boolean0 = nativeWith0.hasInstance(nativeFloat64Array0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeWith nativeWith0 = new NativeWith(nativeContinuation0, nativeContinuation0);
      boolean boolean0 = nativeWith0.has("With", (Scriptable) nativeContinuation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeWith nativeWith0 = new NativeWith(nativeContinuation0, nativeContinuation0);
      boolean boolean0 = nativeWith0.has(0, (Scriptable) nativeContinuation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      NativeWith nativeWith0 = new NativeWith(nativeUint32Array0, nativeUint32Array0);
      Object[] objectArray0 = nativeWith0.getIds();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeWith nativeWith0 = new NativeWith(nativeBoolean0, nativeBoolean0);
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      // Undeclared exception!
      try { 
        nativeWith0.getDefaultValue(class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class org.mozilla.javascript.IdFunctionObject
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeWith nativeWith0 = new NativeWith(nativeContinuation0, nativeContinuation0);
      String string0 = nativeWith0.getClassName();
      assertEquals("With", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeWith nativeWith0 = new NativeWith(nativeContinuation0, nativeContinuation0);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeWith0, "");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeWith nativeWith0 = new NativeWith(nativeArrayBuffer0, nativeArrayBuffer0);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeWith0, 17);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeWith nativeWith0 = new NativeWith(nativeContinuation0, nativeContinuation0);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeContinuation0, "With", 1, "With", 2, nativeWith0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        nativeWith0.execIdCall(idFunctionObjectES6_0, context0, nativeContinuation0, idFunctionObjectES6_0, context0.emptyArgs);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Function \"With\" must be called directly, and not by way of a function of another name.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(0);
      NativeWith nativeWith0 = new NativeWith(nativeFloat64Array0, nativeFloat64Array0);
      nativeWith0.delete(":{=Vm7WYQOg0");
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeWith nativeWith0 = new NativeWith(nativeContinuation0, nativeContinuation0);
      nativeWith0.delete((-502));
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.enter();
      IdFunctionObjectES6 idFunctionObjectES6_0 = (IdFunctionObjectES6)context0.typeErrorThrower;
      // Undeclared exception!
      try { 
        NativeWith.newWithSpecial(context0, idFunctionObjectES6_0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }
}
