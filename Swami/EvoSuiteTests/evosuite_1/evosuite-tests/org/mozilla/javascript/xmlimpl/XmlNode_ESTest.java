/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 15:30:55 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class XmlNode_ESTest extends XmlNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.create("org.mozilla.javascript.xmlimpl.XmlNode$Filter", "org.mozilla.javascript.xmlimpl.XmlNode$Filter");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      // Undeclared exception!
      try { 
        XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "org.mozilla.javascript.xmlimpl.XmlNode$Filter");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.TextImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespaceDeclaration();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "%/z");
      Node node0 = xmlNode0.toDomNode();
      xmlNode_QName0.lookupPrefix(node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create((String) null);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, (String) null);
      Object object0 = new Object();
      boolean boolean0 = xmlNode_QName0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      boolean boolean0 = xmlNode_QName0.equals(xmlNode_QName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      String string0 = xmlNode_QName0.toString();
      assertEquals("XmlNode.QName [getDay,XmlNode.Namespace [{}]]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      boolean boolean0 = xmlNode_Namespace0.isUnspecifiedPrefix();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespaceDeclaration();
      assertNotNull(xmlNode_Namespace0);
      
      boolean boolean0 = xmlNode_Namespace0.isGlobal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      boolean boolean0 = xmlNode_Namespace0.isDefault();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNode.Namespace.create("}t3%q zzWg^IO/", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Namespace may not lack a URI
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      // Undeclared exception!
      try { 
        xmlNode_InternalList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("ait", "ait");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "ait");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.children();
      assertFalse(xMLList0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "error reporter", "i.0jEXKeHq(_6w]");
      XML xML0 = new XML(xMLLibImpl0, nativeUint16Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("i.0jEXKeHq(_6w]", "i.0jEXKeHq(_6w]");
      XMLList xMLList0 = xML0.child(xMLName0);
      xmlNode_InternalList0.addToList(xMLList0);
      assertEquals("xml", xMLList0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      // Undeclared exception!
      try { 
        xmlNode_InternalList0.add(xmlNode_InternalList0, (-107), 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      xmlNode_InternalList0.add(xmlNode_InternalList0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      xmlNode_InternalList0.add((XmlNode) null);
      // Undeclared exception!
      xmlNode_InternalList0.add(xmlNode_InternalList0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      xmlNode_InternalList0.add(xmlNode_InternalList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "?,5", "");
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 4086, 4);
      XML xML0 = new XML((XMLLibImpl) null, nativeUint32Array0, (XMLObject) null, xmlNode0);
      xmlNode_InternalList0.add(xML0);
      assertEquals("XML", xML0.getClassName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("ait", "ait");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "ait");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.elements(xMLName0);
      assertFalse(xMLList0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "~X%DJb#-'");
      XmlNode xmlNode2 = xmlNode1.copy();
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.PROCESSING_INSTRUCTION(xMLName0);
      XmlNode[] xmlNodeArray0 = xmlNode2.getMatchingChildren(xmlNode_Filter0);
      assertEquals(0, xmlNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "~X%DJb#-'");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XML xML0 = new XML(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null, xmlNode1);
      XMLList xMLList0 = xML0.getPropertyList(xMLName0);
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.COMMENT;
      xmlNode1.addMatchingChildren(xMLList0, xmlNode_Filter0);
      assertFalse(xMLList0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      String string0 = xmlNode0.toXmlString(xmlProcessor0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      String string0 = xmlNode0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("await", "await");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "await");
      xmlNode0.setLocalName("await");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "jsStaticFunction must be used with static method.", "");
      XmlNode xmlNode1 = XmlNode.createText(xmlProcessor0, "jsStaticFunction must be used with static method.");
      // Undeclared exception!
      try { 
        xmlNode1.replaceWith(xmlNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "i", "i");
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespace();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "readline");
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, (String) null);
      xmlNode1.renameNode(xmlNode_QName0);
      assertNotSame(xmlNode1, xmlNode0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("await", "await");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "await");
      xmlNode0.setAttribute(xmlNode_QName0, "S1Gut9?[~<(D\"=-]RX");
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      xmlNode0.removeNamespace(xmlNode_Namespace0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "~X%DJb#-'");
      xmlNode1.removeChild(0);
      assertNotSame(xmlNode0, xmlNode1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      xmlNode0.normalize();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      boolean boolean0 = xmlNode0.isSameNode(xmlNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      boolean boolean0 = xmlNode0.isParentType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "~X%DJb#-'");
      XmlNode xmlNode2 = xmlNode1.copy();
      // Undeclared exception!
      try { 
        xmlNode2.invalidateNamespacePrefix();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty string represents default namespace prefix
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode[] xmlNodeArray0 = new XmlNode[0];
      xmlNode0.insertChildrenAt(3, xmlNodeArray0);
      assertEquals(0, xmlNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "~X%DJb#-'");
      xmlNode1.insertChildAt((-92), xmlNode0);
      assertNotSame(xmlNode1, xmlNode0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "warning: ");
      // Undeclared exception!
      try { 
        xmlNode0.insertChildAt(0, xmlNode0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode[] xmlNodeArray0 = new XmlNode[8];
      xmlNodeArray0[0] = xmlNode0;
      // Undeclared exception!
      try { 
        xmlNode0.insertChildrenAt(660, xmlNodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index=660 length=0
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "~X%DJb#-'");
      boolean boolean0 = xmlNode1.hasChildElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "~X%DJb#-'");
      XmlNode.Namespace[] xmlNode_NamespaceArray0 = xmlNode1.getNamespaceDeclarations();
      assertEquals(0, xmlNode_NamespaceArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.Namespace[] xmlNode_NamespaceArray0 = xmlNode0.getNamespaceDeclarations();
      assertEquals(0, xmlNode_NamespaceArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("await", "await");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "await");
      int int0 = xmlNode0.getChildIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      int int0 = xmlNode0.getChildCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      // Undeclared exception!
      try { 
        xmlNode0.getChild(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("await", "await");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "await");
      xmlNode0.setAttribute(xmlNode_QName0, "S1Gut9?[~<(D\"=-]RX");
      XmlNode[] xmlNodeArray0 = xmlNode0.getAttributes();
      assertEquals(1, xmlNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      // Undeclared exception!
      try { 
        xmlNode0.getAttributeValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.TextImpl cannot be cast to org.w3c.dom.Attr
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "~X%DJb#-'");
      // Undeclared exception!
      try { 
        xmlNode1.ecmaValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unimplemented ecmaValue() for elements.
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      String string0 = xmlNode0.ecmaValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      String string0 = xmlNode0.ecmaToXMLString(xmlProcessor0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      xmlNode0.deleteMe();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("ait", "ait");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "ait");
      String string0 = xmlNode0.ecmaToXMLString(xmlProcessor0);
      assertEquals("<ait xmlns=\"ait\">ait</ait>", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      Node node0 = xmlProcessor0.toXml("(D)V", "");
      XmlNode xmlNode0 = XmlNode.createElementFromNode(node0);
      String string0 = xmlNode0.debug();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      Document document0 = xmlProcessor0.newDocument();
      // Undeclared exception!
      try { 
        XmlNode.createElementFromNode(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("await", "await");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "await");
      xmlNode0.declareNamespace("await", "JXhx(S1u2k$#[Zhx!~");
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespaceDeclaration();
      assertNotNull(xmlNode_Namespace0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("", "getDay");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "~X%DJb#-'");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XML xML0 = new XML(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null, xmlNode1);
      XMLList xMLList0 = xML0.getPropertyList(xMLName0);
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.TEXT;
      xmlNode1.addMatchingChildren(xMLList0, xmlNode_Filter0);
      assertFalse(xMLList0.isSealed());
  }
}
