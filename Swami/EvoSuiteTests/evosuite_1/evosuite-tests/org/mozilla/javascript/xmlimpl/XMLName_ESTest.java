/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 15:48:54 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLName_ESTest extends XMLName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty((String) null, ")~");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xMLName0.set(context0, (Object) xmlNode_QName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"*:)~\" of undefined to \"org.mozilla.javascript.xmlimpl.XmlNode$QName@0000000003\"
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("undefined", "undefined");
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "Ae");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "undefined");
      XML xML0 = new XML(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn((XML) null, xML0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("split", "XmlNode: type=");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeObject nativeObject0 = new NativeObject();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "Boolean");
      XML xML0 = new XML(xMLLibImpl0, nativeObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xMLName0.getMyValueOn(xML0);
      xMLName0.setMyValueOn(xML0, xMLList0);
      assertFalse(xMLList0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn((XML) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = xmlNode0.getXml();
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XMLName xMLName0 = XMLName.create(xmlNode_QName0, true, false);
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn(xML0, "ArrayBuffer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty((String) null, "[(RQ&a>DVfF\"`_0c");
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn((XML) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "msg.not.java.class.arg");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode_QName0.getNamespace();
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "msg.not.java.class.arg");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(2);
      xMLName0.initXMLObject(xMLList0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        xMLName0.set(context0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Assignment to empty XMLList without targets not supported
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("zb2AzSbJu2ma");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "zb2AzSbJu2ma");
      XMLName xMLName0 = XMLName.create(xmlNode_QName0, true, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        xMLName0.set(context0, (Object) xmlNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"..@\"zb2AzSbJu2ma\":zb2AzSbJu2ma\" of undefined to \"org.mozilla.javascript.xmlimpl.XmlNode@0000000007\"
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("rue", ">v0A3(Q%Tl");
      boolean boolean0 = xMLName0.matchesLocalName(">v0A3(Q%Tl");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("", "");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      boolean boolean0 = xMLName0.matchesElement(xmlNode_QName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create((String) null);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "W4MFX-tW_HT0&");
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "*");
      boolean boolean0 = xMLName0.matchesElement(xmlNode_QName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "msg.not.java.class.arg");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLName xMLName0 = XMLName.create(xmlNode_QName0, true, true);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      boolean boolean0 = xMLName0.matches(xML0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = XMLName.accept("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = XMLName.accept("W4MFX-tW_HT0&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "msg.not.java.class.arg");
      XMLName xMLName0 = XMLName.formStar();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(2);
      xMLName0.initXMLObject(xMLList0);
      Context context0 = Context.enter();
      boolean boolean0 = xMLName0.has(context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("rue", ">v0A3(Q%Tl");
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = xMLName0.has(context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "msg.not.java.class.arg");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode_QName0.getNamespace();
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "msg.not.java.class.arg");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(2);
      xMLName0.initXMLObject(xMLList0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      XMLList xMLList1 = (XMLList)xMLName0.get(context0);
      assertFalse(xMLList1.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "msg.not.java.class.arg");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode_QName0.getNamespace();
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "msg.not.java.class.arg");
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        xMLName0.get(context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"\"\":msg.not.java.class.arg\" from undefined
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "msg.not.java.class.arg");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode_QName0.getNamespace();
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "msg.not.java.class.arg");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(2);
      xMLName0.initXMLObject(xMLList0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      boolean boolean0 = xMLName0.delete(context0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty((String) null, ")~");
      Context context0 = Context.enter();
      boolean boolean0 = xMLName0.delete(context0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("", "");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      XMLName xMLName0 = XMLName.create(xmlNode_QName0);
      assertNotNull(xMLName0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("|<v#b", "@?P;t");
      assertNotNull(xMLName0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("4G&(-^oUf1Ab.,exEy", "*");
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xMLName0.get(context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"*\" from undefined
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLName.create("HCB,O\"", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      XMLName xMLName0 = XMLName.formProperty("..", "Float64Array");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("PQW", "..");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "Implementation-Version");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "8#8gwq7U&3p mtMK");
      XML xML0 = new XML(xMLLibImpl0, nativeInt8Array0, (XMLObject) null, xmlNode0);
      xMLName0.setMyValueOn(xML0, xmlNode_QName0);
      XMLList xMLList0 = xML0.getPropertyList(xMLName0);
      assertTrue(xMLList0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      XMLName xMLName0 = XMLName.formProperty("..", "Float64Array");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("PQW", "..");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "Implementation-Version");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "8#8gwq7U&3p mtMK");
      XML xML0 = new XML(xMLLibImpl0, nativeInt8Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.getPropertyList(xMLName0);
      xMLName0.addMatchingAttributes(xMLList0, xML0);
      assertFalse(xML0.isSealed());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "msg.not.java.class.arg");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLName xMLName0 = XMLName.create(xmlNode_QName0, true, true);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(2);
      // Undeclared exception!
      try { 
        xMLName0.addMatches(xMLList0, (XML) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "msg.not.java.class.arg");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode_QName0.getNamespace();
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "msg.not.java.class.arg");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(2);
      xMLName0.addDescendants(xMLList0, xML0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("split", "XmlNode: type=");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeObject nativeObject0 = new NativeObject();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "Boolean");
      XML xML0 = new XML(xMLLibImpl0, nativeObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xMLName0.getMyValueOn(xML0);
      XMLList xMLList1 = xMLName0.matchDescendantAttributes(xMLList0, xML0);
      assertFalse(xMLList1.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XMLName xMLName0 = XMLName.create(xmlNode_QName0, true, false);
      xMLName0.addMatches(xMLList0, xML0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = XMLName.accept("]$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = XMLName.accept("zb2AzSbJu2ma");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      boolean boolean0 = XMLName.accept(nativeInt8Array0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      xMLName0.setIsDescendants();
  }
}
