/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 15:55:09 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Symbol;
import org.mozilla.javascript.SymbolKey;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.Namespace;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLObjectImpl_ESTest extends XMLObjectImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(25);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      Context context0 = Context.getCurrentContext();
      XMLList xMLList1 = (XMLList)xMLList0.jsConstructor(context0, false, objectArray0);
      assertEquals("xml", xMLList1.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null);
      Context context0 = Context.getCurrentContext();
      Byte byte0 = new Byte((byte)26);
      Double double0 = new Double(120);
      // Undeclared exception!
      try { 
        xMLList0.put(context0, (Object) byte0, (Object) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = xMLList0.xmlFromNode(xmlNode0);
      assertFalse(xML0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(748);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 748);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(xMLName0);
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      // Undeclared exception!
      try { 
        xMLList0.newTextElementXML(xmlNode0, xmlNode_QName0, "ArrayBuffer");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(42);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "C6'SJ:$.MX(`5uT+");
      QName qName0 = xMLList0.newQName(xmlNode_QName0);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(748);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 748);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xML0.newQName(".YYpQXgORh[1", "error reporter", ".YYpQXgORh[1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = Context.enter();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "readAdapterObject");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.comments();
      // Undeclared exception!
      try { 
        xMLList0.memberRef(context0, (Object) null, 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Can not construct XML name from null
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, (String) null);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.comments();
      // Undeclared exception!
      try { 
        xMLList0.memberRef(context0, (Object) null, 16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint16Array0, (XMLObject) null);
      // Undeclared exception!
      try { 
        xMLList0.initPrototypeId(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLObjectImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint16Array0, (XMLObject) null);
      // Undeclared exception!
      try { 
        xMLList0.initPrototypeId(34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint16Array0, (XMLObject) null);
      // Undeclared exception!
      try { 
        xMLList0.initPrototypeId(33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint16Array0, (XMLObject) null);
      // Undeclared exception!
      try { 
        xMLList0.initPrototypeId(29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(28);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      // Undeclared exception!
      try { 
        xMLList0.initPrototypeId(28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(748);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 748);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(xMLName0);
      boolean boolean0 = xMLList0.hasInstance(xMLList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null);
      Context context0 = Context.enter();
      Byte byte0 = new Byte((byte)23);
      boolean boolean0 = xMLList0.has(context0, (Object) byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xMLLibImpl0).toString();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(25);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      XMLLibImpl xMLLibImpl1 = xMLList0.getLib();
      assertFalse(xMLLibImpl1.isIgnoreComments());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "DrT/|a'_T:*/$iO", "DrT/|a'_T:*/$iO");
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null);
      Context context0 = Context.enter();
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl1, nativeArrayBuffer0, xMLList0, xmlNode0);
      Object object0 = xML0.getFunctionProperty(context0, "ZLSZH_]mF~");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "DrT/|a'_T:*/$iO", "DrT/|a'_T:*/$iO");
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null);
      Context context0 = Context.enter();
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl1, nativeArrayBuffer0, xMLList0, xmlNode0);
      Object object0 = xML0.getFunctionProperty(context0, 34);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(748);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 748);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(xMLName0);
      Class<Object> class0 = Object.class;
      Object object0 = xMLList0.getDefaultValue(class0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(18);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      Context context0 = Context.enter();
      Double double0 = new Double(18);
      Object object0 = xMLList0.get(context0, (Object) double0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("namespaceDeclarations", "namespaceDeclarations");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(18);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("namespaceeclarations", "namespaceeclarations");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(18);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("9nnfu4>zKfZX\u0005}\"'", "9nnfu4>zKfZX\u0005}\"'");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(25);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("Z5z7Ek;/A^~+C_v", "Z5z7Ek;/A^~+C_v");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(25);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("4,X=AKe''C|m)=", "4,X=AKe''C|m)=");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(42);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("}Uo$j:u3:-ub", "}Uo$j:u3:-ub");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(42);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("ID?} >RwLBM", "ID?} >RwLBM");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(8);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("P_ckZac9e4", "P_ckZac9e4");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(18);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("P_*kZa9e4", "P_*kZa9e4");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(18);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("P_ckZa9e4", "P_ckZa9e4");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("nodeKind", "nodeKind");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(25);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("Packages", "Packages");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(25);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("V1EvG7:", "V1EvG7:");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("V1Ev7:", "V1Ev7:");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("<go`f", "<go`f");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(27);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLName xMLName0 = XMLName.formProperty("oDaY", "oDaY");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(25);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(748);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 748);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null, xmlNode0);
      xML0.exportAsJSClass(false);
      assertFalse(xML0.isSealed());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(25);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      Context context0 = Context.getCurrentContext();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(xMLList0, xmlNode_Namespace0, 0, 4);
      // Undeclared exception!
      try { 
        xMLList0.execIdCall(idFunctionObject0, context0, nativeFloat64Array0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=0 MASTER=
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint16Array0, (XMLObject) null);
      Object object0 = new Object();
      Object object1 = xMLList0.equivalentValues(object0);
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(748);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 748);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null, xmlNode0);
      NativeWith nativeWith0 = xML0.enterWith(nativeArrayBuffer0);
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      XMLName xMLName0 = XMLName.create(xmlNode_QName0, false, false);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xMLName0.getMyValueOn(xML0);
      NativeWith nativeWith0 = xMLList0.enterDotQuery((Scriptable) null);
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(748);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 748);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xML0.ecmaToXml(xmlNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xMLLibImpl0).escapeAttributeValue(any());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xML0.ecmaEscapeAttributeValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLObjectImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Double double0 = new Double(1);
      boolean boolean0 = xMLList0.delete(context0, (Object) double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XmlNode.Namespace[] xmlNode_NamespaceArray0 = new XmlNode.Namespace[0];
      Namespace[] namespaceArray0 = xML0.createNamespaces(xmlNode_NamespaceArray0);
      assertEquals(0, namespaceArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(748);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 748);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(xMLName0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("localName", "a#-8e.@De");
      // Undeclared exception!
      try { 
        xMLList0.createNamespace(xmlNode_Namespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(748);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 748);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xML0.createEmptyXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "DrT/|a'_T:*/$iO", "DrT/|a'_T:*/$iO");
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null);
      Context context0 = Context.enter();
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl1, nativeArrayBuffer0, xMLList0, xmlNode0);
      XMLList xMLList1 = (XMLList)xMLList0.addValues(context0, false, xML0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "DrT/|a'_T:*/$iO", "DrT/|a'_T:*/$iO");
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null);
      Context context0 = Context.enter();
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl1, nativeArrayBuffer0, xMLList0, xmlNode0);
      XMLList xMLList1 = (XMLList)xMLList0.addValues(context0, true, xML0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "DrT/|a'_T:*/$iO", "DrT/|a'_T:*/$iO");
      XML xML0 = xmlNode0.getXml();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null);
      Context context0 = Context.enter();
      Object object0 = xMLList0.addValues(context0, true, xML0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(8);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeFloat64Array0, (XMLObject) null);
      Context context0 = Context.getCurrentContext();
      SymbolKey symbolKey0 = SymbolKey.MATCH;
      Object object0 = ScriptableObject.getProperty((Scriptable) xMLList0, (Symbol) symbolKey0);
      Byte byte0 = new Byte((byte) (-54));
      // Undeclared exception!
      try { 
        xMLList0.memberRef(context0, object0, (Object) byte0, 150);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }
}
