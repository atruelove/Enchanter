/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 16:14:13 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.Namespace;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class QName_ESTest extends QName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)-~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      Context context0 = Context.enter();
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLLibImpl xMLLibImpl2 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.newQName(xMLLibImpl2, "", "language version", "");
      QName qName2 = qName0.constructQName(xMLLibImpl1, context0, (Object) null, qName1);
      assertEquals("language version", qName2.localName());
      assertEquals("F9S}u)-~\"tL[[_BF", qName0.localName());
      assertNotSame(qName2, qName1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "aR|SR", "aR|SR");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = xML0.newQName(xmlNode_QName0);
      XmlNode.QName xmlNode_QName1 = qName0.toNodeQname();
      assertSame(xmlNode_QName1, xmlNode_QName0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "aR|SR", "aR|SR");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = xML0.newQName(xmlNode_QName0);
      String string0 = qName0.prefix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(14);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, (String) null);
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.newQName(xMLLibImpl1, "F9S}u)-~\"tL[[_BF", "F9S}u)-~\"tL[[_BF", (String) null);
      assertEquals("F9S}u)-~\"tL[[_BF", qName1.localName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(0);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      Context context0 = Context.enter();
      IdFunctionObject idFunctionObject0 = qName0.exportAsJSClass(4, (Scriptable) null, true);
      Object[] objectArray0 = new Object[2];
      QName qName1 = (QName)qName0.execIdCall(idFunctionObject0, context0, nativeInt16Array0, qName0, objectArray0);
      assertEquals("null", qName1.localName());
      assertEquals("QName", qName1.getClassName());
      assertEquals(2, idFunctionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "Generator", "Generator");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = xML0.newQName(xmlNode_QName0);
      qName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(0);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)-~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.getInstanceIdValue((-1337));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1337
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "8!<+wnw2bYQ74=/ct");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      QName qName1 = qName0.newQName(xMLLibImpl1, "8!<+wnw2bYQ74=/ct", "8!<+wnw2bYQ74=/ct", "language version");
      IdFunctionObject idFunctionObject0 = qName1.exportAsJSClass(110, qName0, true);
      // Undeclared exception!
      try { 
        idFunctionObject0.defineOwnProperties(context0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(0);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      Object object0 = qName0.getInstanceIdValue(1);
      assertNotNull(object0);
      assertEquals("F9S}u)~\"tL[[_BF", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = xML0.newQName(xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.getInstanceIdName(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(0);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)-~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      XmlNode.QName xmlNode_QName1 = qName0.getDelegate();
      assertSame(xmlNode_QName0, xmlNode_QName1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)-~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      Context context0 = Context.getCurrentContext();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(qName0, "*::F9S}u)-~\"tL[[_BF", 5, "language version", 1, qName0);
      // Undeclared exception!
      try { 
        qName0.execIdCall(idFunctionObjectES6_0, context0, idFunctionObjectES6_0, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=5 MASTER=*::F9S}u)-~\"tL[[_BF
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)-~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      Object object0 = qName0.equivalentValues(qName0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(0);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)-~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      Context context0 = Context.enter();
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Namespace namespace0 = Namespace.create(nativeInt16Array0, (Namespace) null, (XmlNode.Namespace) null);
      Namespace namespace1 = namespace0.newNamespace(", ", ", ");
      QName qName1 = qName0.constructQName(xMLLibImpl1, context0, namespace1, qName0);
      assertEquals("*::F9S}u)-~\"tL[[_BF", qName1.localName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = xML0.newQName(xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.constructQName(xMLLibImpl1, (Context) null, qName0);
      assertSame(qName1, qName0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)-~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.getCurrentContext();
      Short short0 = new Short((short)7);
      // Undeclared exception!
      try { 
        qName0.constructQName(xMLLibImpl1, context0, short0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(0);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)-~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.getCurrentContext();
      QName qName1 = qName0.castToQName(xMLLibImpl1, context0, "*");
      assertFalse(qName1.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(0);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "F9S}u)-~\"tL[[_BF");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      Context context0 = Context.enter();
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.castToQName(xMLLibImpl1, context0, qName0);
      assertFalse(qName1.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "8!<+wnw2bYQ74=/ct");
      QName qName0 = QName.create(xMLLibImpl0, nativeInt16Array0, (QName) null, xmlNode_QName0);
      assertNotNull(qName0);
      
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.newQName(xMLLibImpl1, "8!<+wnw2bYQ74=/ct", "8!<+wnw2bYQ74=/ct", "language version");
      boolean boolean0 = qName0.hasInstance(qName1);
      assertEquals("8!<+wnw2bYQ74=/ct", qName1.localName());
      assertTrue(boolean0);
      assertFalse(qName1.equals((Object)qName0));
  }
}
