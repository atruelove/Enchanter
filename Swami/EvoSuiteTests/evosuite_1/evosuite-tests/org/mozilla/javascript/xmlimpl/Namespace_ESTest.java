/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 31 15:20:01 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionCall;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.xmlimpl.Namespace;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Namespace_ESTest extends Namespace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Namespace.toSourceImpl("^[G", "^[G", stringBuilder0);
      assertEquals("new Namespace('^[G', '^[G')", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        Namespace.toSourceImpl("T(", "", stringBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // T(
         //
         verifyException("org.mozilla.javascript.xmlimpl.Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("YDRTG3I(L4w\"||&'_o");
      Namespace namespace0 = Namespace.create(nativeInt16Array0, (Namespace) null, xmlNode_Namespace0);
      String string0 = namespace0.toLocaleString();
      assertEquals("YDRTG3I(L4w\"||&'_o", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      // Undeclared exception!
      try { 
        namespace0.initPrototypeId(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.xmlimpl.Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(nativeArrayBuffer0, 0, (-231));
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("ArrayBuffer");
      Namespace namespace0 = Namespace.create(nativeUint16Array0, (Namespace) null, xmlNode_Namespace0);
      namespace0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      // Undeclared exception!
      try { 
        namespace0.getInstanceIdValue(13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 13
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespaceDeclaration("");
      Namespace namespace0 = Namespace.create(nativeFloat32Array0, (Namespace) null, xmlNode_Namespace0);
      Object object0 = namespace0.getInstanceIdValue(2);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespaceDeclaration("");
      Namespace namespace0 = Namespace.create(nativeFloat32Array0, (Namespace) null, xmlNode_Namespace0);
      Object object0 = namespace0.getInstanceIdValue(1);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("~#Y6eux,ejl8", "~#Y6eux,ejl8");
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      // Undeclared exception!
      try { 
        namespace0.getInstanceIdName(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      XmlNode.Namespace xmlNode_Namespace1 = namespace0.getDelegate();
      assertSame(xmlNode_Namespace1, xmlNode_Namespace0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("get", "get");
      Namespace namespace0 = Namespace.create(nativeArray0, (Namespace) null, xmlNode_Namespace0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      IdFunctionObject idFunctionObject0 = namespace0.exportAsJSClass(160, namespace0, false);
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) namespace0;
      Namespace namespace1 = (Namespace)namespace0.execIdCall(idFunctionObject0, context0, namespace0, namespace0, objectArray1);
      assertTrue(namespace1.equals((Object)namespace0));
      assertEquals("Namespace", namespace1.getClassName());
      assertEquals("null", namespace1.prefix());
      assertEquals(2, idFunctionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("~#Y6eux,ejl8", "~#Y6eux,ejl8");
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      Object[] objectArray0 = namespace0.getAllIds();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      Namespace namespace0 = Namespace.create(nativeUint32Array0, (Namespace) null, (XmlNode.Namespace) null);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject((IdFunctionCall) null, "Namespace", 8, 4);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        namespace0.execIdCall(idFunctionObject0, context0, idFunctionObject0, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("org.mozilla.javascript.xmlimpl.Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("prefix", "");
      Namespace namespace0 = Namespace.create(importerTopLevel0, (Namespace) null, xmlNode_Namespace0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(namespace0, namespace0, 8, 4);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        namespace0.execIdCall(idFunctionObject0, context0, namespace0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=8 MASTER=
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      Object object0 = namespace0.equivalentValues(namespace0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      boolean boolean0 = namespace0.equals(namespace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("get");
      Namespace namespace0 = Namespace.create(nativeArray0, (Namespace) null, xmlNode_Namespace0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Class<Integer> class0 = Integer.class;
      IdFunctionObject idFunctionObject0 = namespace0.exportAsJSClass(160, namespace0, true);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) class0;
      Namespace namespace1 = (Namespace)namespace0.execIdCall(idFunctionObject0, context0, namespace0, namespace0, objectArray1);
      assertEquals("", namespace1.prefix());
      assertEquals(2, idFunctionObject0.getArity());
      assertEquals("Namespace", namespace1.getClassName());
      assertEquals("null", namespace1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("get");
      Namespace namespace0 = Namespace.create(nativeArray0, (Namespace) null, xmlNode_Namespace0);
      Object object0 = namespace0.getInstanceIdValue(1);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      IdFunctionObject idFunctionObject0 = namespace0.exportAsJSClass(160, namespace0, true);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = object0;
      Namespace namespace1 = (Namespace)namespace0.execIdCall(idFunctionObject0, context0, nativeArray0, nativeArray0, objectArray1);
      assertEquals("Namespace", namespace1.getClassName());
      assertEquals("", namespace1.prefix());
      assertEquals("null", namespace1.uri());
      assertEquals(2, idFunctionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      Namespace namespace1 = namespace0.constructNamespace(xmlNode_Namespace0);
      assertFalse(namespace1.isSealed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("ArrayBuffer");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "ArrayBuffer");
      Namespace namespace0 = Namespace.create(nativeUint16Array0, (Namespace) null, xmlNode_Namespace0);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = QName.create(xMLLibImpl0, namespace0, (QName) null, xmlNode_QName0);
      Namespace namespace1 = namespace0.constructNamespace(qName0);
      assertEquals("ArrayBuffer", namespace1.toLocaleString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(nativeArrayBuffer0, 0, 8);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "ArrayBuffer");
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("ArrayBuffer");
      Namespace namespace0 = Namespace.create(nativeUint16Array0, (Namespace) null, xmlNode_Namespace0);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = QName.create(xMLLibImpl0, namespace0, (QName) null, xmlNode_QName0);
      Namespace namespace1 = namespace0.castToNamespace(qName0);
      assertEquals("*::ArrayBuffer", namespace1.toString());
  }
}
