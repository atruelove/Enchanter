/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 06:52:05 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ClassFileWriter;
import org.mozilla.classfile.ConstantPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPool_ESTest extends ConstantPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      MockFile mockFile0 = new MockFile("org/mozilla/classfile/ClassFileWriter.class");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      classFileWriter0.write(mockPrintStream0);
      //  // Unstable assertion: assertEquals(54L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)", "org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)", "org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      boolean boolean0 = constantPool0.isUnderUtfEncodingLimit("org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108).org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108) (-18)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)", "org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)", "org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        constantPool0.getUtfEncodingLimit("org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108).org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108) (-18)", (short)4, 2147483633);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("To bi strin", "To bi strin", "To bi strin");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.getUtfEncodingLimit("To bi strin", (short)32, (short)1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ConstantPool", "org.mozilla.classfile.ConstantPool", "org.mozilla.classfile.ConstantPool");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      byte byte0 = constantPool0.getConstantType((short)64);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("ElE(3", "Code", "ElE(3");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Object object0 = constantPool0.getConstantData((short)1024);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("9)/?#_z#z|S:lA#", "9)/?#_z#z|S:lA#", "9)/?#_z#z|S:lA#");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      short short0 = constantPool0.addClass("org/mozilla/classfile/ConstantPool/org/mozilla/classfile/ConstantPoolToo big string (-108)/org/mozilla/classfile/ConstantPool/org/mozilla/classfile/ConstantPoolToo big string (-108)org/mozilla/classfile/ConstantPool/org/mozilla/classfile/ConstantPoolToo big string (-108) (0)");
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("H\u22091U,9", "H\u22091U,9", "H\u22091U,9");
      assertEquals((short)32, ClassFileWriter.ACC_SUPER);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("To bi strin", "To bi strin", "To bi strin");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)72, "To bi strin", "To bi strin", "To bi strin");
      short short0 = constantPool0.addMethodHandle(classFileWriter_MHandle0);
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("(Tet,hRRs`,[dA", "(Tet,hRRs`,[dA", "(Tet,hRRs`,[dA");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      short short0 = constantPool0.addInvokeDynamic("(Tet,hRRs`,[dA", "(Tet,hRRs`,[dA", (short)8);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("{aHp ", "{aHp ", "{aHp ");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        constantPool0.addConstant(classFileWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mozilla.classfile.ClassFileWriter@e
         //
         verifyException("org.mozilla.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)", "org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)", "org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte) (-18), "org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)", "org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)", "org/mozilla/classfiAe/Con&tantPool/org/mozilla/classfile/ConstanyPoolTo^ big string (-108)");
      int int0 = constantPool0.addConstant(classFileWriter_MHandle0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("To bi strin", "To bi strin", "To bi strin");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.addConstant("To bi strin");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((ClassFileWriter) null);
      Character character0 = Character.valueOf('E');
      int int0 = constantPool0.addConstant(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(">", ">", ">");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Long long0 = new Long((short)8);
      int int0 = constantPool0.addConstant(long0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("ElE(3", "ElE(3", "ElE(3");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Boolean boolean0 = new Boolean("ElE(3");
      int int0 = constantPool0.addConstant(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("ElE(3", "ElE(3", "ElE(3");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Float float0 = new Float((float) (short)256);
      int int0 = constantPool0.addConstant(float0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Piz)P3scD@,", "Piz)P3scD@,", "Piz)P3scD@,");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Double double0 = new Double((short)16);
      int int0 = constantPool0.addConstant(double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.Co(stantPool", "org.mozilla.classfile.Co(stantPool", "org.mozilla.classfile.Co(stantPool");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)9, "org.mozilla.classfile.Co(stantPool", "org.mozilla.classfile.Co(stantPool", "org.mozilla.classfile.Co(stantPool");
      short short0 = constantPool0.addMethodHandle(classFileWriter_MHandle0);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("(Tet,hRRs`,[dA", "(Tet,hRRs`,[dA", "(Tet,hRRs`,[dA");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Integer integer0 = new Integer((short)256);
      int int0 = constantPool0.addConstant(integer0);
      assertEquals(1, int0);
  }
}
