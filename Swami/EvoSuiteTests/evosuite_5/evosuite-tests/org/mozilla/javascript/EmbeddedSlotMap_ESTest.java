/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 04:09:16 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.EmbeddedSlotMap;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.ScriptableObject;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedSlotMap_ESTest extends EmbeddedSlotMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      Object object1 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(object1, 55, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(object0, 55, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(scriptableObject_SlotAccess0, 55, scriptableObject_SlotAccess0);
      embeddedSlotMap0.remove(scriptableObject_SlotAccess0, 55);
      assertEquals(2, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(object0, 55, scriptableObject_SlotAccess0);
      embeddedSlotMap0.remove(scriptableObject_SlotAccess0, 55);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.MODIFY_CONST;
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(scriptableObject_SlotAccess0, 55, 55);
      embeddedSlotMap0.get(scriptableObject_SlotAccess1, 55, scriptableObject_SlotAccess0);
      embeddedSlotMap0.remove(object0, 55);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get(embeddedSlotMap0, 148, scriptableObject_SlotAccess0);
      // Undeclared exception!
      try { 
        embeddedSlotMap0.remove(embeddedSlotMap0, 148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Integer integer0 = new Integer(2);
      embeddedSlotMap0.remove(integer0, 2);
      embeddedSlotMap0.get((Object) null, 2, (ScriptableObject.SlotAccess) null);
      embeddedSlotMap0.remove(integer0, 2);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Integer integer0 = new Integer((-18));
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get(integer0, (-18), (ScriptableObject.SlotAccess) null);
      Integer integer1 = new Integer((-18));
      scriptableObject_Slot0.name = (Object) integer1;
      assertEquals(1, embeddedSlotMap0.size());
      
      embeddedSlotMap0.remove(integer0, (-18));
      assertTrue(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Integer integer0 = new Integer((-18));
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get(integer0, (-18), (ScriptableObject.SlotAccess) null);
      Integer integer1 = new Integer((-18));
      scriptableObject_Slot0.name = (Object) integer1;
      embeddedSlotMap0.query(integer0, (-18));
      assertEquals(1, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      boolean boolean0 = embeddedSlotMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get(object0, 113, scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      embeddedSlotMap0.get(object0, 113, scriptableObject_SlotAccess1);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(object0, 55, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(object0, 55, scriptableObject_SlotAccess0);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get((Object) null, 148, scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.QUERY;
      embeddedSlotMap0.get(scriptableObject_Slot0, (-688), scriptableObject_SlotAccess1);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.QUERY;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get((Object) null, (-745), scriptableObject_SlotAccess0);
      assertNull(scriptableObject_Slot0);
      assertEquals(0, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Iterator<ScriptableObject.Slot> iterator0 = embeddedSlotMap0.iterator();
      Integer integer0 = new Integer((-1640531527));
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      embeddedSlotMap0.get(integer0, (-1640531527), scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get(iterator0, (int) integer0, scriptableObject_SlotAccess1);
      embeddedSlotMap0.get(scriptableObject_SlotAccess1, (-1640531527), scriptableObject_SlotAccess1);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess2 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(scriptableObject_SlotAccess1, 2, scriptableObject_SlotAccess2);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Integer integer0 = new Integer(2);
      embeddedSlotMap0.remove(integer0, 2);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get((Object) null, 2, (ScriptableObject.SlotAccess) null);
      embeddedSlotMap0.get(integer0, 2, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get((Object) null, 2, scriptableObject_SlotAccess0);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Integer integer0 = new Integer((-18));
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get(integer0, (-18), (ScriptableObject.SlotAccess) null);
      Integer integer1 = new Integer((-18));
      scriptableObject_Slot0.name = (Object) integer1;
      embeddedSlotMap0.get(integer0, (-18), scriptableObject_SlotAccess0);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = null;
      try {
        importerTopLevel0 = new ImporterTopLevel(context0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot((Object) null, 24, 24);
      embeddedSlotMap0.addSlot(scriptableObject_GetterSlot0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      embeddedSlotMap0.get((Object) null, 24, scriptableObject_SlotAccess0);
      assertFalse(embeddedSlotMap0.isEmpty());
  }
}
