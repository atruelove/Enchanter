/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 03:46:17 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.EcmaError;
import org.mozilla.javascript.Scriptable;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EcmaError_ESTest extends EcmaError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("", "", "", 2331, (String) null, 0);
      String string0 = ecmaError0.getSourceName();
      assertNotNull(string0);
      assertEquals(0, ecmaError0.columnNumber());
      assertEquals(2331, ecmaError0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("", "", "", 2331, (String) null, 0);
      String string0 = ecmaError0.getName();
      assertNotNull(string0);
      assertEquals(2331, ecmaError0.lineNumber());
      assertEquals(0, ecmaError0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("", "org.mozilla.javascript.EcmaError", "", 0, "7qsl_", 0);
      String string0 = ecmaError0.getLineSource();
      assertEquals("", ecmaError0.getName());
      assertEquals("7qsl_", string0);
      assertEquals("", ecmaError0.sourceName());
      assertEquals(0, ecmaError0.getColumnNumber());
      assertEquals("org.mozilla.javascript.EcmaError", ecmaError0.getErrorMessage());
      assertEquals(0, ecmaError0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("}o98#M7G|ja.\"X", "z*7~-vhl-Ue6hlPeLGw", "2*", 0, "}o98#M7G|ja.\"X", 0);
      int int0 = ecmaError0.getLineNumber();
      assertEquals(0, int0);
      assertEquals("}o98#M7G|ja.\"X", ecmaError0.getName());
      assertEquals("2*", ecmaError0.getSourceName());
      assertEquals("z*7~-vhl-Ue6hlPeLGw", ecmaError0.getErrorMessage());
      assertEquals("}o98#M7G|ja.\"X", ecmaError0.lineSource());
      assertEquals(0, ecmaError0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("", "", "", 2331, (String) null, 0);
      ecmaError0.getErrorObject();
      assertEquals(2331, ecmaError0.getLineNumber());
      assertEquals(0, ecmaError0.getColumnNumber());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("", "", "", 2331, (String) null, 0);
      String string0 = ecmaError0.getErrorMessage();
      assertEquals(0, ecmaError0.getColumnNumber());
      assertEquals(2331, ecmaError0.getLineNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("i@D%jWa5R-", (String) null, "}mtt6d)z(P`v'Y/yAp`", 0, "i@D%jWa5R-", 0);
      int int0 = ecmaError0.getColumnNumber();
      assertEquals(0, int0);
      assertEquals("i@D%jWa5R-", ecmaError0.getLineSource());
      assertEquals("i@D%jWa5R-", ecmaError0.getName());
      assertEquals(0, ecmaError0.lineNumber());
      assertEquals("}mtt6d)z(P`v'Y/yAp`", ecmaError0.sourceName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError((Scriptable) null, "DML", 0, 3940, "DML");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("", "", "", 2331, (String) null, 0);
      String string0 = ecmaError0.details();
      assertEquals(0, ecmaError0.columnNumber());
      assertEquals(": ", string0);
      assertEquals(2331, ecmaError0.lineNumber());
  }
}
