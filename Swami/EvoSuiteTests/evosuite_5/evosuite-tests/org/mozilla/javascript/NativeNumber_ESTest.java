/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 02:28:20 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeNumber;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeNumber_ESTest extends NativeNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      String string0 = nativeNumber0.toString();
      assertEquals("-2290.3644427087", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(100.39586990629874);
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, "Number", 8, "Number", 0, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 13;
      Object object0 = nativeNumber0.execIdCall(idFunctionObjectES6_0, context0, baseFunction0, nativeNumber0, objectArray0);
      assertEquals("100.3958699063", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(Double.NEGATIVE_INFINITY);
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, "Number", 8, "Number", 0, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[9];
      Object object0 = nativeNumber0.execIdCall(idFunctionObjectES6_0, context0, idFunctionObjectES6_0, nativeNumber0, objectArray0);
      assertEquals("-Infinity", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(100.39586990629874);
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, "Number", 8, "Number", 0, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        nativeNumber0.execIdCall(idFunctionObjectES6_0, context0, baseFunction0, nativeNumber0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // RangeError: Precision null out of range.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(Double.NaN);
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, "Number", 8, "Number", 0, nativeNumber0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[1];
      Object object0 = nativeNumber0.execIdCall(idFunctionObjectES6_0, context0, baseFunction0, nativeNumber0, objectArray0);
      assertEquals("NaN", object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(Double.NaN);
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, "Number", 8, "Number", 0, nativeNumber0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object object0 = nativeNumber0.execIdCall(idFunctionObjectES6_0, context0, baseFunction0, nativeNumber0, context0.emptyArgs);
      assertEquals("NaN", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", 6, 8);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, nativeNumber0, context0.emptyArgs);
      assertEquals("-2290", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2073.96688);
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, "Number", 4, "Number", 0, nativeNumber0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object object0 = nativeNumber0.execIdCall(idFunctionObjectES6_0, context0, nativeNumber0, nativeNumber0, context0.emptyArgs);
      assertEquals("(new Number(2073.96688))", object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(101.31358391913152);
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, "Number", 2, "Number", 0, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        nativeNumber0.execIdCall(idFunctionObjectES6_0, context0, idFunctionObjectES6_0, nativeNumber0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal radix 0.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2073.96688);
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(baseFunction0, "Number", 4, "Number", 0, nativeNumber0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        nativeNumber0.execIdCall(idFunctionObjectES6_0, context0, baseFunction0, idFunctionObjectES6_0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"Number\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-6), 0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, nativeNumber0, context0.emptyArgs);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-5), 8);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-4), 0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[6];
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, objectArray0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-4), 0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-3), 1);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[6];
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, objectArray0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-3), 1);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-2), 8);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[18];
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, nativeNumber0, objectArray0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-2), 8);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-1), 1);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Double double0 = Double.valueOf((double) (-1));
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) double0;
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, objectArray0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-2290.3644427087));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-1), 1);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[1];
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeNumber0, objectArray0);
      assertEquals(false, object0);
  }
}
