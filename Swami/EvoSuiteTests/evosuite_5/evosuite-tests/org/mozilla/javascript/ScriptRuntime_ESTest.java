/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 22:33:11 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ArrowFunction;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Callable;
import org.mozilla.javascript.ConsString;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.EcmaError;
import org.mozilla.javascript.GeneratedClassLoader;
import org.mozilla.javascript.IdFunctionCall;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.InterpretedFunction;
import org.mozilla.javascript.InterpreterData;
import org.mozilla.javascript.MemberBox;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeBoolean;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeError;
import org.mozilla.javascript.NativeFunction;
import org.mozilla.javascript.NativeGenerator;
import org.mozilla.javascript.NativeIterator;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeJavaConstructor;
import org.mozilla.javascript.NativeJavaMethod;
import org.mozilla.javascript.NativeJavaTopPackage;
import org.mozilla.javascript.NativeNumber;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.NativeScript;
import org.mozilla.javascript.NativeString;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Ref;
import org.mozilla.javascript.ScriptRuntime;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Symbol;
import org.mozilla.javascript.SymbolKey;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.Undefined;
import org.mozilla.javascript.regexp.RegExpImpl;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScriptRuntime_ESTest extends ScriptRuntime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 17, (-177));
      NativeString nativeString0 = new NativeString("error reporter");
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, nativeString0, 0, "Implementation-Title", 8, nativeUint32Array0);
      // Undeclared exception!
      try { 
        ScriptRuntime.wrapRegExp(context0, idFunctionObject0, contextFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.ContextFactory cannot be cast to org.mozilla.javascript.regexp.RECompiled
         //
         verifyException("org.mozilla.javascript.regexp.RegExpImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.wrapException((Throwable) null, nativeContinuation0, context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      // Undeclared exception!
      try { 
        ScriptRuntime.updateDotQuery(false, nativeUint8ClampedArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.typedarrays.NativeUint8ClampedArray cannot be cast to org.mozilla.javascript.NativeWith
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      String string0 = ScriptRuntime.uneval(context0, nativeIterator_StopIteration0, context0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      // Undeclared exception!
      try { 
        ScriptRuntime.undefCallError((Object) null, nativeUint8ClampedArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = ScriptRuntime.same((Object) null, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Object object0 = ScriptRuntime.getObjectElem((Object) importerTopLevel0, (Object) importerTopLevel0, context0, (Scriptable) importerTopLevel0);
      SymbolKey symbolKey0 = SymbolKey.HAS_INSTANCE;
      // Undeclared exception!
      try { 
        ScriptableObject.putProperty(((Undefined) object0).SCRIPTABLE_UNDEFINED, (Symbol) symbolKey0, (Object) symbolKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Object object does not support Symbol keys
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char char0 = ScriptRuntime.toUint16((Object) null);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.toString(context0.emptyArgs, 87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        ScriptRuntime.eqNumber(2.0, delegator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Object's getDefaultValue() method returned an object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = ScriptRuntime.toPrimitive((Object) byte0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Scriptable scriptable0 = ScriptRuntime.toObjectOrNull(context0, (Object) null);
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Context context0 = Context.enter();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      // Undeclared exception!
      try { 
        ScriptRuntime.toObjectOrNull(context0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("org.mozilla.javascript.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Scriptable scriptable0 = ScriptRuntime.toObjectOrNull(context0, (Object) importerTopLevel0);
      assertSame(importerTopLevel0, scriptable0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0);
      Class<EcmaError> class0 = EcmaError.class;
      NativeArray nativeArray1 = (NativeArray)ScriptRuntime.toObject((Scriptable) null, (Object) nativeArray0, (Class<?>) class0);
      assertTrue(nativeArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0);
      NativeNumber nativeNumber1 = (NativeNumber)Context.toObject((Object) nativeNumber0, (Scriptable) nativeNumber0);
      assertFalse(nativeNumber1.isSealed());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        Context.toObject((Object) null, (Scriptable) nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot convert null to an object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SymbolKey symbolKey0 = SymbolKey.HAS_INSTANCE;
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.getObjectPropNoWarn((Object) symbolKey0, "g]s1oKm", context0, (Scriptable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.SymbolKey cannot be cast to org.mozilla.javascript.NativeSymbol
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.toNumber((Object[]) null, (-4193));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      Byte byte0 = new Byte((byte) (-32));
      Context context0 = Context.getCurrentContext();
      Object object0 = ScriptRuntime.setObjectProp((Scriptable) nativeArray0, "", (Object) byte0, context0);
      assertEquals((byte) (-32), object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.toInteger((Object[]) null, (-3677));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = ScriptRuntime.toInteger((-1163.16237877167));
      assertEquals((-1163.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = ScriptRuntime.toInteger(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      double double0 = ScriptRuntime.toInteger((Object) nativeJavaTopPackage0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = ScriptRuntime.toInteger((double) 2284);
      assertEquals(2284.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      int int0 = ScriptRuntime.toInt32(objectArray0, 4784);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        ScriptRuntime.toInt32((Object) nativeIterator_StopIteration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(15);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      nativeInt32Array0.replaceAll(unaryOperator0);
      assertTrue(nativeInt32Array0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = ScriptRuntime.toInt32(2284.9667670489);
      assertEquals(2284, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(1.401298464324817E-45);
      boolean boolean0 = ScriptableObject.isTrue(nativeNumber0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(338L);
      boolean boolean0 = ScriptRuntime.toBoolean(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = ScriptableObject.isFalse((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 130, 170);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      TopLevel.NativeErrors topLevel_NativeErrors0 = TopLevel.NativeErrors.ReferenceError;
      BaseFunction baseFunction0 = importerTopLevel0.getNativeErrorCtor(topLevel_NativeErrors0);
      ArrowFunction arrowFunction0 = new ArrowFunction(context0, nativeUint8Array0, baseFunction0, nativeUint8Array0);
      assertTrue(baseFunction0.isSealed());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SymbolKey symbolKey0 = SymbolKey.TO_PRIMITIVE;
      boolean boolean0 = Context.toBoolean(symbolKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      // Undeclared exception!
      try { 
        ScriptRuntime.throwError(context0, nativeArrayBuffer0, "error reporter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"Error\" not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      // Undeclared exception!
      try { 
        ScriptRuntime.throwCustomError(context0, nativeFloat32Array0, "language version", "language version");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"language version\" not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = ScriptRuntime.testUint32String("R");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.stringToNumber((String) null, 0, 12, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = ScriptRuntime.stringToNumber("", 0, (-3769), (-3769));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = ScriptRuntime.stringPrefixToNumber("", 2743, 79);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeObject nativeObject0 = new NativeObject();
      NativeObject nativeObject1 = (NativeObject)ScriptRuntime.strictSetName(nativeObject0, nativeObject0, context0, nativeArrayBuffer0, "ArrayBuffer");
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ScriptRuntime.storeUint32Result(context0, 0);
      assertEquals(130, Context.VERSION_1_3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Context context0 = Context.enter();
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod((MemberBox[]) null, "error reporter");
      // Undeclared exception!
      try { 
        ScriptRuntime.specialRef((Object) null, (String) null, context0, (Scriptable) nativeJavaMethod0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"null\" from null
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      NativeWith nativeWith0 = new NativeWith(nativeUint32Array0, nativeUint32Array0);
      // Undeclared exception!
      try { 
        ScriptRuntime.specialRef((Object) nativeWith0, (String) null, context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = ScriptRuntime.shallowEq(classLoader0, importerTopLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      SymbolKey symbolKey0 = SymbolKey.TO_PRIMITIVE;
      boolean boolean0 = ScriptRuntime.shallowEq(importerTopLevel0, symbolKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = (RegExpImpl)context0.regExpProxy;
      ScriptRuntime.setRegExpProxy(context0, regExpImpl0);
      assertEquals(200, Context.VERSION_ES6);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object object0 = ScriptRuntime.setObjectProp((Object) "Unexpected opcode for 1 operand", "Unexpected opcode for 1 operand", (Object) null, context0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      SymbolKey symbolKey0 = SymbolKey.SPLIT;
      Context context0 = Context.getContext();
      Object object0 = ScriptRuntime.setObjectIndex((Object) nativeNumber0, 1.0E15, (Object) symbolKey0, context0, (Scriptable) nativeNumber0);
      assertSame(object0, symbolKey0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(2);
      Synchronizer synchronizer0 = new Synchronizer(nativeJavaTopPackage0);
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(13);
      NativeWith nativeWith0 = new NativeWith(synchronizer0, nativeFloat32Array0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object object0 = ScriptRuntime.setObjectIndex((Object) nativeWith0, (double) 1, (Object) null, context0, (Scriptable) nativeUint8Array0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter((Context) null, contextFactory0);
      // Undeclared exception!
      try { 
        ScriptRuntime.setObjectIndex((Object) null, 0.0, (Object) null, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"0.0\" of null to \"null\"
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.setObjectElem((Object) null, (Object) null, (Object) null, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"null\" of null to \"null\"
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context0 = Context.getCurrentContext();
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array((NativeArrayBuffer) null, 2, 110);
      NativeIterator.StopIteration nativeIterator_StopIteration1 = (NativeIterator.StopIteration)ScriptRuntime.setName((Scriptable) null, nativeIterator_StopIteration0, context0, nativeUint16Array0, "language version");
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      ContextFactory contextFactory0 = new ContextFactory();
      GeneratedClassLoader generatedClassLoader0 = contextFactory0.createClassLoader((ClassLoader) null);
      Context context0 = Context.getContext();
      Object object0 = ScriptRuntime.setName(nativeJavaTopPackage0, generatedClassLoader0, context0, nativeJavaTopPackage0, "MXkE6<\"s75=fg_B!a");
      assertSame(object0, generatedClassLoader0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      // Undeclared exception!
      try { 
        ScriptRuntime.setEnumNumbers(importerTopLevel0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.ImporterTopLevel cannot be cast to org.mozilla.javascript.ScriptRuntime$IdEnumeration
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.setDefaultNamespace(contextFactory0, context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 10, 34);
      NativeArrayBuffer nativeArrayBuffer1 = (NativeArrayBuffer)ScriptRuntime.setConst(nativeInt32Array0, nativeArrayBuffer0, context0, "ArrayBuffer");
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Context context0 = Context.enter();
      Object object0 = ScriptRuntime.searchDefaultNamespace(context0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Byte byte0 = new Byte((byte)27);
      boolean boolean0 = ScriptRuntime.same(nativeJavaTopPackage0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.refSet((Ref) null, (Object) context0, context0, (Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.refIncrDecr((Ref) null, context0, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.refDel((Ref) null, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EcmaError ecmaError0 = ScriptRuntime.rangeError("");
      assertEquals("", ecmaError0.getErrorMessage());
      assertEquals(0, ecmaError0.lineNumber());
      assertEquals(0, ecmaError0.getColumnNumber());
      assertEquals("RangeError", ecmaError0.getName());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Context context0 = Context.getContext();
      Object[] objectArray0 = new Object[7];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object object0 = ScriptRuntime.propIncrDecr((Object) nativeArray0, "language version", context0, (-893));
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Object[] objectArray0 = nativeJavaTopPackage0.getAllIds();
      Object[] objectArray1 = ScriptRuntime.padArguments(objectArray0, (-427));
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.numberToString(270.2019667, (-847));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal radix -847.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EcmaError ecmaError0 = (EcmaError)ScriptRuntime.notFunctionError((Object) null, (Object) null, "_sHlR|");
      assertEquals("Cannot call property _sHlR| in object null. It is not a function, it is \"object\".", ecmaError0.getErrorMessage());
      assertEquals("TypeError", ecmaError0.getName());
      assertEquals(0, ecmaError0.lineNumber());
      assertEquals(0, ecmaError0.getColumnNumber());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.newSpecial(context0, context0, (Object[]) null, (Scriptable) null, 14);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter((Context) null, contextFactory0);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(140);
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 16, 102);
      // Undeclared exception!
      try { 
        ScriptRuntime.newObjectLiteral((Object[]) null, (Object[]) null, context0, (Scriptable) nativeUint8ClampedArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Context context0 = Context.getContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      Scriptable scriptable0 = Context.toObject((Object) context0, (Scriptable) scriptableObject0);
      // Undeclared exception!
      try { 
        ScriptRuntime.newObject((Object) "MeW,", context0, scriptable0, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000001266 is not a function, it is string.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Boolean;
      NativeBoolean nativeBoolean0 = (NativeBoolean)importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      TopLevel.NativeErrors topLevel_NativeErrors0 = TopLevel.NativeErrors.URIError;
      ScriptRuntime.newNativeError(context0, nativeBoolean0, topLevel_NativeErrors0, (Object[]) null);
      assertTrue(nativeBoolean0.isSealed());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.newCatchScope((Throwable) null, (Scriptable) null, "Oav0|',R+A?sA-L0G@", (Context) null, (Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(63);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeFloat32Array0, "ppO_ L{2jE_2J`", 1, "Y>S'uv;'!", 2, nativeFloat32Array0);
      ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim(idFunctionObjectES6_0, (String) null);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        scriptRuntime_NoSuchMethodShim0.call(context0, nativeFloat32Array0, nativeFloat32Array0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=1 MASTER=org.mozilla.javascript.typedarrays.NativeFloat32Array@b13
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeString nativeString0 = new NativeString("error reporter");
      // Undeclared exception!
      try { 
        ScriptRuntime.nameRef((Object) nativeString0, context0, (Scriptable) nativeString0, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // XML runtime not available
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      NativeArray nativeArray0 = new NativeArray(1540L);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      // Undeclared exception!
      try { 
        ScriptRuntime.nameRef((Object) nativeNumber0, (Object) nativeArray0, context0, (Scriptable) nativeNumber0, 144);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        ScriptRuntime.nameIncrDecr((Scriptable) importerTopLevel0, "language version", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"language version\" is not defined.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.name(context0, nativeJavaTopPackage0, "javaException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.memberRef((Object) null, (Object) nativeJavaTopPackage0, context0, (-566));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: null is not an xml object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        ScriptRuntime.memberRef((Object) importerTopLevel0, (Object) "W", (Object) "W", context0, 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: [object global] is not an xml object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = ScriptRuntime.makeUrlForGeneratedScript(true, "", 610);
      assertEquals("#610(eval)", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = ScriptRuntime.makeUrlForGeneratedScript(false, "org.mozilla.javascript.ScriptRuntime$1", 450);
      assertEquals("org.mozilla.javascript.ScriptRuntime$1#450(Function)", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      // Undeclared exception!
      try { 
        ScriptRuntime.leaveWith(nativeInt32Array0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.typedarrays.NativeInt32Array cannot be cast to org.mozilla.javascript.NativeWith
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.leaveDotQuery((Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      long long0 = ScriptRuntime.lastUint32Result(context0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Context context0 = Context.enter();
      Scriptable scriptable0 = ScriptRuntime.lastStoredScriptable(context0);
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      NativeCall nativeCall0 = new NativeCall();
      Synchronizer synchronizer0 = new Synchronizer(nativeCall0, nativeCall0);
      boolean boolean0 = synchronizer0.hasInstance(baseFunction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isStrWhiteSpaceChar(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isSpecialProperty("javaException");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<NativeJavaMethod> class0 = NativeJavaMethod.class;
      boolean boolean0 = ScriptRuntime.isRhinoRuntimeType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      boolean boolean1 = ScriptRuntime.isPrimitive(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      boolean boolean0 = ScriptRuntime.isNaN(contextFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = ScriptRuntime.NaNobj;
      boolean boolean0 = ScriptRuntime.isNaN(double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSLineTerminator(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSWhitespaceOrLineTerminator(112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isGeneratedScript("8R)#)ZlGt<chx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = ScriptRuntime.NaNobj;
      boolean boolean0 = ScriptRuntime.isArrayObject(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter((Context) null, contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      InterpreterData interpreterData0 = new InterpreterData(1124, "language version", (String) null, true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript(interpreterData0, (Object) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.initFunction(context0, importerTopLevel0, interpretedFunction0, 93, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.in("RYeDD~k?", "RYeDD~k?", context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Can't use 'in' on a non-object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.hasTopCall((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      // Undeclared exception!
      try { 
        ScriptRuntime.getValueFunctionAndThis((Object) null, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: null is not a function, it is object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context0 = Context.enter();
      Object object0 = ScriptRuntime.getObjectIndex((Object) nativeIterator_StopIteration0, (double) 1, context0, (Scriptable) nativeIterator_StopIteration0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      // Undeclared exception!
      try { 
        ScriptRuntime.getObjectIndex((Object) null, 9.007199254740992E15, context0, (Scriptable) nativeJavaTopPackage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"9007199254740992\" from null
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.getObjectElem((Object) null, (Object) null, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"null\" from null
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Context context0 = Context.enter();
      NativeCall nativeCall0 = context0.currentActivationCall;
      // Undeclared exception!
      try { 
        ScriptRuntime.getNameFunctionAndThis("error reporter", context0, nativeCall0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.getMessage4("", context0, context0, (Object) null, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject(Double.NEGATIVE_INFINITY);
      assertEquals("-Infinity", object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject(0.0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.getGlobal((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Short short0 = new Short((short)1380);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.getElemFunctionAndThis((Object) short0, (Object) short0, context0, (Scriptable) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.getElemFunctionAndThis((Object) "", (Object) "", context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Class<NativeScript> class0 = NativeScript.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(importerTopLevel0, class0);
      Callable callable0 = ScriptRuntime.getCallable(nativeJavaClass0);
      assertSame(callable0, nativeJavaClass0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Context context0 = Context.enter();
      Byte byte0 = new Byte((byte)0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject((IdFunctionCall) null, byte0, 2, 5);
      NativeCall nativeCall0 = ScriptRuntime.findFunctionActivation(context0, idFunctionObject0);
      assertNull(nativeCall0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.exitActivationFunction(context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Class<NativeJavaConstructor> class0 = NativeJavaConstructor.class;
      Scriptable scriptable0 = ScriptRuntime.toObject((Scriptable) importerTopLevel0, (Object) context0, (Class<?>) class0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        ScriptRuntime.evalSpecial(context0, scriptable0, long0, (Object[]) null, "error reporter", 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.escapeTextValue(nativeContinuation0, context0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // XML runtime not available
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = ScriptRuntime.escapeString("lj,-bE30Y");
      assertEquals("lj,-bE30Y\\x7f", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Context context0 = Context.enter();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type org.evosuite.instrumentation.InstrumentingClassLoader
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, true);
      boolean boolean0 = ScriptRuntime.same(nativeGenerator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Byte byte0 = new Byte((byte)27);
      boolean boolean0 = ScriptRuntime.eq(nativeJavaTopPackage0, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3341);
      // Undeclared exception!
      try { 
        ScriptRuntime.eq("RYeDD~k?", nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      boolean boolean0 = ScriptRuntime.eq(nativeError0, nativeError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double double0 = new Double((-4863.9));
      boolean boolean0 = ScriptRuntime.eq(double0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      boolean boolean0 = ScriptRuntime.eq((Object) null, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 10, 34);
      // Undeclared exception!
      try { 
        ScriptRuntime.eq(nativeInt32Array0, "{byteLength:0}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.enumValue((Object) null, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = ScriptRuntime.NaNobj;
      // Undeclared exception!
      try { 
        ScriptRuntime.enumNext(double0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.mozilla.javascript.ScriptRuntime$IdEnumeration
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Short short0 = new Short((short)84);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.enumInit((Object) short0, context0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SymbolKey symbolKey0 = SymbolKey.HAS_INSTANCE;
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.enumId(symbolKey0, context0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.SymbolKey cannot be cast to org.mozilla.javascript.ScriptRuntime$IdEnumeration
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(9);
      Synchronizer synchronizer0 = new Synchronizer(nativeUint32Array0);
      Object object0 = ScriptRuntime.enumInit((Object) synchronizer0, context0, (Scriptable) nativeUint32Array0, 120);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer((-42));
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      Scriptable scriptable0 = ScriptRuntime.enterWith(integer0, context0, nativeFloat64Array0);
      assertEquals("With", scriptable0.getClassName());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        ScriptRuntime.enterDotQuery(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Object object0 = ScriptRuntime.delete((Object) importerTopLevel0, (Object) importerTopLevel0, context0, (Scriptable) importerTopLevel0, true);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.delete((Object) null, (Object) byte0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot delete property \"27\" of null
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = ScriptRuntime.defaultObjectToString((Scriptable) null);
      assertEquals("[object Null]", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 10, 34);
      // Undeclared exception!
      try { 
        ScriptRuntime.defaultObjectToSource(context0, nativeArrayBuffer0, nativeInt32Array0, (Object[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 10, 34);
      NativeWith nativeWith0 = new NativeWith(nativeInt32Array0, nativeArrayBuffer0);
      String string0 = ScriptRuntime.defaultObjectToSource(context0, nativeInt32Array0, nativeWith0, (Object[]) null);
      assertEquals("({byteLength:0})", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      Context context1 = contextFactory0.enterContext(context0);
      // Undeclared exception!
      try { 
        ScriptRuntime.setDefaultNamespace(contextFactory0, context1);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // XML runtime not available
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        ScriptRuntime.createFunctionActivation((NativeFunction) null, (Scriptable) null, objectArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.createArrowFunctionActivation((NativeFunction) null, (Scriptable) null, (Object[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      EcmaError ecmaError0 = ScriptRuntime.constructError("Cl!rB7&PR", "aBm\"1U5v@K&1", 0);
      assertEquals(0, ecmaError0.getColumnNumber());
      assertEquals("Cl!rB7&PR", ecmaError0.getName());
      assertEquals(0, ecmaError0.getLineNumber());
      assertEquals("aBm\"1U5v@K&1", ecmaError0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        ScriptRuntime.cmp_LE("R", delegator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      boolean boolean0 = ScriptRuntime.cmp_LE(nativeJavaTopPackage0, contextFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = ScriptRuntime.initStandardObjects(context0, (ScriptableObject) null, true);
      NativeObject nativeObject0 = (NativeObject)ScriptRuntime.checkDynamicScope(scriptableObject0, (Scriptable) null);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Scriptable scriptable0 = ScriptRuntime.checkDynamicScope((Scriptable) null, (Scriptable) null);
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeObject nativeObject0 = new NativeObject();
      NativeObject nativeObject1 = (NativeObject)ScriptRuntime.checkDynamicScope(importerTopLevel0, nativeObject0);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        ScriptRuntime.callSpecial(context0, nativeJavaTopPackage0, nativeJavaTopPackage0, (Object[]) null, delegator0, delegator0, 5347, "language version", 379);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Synchronizer synchronizer0 = new Synchronizer(nativeJavaTopPackage0);
      Object[] objectArray0 = new Object[9];
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.callRef(synchronizer0, nativeJavaTopPackage0, objectArray0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ReferenceError: Function [JavaPackage ] can not be used as the left-hand side of assignment or as an operand of ++ or -- operator.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Context context0 = Context.enter();
      Byte byte0 = new Byte((byte)0);
      ScriptableObject scriptableObject0 = ScriptRuntime.initStandardObjects(context0, (ScriptableObject) null, true);
      // Undeclared exception!
      try { 
        ScriptRuntime.call(context0, byte0, byte0, (Object[]) null, scriptableObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000839 is not a function, it is string.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext((Context) null);
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      NativeJavaTopPackage nativeJavaTopPackage1 = (NativeJavaTopPackage)ScriptRuntime.bind(context0, nativeJavaTopPackage0, "language version");
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptRuntime.addInstructionCount(context0, 676);
      NativeString nativeString0 = new NativeString(context0.errorReporterProperty);
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SymbolKey symbolKey0 = SymbolKey.HAS_INSTANCE;
      NativeNumber nativeNumber0 = new NativeNumber(1066);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.add((Object) nativeNumber0, (Object) symbolKey0, context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: The object is not a number
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ConsString consString0 = (ConsString)ScriptRuntime.add((Object) nativeJavaTopPackage0, (Object) importerTopLevel0, context0);
      assertEquals(29, consString0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ScriptRuntime scriptRuntime0 = new ScriptRuntime();
      assertEquals(3, ScriptRuntime.ENUMERATE_KEYS_NO_ITERATOR);
  }
}
