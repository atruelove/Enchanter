/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 17:37:02 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.NativeString;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.SymbolKey;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeString_ESTest extends NativeString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeString nativeString0 = new NativeString((CharSequence) null);
      CharSequence charSequence0 = nativeString0.toCharSequence();
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      NativeString nativeString0 = new NativeString(stringBuffer0);
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      stringBuffer0.append((Object) "}-=8$&3");
      nativeString0.put(0, (Scriptable) nativeUint16Array0, (Object) stringBuffer0);
      assertEquals(7, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      NativeString nativeString0 = new NativeString(stringBuilder0);
      stringBuilder0.insert(0, (Object) null);
      boolean boolean0 = nativeString0.has(2, (Scriptable) nativeString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(87);
      NativeString nativeString0 = new NativeString(stringBuffer0);
      ScriptableObject.putProperty((Scriptable) nativeString0, 0, (Object) nativeString0);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("font");
      NativeString nativeString0 = new NativeString(stringBuilder0);
      int int0 = nativeString0.getLength();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeString nativeString0 = new NativeString((CharSequence) null);
      // Undeclared exception!
      try { 
        nativeString0.getInstanceIdValue(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("uYU=5W$C(^($,9");
      NativeString nativeString0 = new NativeString(stringBuilder0);
      // Undeclared exception!
      try { 
        nativeString0.getInstanceIdValue(958);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 958
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      NativeString nativeString0 = new NativeString(stringBuffer0);
      // Undeclared exception!
      try { 
        nativeString0.getInstanceIdName(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("_F#;;(VX");
      NativeString nativeString0 = new NativeString(stringBuilder0);
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(0);
      Object object0 = nativeString0.get(0, (Scriptable) nativeInt32Array0);
      assertEquals("_", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(85);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      NativeString nativeString0 = new NativeString(stringBuffer0);
      Object object0 = nativeString0.get(100, (Scriptable) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("uYU=5W$C(^($,9");
      NativeString nativeString0 = new NativeString(stringBuilder0);
      SymbolKey symbolKey0 = SymbolKey.UNSCOPABLES;
      int int0 = nativeString0.findPrototypeId(symbolKey0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(0);
      NativeString nativeString0 = new NativeString(stringBuffer0);
      int int0 = nativeString0.findPrototypeId("1Z7rRIfK}fo");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("_F#;;(VX");
      NativeString nativeString0 = new NativeString(stringBuilder0);
      int int0 = nativeString0.findPrototypeId("RETHROW");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      NativeString nativeString0 = new NativeString(stringBuffer0);
      int int0 = nativeString0.findPrototypeId("object");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NativeString nativeString0 = new NativeString(stringBuilder0);
      int int0 = nativeString0.findPrototypeId("R}?1E");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeString nativeString0 = new NativeString("iwdFv");
      nativeString0.exportAsJSClass(103, nativeCall0, true);
      nativeString0.defineOwnProperty(context0, (Object) nativeString0, (ScriptableObject) nativeString0, false);
      assertEquals(130, Context.VERSION_1_3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeString nativeString0 = new NativeString((CharSequence) null);
      int int0 = nativeString0.findPrototypeId("z6#ZCe6q]");
      assertEquals(0, int0);
  }
}
