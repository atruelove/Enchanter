/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 18:25:48 GMT 2018
 */

package org.mozilla.javascript.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.regexp.NativeRegExpCtor;
import org.mozilla.javascript.regexp.RegExpImpl;
import org.mozilla.javascript.regexp.SubString;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegExpImpl_ESTest extends RegExpImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      // Undeclared exception!
      try { 
        regExpImpl0.wrapRegExp(context0, nativeArrayBuffer0, context0);
       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.Context cannot be cast to org.mozilla.javascript.regexp.RECompiled
         //
         verifyException("org.mozilla.javascript.regexp.RegExpImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeInt16Array0);
      NativeArray nativeArray0 = (NativeArray)regExpImpl0.js_split(context0, scriptable0, "error reporter", context0.emptyArgs);
      NativeArray nativeArray1 = (NativeArray)regExpImpl0.js_split(context0, scriptable0, "5", context0.emptyArgs);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) nativeArray1;
      NativeArray nativeArray2 = (NativeArray)regExpImpl0.js_split(context0, nativeArray0, "@N", objectArray0);
      assertEquals(1L, nativeArray2.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      SubString[] subStringArray0 = new SubString[9];
      SubString subString0 = regExpImpl0.getParenSubString(425);
      subStringArray0[0] = subString0;
      regExpImpl0.parens = subStringArray0;
      SubString subString1 = regExpImpl0.getParenSubString(0);
      assertNotNull(subString1);
      assertSame(subString1, subString0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeInt16Array0);
      Object[] objectArray0 = new Object[13];
      NativeArray nativeArray0 = (NativeArray)regExpImpl0.js_split(context0, scriptable0, "error reporter", objectArray0);
      assertTrue(nativeArray0.isEmpty());
      
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) nativeArray0;
      NativeArray nativeArray1 = (NativeArray)regExpImpl0.js_split(context0, scriptable0, "5", objectArray1);
      assertEquals(1L, nativeArray1.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = (NativeArray)regExpImpl0.js_split(context0, nativeInt16Array0, "", objectArray0);
      assertFalse(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeInt16Array0);
      NativeArray nativeArray0 = (NativeArray)regExpImpl0.js_split(context0, scriptable0, "error reporter", context0.emptyArgs);
      Object[] objectArray0 = new Object[1];
      Integer integer0 = (Integer)regExpImpl0.action(context0, nativeArray0, nativeArray0, objectArray0, 3);
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertEquals(1L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        regExpImpl0.compileRegExp(context0, "error reporter", "language version");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeInt16Array0);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      // Undeclared exception!
      try { 
        regExpImpl0.action(context0, nativeArrayBuffer0, scriptable0, context0.emptyArgs, 8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeInt16Array0);
      NativeArray nativeArray0 = (NativeArray)regExpImpl0.js_split(context0, scriptable0, "error reporter", context0.emptyArgs);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeArray0;
      String string0 = (String)regExpImpl0.action(context0, nativeArray0, nativeArray0, objectArray0, 2);
      assertEquals("undefined", string0);
      assertEquals(1L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeInt16Array0);
      NativeArray nativeArray0 = (NativeArray)regExpImpl0.js_split(context0, scriptable0, "error reporter", context0.emptyArgs);
      Integer integer0 = (Integer)regExpImpl0.action(context0, nativeArray0, nativeArray0, context0.emptyArgs, 3);
      assertEquals(1L, nativeArray0.getLength());
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegExpImpl regExpImpl0 = new RegExpImpl();
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeInt16Array0);
      NativeArray nativeArray0 = (NativeArray)regExpImpl0.js_split(context0, scriptable0, "error reporter", context0.emptyArgs);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.RegExp;
      NativeRegExpCtor nativeRegExpCtor0 = (NativeRegExpCtor)importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      NativeArray nativeArray1 = (NativeArray)regExpImpl0.action(context0, nativeRegExpCtor0, nativeArray0, context0.emptyArgs, 1);
      assertEquals(1L, nativeArray0.jsGet_length());
      assertNotNull(nativeArray1);
      assertEquals(1L, nativeArray0.getLength());
  }
}
