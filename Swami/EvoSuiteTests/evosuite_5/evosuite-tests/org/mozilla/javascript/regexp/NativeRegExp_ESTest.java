/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 18:20:08 GMT 2018
 */

package org.mozilla.javascript.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.regexp.NativeRegExp;
import org.mozilla.javascript.regexp.RECompiled;
import org.mozilla.javascript.regexp.RegExpImpl;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeRegExp_ESTest extends NativeRegExp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(0);
      RECompiled rECompiled0 = new RECompiled("g@`");
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint8ClampedArray0, rECompiled0);
      rECompiled0.flags = 4;
      String string0 = nativeRegExp0.toString();
      assertEquals("/g@`/m", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RECompiled rECompiled0 = new RECompiled("g@`");
      Context context0 = Context.enter();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint8Array0, rECompiled0);
      nativeRegExp0.compile(context0, nativeUint8Array0, context0.emptyArgs);
      String string0 = nativeRegExp0.toString();
      assertEquals("/(?:)/", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.setInstanceIdValue(0, "RegExp");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1807L));
      RECompiled rECompiled0 = new RECompiled("P,ETyj$];Er[");
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeArray0, rECompiled0);
      nativeRegExp0.setInstanceIdValue(1, nativeArray0);
      assertFalse(nativeRegExp0.isSealed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Context context0 = Context.enter();
      nativeRegExp0.setInstanceIdValue(3, context0);
      assertEquals("RegExp", nativeRegExp0.getClassName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      nativeRegExp0.setInstanceIdAttributes(1, 1);
      assertTrue(nativeRegExp0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "lq_=@Qny*(Q^567p", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Unterminated parenthetical 
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "wv|s(J", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Unterminated parenthetical 
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(0);
      RECompiled rECompiled0 = new RECompiled("g@`");
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint8ClampedArray0, rECompiled0);
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[10];
      rECompiled0.parenCount = 110;
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, nativeUint8ClampedArray0, regExpImpl0, "msg.bad.quant", intArray0, 120);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = NativeRegExp.isDigit('/');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.initPrototypeId(366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 366
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeRegExp.init((Context) null, importerTopLevel0, true);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      String string0 = nativeRegExp0.getTypeOf();
      assertEquals("object", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Context context0 = Context.getCurrentContext();
      RECompiled rECompiled0 = NativeRegExp.compileRE(context0, "v.", (String) null, false);
      assertNotNull(rECompiled0);
      
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeInt32Array0, rECompiled0);
      Object object0 = nativeRegExp0.getInstanceIdValue(4);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Object object0 = nativeRegExp0.getInstanceIdValue(1);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(91);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 91
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Context context0 = Context.getCurrentContext();
      RECompiled rECompiled0 = NativeRegExp.compileRE(context0, "v.", (String) null, false);
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeInt32Array0, rECompiled0);
      // Undeclared exception!
      try { 
        nativeRegExp0.setInstanceIdAttributes(0, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.getFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      int int0 = nativeRegExp0.findPrototypeId("setHours");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      int int0 = nativeRegExp0.findPrototypeId(")/fG*sE");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      int int0 = nativeRegExp0.findPrototypeId("RegExp");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      int int0 = nativeRegExp0.findPrototypeId("~<IW");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Object[] objectArray0 = nativeRegExp0.getAllIds();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[10];
      intArray0[0] = 16;
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, nativeRegExp0, regExpImpl0, "_)r3gB/{boT9]Uv", intArray0, (-2029));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      RECompiled rECompiled0 = new RECompiled("g@`");
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint8ClampedArray0, rECompiled0);
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[10];
      byte[] byteArray0 = new byte[8];
      rECompiled0.program = byteArray0;
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, nativeUint8ClampedArray0, regExpImpl0, "fl1~vss9", intArray0, 170);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: invalid bytecode
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[10];
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Scriptable scriptable0 = nativeRegExp0.compile(context0, nativeUint8Array0, context0.emptyArgs);
      Object object0 = nativeRegExp0.executeRegExp(context0, scriptable0, regExpImpl0, "_)r3gB/{boT9]Uv", intArray0, (-2029));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[4];
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.call(context0, (Scriptable) null, (Scriptable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeRegExp0, nativeRegExp0, 0, "gmVswN", 2, nativeRegExp0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        nativeRegExp0.execIdCall(idFunctionObject0, (Context) null, idFunctionObject0, idFunctionObject0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      RECompiled rECompiled0 = NativeRegExp.compileRE(context0, "lq_=@Qny*HQ567p", (String) null, false);
      assertNotNull(rECompiled0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Context context0 = Context.getCurrentContext();
      RECompiled rECompiled0 = NativeRegExp.compileRE(context0, "error reporter", (String) null, false);
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeInt32Array0, rECompiled0);
      // Undeclared exception!
      try { 
        nativeRegExp0.construct((Context) null, nativeInt32Array0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE((Context) null, "msg.max.lt.min", "msg.max.lt.min", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "language version", "ignoreCase", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      RECompiled rECompiled0 = NativeRegExp.compileRE(context0, "language version", "", true);
      assertNotNull(rECompiled0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1807L));
      RECompiled rECompiled0 = new RECompiled("P,ETyj$];Er[");
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeArray0, rECompiled0);
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(nativeArrayBuffer0, 134, (-3183));
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        nativeRegExp0.compile((Context) null, nativeFloat32Array0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) nativeRegExp0;
      // Undeclared exception!
      try { 
        nativeRegExp0.compile((Context) null, nativeRegExp0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Only one argument may be specified if the first argument to RegExp.prototype.compile is a RegExp object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }
}
