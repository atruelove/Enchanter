/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 23:34:43 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BoundFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeCallSite;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeJavaObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeJavaClass_ESTest extends NativeJavaClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      // Undeclared exception!
      try { 
        nativeJavaClass0.put("iC(?ExV`X", (Scriptable) nativeArrayBuffer0, (Object) nativeArrayBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      // Undeclared exception!
      try { 
        nativeJavaClass0.hasInstance(nativeJavaObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(nativeArrayBuffer0, 16, 160);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        ScriptableObject.putProperty((Scriptable) nativeInt16Array0, 150, (Object) nativeJavaClass0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 316
         //
         verifyException("org.mozilla.javascript.typedarrays.ByteIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeArray nativeArray0 = new NativeArray(10L);
      Context context0 = Context.enter();
      Synchronizer synchronizer0 = new Synchronizer(nativeJavaClass0);
      // Undeclared exception!
      try { 
        nativeArray0.getOwnPropertyDescriptor(context0, synchronizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      Class<Object> class0 = Object.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(scriptableObject0, class0, false);
      Class<BoundFunction> class1 = BoundFunction.class;
      NativeJavaClass nativeJavaClass1 = (NativeJavaClass)nativeJavaClass0.getDefaultValue(class1);
      assertEquals("JavaClass", nativeJavaClass1.getClassName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      Class<Object> class0 = Object.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(scriptableObject0, class0, false);
      // Undeclared exception!
      try { 
        nativeJavaClass0.get("JavaClass", (Scriptable) scriptableObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Java class \"java.lang.Object\" has no public instance field or method named \"JavaClass\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Context context0 = contextFactory0.makeContext();
      Object[] objectArray0 = new Object[1];
      nativeArrayBuffer0.setPrototype(nativeJavaClass0);
      objectArray0[0] = (Object) nativeArrayBuffer0;
      // Undeclared exception!
      try { 
        nativeJavaClass0.call(context0, nativeArrayBuffer0, nativeArrayBuffer0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeCallSite nativeCallSite0 = NativeCallSite.make(nativeJavaClass0, nativeJavaClass0);
      boolean boolean0 = nativeJavaClass0.hasInstance(nativeCallSite0);
      assertFalse(boolean0);
  }
}
