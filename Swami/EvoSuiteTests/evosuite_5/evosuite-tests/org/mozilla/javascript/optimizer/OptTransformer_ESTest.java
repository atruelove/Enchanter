/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 04:52:00 GMT 2018
 */

package org.mozilla.javascript.optimizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ObjArray;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NewExpression;
import org.mozilla.javascript.ast.ParenthesizedExpression;
import org.mozilla.javascript.ast.PropertyGet;
import org.mozilla.javascript.optimizer.OptFunctionNode;
import org.mozilla.javascript.optimizer.OptTransformer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptTransformer_ESTest extends OptTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      NewExpression newExpression0 = new NewExpression();
      AstRoot astRoot0 = new AstRoot();
      optTransformer0.visitCall(newExpression0, astRoot0);
      assertEquals(24, Node.JSDOC_PROP);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      NewExpression newExpression0 = new NewExpression();
      FunctionNode functionNode0 = new FunctionNode(15);
      OptFunctionNode optFunctionNode0 = new OptFunctionNode(functionNode0);
      Name name0 = new Name(2, 0, "2p(#=]cvdEpvp-0");
      PropertyGet propertyGet0 = new PropertyGet(19, 129, newExpression0, name0);
      hashMap0.put("2p(#=]cvdEpvp-0", optFunctionNode0);
      functionNode0.addChildToFront(propertyGet0);
      functionNode0.replaceChild(propertyGet0, name0);
      optTransformer0.visitNew(optFunctionNode0.fnode, optFunctionNode0.fnode);
      assertTrue(optFunctionNode0.isTargetOfDirectCall());
      assertFalse(objArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      FunctionNode functionNode0 = new FunctionNode();
      OptFunctionNode optFunctionNode0 = new OptFunctionNode(functionNode0);
      Name name0 = new Name();
      PropertyGet propertyGet0 = new PropertyGet();
      name0.setType(34);
      functionNode0.addChildToFront(propertyGet0);
      functionNode0.replaceChild(propertyGet0, name0);
      // Undeclared exception!
      try { 
        optTransformer0.visitNew(optFunctionNode0.fnode, optFunctionNode0.fnode);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      FunctionNode functionNode0 = new FunctionNode();
      OptFunctionNode optFunctionNode0 = new OptFunctionNode(functionNode0);
      PropertyGet propertyGet0 = new PropertyGet();
      functionNode0.addChildToFront(propertyGet0);
      // Undeclared exception!
      try { 
        optTransformer0.visitNew(functionNode0, optFunctionNode0.fnode);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      NewExpression newExpression0 = new NewExpression();
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(9, 4);
      FunctionNode functionNode0 = new FunctionNode();
      OptFunctionNode optFunctionNode0 = new OptFunctionNode(functionNode0);
      parenthesizedExpression0.addChildAfter(optFunctionNode0.fnode, newExpression0);
      functionNode0.addChildrenToFront(newExpression0);
      optTransformer0.visitNew(optFunctionNode0.fnode, optFunctionNode0.fnode);
      assertFalse(optFunctionNode0.getParameterNumberContext());
  }
}
