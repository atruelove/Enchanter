/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 05:28:48 GMT 2018
 */

package org.mozilla.javascript.optimizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ConsString;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeArrayIterator;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeFunction;
import org.mozilla.javascript.NativeGenerator;
import org.mozilla.javascript.NativeJavaObject;
import org.mozilla.javascript.ScriptRuntime;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.optimizer.OptRuntime;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptRuntime_ESTest extends OptRuntime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = OptRuntime.wrapDouble((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = OptRuntime.wrapDouble(1.0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = OptRuntime.add(0.0, (Object) null);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Synchronizer synchronizer0 = new Synchronizer((Scriptable) null);
      // Undeclared exception!
      try { 
        OptRuntime.throwStopIteration(synchronizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-3317));
      Object object0 = OptRuntime.add((Object) integer0, 0.0);
      // Undeclared exception!
      try { 
        OptRuntime.throwStopIteration(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.mozilla.javascript.Scriptable
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = OptRuntime.padStart(objectArray0, 0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(3, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        OptRuntime.newObjectSpecial(context0, contextFactory0, context0.emptyArgs, (Scriptable) null, (Scriptable) null, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn(nativeArray0).when(nativeFunction0).getParentScope();
      Scriptable scriptable0 = OptRuntime.createNativeGenerator(nativeFunction0, nativeFunction0, nativeFunction0, 2, 154);
      NativeFunction nativeFunction1 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn("z{.[X90w2L+D").when(nativeFunction1).getFunctionName();
      Context context0 = Context.enter();
      OptRuntime.initFunction(nativeFunction1, 1, scriptable0, context0);
      assertEquals(180, Context.VERSION_1_8);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      OptRuntime.GeneratorState optRuntime_GeneratorState0 = new OptRuntime.GeneratorState(nativeArrayBuffer0, 1, 1);
      Object[] objectArray0 = OptRuntime.getGeneratorStackState(optRuntime_GeneratorState0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      OptRuntime.GeneratorState optRuntime_GeneratorState0 = new OptRuntime.GeneratorState(nativeUint32Array0, 0, 13);
      Object[] objectArray0 = OptRuntime.getGeneratorLocalsState(optRuntime_GeneratorState0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[19];
      String string0 = OptRuntime.encodeIntArray(intArray0);
      assertEquals("\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      NativeGenerator nativeGenerator0 = new NativeGenerator(importerTopLevel0, nativeFunction0, nativeJavaObject0);
      Object object0 = OptRuntime.elemIncrDecr((Object) nativeGenerator0, (-2257.5918), context0, (Scriptable) nativeJavaObject0, 4);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = Context.enter();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      Scriptable scriptable0 = context0.newObject((Scriptable) nativeUint8ClampedArray0);
      NativeArrayIterator nativeArrayIterator0 = new NativeArrayIterator(scriptable0, nativeUint8ClampedArray0);
      // Undeclared exception!
      try { 
        OptRuntime.elemIncrDecr((Object) nativeArrayIterator0, 996.2964233925264, context0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        OptRuntime.newArrayLiteral(context0.emptyArgs, ";)!", 1, context0, (Scriptable) nativeUint8ClampedArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      // Undeclared exception!
      try { 
        OptRuntime.newArrayLiteral(context0.emptyArgs, "error reporter", 12, context0, (Scriptable) nativeUint8ClampedArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        OptRuntime.newArrayLiteral(context0.emptyArgs, (String) null, 0, context0, (Scriptable) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        OptRuntime.callSpecial(context0, nativeContinuation0, nativeContinuation0, context0.emptyArgs, nativeContinuation0, nativeContinuation0, 5, "error reporter", 16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn(nativeArray0).when(nativeFunction0).getParentScope();
      Scriptable scriptable0 = OptRuntime.createNativeGenerator(nativeFunction0, nativeFunction0, nativeFunction0, 2, 154);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        OptRuntime.callProp0(scriptable0, "z{.[X90w2L+D", context0, scriptable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.enter();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      // Undeclared exception!
      try { 
        OptRuntime.callName0("Gx-nk!3IynuX9,", context0, nativeInt8Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ReferenceError: \"Gx-nk!3IynuX9,\" is not defined.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Context context0 = Context.enter();
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeFunction nativeFunction1 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn(nativeContinuation0).when(nativeFunction1).get(anyString() , any(org.mozilla.javascript.Scriptable.class));
      doReturn(nativeFunction0, (Scriptable) null).when(nativeFunction1).getParentScope();
      // Undeclared exception!
      try { 
        OptRuntime.callName(context0.emptyArgs, "H|t[B#0X@@Mr2j", context0, nativeFunction1);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Interpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      Delegator delegator0 = new Delegator(nativeUint8ClampedArray0);
      Object[] objectArray0 = new Object[4];
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        OptRuntime.callN(delegator0, delegator0, objectArray0, context0, delegator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.typedarrays.NativeUint8ClampedArray cannot be cast to org.mozilla.javascript.Function
         //
         verifyException("org.mozilla.javascript.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeContinuation nativeContinuation1 = (NativeContinuation)OptRuntime.call2(nativeContinuation0, nativeContinuation0, nativeContinuation0, nativeContinuation0, context0, nativeContinuation0);
      assertFalse(nativeContinuation1.isSealed());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object object0 = OptRuntime.call1(nativeContinuation0, nativeContinuation0, nativeContinuation0, context0, nativeContinuation0);
      assertSame(object0, nativeContinuation0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, nativeArrayBuffer0.DONTENUM, 186, "ArrayBuffer", 2447, nativeArrayBuffer0);
      // Undeclared exception!
      try { 
        OptRuntime.call0(idFunctionObject0, nativeArrayBuffer0, (Context) null, nativeArrayBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=186 MASTER=org.mozilla.javascript.typedarrays.NativeArrayBuffer@4
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        OptRuntime.bindThis((NativeFunction) null, context0, (Scriptable) null, (Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConsString consString0 = (ConsString)OptRuntime.add((Object) "error reporter", (double) 180);
      assertEquals(17, consString0.length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      Synchronizer synchronizer0 = new Synchronizer(nativeUint8ClampedArray0);
      // Undeclared exception!
      try { 
        OptRuntime.add((Object) synchronizer0, (double) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<NativeArrayIterator> class0 = NativeArrayIterator.class;
      Object object0 = OptRuntime.add((double) 120, (Object) class0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ConsString consString0 = (ConsString)OptRuntime.add(11.40823773923443, (Object) importerTopLevel0);
      assertEquals(32, consString0.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptRuntime optRuntime0 = new OptRuntime();
      assertEquals(Double.NaN, ScriptRuntime.NaN, 0.01);
  }
}
