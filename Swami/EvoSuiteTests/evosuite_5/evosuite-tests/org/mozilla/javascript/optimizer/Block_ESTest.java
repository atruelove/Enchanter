/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 04:57:10 GMT 2018
 */

package org.mozilla.javascript.optimizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.ElementGet;
import org.mozilla.javascript.ast.ExpressionStatement;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.IfStatement;
import org.mozilla.javascript.ast.Label;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.ReturnStatement;
import org.mozilla.javascript.ast.ThrowStatement;
import org.mozilla.javascript.ast.VariableInitializer;
import org.mozilla.javascript.optimizer.Block;
import org.mozilla.javascript.optimizer.OptFunctionNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Block_ESTest extends Block_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.flattenSymbolTable(true);
      OptFunctionNode optFunctionNode0 = new OptFunctionNode(functionNode0);
      IfStatement ifStatement0 = new IfStatement(10);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) optFunctionNode0.fnode;
      nodeArray0[1] = (Node) ifStatement0;
      nodeArray0[2] = (Node) functionNode0;
      nodeArray0[3] = (Node) optFunctionNode0.fnode;
      nodeArray0[4] = (Node) functionNode0;
      ifStatement0.setType(138);
      nodeArray0[5] = (Node) ifStatement0;
      nodeArray0[6] = (Node) functionNode0;
      ReturnStatement returnStatement0 = new ReturnStatement();
      nodeArray0[7] = (Node) returnStatement0;
      nodeArray0[8] = (Node) ifStatement0;
      // Undeclared exception!
      try { 
        Block.runFlowAnalyzes(optFunctionNode0, nodeArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.ast.IfStatement cannot be cast to org.mozilla.javascript.ast.Name
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.flattenSymbolTable(false);
      OptFunctionNode optFunctionNode0 = new OptFunctionNode(functionNode0);
      NumberLiteral numberLiteral0 = new NumberLiteral(5, "IO");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) numberLiteral0;
      nodeArray0[1] = (Node) functionNode0;
      ThrowStatement throwStatement0 = new ThrowStatement(4, 23);
      nodeArray0[2] = (Node) throwStatement0;
      numberLiteral0.addChildrenToBack(nodeArray0[2]);
      numberLiteral0.setType(107);
      nodeArray0[3] = (Node) numberLiteral0;
      nodeArray0[4] = (Node) numberLiteral0;
      nodeArray0[5] = (Node) functionNode0;
      nodeArray0[6] = (Node) functionNode0;
      nodeArray0[7] = (Node) numberLiteral0;
      nodeArray0[8] = (Node) numberLiteral0;
      Block.runFlowAnalyzes(optFunctionNode0, nodeArray0);
      assertFalse(optFunctionNode0.getParameterNumberContext());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.flattenSymbolTable(false);
      OptFunctionNode optFunctionNode0 = new OptFunctionNode(functionNode0);
      NumberLiteral numberLiteral0 = new NumberLiteral(5, "IO");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) numberLiteral0;
      nodeArray0[1] = (Node) functionNode0;
      ThrowStatement throwStatement0 = new ThrowStatement(4, 23);
      nodeArray0[2] = (Node) throwStatement0;
      numberLiteral0.addChildrenToBack(nodeArray0[2]);
      nodeArray0[3] = (Node) numberLiteral0;
      nodeArray0[4] = (Node) numberLiteral0;
      nodeArray0[5] = (Node) functionNode0;
      nodeArray0[6] = (Node) functionNode0;
      nodeArray0[7] = (Node) numberLiteral0;
      nodeArray0[8] = (Node) numberLiteral0;
      Block.runFlowAnalyzes(optFunctionNode0, nodeArray0);
      assertFalse(optFunctionNode0.getParameterNumberContext());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.flattenSymbolTable(false);
      OptFunctionNode optFunctionNode0 = new OptFunctionNode(functionNode0);
      Node node0 = functionNode0.setType(6);
      ExpressionStatement expressionStatement0 = new ExpressionStatement(4, 13, optFunctionNode0.fnode);
      ElementGet elementGet0 = new ElementGet(18);
      Node[] nodeArray0 = new Node[8];
      Label label0 = new Label(19);
      nodeArray0[0] = (Node) label0;
      nodeArray0[1] = (Node) expressionStatement0;
      nodeArray0[2] = (Node) elementGet0;
      VariableInitializer variableInitializer0 = new VariableInitializer();
      nodeArray0[3] = (Node) variableInitializer0;
      nodeArray0[4] = node0;
      nodeArray0[5] = (Node) functionNode0;
      nodeArray0[6] = (Node) optFunctionNode0.fnode;
      nodeArray0[7] = (Node) expressionStatement0;
      // Undeclared exception!
      try { 
        Block.runFlowAnalyzes(optFunctionNode0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.Block", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.flattenSymbolTable(false);
      OptFunctionNode optFunctionNode0 = new OptFunctionNode(functionNode0);
      NumberLiteral numberLiteral0 = new NumberLiteral(5, "IO");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) numberLiteral0;
      nodeArray0[1] = (Node) functionNode0;
      ThrowStatement throwStatement0 = new ThrowStatement(4, 23);
      nodeArray0[2] = (Node) throwStatement0;
      numberLiteral0.setType(132);
      nodeArray0[3] = (Node) numberLiteral0;
      nodeArray0[4] = (Node) numberLiteral0;
      nodeArray0[5] = (Node) functionNode0;
      nodeArray0[6] = (Node) functionNode0;
      nodeArray0[7] = (Node) numberLiteral0;
      nodeArray0[8] = (Node) numberLiteral0;
      Block.runFlowAnalyzes(optFunctionNode0, nodeArray0);
      assertFalse(optFunctionNode0.isTargetOfDirectCall());
  }
}
