/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 05:07:48 GMT 2018
 */

package org.mozilla.javascript.optimizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.RegExpLiteral;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.optimizer.BodyCodegen;
import org.mozilla.javascript.optimizer.Codegen;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BodyCodegen_ESTest extends BodyCodegen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BodyCodegen.FinallyReturnPoint bodyCodegen_FinallyReturnPoint0 = new BodyCodegen.FinallyReturnPoint();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      BodyCodegen bodyCodegen0 = new BodyCodegen();
      bodyCodegen0.scriptOrFn = (ScriptNode) functionNode0;
      // Undeclared exception!
      try { 
        bodyCodegen0.generateBodyCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.BodyCodegen", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      Codegen codegen0 = new Codegen();
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      scriptNode0.addRegExp(regExpLiteral0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      // Undeclared exception!
      try { 
        codegen0.compileToClassFile(compilerEnvirons0, "`", scriptNode0, "`", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad type
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      Codegen codegen0 = new Codegen();
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      byte[] byteArray0 = codegen0.compileToClassFile(compilerEnvirons0, "escapeTextValue", scriptNode0, "escapeTextValue", false);
      assertEquals(3348, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      Codegen codegen0 = new Codegen();
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      compilerEnvirons0.setGenerateObserverCount(true);
      // Undeclared exception!
      try { 
        codegen0.compileToClassFile(compilerEnvirons0, "`", scriptNode0, "`", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad type
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }
}
