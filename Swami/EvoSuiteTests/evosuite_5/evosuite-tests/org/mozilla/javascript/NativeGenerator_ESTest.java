/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 04:25:13 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeError;
import org.mozilla.javascript.NativeFunction;
import org.mozilla.javascript.NativeGenerator;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeGenerator_ESTest extends NativeGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeInt32Array0, false);
      // Undeclared exception!
      try { 
        nativeGenerator0.initPrototypeId(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13
         //
         verifyException("org.mozilla.javascript.NativeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeError0, true);
      String string0 = nativeGenerator0.getClassName();
      assertEquals("Generator", string0);
      assertTrue(nativeGenerator0.isSealed());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeError0, true);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeGenerator0, "Generator", (-1), "Generator", 0, nativeError0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        contextFactory0.doTopCall(idFunctionObjectES6_0, context0, idFunctionObjectES6_0, nativeGenerator0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1
         //
         verifyException("org.mozilla.javascript.NativeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeError0, false);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeGenerator0, "throw", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // undefined
         //
         verifyException("org.mozilla.javascript.NativeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeUint32Array0, true);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeGenerator0, "send", context0.emptyArgs);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // null
         //
         verifyException("org.mozilla.javascript.NativeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(0);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeUint32Array0, false);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeGenerator0, "next", context0.emptyArgs);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // null
         //
         verifyException("org.mozilla.javascript.NativeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeError0, true);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeGenerator0, "Generator", (-1), "Generator", 0, nativeError0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        nativeGenerator0.execIdCall(idFunctionObjectES6_0, context0, idFunctionObjectES6_0, idFunctionObjectES6_0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"Generator\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, true);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeGenerator0, "@T/<5rTv", 13, "@T/<5rTv", 1, nativeGenerator0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        nativeGenerator0.execIdCall(idFunctionObjectES6_0, context0, (Scriptable) null, idFunctionObjectES6_0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=13 MASTER=org.mozilla.javascript.NativeGenerator@3
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(nativeArrayBuffer0, 0, 13);
      NativeWith nativeWith0 = new NativeWith(nativeInt16Array0, nativeArrayBuffer0);
      NativeGenerator nativeGenerator0 = new NativeGenerator(nativeWith0, (NativeFunction) null, (Object) null);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeUint32Array0, false);
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) nativeGenerator0;
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeGenerator0, "send", objectArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TypeError: Attempt to send value to newborn generator
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }
}
