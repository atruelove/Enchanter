/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 04:35:34 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ObjToIntMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjToIntMap_ESTest extends ObjToIntMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      objToIntMap0.intern("org.mozilla.javascript.ObjToIntMap$Iterator");
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      objToIntMap_Iterator0.start();
      assertFalse(objToIntMap0.isEmpty());
      
      objToIntMap_Iterator0.setValue(3);
      assertEquals(3, objToIntMap_Iterator0.getValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap(0);
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      // Undeclared exception!
      try { 
        objToIntMap_Iterator0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ObjToIntMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      objToIntMap_Iterator0.master.put((Object) null, 31);
      objToIntMap_Iterator0.start();
      objToIntMap_Iterator0.getKey();
      assertEquals(1, objToIntMap0.size());
      assertEquals(31, objToIntMap_Iterator0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      boolean boolean0 = objToIntMap_Iterator0.done();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap(0);
      int int0 = objToIntMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap(0);
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      objToIntMap0.put(objToIntMap_Iterator0, 0);
      objToIntMap0.intern((Object) null);
      objToIntMap0.intern(objToIntMap0);
      objToIntMap0.intern("");
      assertEquals(4, objToIntMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      boolean boolean0 = objToIntMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      objToIntMap_Iterator0.start();
      assertTrue(objToIntMap_Iterator0.done());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap(0);
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      boolean boolean0 = objToIntMap_Iterator0.master.has((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      objToIntMap_Iterator0.master.put((Object) null, 31);
      objToIntMap0.getKeys();
      assertEquals(1, objToIntMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap(0);
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      objToIntMap0.intern((Object) null);
      objToIntMap_Iterator0.master.getExisting((Object) null);
      assertFalse(objToIntMap0.isEmpty());
      assertEquals(1, objToIntMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      objToIntMap0.intern((Object) null);
      int int0 = objToIntMap0.get((Object) null, 3);
      assertEquals(1, objToIntMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      int int0 = objToIntMap0.get((Object) null, 3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap(0);
      Object object0 = new Object();
      objToIntMap0.intern(object0);
      objToIntMap0.newIterator();
      objToIntMap0.put("]=cz8o,t.T/&qt_R", 0);
      // Undeclared exception!
      try { 
        objToIntMap0.getExisting("]=cz8o,t.T/&qt_R");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap(0);
      Object object0 = new Object();
      objToIntMap0.intern(object0);
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      objToIntMap0.put("<klEo]9pN0]0#kz", 0);
      objToIntMap_Iterator0.master.remove("Y(+");
      assertEquals(2, objToIntMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap(0);
      ObjToIntMap.Iterator objToIntMap_Iterator0 = new ObjToIntMap.Iterator(objToIntMap0);
      objToIntMap0.put(objToIntMap_Iterator0, 0);
      Object object0 = new Object();
      objToIntMap0.put(object0, 1024);
      objToIntMap0.put((Object) null, 256);
      objToIntMap0.remove((Object) null);
      objToIntMap_Iterator0.master.put("org.mozilla.javascript.ObjToIntMap", 0);
      assertEquals(3, objToIntMap0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap(0);
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      objToIntMap0.put(objToIntMap_Iterator0, 0);
      objToIntMap0.intern((Object) null);
      objToIntMap0.remove((Object) null);
      objToIntMap0.put((Object) null, 0);
      assertFalse(objToIntMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      ObjToIntMap.Iterator objToIntMap_Iterator0 = objToIntMap0.newIterator();
      objToIntMap_Iterator0.master.put((Object) null, 31);
      objToIntMap_Iterator0.master.intern((Object) null);
      assertFalse(objToIntMap0.isEmpty());
      assertEquals(1, objToIntMap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjToIntMap objToIntMap0 = new ObjToIntMap();
      objToIntMap0.intern((Object) null);
      objToIntMap0.clear();
      assertEquals(0, objToIntMap0.size());
  }
}
