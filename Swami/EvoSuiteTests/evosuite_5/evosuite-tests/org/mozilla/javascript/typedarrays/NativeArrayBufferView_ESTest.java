/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 23:12:46 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeArrayBufferView;
import org.mozilla.javascript.typedarrays.NativeDataView;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeArrayBufferView_ESTest extends NativeArrayBufferView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      boolean boolean0 = NativeArrayBufferView.isArg(objectArray0, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(nativeArrayBuffer0, 8, 13);
      NativeTypedArrayView nativeTypedArrayView0 = nativeFloat32Array0.construct(nativeArrayBuffer0, 4, 1);
      // Undeclared exception!
      try { 
        nativeTypedArrayView0.getInstanceIdValue(4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(13);
      Object object0 = nativeUint8ClampedArray0.getInstanceIdValue(1);
      assertEquals(0, nativeUint8ClampedArray0.getByteOffset());
      assertEquals(13, nativeUint8ClampedArray0.getByteLength());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 8, 4);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeInt8Array0, "byteOffset");
      assertEquals(8, object0);
      assertEquals(4, nativeInt8Array0.getByteLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array((NativeArrayBuffer) null, 2, 2);
      // Undeclared exception!
      try { 
        nativeFloat32Array0.getAllIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      int int0 = nativeInt32Array0.getByteOffset();
      assertEquals(0, int0);
      assertEquals(0, nativeInt32Array0.getByteLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(239);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 239, 4);
      int int0 = nativeUint32Array0.getByteLength();
      assertEquals(16, int0);
      assertEquals(239, nativeUint32Array0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 13);
      NativeArrayBuffer nativeArrayBuffer1 = nativeFloat64Array0.getBuffer();
      assertNotNull(nativeArrayBuffer1);
      assertEquals(104, nativeFloat64Array0.getByteLength());
      assertEquals(0, nativeFloat64Array0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(0);
      boolean boolean0 = nativeFloat32Array0.has("_Ok6TM7(/AzB", (Scriptable) nativeInt32Array0);
      assertEquals(0, nativeFloat32Array0.getByteLength());
      assertEquals(0, nativeInt32Array0.getByteOffset());
      assertEquals(0, nativeFloat32Array0.getByteOffset());
      assertFalse(boolean0);
      assertEquals(0, nativeInt32Array0.getByteLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeDataView nativeDataView0 = new NativeDataView(nativeArrayBuffer0, 1, 1541);
      Object[] objectArray0 = nativeDataView0.getAllIds();
      assertEquals(3, objectArray0.length);
      assertEquals(1, nativeDataView0.getByteOffset());
      assertEquals(1541, nativeDataView0.getByteLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeInt8Array0, "byteLength");
      assertEquals(0, nativeInt8Array0.getByteOffset());
      assertEquals(0, object0);
  }
}
