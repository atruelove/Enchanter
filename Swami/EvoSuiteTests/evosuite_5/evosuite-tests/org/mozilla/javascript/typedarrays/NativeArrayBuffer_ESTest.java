/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 23:05:58 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeArrayBuffer_ESTest extends NativeArrayBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, "ArrayBuffer", 2, 1);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.initPrototypeId(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeArrayBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeArrayBuffer.init(context0, (Scriptable) null, false);
      assertEquals(14, Context.FEATURE_V8_EXTENSIONS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      int int0 = nativeArrayBuffer0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      Object object0 = nativeArrayBuffer0.getInstanceIdValue(1);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.EMPTY_BUFFER.getInstanceIdValue(13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 13
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.getInstanceIdName(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      byte[] byteArray0 = nativeArrayBuffer0.getBuffer();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeArrayBuffer0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, "ArrayBuffer", 13, 2);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.execIdCall(idFunctionObject0, context0, nativeArrayBuffer0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeArrayBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, "ArrayBuffer", 2, 1);
      Context context0 = Context.enter();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeArrayBuffer nativeArrayBuffer1 = (NativeArrayBuffer)nativeArrayBuffer0.execIdCall(idFunctionObject0, context0, nativeJavaClass0, nativeArrayBuffer0, context0.emptyArgs);
      assertEquals(0, nativeArrayBuffer1.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, "ArrayBuffer", (-3), "ArrayBuffer", 13, nativeArrayBuffer0);
      Context context0 = Context.getCurrentContext();
      Object object0 = idFunctionObject0.call(context0, nativeArrayBuffer0, nativeArrayBuffer0, context0.emptyArgs);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, nativeArrayBuffer0, 1, "ArrayBuffer", 4, nativeArrayBuffer0);
      Object[] objectArray0 = new Object[2];
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(4);
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.execIdCall(idFunctionObject0, (Context) null, idFunctionObject0, nativeUint16Array0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=1 MASTER=org.mozilla.javascript.typedarrays.NativeArrayBuffer@a
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = null;
      try {
        nativeUint8ClampedArray0 = new NativeUint8ClampedArray((-1729293823));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // RangeError: Negative array length -1729293823
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }
}
