/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 23:00:24 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.SymbolKey;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeInt8Array_ESTest extends NativeInt8Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-101));
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      // Undeclared exception!
      try { 
        nativeInt8Array0.set(2, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeInt8Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(852);
      SymbolKey symbolKey0 = SymbolKey.REPLACE;
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 1, (-1992));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, symbolKey0, 4, 1);
      NativeTypedArrayView nativeTypedArrayView0 = nativeInt8Array0.realThis(nativeInt8Array0, idFunctionObject0);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, (-1), 0);
      // Undeclared exception!
      try { 
        nativeInt8Array0.exportAsJSClass(127, nativeArrayBuffer0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(993);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 0, 140);
      Object object0 = nativeInt8Array0.js_set((-1), nativeInt8Array0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(993);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 0, 140);
      Byte byte0 = new Byte((byte) (-101));
      Byte byte1 = nativeInt8Array0.set(0, byte0);
      assertNull(byte1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(3282);
      Object object0 = nativeInt8Array0.js_get((-2681));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(993);
      // Undeclared exception!
      try { 
        NativeInt8Array.init((Context) null, nativeArrayBuffer0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      // Undeclared exception!
      try { 
        nativeInt8Array0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeInt8Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(993);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 0, 140);
      Byte byte0 = nativeInt8Array0.get(53);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      NativeTypedArrayView nativeTypedArrayView0 = nativeInt8Array0.construct(nativeArrayBuffer0, 8, 0);
      assertEquals(8, nativeTypedArrayView0.getByteOffset());
      assertEquals(0, nativeTypedArrayView0.getByteLength());
  }
}
