/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 23:13:26 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeUint32Array_ESTest extends NativeUint32Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(0);
      Long long0 = new Long(180);
      // Undeclared exception!
      try { 
        nativeUint32Array0.set(0, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint32Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(567);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 0, 1245);
      Long long0 = new Long(8);
      Long long1 = nativeUint32Array0.set(1, long0);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(0);
      Object object0 = nativeUint32Array0.js_set(0, "reduce");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(0);
      Object object0 = nativeUint32Array0.js_get(3);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = null;
      try {
        importerTopLevel0 = new ImporterTopLevel(context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 0, 4);
      // Undeclared exception!
      try { 
        nativeUint32Array0.exportAsJSClass(2, nativeArrayBuffer0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(771);
      // Undeclared exception!
      try { 
        nativeUint32Array0.get(771);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint32Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(771);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      nativeUint32Array0.forEach(consumer0);
      assertFalse(nativeUint32Array0.isSealed());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2);
      NativeTypedArrayView nativeTypedArrayView0 = nativeUint32Array0.construct(nativeArrayBuffer0, (-747), 13);
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(1);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, nativeUint32Array0.CONST, 3303, "org.mozilla.javascript.ScriptableObject$SlotAccess", 13, nativeInt16Array0);
      NativeTypedArrayView nativeTypedArrayView1 = nativeUint32Array0.realThis(nativeTypedArrayView0, idFunctionObject0);
      assertEquals((-747), nativeTypedArrayView1.getByteOffset());
      assertEquals(52, nativeTypedArrayView1.getByteLength());
  }
}
