/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 23:18:59 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.typedarrays.ByteIo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteIo_ESTest extends ByteIo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteIo.writeUint8(byteArray0, 2, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteIo.writeFloat64(byteArray0, (byte)0, (byte)81, false);
      assertArrayEquals(new byte[] {(byte)64, (byte)84, (byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteIo.writeFloat32(byteArray0, (byte)0, (byte) (-72), true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-112), (byte) (-62), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteIo.writeInt8(byteArray0, (byte)0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteIo.writeInt32(byteArray0, 0, (-2034), false);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-8), (byte)14, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteIo.writeInt32(byteArray0, 0, (byte)1, true);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteIo.writeFloat64(byteArray0, 0, 0.0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteIo.writeFloat32(byteArray0, (byte)0, (byte)0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        ByteIo.readUint8(byteArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.mozilla.javascript.typedarrays.ByteIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      long long0 = ByteIo.readUint64Primitive(byteArray0, 0, true);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ByteIo.readUint32(byteArray0, 1036, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1036
         //
         verifyException("org.mozilla.javascript.typedarrays.ByteIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Object object0 = ByteIo.readInt8(byteArray0, (byte)0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object object0 = ByteIo.readInt32(byteArray0, (byte)0, true);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object object0 = ByteIo.readInt32(byteArray0, 0, false);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Object object0 = ByteIo.readFloat64(byteArray0, 0, false);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Object object0 = ByteIo.readFloat32(byteArray0, (byte)0, true);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteIo.writeInt16(byteArray0, (byte)1, (-2753), false);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-11), (byte)63, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Object object0 = ByteIo.readInt16(byteArray0, (byte)0, false);
      assertEquals((short)0, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Object object0 = ByteIo.readUint16(byteArray0, 0, true);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteIo byteIo0 = new ByteIo();
  }
}
