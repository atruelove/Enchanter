/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 23:11:58 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeJavaTopPackage;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.SymbolKey;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeTypedArrayView_ESTest extends NativeTypedArrayView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(103);
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = nativeInt8Array0.toArray(objectArray0);
      assertEquals(103, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 1, 0);
      NativeJavaTopPackage[] nativeJavaTopPackageArray0 = new NativeJavaTopPackage[1];
      NativeJavaTopPackage[] nativeJavaTopPackageArray1 = nativeInt8Array0.toArray(nativeJavaTopPackageArray0);
      assertEquals(0, nativeInt8Array0.getArrayLength());
      assertEquals(1, nativeJavaTopPackageArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(106);
      Object[] objectArray0 = nativeInt8Array0.toArray();
      assertEquals(106, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(200);
      // Undeclared exception!
      try { 
        nativeInt8Array0.subList(4446, 553);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      int int0 = nativeInt32Array0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      nativeUint16Array0.setArrayElement(1199, (Object) null);
      assertFalse(nativeUint16Array0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeInt32Array0.retainAll(nativeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeUint8Array0.removeAll(nativeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(1726);
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      // Undeclared exception!
      try { 
        nativeFloat64Array0.remove((Object) nativeArrayBuffer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      // Undeclared exception!
      try { 
        nativeInt32Array0.remove(707);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(111);
      ScriptableObject.putProperty((Scriptable) nativeInt32Array0, (-155342423), (Object) null);
      assertEquals(111, nativeInt32Array0.size());
      assertEquals(111, nativeInt32Array0.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(1347);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 1540, 1540);
      ListIterator<Integer> listIterator0 = nativeUint8Array0.listIterator(8);
      assertTrue(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(1540, nativeUint8Array0.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      // Undeclared exception!
      try { 
        nativeUint8Array0.listIterator(1437);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      ListIterator<Double> listIterator0 = nativeFloat64Array0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(2);
      boolean boolean0 = nativeUint32Array0.isEmpty();
      assertFalse(boolean0);
      assertEquals(2, nativeUint32Array0.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(11);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(200);
      int int0 = nativeInt8Array0.indexOf(nativeUint32Array0);
      assertEquals(200, nativeInt8Array0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(8);
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(nativeArrayBuffer0, 8, 8);
      // Undeclared exception!
      try { 
        nativeUint16Array0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.mozilla.javascript.typedarrays.ByteIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      Object object0 = nativeFloat32Array0.getInstanceIdValue(2);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeUint8Array0, "length", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000004 is not a function, it is object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      Scriptable scriptable0 = ScriptableObject.getClassPrototype(nativeUint32Array0, "BYTES_PER_ELEMENT");
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(4);
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeInt8Array0);
      assertEquals(4, nativeInt8Array0.getArrayLength());
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 0, (-516));
      nativeArrayBuffer0.setExternalArrayData(nativeInt8Array0);
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.getIds();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(13);
      nativeFloat32Array0.getArrayElement(115);
      assertEquals(13, nativeFloat32Array0.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getTypedProperty((Scriptable) nativeUint8Array0, 13, class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot convert undefined to java.lang.Double
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      SymbolKey symbolKey0 = SymbolKey.SPECIES;
      int int0 = nativeUint32Array0.findPrototypeId(symbolKey0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(4);
      // Undeclared exception!
      try { 
        nativeFloat32Array0.getAllIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeFloat64Array0, nativeFloat64Array0, 1, 2);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        nativeFloat64Array0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=1 MASTER=org.mozilla.javascript.typedarrays.NativeFloat64Array@0
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      boolean boolean0 = nativeFloat32Array0.equals(nativeFloat64Array0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(4);
      boolean boolean0 = nativeFloat32Array0.equals(nativeFloat64Array0);
      assertFalse(boolean0);
      assertEquals(4, nativeFloat64Array0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(2);
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 2);
      int int0 = nativeInt32Array0.lastIndexOf(nativeFloat64Array0);
      assertEquals(2, nativeFloat64Array0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(1986);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeFloat32Array0, 13);
      assertFalse(boolean0);
      assertEquals(1986, nativeFloat32Array0.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      NativeArray nativeArray0 = new NativeArray(1);
      boolean boolean0 = nativeInt16Array0.containsAll(nativeArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(2);
      // Undeclared exception!
      try { 
        nativeUint8ClampedArray0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      // Undeclared exception!
      try { 
        nativeFloat64Array0.addAll((Collection<? extends Double>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 1973, 742);
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(nativeArrayBuffer0, 116, 12);
      // Undeclared exception!
      try { 
        nativeUint8ClampedArray0.addAll(1, (Collection<? extends Integer>) nativeUint16Array0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      Double double0 = new Double(2);
      // Undeclared exception!
      try { 
        nativeFloat64Array0.add(double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      // Undeclared exception!
      try { 
        nativeUint16Array0.add(63, (Integer) nativeUint16Array0.UNINITIALIZED_CONST);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeTypedArrayView", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      assertEquals(0, nativeInt32Array0.getArrayLength());
      
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(11);
      boolean boolean0 = nativeUint32Array0.containsAll(nativeInt32Array0);
      assertTrue(boolean0);
      assertEquals(11, nativeUint32Array0.size());
  }
}
