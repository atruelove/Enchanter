/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 23:06:18 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeFloat64Array_ESTest extends NativeFloat64Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      Double double0 = new Double(306.847271201651);
      // Undeclared exception!
      try { 
        nativeFloat64Array0.set(0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeFloat64Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 1);
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 0, 0);
      // Undeclared exception!
      try { 
        nativeFloat64Array0.realThis(nativeUint8ClampedArray0, (IdFunctionObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(455);
      Double double0 = new Double(1.4142135623730951);
      Double double1 = nativeFloat64Array0.set(0, double0);
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(3199);
      Object object0 = nativeFloat64Array0.js_set((-275), (Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 1);
      Object object0 = nativeFloat64Array0.js_get(192);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 2378, 1);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeFloat64Array0.forEach(consumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2378
         //
         verifyException("org.mozilla.javascript.typedarrays.ByteIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(3199);
      // Undeclared exception!
      try { 
        nativeFloat64Array0.get((-4713));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeFloat64Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 0, 1);
      NativeTypedArrayView nativeTypedArrayView0 = nativeFloat64Array0.construct(nativeArrayBuffer0, 8, (-1057));
      NativeTypedArrayView nativeTypedArrayView1 = nativeFloat64Array0.realThis(nativeTypedArrayView0, (IdFunctionObject) null);
      assertEquals(8, nativeTypedArrayView1.getByteOffset());
      assertEquals((-1057), nativeTypedArrayView1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(455);
      Object object0 = nativeFloat64Array0.js_get(69);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeFloat64Array.init(context0, nativeFloat64Array0, false);
      assertEquals("Float64Array", nativeFloat64Array0.getClassName());
      assertEquals(8, nativeFloat64Array0.getBytesPerElement());
  }
}
