/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 04:14:40 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeGlobal;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeGlobal_ESTest extends NativeGlobal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "0Ma";
      Object object0 = NativeGlobal.js_parseInt(objectArray0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) byte0;
      Object object0 = NativeGlobal.js_parseInt(objectArray0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1481));
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) integer0;
      Object object0 = NativeGlobal.js_parseInt(objectArray0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-940));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      Object object0 = NativeGlobal.js_parseInt(objectArray0);
      assertEquals((-940.0), object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " scape";
      Object object0 = NativeGlobal.js_parseInt(objectArray0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      Object object0 = NativeGlobal.js_parseInt(objectArray0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "e}";
      Object object0 = NativeGlobal.js_parseFloat(objectArray0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "e";
      Object object0 = NativeGlobal.js_parseFloat(objectArray0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double(1.5);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) double0;
      Object object0 = NativeGlobal.js_parseFloat(objectArray0);
      assertEquals(1.5, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) "Inifinity";
      Object object0 = NativeGlobal.js_parseFloat(objectArray0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Infinity";
      Object object0 = NativeGlobal.js_parseFloat(objectArray0);
      assertEquals(Double.POSITIVE_INFINITY, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-5);
      Object object0 = NativeGlobal.js_parseFloat(objectArray0);
      assertEquals((-5.0), object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " scape";
      Object object0 = NativeGlobal.js_parseFloat(objectArray0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      Object object0 = NativeGlobal.js_parseFloat(objectArray0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object object0 = NativeGlobal.js_parseFloat(context0.emptyArgs);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeGlobal nativeGlobal0 = new NativeGlobal();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, (-2510), 4);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeGlobal0, nativeGlobal0, 83, "0Ma", 28, nativeInt8Array0);
      boolean boolean0 = NativeGlobal.isEvalFunction(idFunctionObjectES6_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeGlobal nativeGlobal0 = new NativeGlobal();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeGlobal0, nativeGlobal0, 1314, 1314);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        nativeGlobal0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=1314 MASTER=org.mozilla.javascript.NativeGlobal@1
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) importerTopLevel0, true);
      assertSame(scriptableObject0, importerTopLevel0);
  }
}
