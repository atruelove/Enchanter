/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 18:09:11 GMT 2018
 */

package org.mozilla.javascript.v8dtoa;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.v8dtoa.FastDtoa;
import org.mozilla.javascript.v8dtoa.FastDtoaBuilder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDtoa_ESTest extends FastDtoa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDtoaBuilder fastDtoaBuilder0 = new FastDtoaBuilder();
      boolean boolean0 = FastDtoa.numberToString((double) 1000000, fastDtoaBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(675, 675);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(6, 6);
      assertEquals(4294967296L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(31, 17);
      assertEquals(42949672961L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(366, 28);
      assertEquals(429496729602L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDtoaBuilder fastDtoaBuilder0 = new FastDtoaBuilder();
      boolean boolean0 = FastDtoa.numberToString(0.7735871475877097, fastDtoaBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDtoaBuilder fastDtoaBuilder0 = new FastDtoaBuilder();
      boolean boolean0 = FastDtoa.numberToString(1.409848, fastDtoaBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDtoaBuilder fastDtoaBuilder0 = new FastDtoaBuilder();
      boolean boolean0 = FastDtoa.numberToString((double) 51, fastDtoaBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDtoaBuilder fastDtoaBuilder0 = new FastDtoaBuilder();
      boolean boolean0 = FastDtoa.grisu3((-4835449396872013079L), fastDtoaBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = FastDtoa.numberToString((-5139.0690840525895));
      assertNotNull(string0);
      assertEquals("-5139.0690840525895", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(2147483645, 28);
      assertEquals(429496729600000008L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(2145713261, 31);
      assertEquals(4294967296000000009L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen((-1650), 30);
      assertEquals(4294967295L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDtoa fastDtoa0 = new FastDtoa();
  }
}
