/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 00:10:23 GMT 2018
 */

package org.mozilla.javascript.commonjs.module.provider;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.URI;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.commonjs.module.provider.DefaultUrlConnectionExpiryCalculator;
import org.mozilla.javascript.commonjs.module.provider.ModuleSource;
import org.mozilla.javascript.commonjs.module.provider.UrlConnectionExpiryCalculator;
import org.mozilla.javascript.commonjs.module.provider.UrlConnectionSecurityDomainProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlModuleSourceProvider_ESTest extends UrlModuleSourceProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<URI> linkedList0 = new LinkedList<URI>();
      TreeSet<URI> treeSet0 = new TreeSet<URI>(linkedList0);
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(treeSet0, linkedList0);
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        urlModuleSourceProvider0.loadFromUri(uRI0, uRI0, treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar.js");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      URI uRI0 = MockURI.aHttpURI;
      LinkedHashSet<URI> linkedHashSet0 = new LinkedHashSet<URI>();
      DefaultUrlConnectionExpiryCalculator defaultUrlConnectionExpiryCalculator0 = new DefaultUrlConnectionExpiryCalculator();
      linkedHashSet0.add(uRI0);
      UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider0 = mock(UrlConnectionSecurityDomainProvider.class, new ViolatedAssumptionAnswer());
      doReturn(evoSuiteURL0).when(urlConnectionSecurityDomainProvider0).getSecurityDomain(any(java.net.URLConnection.class));
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(linkedHashSet0, linkedHashSet0, (UrlConnectionExpiryCalculator) null, urlConnectionSecurityDomainProvider0);
      ModuleSource moduleSource0 = urlModuleSourceProvider0.loadFromPrivilegedLocations("", defaultUrlConnectionExpiryCalculator0);
      assertNotNull(moduleSource0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PriorityQueue<URI> priorityQueue0 = new PriorityQueue<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(priorityQueue0, priorityQueue0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar.js");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      URI uRI0 = MockURI.aHttpURI;
      priorityQueue0.add(uRI0);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      ModuleSource moduleSource0 = urlModuleSourceProvider0.loadSource("", (Scriptable) nativeUint8Array0, (Object) priorityQueue0);
      assertNotNull(moduleSource0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PriorityQueue<URI> priorityQueue0 = new PriorityQueue<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider((Iterable<URI>) null, priorityQueue0);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      ModuleSource moduleSource0 = urlModuleSourceProvider0.loadSource("", (Scriptable) nativeUint8Array0, (Object) priorityQueue0);
      assertNull(moduleSource0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PriorityQueue<URI> priorityQueue0 = new PriorityQueue<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(priorityQueue0, priorityQueue0);
      URI uRI0 = MockURI.aHttpURI;
      priorityQueue0.add(uRI0);
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(488);
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 1, 0);
      try { 
        urlModuleSourceProvider0.loadFromPrivilegedLocations("msg.varargs.fun", nativeUint8ClampedArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.barmsg.varargs.fun.js
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
}
