/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 00:15:38 GMT 2018
 */

package org.mozilla.javascript.commonjs.module.provider;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.util.LinkedHashSet;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.commonjs.module.provider.DefaultUrlConnectionExpiryCalculator;
import org.mozilla.javascript.commonjs.module.provider.ModuleSource;
import org.mozilla.javascript.commonjs.module.provider.UrlConnectionExpiryCalculator;
import org.mozilla.javascript.commonjs.module.provider.UrlConnectionSecurityDomainProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModuleSourceProviderBase_ESTest extends ModuleSourceProviderBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<URI> linkedHashSet0 = new LinkedHashSet<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(linkedHashSet0, linkedHashSet0);
      URI uRI0 = MockURI.URI("msg.format3");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        urlModuleSourceProvider0.loadSource(uRI0, uRI0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeSet<URI> treeSet0 = new TreeSet<URI>();
      UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider0 = mock(UrlConnectionSecurityDomainProvider.class, new ViolatedAssumptionAnswer());
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(treeSet0, treeSet0, (UrlConnectionExpiryCalculator) null, urlConnectionSecurityDomainProvider0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.RegExp;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) importerTopLevel0;
      Scriptable scriptable0 = context0.newArray((Scriptable) baseFunction0, objectArray0);
      try { 
        urlModuleSourceProvider0.loadSource((String) null, scriptable0, objectArray0[1]);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Illegal character in path at index 0: [object global]/
         //
         verifyException("org.mozilla.javascript.commonjs.module.provider.ModuleSourceProviderBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TreeSet<URI> treeSet0 = new TreeSet<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(treeSet0, treeSet0);
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(2);
      // Undeclared exception!
      try { 
        urlModuleSourceProvider0.loadSource("", (Scriptable) nativeFloat32Array0, (Object) nativeFloat32Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Stack<URI> stack0 = new Stack<URI>();
      DefaultUrlConnectionExpiryCalculator defaultUrlConnectionExpiryCalculator0 = new DefaultUrlConnectionExpiryCalculator();
      UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider0 = mock(UrlConnectionSecurityDomainProvider.class, new ViolatedAssumptionAnswer());
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(stack0, stack0, defaultUrlConnectionExpiryCalculator0, urlConnectionSecurityDomainProvider0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (String) null, (String) null);
      ModuleSource moduleSource0 = urlModuleSourceProvider0.loadSource((String) null, (Scriptable) importerTopLevel0, (Object) uRI0);
      assertNull(moduleSource0);
  }
}
