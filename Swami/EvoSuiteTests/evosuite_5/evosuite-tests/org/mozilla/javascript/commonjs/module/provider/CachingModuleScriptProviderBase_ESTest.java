/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 00:23:13 GMT 2018
 */

package org.mozilla.javascript.commonjs.module.provider;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.commonjs.module.ModuleScript;
import org.mozilla.javascript.commonjs.module.provider.SoftCachingModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.provider.StrongCachingModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlConnectionExpiryCalculator;
import org.mozilla.javascript.commonjs.module.provider.UrlConnectionSecurityDomainProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider;
import org.mozilla.javascript.typedarrays.NativeInt32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CachingModuleScriptProviderBase_ESTest extends CachingModuleScriptProviderBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TreeSet<URI> treeSet0 = new TreeSet<URI>();
      UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider0 = mock(UrlConnectionSecurityDomainProvider.class, new ViolatedAssumptionAnswer());
      doReturn((UrlConnectionExpiryCalculator) null, (UrlConnectionExpiryCalculator) null, treeSet0).when(urlConnectionSecurityDomainProvider0).getSecurityDomain(any(java.net.URLConnection.class));
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(treeSet0, treeSet0, (UrlConnectionExpiryCalculator) null, urlConnectionSecurityDomainProvider0);
      StrongCachingModuleScriptProvider strongCachingModuleScriptProvider0 = new StrongCachingModuleScriptProvider(urlModuleSourceProvider0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar.js");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "msg.only.one.uper");
      SoftCachingModuleScriptProvider softCachingModuleScriptProvider0 = new SoftCachingModuleScriptProvider(urlModuleSourceProvider0);
      Context context0 = Context.enter();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      URI uRI0 = MockURI.aHttpURI;
      softCachingModuleScriptProvider0.getModuleScript(context0, "error reporter", uRI0, uRI0, nativeInt32Array0);
      softCachingModuleScriptProvider0.getModuleScript(context0, "error reporter", uRI0, uRI0, nativeInt32Array0);
      try { 
        strongCachingModuleScriptProvider0.getModuleScript(context0, "language version", uRI0, uRI0, nativeInt32Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // securityDomain should be null if setSecurityController() was never called
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeSet<URI> treeSet0 = new TreeSet<URI>();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar.js");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Y");
      Context context0 = Context.enter();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      URI uRI0 = MockURI.aHttpURI;
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(treeSet0, treeSet0);
      SoftCachingModuleScriptProvider softCachingModuleScriptProvider0 = new SoftCachingModuleScriptProvider(urlModuleSourceProvider0);
      ModuleScript moduleScript0 = softCachingModuleScriptProvider0.getModuleScript(context0, "Y", uRI0, uRI0, nativeInt32Array0);
      ModuleScript moduleScript1 = softCachingModuleScriptProvider0.getModuleScript(context0, "Y", (URI) null, uRI0, nativeInt32Array0);
      assertNotSame(moduleScript1, moduleScript0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TreeSet<URI> treeSet0 = new TreeSet<URI>();
      Context context0 = Context.enter();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      URI uRI0 = MockURI.aHttpURI;
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(treeSet0, treeSet0);
      SoftCachingModuleScriptProvider softCachingModuleScriptProvider0 = new SoftCachingModuleScriptProvider(urlModuleSourceProvider0);
      ModuleScript moduleScript0 = softCachingModuleScriptProvider0.getModuleScript(context0, "Y", (URI) null, uRI0, nativeInt32Array0);
      assertNull(moduleScript0);
  }
}
