/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 06:12:40 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.FunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.JavaAdapter;
import org.mozilla.javascript.NativeArrayIterator;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeNumber;
import org.mozilla.javascript.Script;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "sum");
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      FunctionObject functionObject0 = new FunctionObject("gClssNae", method0, nativeInt32Array0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals("gClssNae", functionObject0.getFunctionName());
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<NativeContinuation> class0 = NativeContinuation.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "isContinuationConstructor");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("isContinuationConstructor", method0, (Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(29);
      FunctionObject functionObject0 = new FunctionObject("intValue", method0, nativeUint8Array0);
      assertEquals(3, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "sum");
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      FunctionObject functionObject0 = new FunctionObject("getClassN:me", method0, nativeInt32Array0);
      Member member0 = functionObject0.getMethodOrConstructor();
      assertEquals("sum", member0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) topLevel0, class0, true, true);
      Constructor constructor0 = (Constructor)functionObject0.getMethodOrConstructor();
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "sum");
      assertNotNull(method0);
      
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeInt32Array0);
      int int0 = functionObject0.getLength();
      assertEquals(29, methodArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "sum");
      assertNotNull(method0);
      
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      FunctionObject functionObject0 = new FunctionObject("gClssNae", method0, nativeInt32Array0);
      String string0 = functionObject0.getFunctionName();
      assertEquals("gClssNae", string0);
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "valueOf");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Method \"valueOf\" occurs multiple times in class \"java.lang.Double\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "sum");
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeInt32Array0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeInt32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: java.lang.Double
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      TopLevel topLevel0 = new TopLevel();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) topLevel0, class0, false, false);
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      Scriptable scriptable0 = baseFunction0.createObject(context0, nativeUint16Array0);
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 2, 13);
      NativeNumber nativeNumber0 = new NativeNumber(1);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg((Context) null, (Scriptable) nativeInt32Array0, (Object) nativeNumber0, (Class<?>) class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Class<NativeNumber> class0 = NativeNumber.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, (Class<?>) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Double double0 = new Double(18);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) double0, 4);
      assertEquals(18.0, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<NativeArrayIterator> class0 = NativeArrayIterator.class;
      Context context0 = Context.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) class0, 3);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.enter();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(12);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeFloat32Array0, (Object) "ArrayBuffer", 2);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeUint16Array0, (Object) "error reporter", 1);
      assertEquals("error reporter", object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 2;
      // Undeclared exception!
      try { 
        baseFunction0.call(context0, importerTopLevel0, importerTopLevel0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "sum");
      assertNotNull(method0);
      
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      FunctionObject functionObject0 = new FunctionObject("gClssNae", method0, nativeInt32Array0);
      assertEquals(2, functionObject0.getArity());
      
      Context context0 = Context.getCurrentContext();
      Object object0 = functionObject0.call(context0, nativeInt32Array0, nativeInt32Array0, methodArray0);
      assertEquals(29, methodArray0.length);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "sum");
      assertNotNull(method0);
      
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeInt32Array0);
      functionObject0.addAsConstructor(nativeInt32Array0, nativeInt32Array0);
      assertEquals(29, methodArray0.length);
      assertEquals(2, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Delegator> class0 = Delegator.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject((String) null, method0, (Scriptable) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"org.mozilla.javascript.Context\" in method \"call\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }
}
