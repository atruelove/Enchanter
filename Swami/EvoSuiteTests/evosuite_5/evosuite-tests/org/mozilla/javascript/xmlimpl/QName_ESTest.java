/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 15:20:11 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.Namespace;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QName_ESTest extends QName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeInt8Array0, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeInt8Array0, xMLList0, xmlNode0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("", "");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = xML0.newQName(xmlNode_QName0);
      QName qName1 = qName0.newQName((XMLLibImpl) null, "&[Ujvx-L.| <iphYb$t", "", "");
      // Undeclared exception!
      try { 
        qName0.constructQName((XMLLibImpl) null, (Context) null, "", qName1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "G-<Sw(qY3 XW,9");
      QName qName0 = QName.create(xMLLibImpl0, (Scriptable) null, (QName) null, xmlNode_QName0);
      XmlNode.QName xmlNode_QName1 = qName0.toNodeQname();
      assertSame(xmlNode_QName0, xmlNode_QName1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      XMLName xMLName0 = XMLName.create("N", "N");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = QName.create(xMLLibImpl0, importerTopLevel0, (QName) null, xmlNode_QName0);
      String string0 = qName0.prefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "G-<Sw(qY3 XW,9");
      QName qName0 = QName.create(xMLLibImpl0, (Scriptable) null, (QName) null, xmlNode_QName0);
      XmlNode.Namespace xmlNode_Namespace1 = XmlNode.Namespace.create("G-<Sw(qY3 XW,9");
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace1);
      QName qName1 = qName0.constructQName(xMLLibImpl1, (Context) null, namespace0, "");
      assertEquals("", qName1.localName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      XMLName xMLName0 = XMLName.formStar();
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = QName.create(xMLLibImpl0, importerTopLevel0, (QName) null, xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.initPrototypeId(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.xmlimpl.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      TopLevel topLevel0 = new TopLevel();
      Scriptable scriptable0 = context0.newArray((Scriptable) topLevel0, context0.emptyArgs);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("error reporter");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "WZg.AdJ22u?0GCJ?Sj");
      QName qName0 = QName.create(xMLLibImpl0, scriptable0, (QName) null, xmlNode_QName0);
      qName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "pN4JYssd:2g");
      QName qName0 = QName.create(xMLLibImpl0, (Scriptable) null, (QName) null, xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.getInstanceIdValue(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "error reporter");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      Object object0 = qName0.getInstanceIdValue(1);
      assertEquals("error reporter", object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      TopLevel topLevel0 = new TopLevel();
      Scriptable scriptable0 = context0.newArray((Scriptable) topLevel0, context0.emptyArgs);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "error reporter");
      QName qName0 = QName.create(xMLLibImpl0, scriptable0, (QName) null, xmlNode_QName0);
      Object object0 = qName0.getInstanceIdValue(2);
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("msg.ba^d.rmnge", "msg.ba^d.rmnge");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "msg.ba^d.rmnge");
      QName qName0 = QName.create(xMLLibImpl0, (Scriptable) null, (QName) null, xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.getInstanceIdName(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      BaseFunction baseFunction0 = new BaseFunction();
      XMLName xMLName0 = XMLName.formProperty("", "");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      QName qName0 = QName.create(xMLLibImpl0, baseFunction0, (QName) null, xmlNode_QName0);
      XmlNode.QName xmlNode_QName1 = qName0.getDelegate();
      assertSame(xmlNode_QName0, xmlNode_QName1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "QName", "QName");
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("QName", "QName");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "QName");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, xMLList0, xmlNode0);
      QName qName0 = xML0.newQName(xmlNode_QName0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(xML0, "QName", 7, "language version", 8, qName0);
      // Undeclared exception!
      try { 
        qName0.execIdCall(idFunctionObjectES6_0, context0, idFunctionObjectES6_0, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7
         //
         verifyException("org.mozilla.javascript.xmlimpl.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "G-<Sw(qY3 XW,9");
      QName qName0 = QName.create(xMLLibImpl0, (Scriptable) null, (QName) null, xmlNode_QName0);
      Object object0 = qName0.equivalentValues(qName0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      XMLName xMLName0 = XMLName.create("N", "N");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = QName.create(xMLLibImpl0, importerTopLevel0, (QName) null, xmlNode_QName0);
      boolean boolean0 = qName0.equals(qName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "pN4JYssd:2g");
      QName qName0 = QName.create(xMLLibImpl0, (Scriptable) null, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.getCurrentContext();
      QName qName1 = qName0.constructQName(xMLLibImpl1, context0, "*");
      assertEquals("*", qName1.localName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      TopLevel topLevel0 = new TopLevel();
      Scriptable scriptable0 = context0.newArray((Scriptable) topLevel0, context0.emptyArgs);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "error reporter");
      QName qName0 = QName.create(xMLLibImpl0, scriptable0, (QName) null, xmlNode_QName0);
      IdFunctionObject idFunctionObject0 = qName0.exportAsJSClass(8, scriptable0, true);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      // Undeclared exception!
      try { 
        qName0.execIdCall(idFunctionObject0, context0, topLevel0, nativeInt8Array0, context0.emptyArgs);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl0, (Scriptable) null, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "QName", "QName");
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("QName", "QName");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "QName");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, xMLList0, xmlNode0);
      QName qName0 = xML0.newQName(xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      QName qName1 = qName0.constructQName(xMLLibImpl1, context0, qName0);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeInt8Array0, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeInt8Array0, xMLList0, xmlNode0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("", "");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = xML0.newQName(xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.constructQName((XMLLibImpl) null, (Context) null, "", qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "LU+IS!d[#I@_1H9");
      QName qName0 = QName.create(xMLLibImpl0, (Scriptable) null, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.castToQName(xMLLibImpl1, (Context) null, qName0);
      assertEquals(0, ScriptableObject.EMPTY);
  }
}
