/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 14:49:22 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XMLObjectImpl;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLList_ESTest extends XMLList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 130, 8);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint32Array0, (XMLObject) null);
      XMLList xMLList1 = (XMLList)xMLList0.valueOf();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      // Undeclared exception!
      try { 
        xMLList0.toSource((-1090));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      String string0 = xMLList0.toSource((-1090));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLList xMLList1 = xMLList0.text();
      assertNotSame(xMLList1, xMLList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLName xMLName0 = XMLName.formStar();
      xMLList0.putXMLProperty(xMLName0, (Object) null);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lists with more than one item is not supported", "Assignment to lists with more than one item is not supported");
      XMLList xMLList0 = xML0.elements(xMLName0);
      // Undeclared exception!
      try { 
        xMLList0.putXMLProperty(xMLName0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(3530);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lits with more thanone item is not supported", "");
      XMLList xMLList0 = xML0.elements(xMLName0);
      // Undeclared exception!
      try { 
        xMLList0.putXMLProperty(xMLName0, xMLList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Assignment to empty XMLList without targets not supported
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, nativeInt16Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formStar();
      XMLList xMLList0 = xML0.elements(xMLName0);
      xMLList0.put(0, (Scriptable) xML0, (Object) xML0);
      assertEquals("XMLList", xMLList0.getClassName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, false);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(6);
      // Undeclared exception!
      try { 
        xMLList0.put((-4655), (Scriptable) xML0, (Object) xML0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(6);
      // Undeclared exception!
      try { 
        xMLList0.put((-1), (Scriptable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.children();
      Double double0 = new Double(0.0);
      boolean boolean0 = xMLList0.propertyIsEnumerable(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      Double double0 = new Double(2401.43808164921);
      boolean boolean0 = xMLList0.propertyIsEnumerable(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.TRUE;
      boolean boolean0 = xMLList0.propertyIsEnumerable(xmlNode_Filter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLName xMLName0 = XMLName.formProperty("error reporter", "!n?;zn");
      XMLList xMLList1 = xMLList0.processingInstructions(xMLName0);
      assertNotSame(xMLList1, xMLList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      Object object0 = xMLList0.parent();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      xMLList0.normalize();
      assertFalse(xMLList0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lists with more than one item is not supported", "Assignment to lists with more than one item is not supported");
      XMLList xMLList0 = xML0.elements(xMLName0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) xMLList0;
      Object object0 = xMLList0.jsConstructor((Context) null, false, objectArray0);
      assertSame(object0, xMLList0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lists with more than one item is not supported", "Assignment to lists with more than one item is not supported");
      XMLList xMLList0 = xML0.elements(xMLName0);
      Object[] objectArray0 = new Object[1];
      XMLList xMLList1 = (XMLList)xMLList0.jsConstructor((Context) null, false, objectArray0);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(3530);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lists with more than one item is not supported", "Assignment to lists with more than one item is not supported");
      XMLList xMLList0 = xML0.elements(xMLName0);
      Context context0 = Context.enter();
      XMLList xMLList1 = (XMLList)xMLList0.jsConstructor(context0, false, context0.emptyArgs);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      xMLList0.remove();
      assertEquals("xml", xMLList0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      String string0 = xMLList0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(3530);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("apply", "apply");
      XMLList xMLList0 = xML0.elements(xMLName0);
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      boolean boolean0 = xMLList0.hasComplexContent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      boolean boolean0 = xMLList0.hasComplexContent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, nativeInt16Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) xMLList0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, nativeInt16Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formStar();
      XMLList xMLList0 = xML0.elements(xMLName0);
      QName qName0 = xMLList0.newQName(xmlNode_QName0);
      // Undeclared exception!
      try { 
        xMLList0.put((-1), (Scriptable) xMLList0, (Object) qName0.PERMANENT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(3530);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("apply", "apply");
      XMLList xMLList0 = xML0.elements(xMLName0);
      XML xML1 = xMLList0.getXML();
      assertNull(xML1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLName xMLName0 = XMLName.create("(vIVZdo~eV6oo", "error reporter");
      Object object0 = xMLList0.getXMLProperty(xMLName0);
      assertNotSame(object0, xMLList0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lists with more than one item is not supported", "");
      XMLList xMLList0 = xML0.elements(xMLName0);
      boolean boolean0 = xMLList0.hasXMLProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 2, 4);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint32Array0, (XMLObject) null);
      XmlNode.InternalList xmlNode_InternalList0 = xMLList0.getNodeList();
      assertNotNull(xmlNode_InternalList0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 2, 4);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint32Array0, (XMLObject) null);
      Object[] objectArray0 = xMLList0.getIdsForDebug();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 130, 8);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint32Array0, (XMLObject) null);
      String string0 = xMLList0.getClassName();
      assertEquals("XMLList", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(3530);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("apply", "apply");
      XMLList xMLList0 = xML0.elements(xMLName0);
      Class<IdFunctionObjectES6> class0 = IdFunctionObjectES6.class;
      IdFunctionObjectES6 idFunctionObjectES6_0 = ScriptableObject.getTypedProperty((Scriptable) xMLList0, (-2108478444), class0);
      assertNull(idFunctionObjectES6_0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(3530);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("call", "call");
      XMLList xMLList0 = xML0.elements(xMLName0);
      Object object0 = xMLList0.equivalentValues(xMLList0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "language version", "language version");
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLName xMLName0 = XMLName.create((XmlNode.QName) null, true, true);
      XMLList xMLList1 = xMLList0.elements(xMLName0);
      assertNotSame(xMLList1, xMLList0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLName xMLName0 = XMLName.formStar();
      xMLList0.deleteXMLProperty(xMLName0);
      assertTrue(xMLList0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(3530);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("call", "call");
      XMLList xMLList0 = xML0.elements(xMLName0);
      xMLList0.delete(0);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeObject nativeObject0 = new NativeObject();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLObjectImpl xMLObjectImpl0 = xMLList0.copy();
      assertNotSame(xMLObjectImpl0, xMLList0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      boolean boolean0 = xMLList0.contains("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(179);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, nativeInt16Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(nativeArrayBuffer0, 180, 970);
      // Undeclared exception!
      try { 
        xMLList0.construct(context0, nativeFloat64Array0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: \"XMLList\" is not a constructor.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLList xMLList1 = xMLList0.comments();
      assertNotSame(xMLList1, xMLList0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLList xMLList1 = xMLList0.children();
      assertFalse(xMLList1.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lists with more than one item is not supported", "");
      XMLList xMLList0 = xML0.elements(xMLName0);
      XMLList xMLList1 = xMLList0.processingInstructions(xMLName0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Byte byte0 = new Byte((byte)1);
      xMLList1.put(context0, (Object) byte0, (Object) xML0);
      XMLList xMLList2 = xMLList1.child(xMLName0);
      assertNotSame(xMLList1, xMLList0);
      assertNotSame(xMLList2, xMLList1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, true);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      XMLList xMLList1 = xMLList0.child(10);
      assertNotSame(xMLList1, xMLList0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lists with more than one item is not supported", "");
      XMLList xMLList0 = xML0.elements(xMLName0);
      XMLList xMLList1 = xMLList0.processingInstructions(xMLName0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Byte byte0 = new Byte((byte)1);
      xMLList1.put(context0, (Object) byte0, (Object) xML0);
      // Undeclared exception!
      try { 
        xMLList0.call(context0, xML0, xMLList1, context0.emptyArgs);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(3530);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lists with more than one item is not supported", "Assignment to lists with more than one item is not supported");
      XMLList xMLList0 = xML0.elements(xMLName0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xMLList0.call(context0, nativeUint8Array0, nativeUint8Array0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"Assignment to lists with more than one item is not supported\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("Assignment to lists with more than one item is not supported", "");
      XMLList xMLList0 = xML0.elements(xMLName0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        xMLList0.call(context0, xML0, xMLList0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find function  in object .
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 2, 4);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint32Array0, (XMLObject) null);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        xMLList0.call(context0, (Scriptable) null, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: org.mozilla.javascript.xmlimpl.XMLList@0000000006 is not a function, it is xml.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(3530);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("apply", "apply");
      XMLList xMLList0 = xML0.elements(xMLName0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        xMLList0.call(context0, nativeUint8Array0, nativeUint8Array0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: apply is not a function, it is {1}.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, false);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.put(130, (Scriptable) xML0, (Object) xML0);
      // Undeclared exception!
      try { 
        xMLList0.addMatches(xMLList0, (XMLName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XML", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects((ScriptableObject) null, false);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, scriptableObject0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      xMLList0.addMatches(xMLList0, (XMLName) null);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }
}
