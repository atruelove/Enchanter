/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 14:37:54 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlNode_ESTest extends XmlNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("", "");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      String string0 = xmlNode_QName0.toString();
      assertEquals("XmlNode.QName [,XmlNode.Namespace [{}]]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLName xMLName0 = XMLName.formProperty("mq6Q1VCZ%X3Z", "-nJcqS (H!iU.+/>%F");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      // Undeclared exception!
      try { 
        XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "-nJcqS (H!iU.+/>%F");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.TextImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "K");
      boolean boolean0 = xmlNode_QName0.equals("K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      boolean boolean0 = xmlNode_Namespace0.isGlobal();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      boolean boolean0 = xmlNode_Namespace0.isDefault();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlNode.Namespace.create("e:+#wc:$mz^GO~qj", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Namespace may not lack a URI
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create((String) null);
      assertNotNull(xmlNode_Namespace0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      // Undeclared exception!
      try { 
        xmlNode_InternalList0.remove(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, (String) null);
      xmlNode_InternalList0.addToList(xmlNode0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "UGM", "UGM");
      xmlNode_InternalList0.add(xmlNode0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      // Undeclared exception!
      try { 
        xmlNode_InternalList0.add(xmlNode_InternalList0, 8, 531);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      xmlNode_InternalList0.add(xmlNode_InternalList0, 7, 7);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      xmlNode_InternalList0.add(xmlNode_InternalList0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      XML xML0 = new XML((XMLLibImpl) null, (Scriptable) null, (XMLObject) null, xmlNode0);
      xmlNode_InternalList0.add(xML0);
      // Undeclared exception!
      xmlNode_InternalList0.add(xmlNode_InternalList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.InternalList xmlNode_InternalList0 = new XmlNode.InternalList();
      XML xML0 = xmlNode0.getXml();
      // Undeclared exception!
      try { 
        xmlNode_InternalList0.add(xML0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$InternalList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("yaK", "yaK");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.ELEMENT;
      xmlNode0.addMatchingChildren((XMLList) null, xmlNode_Filter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "n");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "n", "n");
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "n");
      XmlNode xmlNode2 = xmlNode1.copy();
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.TEXT;
      XmlNode[] xmlNodeArray0 = xmlNode2.getMatchingChildren(xmlNode_Filter0);
      assertEquals(1, xmlNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      XmlNode.Filter xmlNode_Filter0 = XmlNode.Filter.PROCESSING_INSTRUCTION(xMLName0);
      assertNotNull(xmlNode_Filter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "");
      String string0 = xmlNode0.toXmlString(xmlProcessor0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, (String) null);
      String string0 = xmlNode0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "n");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, (String) null);
      xmlNode1.setLocalName("n");
      assertNotSame(xmlNode0, xmlNode1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode xmlNode1 = XmlNode.createText(xmlProcessor0, "");
      // Undeclared exception!
      try { 
        xmlNode0.replaceWith(xmlNode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("yaK", "yaK");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      xmlNode0.renameNode(xmlNode_QName0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("yaK", "yaK");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("yaK");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      xmlNode0.removeNamespace(xmlNode_Namespace0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("yaK", "yaK");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("yaK", "yaK");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      xmlNode0.setAttribute(xmlNode_QName0, (String) null);
      xmlNode0.removeNamespace(xmlNode_Namespace0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("yaK", "yaK");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      xmlNode0.removeChild(0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "n");
      xmlNode0.normalize();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      boolean boolean0 = xmlNode0.isSameNode(xmlNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "");
      boolean boolean0 = xmlNode0.isParentType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "n");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "n", "n");
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, (String) null);
      // Undeclared exception!
      try { 
        xmlNode1.invalidateNamespacePrefix();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty string represents default namespace prefix
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode$Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "K");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "K", "K");
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, (String) null);
      XmlNode[] xmlNodeArray0 = new XmlNode[3];
      xmlNodeArray0[0] = xmlNode0;
      xmlNodeArray0[1] = xmlNode0;
      xmlNodeArray0[2] = xmlNode0;
      xmlNode1.insertChildrenAt(0, xmlNodeArray0);
      assertNotSame(xmlNode0, xmlNode1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "n");
      // Undeclared exception!
      try { 
        xmlNode0.insertChildAt((-316), xmlNode0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, (String) null);
      // Undeclared exception!
      try { 
        xmlNode0.insertChildAt(48, xmlNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index=48 length=0
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "n");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "n");
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "n");
      boolean boolean0 = xmlNode1.hasChildElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      Node node0 = xmlProcessor0.toXml("qKP?UAf8km4~%fa", "qKP?UAf8km4~%fa");
      xmlNode_QName0.lookupPrefix(node0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.Namespace[] xmlNode_NamespaceArray0 = xmlNode0.getNamespaceDeclarations();
      assertEquals(0, xmlNode_NamespaceArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, (String) null);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespace();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "WZky##9,");
      boolean boolean0 = xmlNode_QName0.equals(xmlNode_QName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "* is not valid localName");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "ArrayBuffer");
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "* is not valid localName");
      XML xML0 = new XML(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null, xmlNode1);
      XMLList xMLList0 = xML0.children();
      assertFalse(xMLList0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "yaK");
      XmlNode.Namespace xmlNode_Namespace1 = XmlNode.Namespace.create("yaK");
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      xmlNode0.removeNamespace(xmlNode_Namespace1);
      assertNotSame(xmlNode_Namespace1, xmlNode_Namespace0);
      assertNotSame(xmlNode_Namespace0, xmlNode_Namespace1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "K", "K");
      int int0 = xmlNode0.getChildIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "+42 L?$ QS(12TV/", "+42 L?$ QS(12TV/");
      int int0 = xmlNode0.getChildCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, (String) null);
      // Undeclared exception!
      try { 
        xmlNode0.getChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("yaK", "yaK");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      xmlNode0.setAttribute(xmlNode_QName0, "Empty string represents default namespace prefix");
      XmlNode[] xmlNodeArray0 = xmlNode0.getAttributes();
      assertEquals(1, xmlNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "B`J,'-W\"#=}s");
      // Undeclared exception!
      try { 
        xmlNode0.getAttributeValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.TextImpl cannot be cast to org.w3c.dom.Attr
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "K");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "K", "K");
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, (String) null);
      XmlNode xmlNode2 = xmlNode1.copy();
      // Undeclared exception!
      try { 
        xmlNode2.ecmaValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unimplemented ecmaValue() for elements.
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "K", "K");
      String string0 = xmlNode0.ecmaValue();
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("yaK", "yaK");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      xmlNode0.deleteMe();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "#_EB%AQB;PC;Es", "#_EB%AQB;PC;Es");
      String string0 = xmlNode0.debug();
      assertEquals("#_EB%AQB;PC;Es", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      String string0 = xmlNode0.ecmaToXMLString(xmlProcessor0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      Document document0 = xmlProcessor0.newDocument();
      // Undeclared exception!
      try { 
        XmlNode.createElementFromNode(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "Interpreter frames not found", "Interpreter frames not found");
      Node node0 = xmlNode0.toDomNode();
      XmlNode xmlNode1 = XmlNode.createElementFromNode(node0);
      assertSame(xmlNode1, xmlNode0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "n");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "n");
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "n");
      xmlNode1.declareNamespace("n", "n");
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode1.getNamespaceDeclaration();
      assertNotNull(xmlNode_Namespace0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("yaK", "yaK");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      xmlNode0.setAttribute(xmlNode_QName0, (String) null);
      String string0 = xmlNode0.ecmaToXMLString(xmlProcessor0);
      assertEquals("<yaK xmlns=\"yaK\" xmlns:ns0=\"yaK\" ns0:yaK=\"\">yaK</yaK>", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XMLName xMLName0 = XMLName.create("yaK", "yaK");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XmlNode xmlNode0 = XmlNode.newElementWithText(xmlProcessor0, (XmlNode) null, xmlNode_QName0, "yaK");
      XmlNode.Namespace[] xmlNode_NamespaceArray0 = xmlNode0.getNamespaceDeclarations();
      assertEquals(1, xmlNode_NamespaceArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "* is not valid localName");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "ArrayBuffer");
      XmlNode xmlNode1 = XmlNode.newElementWithText(xmlProcessor0, xmlNode0, xmlNode_QName0, "* is not valid localName");
      XML xML0 = new XML(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null, xmlNode1);
      XMLList xMLList0 = xML0.comments();
      assertFalse(xMLList0.avoidObjectDetection());
  }
}
