/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 14:54:56 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLName_ESTest extends XMLName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("", "");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "", "");
      XML xML0 = new XML(xMLLibImpl0, nativeInt8Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.processingInstructions(xMLName0);
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn((XML) null, xMLList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeInt8Array0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.text();
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn((XML) null, xMLList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("^+*<ol40\"Q5~$X@7}", "+h#Sxmu");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      xMLName0.setAttributeName();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "+h#Sxmu", "+h#Sxmu");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn(xML0, xML0.PERMANENT);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can only set attributes on elements.
         //
         verifyException("org.mozilla.javascript.xmlimpl.XML", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("9LH\"]25C8^0", "9LH\"]25C8^0");
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "3");
      Context context0 = Context.getCurrentContext();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "9LH\"]25C8^0");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xMLName0.getMyValueOn(xML0);
      xMLName0.initXMLObject(xMLList0);
      // Undeclared exception!
      try { 
        xMLName0.set(context0, (Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("9LH\"]25C8^0", "9LH\"]25C8^0");
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "3");
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        xMLName0.set(context0, (Object) context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot set property \"\"9LH\"]25C8^0\":3\" of undefined to \"null\"
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("={", "={");
      boolean boolean0 = xMLName0.matchesLocalName("error reporter");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("language version", "error reporter");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "language version");
      boolean boolean0 = xMLName0.matchesElement(xmlNode_QName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("T)peError", "T)peError");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "T)peError");
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      boolean boolean0 = xMLName0.matchesElement(xmlNode_QName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeInt8Array0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty((XmlNode.Namespace) null, "r^\"VQ46+1");
      boolean boolean0 = xMLName0.matches(xML0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("^+*<ol40\"Q5~$X@7}", "+h#Sxmu");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      xMLName0.setAttributeName();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "+h#Sxmu", "+h#Sxmu");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      boolean boolean0 = xMLName0.matches(xML0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = XMLName.accept("_}.j_*'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = XMLName.accept("G4-\"V[]wi4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = XMLName.accept(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      Context context0 = Context.getCurrentContext();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "9LH\"]25C8^0");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xMLName0.getMyValueOn(xML0);
      xMLName0.initXMLObject(xMLList0);
      boolean boolean0 = xMLName0.has(context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("={", "={");
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = xMLName0.has(context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      Context context0 = Context.getCurrentContext();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xMLName0.getMyValueOn(xML0);
      xMLName0.initXMLObject(xMLList0);
      XMLList xMLList1 = (XMLList)xMLName0.get(context0);
      assertFalse(xMLList1.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLName xMLName0 = XMLName.formStar();
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        xMLName0.get(context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot read property \"*\" from undefined
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("9LH\"]25C8@0", "9LH\"]25C8@0");
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "9LH\"]25C8@0");
      Context context0 = Context.getCurrentContext();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "9LH\"]25C8@0");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xMLName0.getMyValueOn(xML0);
      xMLName0.initXMLObject(xMLList0);
      boolean boolean0 = xMLName0.delete(context0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("9LH\"]25C8@0", "9LH\"]25C8@0");
      XMLName xMLName0 = XMLName.formProperty(xmlNode_Namespace0, "9LH\"]25C8@0");
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = xMLName0.delete(context0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("*-4u<N-7zLKOP%:v", "*-4u<N-7zLKOP%:v");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      XMLName xMLName1 = XMLName.create(xmlNode_QName0);
      assertFalse(xMLName1.equals((Object)xMLName0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("@DxdKY,F~iP|]:", "@DxdKY,F~iP|]:");
      assertNotNull(xMLName0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("MPq", "*");
      assertNotNull(xMLName0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("*BRi\"vp*@", "*BRi\"vp*@");
      // Undeclared exception!
      try { 
        xMLName0.setMyValueOn((XML) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLName.create("language version", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLName", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLName xMLName0 = XMLName.create((String) null, "aZAg[[[&fiPLR");
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      BaseFunction baseFunction0 = new BaseFunction();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, baseFunction0, (XMLObject) null);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "aZAg[[[&fiPLR");
      XML xML0 = new XML(xMLLibImpl1, baseFunction0, xMLList0, xmlNode0);
      xMLName0.setIsDescendants();
      xMLName0.setMyValueOn(xML0, xML0);
      assertFalse(xML0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      BaseFunction baseFunction0 = new BaseFunction();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, baseFunction0, (XMLObject) null);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "aZAg[[[&fiPLR");
      XML xML0 = new XML(xMLLibImpl1, baseFunction0, xMLList0, xmlNode0);
      XMLName xMLName0 = XMLName.create((XmlNode.QName) null, true, true);
      XMLList xMLList1 = xML0.getPropertyList(xMLName0);
      assertFalse(xMLList1.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLName xMLName0 = XMLName.create("^+*<ol40\"Q5~$X@7}", "+h#Sxmu");
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      xMLName0.setAttributeName();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "+h#Sxmu", "+h#Sxmu");
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      xMLName0.addMatches((XMLList) null, xML0);
      assertTrue(xML0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = XMLName.accept((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      BaseFunction baseFunction0 = new BaseFunction();
      XMLList xMLList0 = new XMLList(xMLLibImpl0, baseFunction0, (XMLObject) null);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "aZAg[[[&fiPLR");
      XML xML0 = new XML(xMLLibImpl1, baseFunction0, xMLList0, xmlNode0);
      boolean boolean0 = XMLName.accept(xML0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      boolean boolean0 = XMLName.accept(nativeInt8Array0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = XMLName.accept("&Cl)V_");
      assertFalse(boolean0);
  }
}
