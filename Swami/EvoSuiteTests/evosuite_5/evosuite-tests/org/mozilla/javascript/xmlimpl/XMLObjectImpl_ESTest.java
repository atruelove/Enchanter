/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 15:00:50 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Ref;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.Namespace;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XMLName;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLObjectImpl_ESTest extends XMLObjectImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespaceDeclaration();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "ArrayBuffer");
      XML xML1 = xML0.newTextElementXML(xmlNode0, xmlNode_QName0, "ArrayBuffer");
      XMLName xMLName0 = XMLName.formProperty("ArrayBuffer", "0GD^@d@+-%; e4jY");
      XMLList xMLList0 = xML1.text();
      xMLList0.deleteXMLProperty(xMLName0);
      assertEquals("XMLList", xMLList0.getClassName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xML0.put(context0, (Object) contextFactory0, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      // Undeclared exception!
      try { 
        xMLList0.put(655, (Scriptable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      XMLName xMLName0 = XMLName.create("ArrayBuffer", "");
      XmlNode.QName xmlNode_QName0 = xMLName0.toQname();
      QName qName0 = xMLList0.newQName(xmlNode_QName0);
      assertFalse(qName0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      // Undeclared exception!
      try { 
        xMLList0.newQName("", "", "Can not construct XML name from boolean: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 4);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      Context context0 = Context.getCurrentContext();
      Ref ref0 = xML0.memberRef(context0, (Object) null, (Object) null, 13);
      assertNotNull(ref0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child(4);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        xML0.memberRef(context0, (Object) xMLList0, 17);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xML0.initPrototypeId((-1217));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1217
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLObjectImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      boolean boolean0 = xML0.hasInstance(nativeArrayBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xML0.has(context0, (Object) "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xMLLibImpl0).toString();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      XMLLibImpl xMLLibImpl1 = xMLList0.getLib();
      assertFalse(xMLLibImpl1.isIgnoreProcessingInstructions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl1, xML0, xML0);
      xMLList0.setPrototype(nativeUint8ClampedArray0);
      Context context0 = Context.enter();
      Object object0 = xMLList0.getFunctionProperty(context0, "k30");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl1, xML0, xML0);
      Context context0 = Context.enter();
      Object object0 = xMLList0.getFunctionProperty(context0, "");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl1, xML0, xML0);
      xMLList0.setPrototype(nativeUint8ClampedArray0);
      Context context0 = Context.enter();
      Object object0 = xMLList0.getFunctionProperty(context0, (-135));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl1, xML0, xML0);
      Context context0 = Context.enter();
      Object object0 = xMLList0.getFunctionProperty(context0, (-135));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      XMLName xMLName0 = XMLName.formStar();
      Context context0 = Context.enter();
      XMLList xMLList1 = (XMLList)xMLList0.get(context0, (Object) xMLName0);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("0GD^@d@+ -%; esjYZ", "namespaceDeclarations");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("ArrayBuffer", "$]t@hTZrl)g~3K@=I");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      int int0 = xMLList0.findPrototypeId("language version");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("ArrayBuffer", "GD^@d@+-%; e4jY");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      int int0 = xMLList0.findPrototypeId("error reporter");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("0GD^@d@+ -%; esjYZ", "addNamespace");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      XMLName xMLName0 = XMLName.create("", "ArrayBuffer");
      boolean boolean0 = xMLList0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("0GD^@d@+ -%; esjYZ", "contJVains");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("0GD^@d@+ -%; esjYZ", "contVains");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formProperty("Sconains", "Sconains");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("0GD^@d@+ -%; esjYZ", "Zontains");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      int int0 = xML0.findPrototypeId("elements");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 4);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      int int0 = xML0.findPrototypeId("toString");
      assertEquals(38, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 4);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("0GD^@d@+ -%; esjYZ", "Zontans");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("0GD^@d@+ -%; esjYZ", "Zocais");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 4);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("0GD^@d@+ -%; esjYZ", "+^lo!");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 4);
      XML xML0 = new XML((XMLLibImpl) null, idFunctionObject0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.create("0GD^@d@+ -%; esjYZ", "}f\"{");
      boolean boolean0 = xML0.hasOwnProperty(xMLName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(13);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      xML0.exportAsJSClass(true);
      assertTrue(xML0.isSealed());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      Namespace[] namespaceArray0 = xML0.inScopeNamespaces();
      Context context0 = Context.enter();
      IdFunctionObject idFunctionObject0 = xML0.exportAsJSClass(103, nativeUint8ClampedArray0, false);
      xMLList0.execIdCall(idFunctionObject0, context0, idFunctionObject0, xMLList0, namespaceArray0);
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals(1, idFunctionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 4);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        xML0.execIdCall(idFunctionObject0, context0, (Scriptable) null, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=0 MASTER=org.mozilla.javascript.typedarrays.NativeArrayBuffer@b
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      Object object0 = xML0.equivalentValues(nativeUint8ClampedArray0.DONTENUM);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      NativeWith nativeWith0 = xML0.enterWith((Scriptable) null);
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2080);
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, (-25), 1);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "H;3Qy|T`wqd;");
      XML xML0 = new XML(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formStar();
      XMLList xMLList0 = xML0.getPropertyList(xMLName0);
      NativeWith nativeWith0 = xMLList0.enterDotQuery(nativeInt32Array0);
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      // Undeclared exception!
      try { 
        xML0.ecmaToXml((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot convert null to XML
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(2080);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xMLLibImpl0).escapeAttributeValue(any());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "H;3Qy|T`wqd;");
      XML xML0 = new XML(xMLLibImpl0, nativeArrayBuffer0, (XMLObject) null, xmlNode0);
      XMLName xMLName0 = XMLName.formStar();
      XMLList xMLList0 = xML0.getPropertyList(xMLName0);
      // Undeclared exception!
      try { 
        xMLList0.ecmaEscapeAttributeValue("H;3Qy|T`wqd;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLObjectImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      XMLName xMLName0 = XMLName.formStar();
      Context context0 = Context.enter();
      boolean boolean0 = xMLList0.delete(context0, (Object) xMLName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      Context context0 = Context.enter();
      boolean boolean0 = xMLList0.delete(context0, (Object) context0.VERSION_1_3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 2, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xML0.child((-2715));
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      // Undeclared exception!
      try { 
        xMLList0.createNamespace(xmlNode_Namespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      XMLName xMLName0 = XMLName.create(xmlNode_QName0, false, false);
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "#1u%:zW$", (String) null);
      XML xML0 = new XML(xMLLibImpl0, (Scriptable) null, (XMLObject) null, xmlNode0);
      XMLList xMLList0 = xMLName0.getMyValueOn(xML0);
      // Undeclared exception!
      try { 
        xMLList0.createEmptyXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XmlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, (Object) null, 0, 0);
      XML xML0 = new XML(xMLLibImpl0, idFunctionObject0, (XMLObject) null, xmlNode0);
      Context context0 = Context.getCurrentContext();
      Object object0 = xML0.addValues(context0, false, "0GD^@d@+ -%; esjYZ");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(13);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "");
      XML xML0 = new XML(xMLLibImpl0, nativeUint8ClampedArray0, (XMLObject) null, xmlNode0);
      Context context0 = Context.getCurrentContext();
      XMLList xMLList0 = (XMLList)xML0.addValues(context0, false, xML0);
      assertFalse(xMLList0.hasPrototypeMap());
  }
}
