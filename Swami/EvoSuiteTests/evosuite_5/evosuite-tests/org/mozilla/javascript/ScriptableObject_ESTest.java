/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 03:53:32 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Arguments;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.ExternalArrayData;
import org.mozilla.javascript.FunctionObject;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.LazilyLoadedCtor;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeBoolean;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeError;
import org.mozilla.javascript.NativeIterator;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeJavaTopPackage;
import org.mozilla.javascript.NativeNumber;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.NativeString;
import org.mozilla.javascript.NativeStringIterator;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Symbol;
import org.mozilla.javascript.SymbolKey;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScriptableObject.KeyComparator scriptableObject_KeyComparator0 = new ScriptableObject.KeyComparator();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      HashMap<Arguments, Short> hashMap0 = new HashMap<Arguments, Short>(nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Delegator delegator0 = new Delegator();
      nativeCall0.setGetterOrSetter("size", 0, delegator0, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        nativeError0.setGetterOrSetter("error reporter", 8, delegator0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error reporter
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Delegator delegator0 = new Delegator();
      nativeCall0.setGetterOrSetter("", 0, delegator0, false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(1900);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 11, 2);
      nativeUint32Array0.setAttributes("org.mozilla.javascript.ast.TryStatement", (Scriptable) nativeArrayBuffer0, 4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-791.29));
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array(4);
      nativeNumber0.setAttributes(1505, (Scriptable) nativeFloat64Array0, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        importerTopLevel0.setAttributes((-3122), (-2062));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2062
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Double double0 = new Double(1);
      nativeIterator_StopIteration0.sameValue(double0, nativeContinuation0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      SymbolKey symbolKey0 = SymbolKey.IS_CONCAT_SPREADABLE;
      ScriptableObject.putProperty((Scriptable) nativeArrayBuffer0, (Symbol) symbolKey0, (Object) "Pg&NR5La");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      nativeFloat32Array0.putConst("msg.setter1.parms", nativeObject0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ScriptableObject.putConstProperty(nativeJavaTopPackage0, "error reporter", (Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      SymbolKey symbolKey0 = SymbolKey.IS_CONCAT_SPREADABLE;
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      Synchronizer synchronizer0 = new Synchronizer(nativeInt32Array0);
      nativeInt32Array0.put((Symbol) symbolKey0, (Scriptable) nativeUint16Array0, (Object) synchronizer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(14);
      Synchronizer synchronizer0 = new Synchronizer(importerTopLevel0);
      NativeCall nativeCall0 = new NativeCall();
      synchronizer0.put("value", (Scriptable) nativeFloat32Array0, (Object) nativeCall0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeIterator_StopIteration0.put(4, (Scriptable) nativeContinuation0, (Object) nativeArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.isGetterOrSetter(", currentToken=", (-1720772159), false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      boolean boolean0 = nativeError0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      boolean boolean0 = nativeIterator_StopIteration0.isConst("has");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeArray0, 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 5, (-1341));
      Class<FunctionObject> class0 = FunctionObject.class;
      FunctionObject functionObject0 = ScriptableObject.getTypedProperty((Scriptable) nativeUint8ClampedArray0, "j{H8+ymfgy7", class0);
      assertNull(functionObject0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Class<NativeArray> class0 = NativeArray.class;
      NativeArray nativeArray0 = ScriptableObject.getTypedProperty((Scriptable) nativeJavaTopPackage0, 2147483645, class0);
      assertNull(nativeArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeArrayBuffer0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeArray nativeArray0 = new NativeArray(1L);
      Byte byte0 = new Byte((byte) (-52));
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, byte0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-5395L));
      // Undeclared exception!
      try { 
        nativeArray0.getGetterOrSetter("Symbol(Symbol.iterator)", 1005, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Symbol(Symbol.iterator)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Object object0 = topLevel0.getExternalArrayLength();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ExternalArrayData externalArrayData0 = baseFunction0.getExternalArrayData();
      assertNull(externalArrayData0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      // Undeclared exception!
      try { 
        NativeNumber.isFinite(nativeInt32Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        nativeInt32Array0.getDefaultValue(class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class java.lang.Object
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeStringIterator nativeStringIterator0 = null;
      try {
        nativeStringIterator0 = new NativeStringIterator(nativeObject0, nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      // Undeclared exception!
      try { 
        nativeInt32Array0.getDefaultValue((Class<?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        nativeCall0.getAttributes(7, (Scriptable) nativeCall0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Property 7 not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Scriptable scriptable0 = ScriptableObject.getArrayPrototype(nativeError0);
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-5395L));
      // Undeclared exception!
      try { 
        nativeArray0.getAllIds();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      SymbolKey symbolKey0 = SymbolKey.HAS_INSTANCE;
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeCall0, (Symbol) symbolKey0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Double double0 = new Double(0.0);
      Object object0 = nativeCall0.get((Object) double0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeCall nativeCall0 = new NativeCall();
      NativeCall nativeCall1 = (NativeCall)nativeIterator_StopIteration0.getOrDefault("value", nativeCall0);
      assertTrue(nativeCall1.isExtensible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Object object0 = nativeIterator_StopIteration0.remove((Object) nativeContinuation0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(7);
      nativeIterator_StopIteration0.setExternalArrayData(nativeUint8ClampedArray0);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeIterator_StopIteration0, (-790));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      // Undeclared exception!
      try { 
        nativeUint16Array0.getAttributes("jsSet_", (Scriptable) nativeJavaTopPackage0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Property jsSet_ not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Object object0 = baseFunction0.equivalentValues((Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureSymbolScriptable((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Object object does not support Symbol keys
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject scriptableObject0 = ScriptableObject.ensureScriptableObject(nativeCall0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeError nativeError1 = (NativeError)ScriptableObject.ensureScriptable(nativeError0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(15);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArrayBuffer0, "ArrayBuffer");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(292);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeInt32Array0, 13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeCall0, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      SymbolKey symbolKey0 = SymbolKey.SPECIES;
      nativeArrayBuffer0.delete((Symbol) symbolKey0);
      assertFalse(nativeArrayBuffer0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      nativeInt32Array0.delete("containsValue");
      assertEquals("object", nativeInt32Array0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.delete(279);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      SymbolKey symbolKey0 = SymbolKey.SPECIES;
      nativeIterator_StopIteration0.defineProperty((Symbol) symbolKey0, (Object) "io", 0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(7);
      nativeIterator_StopIteration0.setExternalArrayData(nativeUint8ClampedArray0);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeIterator_StopIteration0, 1818);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Class<LazilyLoadedCtor> class0 = LazilyLoadedCtor.class;
      nativeInt32Array0.defineProperty("language version", class0, 1);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      SymbolKey symbolKey0 = SymbolKey.TO_STRING_TAG;
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeUint8Array0, symbolKey0, 13, "jsFunction_getFunctionName", 774, nativeUint8Array0);
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      // Undeclared exception!
      try { 
        idFunctionObjectES6_0.defineOwnProperties(context0, nativeArrayBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type number
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "hasInstance";
      Class<Synchronizer> class0 = Synchronizer.class;
      // Undeclared exception!
      try { 
        nativeArrayBuffer0.defineFunctionProperties(stringArray0, class0, (-1));
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Method \"hasInstance\" not found in \"org.mozilla.javascript.Synchronizer\".
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      String[] stringArray0 = new String[0];
      Class<Float> class0 = Float.class;
      nativeError0.defineFunctionProperties(stringArray0, class0, (-9));
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ScriptableObject.defineConstProperty(nativeError0, "xC{KA*e7;Y] Qu");
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeWith nativeWith0 = new NativeWith(importerTopLevel0, importerTopLevel0);
      ScriptableObject.defineConstProperty(nativeWith0, "jsFunction_getTypeOf");
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeCall0, nativeIterator_StopIteration0, (-2949), "METHOD", 1763, nativeIterator_StopIteration0);
      NativeString nativeString0 = new NativeString("METHOD");
      idFunctionObject0.checkPropertyChange(nativeString0, nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      assertFalse(idFunctionObject0.isSealed());
      assertTrue(idFunctionObject0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeContinuation0.defineOwnProperty(context0, contextFactory0, nativeIterator_StopIteration0);
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      nativeInt16Array0.sealObject();
      // Undeclared exception!
      try { 
        ScriptableObject.putProperty((Scriptable) nativeInt16Array0, "language version", (Object) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: java.lang.String@0000000005.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeInt32Array0, "execIdCall", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000005 is not a function, it is object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.defineClass((Scriptable) nativeInt8Array0, class0, true);
      assertTrue(nativeInt8Array0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Arguments> class0 = Arguments.class;
      // Undeclared exception!
      try { 
        ScriptableObject.buildClassCtor((Scriptable) null, class0, false, false);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot load class \"org.mozilla.javascript.Arguments\" which has no zero-parameter constructor.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeBoolean0, class0, true, true);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Can't define constructor or class org.mozilla.javascript.NativeJavaObject since more than one constructor has multiple parameters.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeString nativeString0 = new NativeString("ArrayIterator");
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(importerTopLevel0, "jsFunction_getTypeOf", "CwLv", false, true);
      // Undeclared exception!
      try { 
        nativeString0.addLazilyInitializedValue("PNM|o`WT,~:_A2Rw", 8, lazilyLoadedCtor0, 813);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PNM|o`WT,~:_A2Rw
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      BaseFunction baseFunction0 = null;
      try {
        baseFunction0 = new BaseFunction((Scriptable) null, nativeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeArray nativeArray0 = new NativeArray((-5395L));
      nativeArray0.defineConst("set", baseFunction0);
      assertEquals(2, ScriptableObject.DONTENUM);
  }
}
