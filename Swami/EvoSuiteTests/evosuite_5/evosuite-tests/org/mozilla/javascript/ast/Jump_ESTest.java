/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 15:42:52 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.ArrayComprehension;
import org.mozilla.javascript.ast.ArrayComprehensionLoop;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.BreakStatement;
import org.mozilla.javascript.ast.ConditionalExpression;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.Jump;
import org.mozilla.javascript.ast.Label;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.SwitchStatement;
import org.mozilla.javascript.ast.XmlPropRef;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Jump_ESTest extends Jump_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Jump jump0 = new Jump((-3207));
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        jump0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // -3207
         //
         verifyException("org.mozilla.javascript.ast.Jump", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Jump jump0 = new Jump();
      // Undeclared exception!
      try { 
        jump0.toSource(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // -1
         //
         verifyException("org.mozilla.javascript.ast.Jump", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Label label0 = new Label();
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(2, 12);
      label0.setLoop(arrayComprehensionLoop0);
      assertEquals(20, Node.GENERATOR_END_PROP);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BreakStatement breakStatement0 = new BreakStatement();
      ArrayComprehension arrayComprehension0 = new ArrayComprehension(25, 5);
      breakStatement0.setJumpStatement(arrayComprehension0);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newTarget();
      SwitchStatement switchStatement0 = new SwitchStatement(1);
      // Undeclared exception!
      try { 
        switchStatement0.setFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newTarget();
      SwitchStatement switchStatement0 = new SwitchStatement(1);
      switchStatement0.setDefault(node0);
      assertEquals(115, switchStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Label label0 = new Label();
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(2, 12);
      // Undeclared exception!
      try { 
        label0.setContinue(arrayComprehensionLoop0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Label label0 = new Label();
      Jump jump0 = label0.getLoop();
      assertNull(jump0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement(2);
      Jump jump0 = continueStatement0.getJumpStatement();
      assertNull(jump0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral();
      Jump jump0 = new Jump(82, numberLiteral0);
      Node node0 = jump0.getFinally();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SwitchStatement switchStatement0 = new SwitchStatement(115);
      Node node0 = switchStatement0.getDefault();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConditionalExpression conditionalExpression0 = new ConditionalExpression(133);
      Jump jump0 = new Jump(133, conditionalExpression0);
      Node node0 = jump0.getContinue();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Jump jump0 = new Jump(0, 115);
      assertEquals("0", jump0.toString());
      assertEquals(115, jump0.getLineno());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(133);
      Jump jump0 = new Jump(133, xmlPropRef0, 18);
      // Undeclared exception!
      try { 
        jump0.setContinue(xmlPropRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }
}
