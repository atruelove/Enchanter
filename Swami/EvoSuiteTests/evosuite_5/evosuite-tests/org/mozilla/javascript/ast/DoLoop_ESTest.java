/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 16:38:50 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.DoLoop;
import org.mozilla.javascript.ast.ObjectLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoLoop_ESTest extends DoLoop_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(2);
      doLoop0.setCondition(objectLiteral0);
      doLoop0.body = (AstNode) objectLiteral0;
      String string0 = doLoop0.debugPrint();
      assertEquals((-1), doLoop0.getWhilePosition());
      assertEquals("-1\tDO -1 1\n2\t  OBJECTLIT 3 1\n2\t  OBJECTLIT 3 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(2);
      doLoop0.body = (AstNode) objectLiteral0;
      // Undeclared exception!
      try { 
        doLoop0.toSource(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.DoLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      doLoop0.setWhilePosition(282);
      assertEquals(282, doLoop0.getWhilePosition());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(2);
      doLoop0.setCondition(objectLiteral0);
      doLoop0.body = (AstNode) objectLiteral0;
      String string0 = doLoop0.toSource(5);
      assertEquals((-1), doLoop0.getWhilePosition());
      assertEquals("          do {} while ({});\n", string0);
      assertEquals(119, doLoop0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      int int0 = doLoop0.getWhilePosition();
      assertEquals("119", doLoop0.toString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop((-1089), (-818));
      assertEquals((-1), doLoop0.getWhilePosition());
      assertEquals("119", doLoop0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop(61);
      assertEquals((-1), doLoop0.getWhilePosition());
      assertEquals("119", doLoop0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      doLoop0.getCondition();
      assertEquals((-1), doLoop0.getWhilePosition());
      assertEquals(119, doLoop0.getType());
  }
}
