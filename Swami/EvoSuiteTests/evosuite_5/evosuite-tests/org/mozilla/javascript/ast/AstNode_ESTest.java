/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 16:14:38 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Token;
import org.mozilla.javascript.ast.ArrayLiteral;
import org.mozilla.javascript.ast.Assignment;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.CatchClause;
import org.mozilla.javascript.ast.Comment;
import org.mozilla.javascript.ast.ConditionalExpression;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.ElementGet;
import org.mozilla.javascript.ast.ErrorNode;
import org.mozilla.javascript.ast.ExpressionStatement;
import org.mozilla.javascript.ast.ForLoop;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.IfStatement;
import org.mozilla.javascript.ast.InfixExpression;
import org.mozilla.javascript.ast.Jump;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.ReturnStatement;
import org.mozilla.javascript.ast.VariableInitializer;
import org.mozilla.javascript.ast.XmlMemberGet;
import org.mozilla.javascript.ast.XmlPropRef;
import org.mozilla.javascript.ast.Yield;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AstNode_ESTest extends AstNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(628, 3693, token_CommentType0, "_#K");
      astRoot0.addComment(comment0);
      assertEquals(1, comment0.depth());
      assertEquals(3693, comment0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet();
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(26);
      xmlMemberGet0.setLeft(elementGet0);
      // Undeclared exception!
      try { 
        elementGet0.debugPrint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ElementGet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      // Undeclared exception!
      try { 
        expressionStatement0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ExpressionStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VariableInitializer variableInitializer0 = new VariableInitializer((-1746));
      String string0 = variableInitializer0.shortName();
      assertEquals("VariableInitializer", string0);
      assertEquals((-1746), variableInitializer0.getPosition());
      assertEquals(1, variableInitializer0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CatchClause catchClause0 = new CatchClause((-3747), (-3747));
      LinkedList<ErrorNode> linkedList0 = new LinkedList<ErrorNode>();
      ErrorNode errorNode0 = new ErrorNode();
      linkedList0.add(errorNode0);
      linkedList0.add(errorNode0);
      StringBuilder stringBuilder0 = new StringBuilder(11);
      catchClause0.printList((List<ErrorNode>) linkedList0, stringBuilder0);
      assertEquals(", ", stringBuilder0.toString());
      assertEquals((-3747), catchClause0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AstNode.operatorToString(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operator: 8
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = AstNode.operatorToString(12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForLoop forLoop0 = new ForLoop();
      // Undeclared exception!
      try { 
        forLoop0.toSource(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ForLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Name name0 = new Name(22, "");
      boolean boolean0 = name0.hasSideEffects();
      assertEquals(0, name0.getLength());
      assertFalse(boolean0);
      assertEquals(22, name0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement(2, name0);
      InfixExpression infixExpression0 = new InfixExpression(name0, continueStatement0);
      infixExpression0.hasSideEffects();
      assertEquals(5, continueStatement0.getPosition());
      assertEquals(2, name0.getPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Jump jump0 = new Jump(15, astRoot0, 2);
      XmlPropRef xmlPropRef0 = new XmlPropRef();
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(jump0, xmlPropRef0, 21);
      assertEquals(1, xmlPropRef0.depth());
      assertEquals(2, jump0.getLineno());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement(2, name0);
      name0.isLocalName();
      assertEquals(1, name0.depth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConditionalExpression conditionalExpression0 = new ConditionalExpression();
      Assignment assignment0 = new Assignment(15, conditionalExpression0, conditionalExpression0, 4);
      conditionalExpression0.getEnclosingFunction();
      assertEquals(1, conditionalExpression0.depth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Name name0 = new Name();
      String string0 = name0.debugPrint();
      assertEquals("-1\tNAME -1 1 null\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      XmlPropRef xmlPropRef0 = new XmlPropRef();
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(astRoot0, xmlPropRef0, 21);
      int int0 = xmlMemberGet0.compareTo((AstNode) astRoot0);
      assertEquals(0, xmlPropRef0.getPosition());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode(17);
      // Undeclared exception!
      try { 
        functionNode0.getParamAndVarNames();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement();
      // Undeclared exception!
      try { 
        ifStatement0.setThenPart((AstNode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // arg cannot be null
         //
         verifyException("org.mozilla.javascript.ast.AstNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReturnStatement returnStatement0 = new ReturnStatement();
      Yield yield0 = new Yield();
      returnStatement0.addChild(yield0);
      assertEquals(1, yield0.depth());
      assertEquals(1, returnStatement0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      arrayLiteral0.getAstRoot();
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getPosition());
  }
}
