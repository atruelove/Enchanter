/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 16:03:39 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.ForInLoop;
import org.mozilla.javascript.ast.Name;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContinueStatement_ESTest extends ContinueStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Name name0 = new Name(3470, (-2914));
      ContinueStatement continueStatement0 = new ContinueStatement(3470, name0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      continueStatement0.visit(astNode_DebugPrintVisitor0);
      assertEquals(0, name0.getPosition());
      assertEquals((-1), continueStatement0.getLength());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Name name0 = new Name(3470, (-2914));
      ContinueStatement continueStatement0 = new ContinueStatement(3470, name0);
      String string0 = continueStatement0.toSource(0);
      assertEquals(0, name0.getPosition());
      assertEquals("continue <null>;\n", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement((Name) null);
      String string0 = continueStatement0.toSource(18);
      assertEquals(122, continueStatement0.getType());
      assertEquals("                                    continue;\n", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement((-2007), name0);
      continueStatement0.getTarget();
      assertEquals(2006, name0.getPosition());
      assertEquals(122, continueStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement(0);
      continueStatement0.getLabel();
      assertEquals(0, continueStatement0.getPosition());
      assertEquals((-1), continueStatement0.getLength());
      assertEquals("122", continueStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement((Name) null);
      ForInLoop forInLoop0 = new ForInLoop();
      continueStatement0.setTarget(forInLoop0);
      assertEquals(122, continueStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement((-2526), 9, (Name) null);
      assertEquals(9, continueStatement0.getLength());
      assertEquals((-2526), continueStatement0.getPosition());
      assertEquals(122, continueStatement0.getType());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement();
      StringBuilder stringBuilder0 = new StringBuilder("                                                                                                                                                                                    continue;\n");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      continueStatement0.visit(astNode_DebugPrintVisitor0);
      assertEquals("                                                                                                                                                                                    continue;\n-1\tCONTINUE -1 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(122, continueStatement0.getType());
  }
}
