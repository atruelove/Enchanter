/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 16:15:38 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.KeywordLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeywordLiteral_ESTest extends KeywordLiteral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral((-464));
      KeywordLiteral keywordLiteral1 = keywordLiteral0.setType(161);
      assertEquals("161", keywordLiteral0.toString());
      
      String string0 = keywordLiteral1.toSource();
      assertEquals("debugger;\n", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      keywordLiteral0.setType(44);
      keywordLiteral0.toSource(8);
      assertEquals(44, keywordLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      keywordLiteral0.setType(45);
      assertEquals("45", keywordLiteral0.toString());
      
      String string0 = keywordLiteral0.toSource(8);
      assertEquals("                true", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral((-1), (-1), 42);
      assertEquals("42", keywordLiteral0.toString());
      
      String string0 = keywordLiteral0.toSource((-225));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = null;
      try {
        keywordLiteral0 = new KeywordLiteral(45, 45, (-1207));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid node type: -1207
         //
         verifyException("org.mozilla.javascript.ast.KeywordLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(43, 43, 43);
      keywordLiteral0.toSource(890);
      assertEquals(43, keywordLiteral0.getType());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(0, 1);
      String string0 = keywordLiteral0.debugPrint();
      assertEquals("0\tERROR 0 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral((-3844));
      boolean boolean0 = keywordLiteral0.isBooleanLiteral();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      // Undeclared exception!
      try { 
        keywordLiteral0.toSource(8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid keyword literal type: -1
         //
         verifyException("org.mozilla.javascript.ast.KeywordLiteral", e);
      }
  }
}
