/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 16:29:16 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.ArrayComprehensionLoop;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.ForInLoop;
import org.mozilla.javascript.ast.ForLoop;
import org.mozilla.javascript.ast.GeneratorExpressionLoop;
import org.mozilla.javascript.ast.XmlLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForInLoop_ESTest extends ForInLoop_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      XmlLiteral xmlLiteral0 = new XmlLiteral(9);
      forInLoop0.body = (AstNode) xmlLiteral0;
      forInLoop0.setIteratedObject(xmlLiteral0);
      forInLoop0.iterator = (AstNode) xmlLiteral0;
      StringBuilder stringBuilder0 = new StringBuilder(146);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      forInLoop0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tFOR -1 1\n9\t  XML 10 1\n9\t  XML 10 1\n9\t  XML 10 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals("120", forInLoop0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      XmlLiteral xmlLiteral0 = new XmlLiteral(9);
      forInLoop0.body = (AstNode) xmlLiteral0;
      forInLoop0.setIteratedObject(xmlLiteral0);
      forInLoop0.iterator = (AstNode) xmlLiteral0;
      String string0 = forInLoop0.toSource(2);
      assertEquals((-1), forInLoop0.getEachPosition());
      assertEquals((-1), forInLoop0.getInPosition());
      assertEquals("    for ( in ) \n", string0);
      assertEquals("120", forInLoop0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      XmlLiteral xmlLiteral0 = new XmlLiteral(9);
      forInLoop0.isForOf = true;
      forInLoop0.iterator = (AstNode) xmlLiteral0;
      // Undeclared exception!
      try { 
        forInLoop0.toSource(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ForInLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      forInLoop0.isForEach = true;
      // Undeclared exception!
      try { 
        forInLoop0.toSource(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ForInLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      ForLoop forLoop0 = new ForLoop();
      generatorExpressionLoop0.setIterator(forLoop0);
      assertEquals((-1), generatorExpressionLoop0.getEachPosition());
      assertEquals("120", generatorExpressionLoop0.toString());
      assertEquals((-1), generatorExpressionLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop((-1507), 810);
      forInLoop0.setIsForOf(false);
      assertEquals((-1), forInLoop0.getInPosition());
      assertEquals((-1), forInLoop0.getEachPosition());
      assertFalse(forInLoop0.isForOf());
      assertEquals("120", forInLoop0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(4998, (-3745));
      forInLoop0.setIsForEach(false);
      assertEquals("120", forInLoop0.toString());
      assertFalse(forInLoop0.isForEach());
      assertEquals((-1), forInLoop0.getEachPosition());
      assertEquals((-1), forInLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop(0);
      assertEquals((-1), generatorExpressionLoop0.getInPosition());
      
      generatorExpressionLoop0.setInPosition(0);
      assertEquals(0, generatorExpressionLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(2149);
      forInLoop0.isForOf();
      assertEquals(120, forInLoop0.getType());
      assertEquals((-1), forInLoop0.getEachPosition());
      assertEquals((-1), forInLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      arrayComprehensionLoop0.getIteratedObject();
      assertEquals((-1), arrayComprehensionLoop0.getEachPosition());
      assertEquals((-1), arrayComprehensionLoop0.getInPosition());
      assertEquals("120", arrayComprehensionLoop0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      int int0 = generatorExpressionLoop0.getInPosition();
      assertEquals(120, generatorExpressionLoop0.getType());
      assertEquals((-1), generatorExpressionLoop0.getEachPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop((-1));
      int int0 = arrayComprehensionLoop0.getEachPosition();
      assertEquals((-1), int0);
      assertEquals(120, arrayComprehensionLoop0.getType());
      assertEquals((-1), arrayComprehensionLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(42);
      arrayComprehensionLoop0.setEachPosition(42);
      assertEquals(42, arrayComprehensionLoop0.getEachPosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      forInLoop0.getIterator();
      assertEquals((-1), forInLoop0.getInPosition());
      assertEquals((-1), forInLoop0.getEachPosition());
      assertEquals(120, forInLoop0.getType());
  }
}
