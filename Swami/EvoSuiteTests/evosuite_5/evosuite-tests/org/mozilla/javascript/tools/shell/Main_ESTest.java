/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 19:07:02 GMT 2018
 */

package org.mozilla.javascript.tools.shell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.commonjs.module.ModuleScope;
import org.mozilla.javascript.tools.shell.Main;
import org.mozilla.javascript.tools.shell.ShellContextFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Main_ESTest extends Main_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Main.ScriptCache main_ScriptCache0 = new Main.ScriptCache(150);
      assertEquals(0, main_ScriptCache0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Main.setOut((PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-71), 110);
      Main.setIn(byteArrayInputStream0);
      assertEquals(76, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Main.setErr((PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-encoding";
      stringArray0[2] = "-encoding";
      SystemInUtil.addInputLine("error reporter.class");
      // Undeclared exception!
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-encoding";
      stringArray0[2] = "-encoding";
      SystemInUtil.addInputLine("Error");
      // Undeclared exception!
      Main.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-encoding";
      stringArray0[2] = "-encoding";
      stringArray0[3] = "oV?l84IX5fXG<WV0";
      // Undeclared exception!
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // oV?l84IX5fXG<WV0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "-f";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      String[] stringArray1 = Main.processOptions(stringArray0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-f";
      stringArray0[1] = "-f";
      // Undeclared exception!
      try { 
        Main.processOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-modules";
      // Undeclared exception!
      try { 
        Main.processOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-sandbox";
      stringArray0[1] = "-modules";
      // Undeclared exception!
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-fatal-warnings";
      // Undeclared exception!
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[22];
      stringArray0[0] = "-strict";
      // Undeclared exception!
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-encoding";
      stringArray0[2] = "J=J.II-]-WEb";
      stringArray0[3] = "-encoding";
      String[] stringArray1 = Main.processOptions(stringArray0);
      // Undeclared exception!
      try { 
        Main.main(stringArray1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-encoding";
      stringArray0[2] = "-O";
      String[] stringArray1 = Main.processOptions(stringArray0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-opt";
      // Undeclared exception!
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[20];
      stringArray0[0] = "-version";
      String[] stringArray1 = Main.processOptions(stringArray0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-version";
      String[] stringArray1 = Main.processOptions(stringArray0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("vI");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "~V]`RlY!J");
      Main main0 = new Main();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        Main.processFileNoThrow(context0, main0.global, "vI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (vI#1)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Scriptable scriptable0 = Main.getScope((String) null);
      ShellContextFactory shellContextFactory0 = Main.shellContextFactory;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("N^");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Context context0 = shellContextFactory0.enterContext();
      Main.processFile(context0, scriptable0, "N^");
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Main.useRequire = true;
      ModuleScope moduleScope0 = (ModuleScope)Main.getScope("~V]`RlY!J");
      assertFalse(moduleScope0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PrintStream printStream0 = Main.getOut();
      assertNotNull(printStream0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputStream inputStream0 = Main.getIn();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PrintStream printStream0 = Main.getErr();
      assertNotNull(printStream0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.mozilla.javascript.ContextFactory$1.class";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.mozilla.javascript.ContextFactory$1.class");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      // Undeclared exception!
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: ClassFormatError");
      
      } catch(ClassFormatError e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-debug";
      Main.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-?";
      // Undeclared exception!
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-require";
      stringArray0[1] = "-require";
      stringArray0[2] = "-e";
      stringArray0[3] = "org.mozilla.javascript.NativeScript";
      stringArray0[4] = "kq{F_x\"#EKaY";
      // Undeclared exception!
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-e";
      stringArray0[1] = "gLY.0F7_'}+xu";
      // Undeclared exception!
      try { 
        Main.processOptions(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (<command>#1)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Main main0 = new Main();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        Main.processFileNoThrow(context0, main0.global, "vI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read source file \"vI\": null.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }
}
