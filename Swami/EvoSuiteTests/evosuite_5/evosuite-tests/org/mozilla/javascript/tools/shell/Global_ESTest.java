/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 19:39:14 GMT 2018
 */

package org.mozilla.javascript.tools.shell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.UniqueTag;
import org.mozilla.javascript.commonjs.module.Require;
import org.mozilla.javascript.tools.shell.Global;
import org.mozilla.javascript.tools.shell.QuitAction;
import org.mozilla.javascript.tools.shell.ShellContextFactory;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Global_ESTest extends Global_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Delegator delegator0 = new Delegator();
      ShellContextFactory shellContextFactory0 = new ShellContextFactory();
      Context context0 = shellContextFactory0.enterContext((Context) null);
      Object[] objectArray0 = new Object[4];
      double double0 = Global.version(context0, delegator0, objectArray0, delegator0);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Delegator delegator0 = new Delegator();
      ShellContextFactory shellContextFactory0 = new ShellContextFactory();
      Context context0 = shellContextFactory0.enterContext((Context) null);
      double double0 = Global.version(context0, delegator0, context0.emptyArgs, delegator0);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(384);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 10, 2946);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object object0 = Global.toint32(context0, nativeUint32Array0, context0.emptyArgs, nativeJavaClass0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(384);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        Global.spawn(context0, nativeArrayBuffer0, context0.emptyArgs, nativeJavaClass0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Argument to spawn() must be a function or script.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Global global0 = new Global();
      global0.setSealedStdLib(true);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 10, 2946);
      Object[] objectArray0 = new Object[5];
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, context0.FEATURE_NON_ECMA_GET_YEAR, 100, 110);
      // Undeclared exception!
      try { 
        Global.serialize(context0, idFunctionObject0, objectArray0, idFunctionObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 10, 2946);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, context0.VERSION_1_6, 100, 110);
      // Undeclared exception!
      try { 
        Global.serialize(context0, idFunctionObject0, context0.emptyArgs, idFunctionObject0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Expected an object to serialize and a filename to write the serialization to
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(global0, uniqueTag0, 15, "T^{jm", 5, global0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Global.seal(context0, global0, objectArray0, idFunctionObjectES6_0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // seal function can only be applied to objects
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(global0, uniqueTag0, 15, "T^{jm", 5, global0);
      Global.seal(context0, global0, context0.emptyArgs, idFunctionObjectES6_0);
      assertEquals(17, Context.FEATURE_THREAD_SAFE_OBJECTS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      // Undeclared exception!
      try { 
        global0.runDoctest(context0, global0, "js>addCompleter", "language version", (-1933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1933
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Global global0 = new Global();
      String[] stringArray0 = global0.getPrompts((Context) null);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(global0, (Object) null, 32, "js>language version", 13, global0);
      try { 
        Global.runCommand((Context) null, global0, stringArray0, idFunctionObject0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(global0, contextFactory0, 6, "error reporter", 2088, global0);
      // Undeclared exception!
      try { 
        Global.readline(context0, global0, context0.emptyArgs, idFunctionObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Global global0 = new Global();
      Object[] objectArray0 = new Object[7];
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(global0, (Object) null, 0, "org.mozilla.javascript.EmbeddedSlotMap$Iter", 824, global0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        Global.readline(context0, idFunctionObjectES6_0, objectArray0, idFunctionObjectES6_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = Context.enter();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(9);
      // Undeclared exception!
      try { 
        Global.readUrl(context0, nativeUint8ClampedArray0, context0.emptyArgs, (Function) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // readUrl require at least file path to be specified
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(384);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, (-6), 2946);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "2LN]E#zIUS:Nyq");
      Object[] objectArray0 = new Object[12];
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, context0.FEATURE_PARENT_PROTO_PROPERTIES, 100, 110);
      try { 
        Global.readFile(context0, nativeUint32Array0, objectArray0, idFunctionObject0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 10, 2946);
      Object[] objectArray0 = new Object[5];
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, context0.FEATURE_STRICT_MODE, 100, 110);
      try { 
        Global.readFile(context0, nativeUint32Array0, objectArray0, idFunctionObject0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File not found: null
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 10, 2946);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, context0.FEATURE_PARENT_PROTO_PROPERTIES, 100, 110);
      // Undeclared exception!
      try { 
        Global.readFile(context0, nativeUint32Array0, context0.emptyArgs, idFunctionObject0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // readFile require at least file path to be specified
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Global global0 = new Global();
      QuitAction quitAction0 = mock(QuitAction.class, new ViolatedAssumptionAnswer());
      global0.initQuitAction(quitAction0);
      Context context0 = Context.enter();
      IdFunctionObject idFunctionObject0 = global0.exportAsJSClass(5, global0, false);
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 475, 4624);
      Global.quit(context0, nativeUint32Array0, context0.emptyArgs, idFunctionObject0);
      assertEquals(0, context0.getInstructionObserverThreshold());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Global.pipe(false, bufferedInputStream0, mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Global.pipe(false, (InputStream) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Global.pipe(true, byteArrayInputStream0, byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 4);
      MockPrintStream mockPrintStream0 = new MockPrintStream("js>9r\"W+aF|:?#wU,");
      Global.pipe(true, pushbackInputStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Global global0 = new Global();
      PrintStream printStream0 = global0.getOut();
      Global.pipe(false, byteArrayInputStream0, printStream0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.enter();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        Global.loadClass(context0, global0, context0.emptyArgs, nativeJavaClass0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a string argument.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      String[] stringArray0 = global0.getPrompts(context0);
      Delegator delegator0 = new Delegator(global0);
      // Undeclared exception!
      try { 
        Global.load(context0, global0, stringArray0, delegator0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Couldn't read source file \"js> \": null.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      Require require0 = global0.installRequire(context0, (List<String>) null, true);
      Global.load(context0, require0, context0.emptyArgs, require0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      boolean boolean0 = global0.isInitialized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      String[] stringArray0 = global0.getPrompts(context0);
      NativeArray nativeArray0 = new NativeArray(stringArray0);
      // Undeclared exception!
      try { 
        global0.installRequire(context0, nativeArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 2: js> 
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Global global0 = new Global();
      // Undeclared exception!
      try { 
        global0.initQuitAction((QuitAction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // quitAction is null
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Global global0 = new Global();
      ContextFactory contextFactory0 = new ContextFactory();
      global0.init(contextFactory0);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Global global0 = new Global();
      Object[] objectArray0 = new Object[7];
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(global0, (Object) null, 0, "org.mozilla.javascript.EmbeddedSlotMap$Iter", 824, global0);
      Global.help((Context) null, global0, objectArray0, idFunctionObjectES6_0);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Global global0 = new Global();
      InputStream inputStream0 = global0.getIn();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Global global0 = new Global();
      Object[] objectArray0 = new Object[7];
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(global0, (Object) null, 0, "org.mozilla.javascript.EmbeddedSlotMap$Iter", 824, global0);
      Object object0 = Global.doctest((Context) null, global0, objectArray0, idFunctionObjectES6_0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(global0, context0, 3, "VPUd[[^Bfk$S,m", 9, global0);
      Object object0 = Global.write(context0, global0, context0.emptyArgs, idFunctionObject0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Global global0 = new Global();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(global0, (Object) null, 0, "org.mozilla.javascript.EmbeddedSlotMap$Iter", 824, global0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        Global.deserialize(context0, global0, context0.emptyArgs, idFunctionObjectES6_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a filename to read the serialization from
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      Synchronizer synchronizer0 = new Synchronizer(global0);
      Global.gc(context0, (Scriptable) null, context0.emptyArgs, synchronizer0);
      assertEquals(200, Context.VERSION_ES6);
  }
}
