/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 20:14:45 GMT 2018
 */

package org.mozilla.javascript.tools.debugger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JTree;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.tools.debugger.Dim;
import org.mozilla.javascript.tools.debugger.VariableModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VariableModel_ESTest extends VariableModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VariableModel variableModel0 = new VariableModel();
      variableModel0.valueForPathChanged((TreePath) null, (Object) null);
      assertEquals(2, variableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VariableModel variableModel0 = new VariableModel();
      variableModel0.setValueAt((Object) null, (Object) null, 0);
      assertEquals(2, variableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VariableModel variableModel0 = new VariableModel();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      BasicTreeUI.TreeModelHandler basicTreeUI_TreeModelHandler0 = metalTreeUI0.new TreeModelHandler();
      variableModel0.removeTreeModelListener(basicTreeUI_TreeModelHandler0);
      assertEquals(2, variableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VariableModel variableModel0 = new VariableModel();
      boolean boolean0 = variableModel0.isLeaf(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VariableModel variableModel0 = new VariableModel();
      Object object0 = new Object();
      boolean boolean0 = variableModel0.isCellEditable(object0, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Dim dim0 = new Dim();
      ContextFactory contextFactory0 = new ContextFactory();
      dim0.attachTo(contextFactory0);
      VariableModel variableModel0 = new VariableModel(dim0, (Object) null);
      Object object0 = variableModel0.getValueAt((Object) null, 1);
      assertEquals("undefined", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Dim dim0 = new Dim();
      VariableModel variableModel0 = new VariableModel(dim0, (Object) null);
      // Undeclared exception!
      try { 
        variableModel0.getValueAt((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.VariableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Dim dim0 = new Dim();
      VariableModel variableModel0 = new VariableModel(dim0, "");
      Object object0 = variableModel0.getRoot();
      Object object1 = variableModel0.getValueAt(object0, 0);
      assertNotNull(object1);
      assertEquals("this", object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Dim dim0 = new Dim();
      VariableModel variableModel0 = new VariableModel(dim0, "");
      Object object0 = variableModel0.getRoot();
      Object object1 = variableModel0.getValueAt(object0, 4);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Dim dim0 = new Dim();
      VariableModel variableModel0 = new VariableModel(dim0, "");
      Object object0 = variableModel0.getRoot();
      ContextFactory contextFactory0 = new ContextFactory();
      dim0.attachTo(contextFactory0);
      int int0 = variableModel0.getIndexOfChild(object0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VariableModel variableModel0 = new VariableModel();
      int int0 = variableModel0.getIndexOfChild("}+", "}+");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Dim dim0 = new Dim();
      Synchronizer synchronizer0 = new Synchronizer((Scriptable) null, (Object) null);
      VariableModel variableModel0 = new VariableModel(dim0, synchronizer0);
      // Undeclared exception!
      try { 
        variableModel0.getColumnName((-3991));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3991
         //
         verifyException("org.mozilla.javascript.tools.debugger.VariableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Dim dim0 = new Dim();
      VariableModel variableModel0 = new VariableModel(dim0, dim0);
      int int0 = variableModel0.getColumnCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VariableModel variableModel0 = new VariableModel();
      // Undeclared exception!
      try { 
        variableModel0.getColumnClass((-294));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -294
         //
         verifyException("org.mozilla.javascript.tools.debugger.VariableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VariableModel variableModel0 = new VariableModel();
      Object object0 = variableModel0.getChild("}+", (-1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Dim dim0 = new Dim();
      Object object0 = new Object();
      VariableModel variableModel0 = new VariableModel(dim0, object0);
      // Undeclared exception!
      try { 
        variableModel0.getChild(dim0, 2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.tools.debugger.Dim cannot be cast to org.mozilla.javascript.tools.debugger.VariableModel$VariableNode
         //
         verifyException("org.mozilla.javascript.tools.debugger.VariableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Dim dim0 = new Dim();
      VariableModel variableModel0 = new VariableModel(dim0, "");
      Object object0 = variableModel0.getRoot();
      assertNotNull(object0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      dim0.attachTo(contextFactory0);
      variableModel0.getChildCount(object0);
      boolean boolean0 = variableModel0.isLeaf(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Dim dim0 = new Dim();
      VariableModel variableModel0 = new VariableModel(dim0, (Object) null);
      // Undeclared exception!
      try { 
        variableModel0.getChild((Object) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.VariableModel$VariableNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VariableModel variableModel0 = new VariableModel();
      JTree jTree0 = new JTree(variableModel0);
      int int0 = variableModel0.getChildCount(jTree0);
      assertEquals(0, int0);
  }
}
