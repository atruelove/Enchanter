/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 20:35:34 GMT 2018
 */

package org.mozilla.javascript.tools.debugger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.KeyEvent;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.debugger.EvalTextArea;
import org.mozilla.javascript.tools.debugger.SwingGui;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvalTextArea_ESTest extends EvalTextArea_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      evalTextArea0.write("@LXMXUkaT{m");
      assertFalse(evalTextArea0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      evalTextArea0.setDocument(defaultStyledDocument0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(evalTextArea0, 42, 0L, 0, 10, '?', (MenuElement[]) null, menuSelectionManager0);
      // Undeclared exception!
      try { 
        evalTextArea0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.EvalTextArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      evalTextArea0.postUpdateUI();
      assertFalse(evalTextArea0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      evalTextArea0.selectAll();
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 760, 760, 760, 760, '\b');
      evalTextArea0.keyTyped(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 1965, 1965, 0, 899, '|');
      evalTextArea0.keyReleased(keyEvent0);
      assertFalse(evalTextArea0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(evalTextArea0, 2286, 2286, 2286, 40, '<', (MenuElement[]) null, menuSelectionManager0);
      evalTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 1958, 10, 'T', 10, 'T');
      // Undeclared exception!
      try { 
        evalTextArea0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.debugger.EvalTextArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(evalTextArea0, 2049, 2049, 2049, 36, 'J', (MenuElement[]) null, menuSelectionManager0);
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.CHANGE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((-324), 2049, documentEvent_EventType0);
      evalTextArea0.removeUpdate(abstractDocument_DefaultDocumentEvent0);
      // Undeclared exception!
      try { 
        evalTextArea0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad position: -324
         //
         verifyException("javax.swing.text.JTextComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(evalTextArea0, 8, 8, 8, 36, 'U', (MenuElement[]) null, menuSelectionManager0);
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.CHANGE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent((-324), 8, documentEvent_EventType0);
      evalTextArea0.removeUpdate(abstractDocument_DefaultDocumentEvent0);
      // Undeclared exception!
      try { 
        evalTextArea0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad position: -6
         //
         verifyException("javax.swing.text.JTextComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 26, 26, 36, 36, 'A');
      evalTextArea0.keyTyped(keyEvent0);
      evalTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, 1986, 1986, 1986, 1986, 'V');
      keyEvent0.setKeyCode(37);
      evalTextArea0.keyTyped(keyEvent0);
      evalTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      KeyEvent keyEvent0 = new KeyEvent(evalTextArea0, (-3820), (-3820), (-3820), 38, '9');
      evalTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.CHANGE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0.new DefaultDocumentEvent((-14), (-14), documentEvent_EventType0);
      evalTextArea0.insertUpdate(abstractDocument_DefaultDocumentEvent0);
      assertFalse(evalTextArea0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvalTextArea evalTextArea0 = new EvalTextArea((SwingGui) null);
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.CHANGE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent(1033, 6, documentEvent_EventType0);
      evalTextArea0.changedUpdate(abstractDocument_DefaultDocumentEvent0);
      assertTrue(evalTextArea0.getFocusTraversalKeysEnabled());
  }
}
