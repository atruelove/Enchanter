/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 22:20:50 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.SlotMapContainer;
import org.mozilla.javascript.ThreadSafeSlotMapContainer;
import org.mozilla.javascript.typedarrays.NativeInt32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlotMapContainer_ESTest extends SlotMapContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SlotMapContainer slotMapContainer0 = new SlotMapContainer((-305));
      slotMapContainer0.unlockRead((-305));
      assertEquals(0L, slotMapContainer0.readLock());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SlotMapContainer slotMapContainer0 = new SlotMapContainer((-305));
      int int0 = slotMapContainer0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SlotMapContainer slotMapContainer0 = new SlotMapContainer((-305));
      slotMapContainer0.remove((Object) null, (-305));
      assertEquals(0, slotMapContainer0.dirtySize());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SlotMapContainer slotMapContainer0 = new SlotMapContainer((-879));
      long long0 = slotMapContainer0.readLock();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Context context0 = Context.enter();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      ScriptableObject scriptableObject0 = context0.initStandardObjects((ScriptableObject) nativeInt32Array0, false);
      assertFalse(scriptableObject0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SlotMapContainer slotMapContainer0 = new SlotMapContainer((-879));
      Spliterator<ScriptableObject.Slot> spliterator0 = slotMapContainer0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SlotMapContainer slotMapContainer0 = new SlotMapContainer(1439);
      boolean boolean0 = slotMapContainer0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SlotMapContainer slotMapContainer0 = new SlotMapContainer(724);
      int int0 = slotMapContainer0.dirtySize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SlotMapContainer slotMapContainer0 = new SlotMapContainer((-305));
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      ScriptableObject.Slot scriptableObject_Slot0 = slotMapContainer0.get("", 0, scriptableObject_SlotAccess0);
      slotMapContainer0.addSlot(scriptableObject_Slot0);
      assertEquals(2, slotMapContainer0.dirtySize());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ThreadSafeSlotMapContainer threadSafeSlotMapContainer0 = new ThreadSafeSlotMapContainer(4366);
  }
}
