/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 05:54:51 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.FilenameFilter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.EcmaError;
import org.mozilla.javascript.EvaluatorException;
import org.mozilla.javascript.JavaScriptException;
import org.mozilla.javascript.RhinoException;
import org.mozilla.javascript.ScriptStackElement;
import org.mozilla.javascript.StackStyle;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RhinoException_ESTest extends RhinoException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = RhinoException.usesMozillaStackStyle();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("", (String) null, 1660, "7RBk0p", 84);
      evaluatorException0.sourceName();
      assertEquals(84, evaluatorException0.columnNumber());
      assertEquals(1660, evaluatorException0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvaluatorException evaluatorException0 = null;
      try {
        evaluatorException0 = new EvaluatorException("_c_", "_c_", (-1), "_c_", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("", (String) null, 1660, "7RBk0p", 84);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1148);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 749);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      evaluatorException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals(1660, evaluatorException0.lineNumber());
      assertEquals(84, evaluatorException0.getColumnNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("0haPqNNN>aIPG", "org.mozilla.javascript.RhinoException$1", "", 0, "0haPqNNN>aIPG", 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-@G'8|)!$");
      ecmaError0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals("0haPqNNN>aIPG", ecmaError0.lineSource());
      assertEquals(0, ecmaError0.getColumnNumber());
      assertEquals(0, ecmaError0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException(".");
      String string0 = evaluatorException0.lineSource();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("LyY", "LyY", 0, "LyY", 0);
      int int0 = evaluatorException0.lineNumber();
      assertEquals(0, int0);
      assertEquals(0, evaluatorException0.getColumnNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackStyle stackStyle0 = RhinoException.getStackStyle();
      assertEquals(StackStyle.RHINO, stackStyle0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException(" {r/olBw7%]U", " {r/olBw7%]U", 3288);
      String string0 = evaluatorException0.getScriptStackTrace((FilenameFilter) null);
      assertEquals(3288, evaluatorException0.getLineNumber());
      assertEquals("", string0);
      assertEquals(0, evaluatorException0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("0pvjqNNN>aIPG", "0pvjqNNN>aIPG", "0pvjqNNN>aIPG", 0, "0pvjqNNN>aIPG", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("0pvjqNNN>aIPG", "0pvjqNNN>aIPG", "0pvjqNNN>aIPG", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.mozilla.javascript.Interpreter", "0pvjqNNN>aIPG", "0pvjqNNN>aIPG", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      ecmaError0.setStackTrace(stackTraceElementArray0);
      String string0 = ecmaError0.getScriptStackTrace();
      assertEquals("", string0);
      assertEquals(0, ecmaError0.lineNumber());
      assertEquals(0, ecmaError0.getColumnNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("w7M[");
      evaluatorException0.interpreterStackInfo = (Object) "w7M[";
      // Undeclared exception!
      try { 
        evaluatorException0.getScriptStack(5099, "w7M[");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to [Lorg.mozilla.javascript.Interpreter$CallFrame;
         //
         verifyException("org.mozilla.javascript.Interpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      JavaScriptException javaScriptException0 = new JavaScriptException(object0, "_c_", 9);
      javaScriptException0.getScriptStack();
      assertEquals(9, javaScriptException0.lineNumber());
      assertEquals(0, javaScriptException0.columnNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportRuntimeError("b*&A8-mMvG>mFpRQ0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // b*&A8-mMvG>mFpRQ0
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError("_c_]haqNraIPs", "_c_]haqNraIPs", "e$kPrd", 170, "e$kPrd", 170);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("_c_]haqNraIPs", "_c_]haqNraIPs", (String) null, 170);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("e$kPrd", "_c_]haqNraIPs", "e$kPrd", 170);
      stackTraceElementArray0[2] = stackTraceElement1;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement1;
      stackTraceElementArray0[5] = stackTraceElement1;
      stackTraceElementArray0[6] = stackTraceElement1;
      stackTraceElementArray0[7] = stackTraceElement0;
      stackTraceElementArray0[8] = stackTraceElementArray0[5];
      ecmaError0.setStackTrace(stackTraceElementArray0);
      String string0 = ecmaError0.getScriptStackTrace();
      assertEquals(170, ecmaError0.lineNumber());
      assertEquals(170, ecmaError0.columnNumber());
      assertEquals("\tat e$kPrd:170\n\tat e$kPrd:170\n\tat e$kPrd:170\n\tat e$kPrd:170\n\tat e$kPrd:170\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackStyle stackStyle0 = StackStyle.V8;
      RhinoException.setStackStyle(stackStyle0);
      ScriptStackElement[] scriptStackElementArray0 = new ScriptStackElement[3];
      ScriptStackElement scriptStackElement0 = new ScriptStackElement("xOPlqjz", "N_7H`I4Dh#SNVR", 61);
      scriptStackElementArray0[0] = scriptStackElement0;
      // Undeclared exception!
      try { 
        RhinoException.formatStackTrace(scriptStackElementArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RhinoException.useMozillaStackStyle(true);
      ScriptStackElement[] scriptStackElementArray0 = new ScriptStackElement[9];
      ScriptStackElement scriptStackElement0 = new ScriptStackElement((String) null, (String) null, 2752);
      scriptStackElementArray0[0] = scriptStackElement0;
      // Undeclared exception!
      try { 
        RhinoException.formatStackTrace(scriptStackElementArray0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportRuntimeError("\n    ", "\n    ", 320, "\n    ", 320);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //      (
         //     #320)
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvaluatorException evaluatorException0 = new EvaluatorException("LyY", "LyY", 0, "LyY", 0);
      int int0 = evaluatorException0.columnNumber();
      assertEquals(0, int0);
      assertEquals(0, evaluatorException0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.reportRuntimeError("", "", 334, "", 334);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  (#334)
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EcmaError ecmaError0 = new EcmaError(".java", ".java", ".java", 6, ".java", 6);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".java");
      ecmaError0.interpreterStackInfo = (Object) ".java";
      // Undeclared exception!
      try { 
        ecmaError0.printStackTrace((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to [Lorg.mozilla.javascript.Interpreter$CallFrame;
         //
         verifyException("org.mozilla.javascript.Interpreter", e);
      }
  }
}
