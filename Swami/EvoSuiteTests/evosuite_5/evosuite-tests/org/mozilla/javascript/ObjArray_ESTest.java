/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 01:56:11 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ObjArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjArray_ESTest extends ObjArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.setSize(12);
      objArray0.toArray();
      assertEquals(12, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      Object[] objectArray0 = new Object[5];
      objArray0.toArray(objectArray0);
      assertFalse(objArray0.isSealed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      int int0 = objArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.setSize(12);
      objArray0.setSize(0);
      assertTrue(objArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.push((Object) null);
      objArray0.set(0, objArray0);
      assertEquals(1, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      // Undeclared exception!
      try { 
        objArray0.set(0, objArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0 \u2209 [0, 0)
         //
         verifyException("org.mozilla.javascript.ObjArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.setSize(3);
      objArray0.push((Object) null);
      objArray0.add((Object) objArray0);
      objArray0.add((Object) objArray0);
      objArray0.add((Object) objArray0);
      objArray0.remove(0);
      assertEquals(6, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.setSize(12);
      objArray0.pop();
      assertEquals(11, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.setSize(3);
      objArray0.push((Object) null);
      objArray0.add((Object) objArray0);
      objArray0.pop();
      assertEquals(4, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.add((Object) null);
      objArray0.add((Object) null);
      objArray0.add(0, (Object) null);
      objArray0.push((Object) null);
      objArray0.add(4, (Object) null);
      objArray0.remove(4);
      objArray0.pop();
      assertEquals(3, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.push(objArray0);
      objArray0.add((Object) objArray0);
      objArray0.add((Object) objArray0);
      objArray0.pop();
      assertEquals(2, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.add((Object) objArray0);
      objArray0.add(0, (Object) objArray0);
      objArray0.pop();
      assertFalse(objArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.add((Object) objArray0);
      objArray0.pop();
      assertEquals(0, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      // Undeclared exception!
      try { 
        objArray0.pop();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Empty stack
         //
         verifyException("org.mozilla.javascript.ObjArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.push((Object) null);
      objArray0.peek();
      assertEquals(1, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.seal();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        objArray0.add(0, object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to modify sealed array
         //
         verifyException("org.mozilla.javascript.ObjArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.push((Object) null);
      int int0 = objArray0.lastIndexOf((Object) null);
      assertEquals(1, objArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      int int0 = objArray0.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      boolean boolean0 = objArray0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      boolean boolean0 = objArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.add((Object) null);
      int int0 = objArray0.indexOf((Object) null);
      assertEquals(1, objArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      Object object0 = new Object();
      objArray0.setSize(1588);
      int int0 = objArray0.indexOf(object0);
      assertEquals(1588, objArray0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.add((Object) objArray0);
      objArray0.get(0);
      assertEquals(1, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.setSize(12);
      objArray0.setSize(1588);
      assertEquals(1588, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.add((Object) null);
      assertFalse(objArray0.isEmpty());
      
      objArray0.clear();
      assertTrue(objArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.setSize(1588);
      objArray0.add(12, (Object) null);
      assertEquals(1589, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.setSize(3);
      objArray0.push(objArray0);
      objArray0.add((Object) objArray0);
      objArray0.add(1, (Object) objArray0);
      assertEquals(6, objArray0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjArray objArray0 = new ObjArray();
      objArray0.add(0, (Object) objArray0);
      int int0 = objArray0.lastIndexOf((Object) null);
      assertEquals(1, objArray0.size());
      assertEquals((-1), int0);
  }
}
