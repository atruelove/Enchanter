/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 03 06:06:33 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.Token;
import org.mozilla.javascript.ast.ArrayComprehension;
import org.mozilla.javascript.ast.Assignment;
import org.mozilla.javascript.ast.Block;
import org.mozilla.javascript.ast.BreakStatement;
import org.mozilla.javascript.ast.Comment;
import org.mozilla.javascript.ast.ConditionalExpression;
import org.mozilla.javascript.ast.ContinueStatement;
import org.mozilla.javascript.ast.ElementGet;
import org.mozilla.javascript.ast.ExpressionStatement;
import org.mozilla.javascript.ast.ForInLoop;
import org.mozilla.javascript.ast.ForLoop;
import org.mozilla.javascript.ast.FunctionCall;
import org.mozilla.javascript.ast.GeneratorExpressionLoop;
import org.mozilla.javascript.ast.IfStatement;
import org.mozilla.javascript.ast.InfixExpression;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.PropertyGet;
import org.mozilla.javascript.ast.RegExpLiteral;
import org.mozilla.javascript.ast.ReturnStatement;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.SwitchCase;
import org.mozilla.javascript.ast.TryStatement;
import org.mozilla.javascript.ast.UnaryExpression;
import org.mozilla.javascript.ast.XmlPropRef;
import org.mozilla.javascript.ast.Yield;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(997);
      Assignment assignment0 = new Assignment(xmlPropRef0, xmlPropRef0);
      xmlPropRef0.addChildToFront(assignment0);
      Node.NodeIterator node_NodeIterator0 = xmlPropRef0.new NodeIterator();
      node_NodeIterator0.next();
      node_NodeIterator0.remove();
      node_NodeIterator0.remove();
      node_NodeIterator0.remove();
      assertFalse(xmlPropRef0.hasChildren());
      assertEquals((-1), xmlPropRef0.getLineno());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(997);
      Node.NodeIterator node_NodeIterator0 = xmlPropRef0.new NodeIterator();
      // Undeclared exception!
      try { 
        node_NodeIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // next() has not been called
         //
         verifyException("org.mozilla.javascript.Node$NodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyGet propertyGet0 = new PropertyGet(5);
      Node.NodeIterator node_NodeIterator0 = propertyGet0.new NodeIterator();
      // Undeclared exception!
      try { 
        node_NodeIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Node$NodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlPropRef xmlPropRef0 = new XmlPropRef(997);
      Assignment assignment0 = new Assignment(xmlPropRef0, xmlPropRef0);
      xmlPropRef0.addChildToFront(assignment0);
      Node.NodeIterator node_NodeIterator0 = xmlPropRef0.new NodeIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_NodeIterator0.forEachRemaining(consumer0);
      assertTrue(xmlPropRef0.hasChildren());
      
      node_NodeIterator0.remove();
      node_NodeIterator0.remove();
      assertEquals((-1), xmlPropRef0.getLineno());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SwitchCase switchCase0 = new SwitchCase(819, 25);
      ScriptNode scriptNode0 = new ScriptNode();
      switchCase0.toStringTree(scriptNode0);
      assertEquals((-1), scriptNode0.getLineno());
      assertEquals((-1), switchCase0.getLineno());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      ExpressionStatement expressionStatement0 = new ExpressionStatement(arrayComprehension0);
      String string0 = expressionStatement0.toString();
      assertEquals("134", string0);
      assertEquals((-1), expressionStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = Node.newString(6, "Ri8+90LB");
      node0.setString("XMLEND");
      assertEquals("6", node0.toString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement(2410, 2410);
      ForInLoop forInLoop0 = new ForInLoop((-1366), 117);
      // Undeclared exception!
      try { 
        expressionStatement0.setScope(forInLoop0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      // Undeclared exception!
      try { 
        unaryExpression0.resetTargets();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(136);
      functionCall0.addChildrenToFront(functionCall0);
      functionCall0.addChildAfter(functionCall0, functionCall0);
      functionCall0.replaceChildAfter(functionCall0, functionCall0);
      assertTrue(functionCall0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Block block0 = new Block();
      Node node0 = new Node(78, block0);
      Node node1 = Node.newString(103, "Block");
      node0.addChildrenToFront(node1);
      assertEquals("103", node1.toString());
      
      node0.replaceChild(block0, block0);
      assertEquals((-1), block0.getLineno());
      assertEquals("78", node0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Block block0 = new Block();
      Node node0 = new Node(81, block0);
      node0.replaceChild(block0, block0);
      assertEquals((-1), node0.getLineno());
      assertEquals(81, node0.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Assignment assignment0 = new Assignment(103);
      assignment0.putIntProp(2, (-2831));
      assignment0.putProp(157, assignment0);
      assignment0.removeProp(2);
      assertEquals((-1), assignment0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Assignment assignment0 = new Assignment(103);
      assignment0.putIntProp(2, (-2831));
      assignment0.removeProp(2);
      assertEquals((-1), assignment0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Block block0 = new Block();
      block0.removeChildren();
      assertEquals((-1), block0.getLineno());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet();
      SwitchCase switchCase0 = new SwitchCase(10, 17);
      elementGet0.addChildrenToBack(switchCase0);
      // Undeclared exception!
      try { 
        elementGet0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Assignment assignment0 = new Assignment();
      assignment0.setJsDocNode((Comment) null);
      assertEquals((-1), assignment0.getLineno());
      assertEquals("-1", assignment0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = Node.newString("-1\tBLOCK -1 1\n");
      assertEquals(41, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Block block0 = new Block();
      block0.putIntProp(81, 81);
      Node node0 = new Node(81, block0);
      int int0 = node0.first.getIntProp(4, 2498);
      assertEquals(2498, int0);
      assertEquals("81", node0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = Node.newTarget();
      node0.addChildToFront(node1);
      assertEquals(132, node1.getType());
      
      node0.resetTargets();
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Yield yield0 = new Yield();
      int int0 = yield0.labelId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral(1617, "node is not a child", 0);
      // Undeclared exception!
      try { 
        numberLiteral0.labelId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      Node node0 = new Node(0, unaryExpression0, unaryExpression0);
      boolean boolean0 = node0.hasSideEffects();
      assertEquals((-1), unaryExpression0.getLineno());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), unaryExpression0.getType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Assignment assignment0 = new Assignment();
      Node node0 = new Node(91, assignment0, assignment0, assignment0);
      boolean boolean0 = node0.hasSideEffects();
      assertEquals((-1), assignment0.getOperator());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
      assertTrue(node0.hasChildren());
      assertEquals(91, node0.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Assignment assignment0 = new Assignment();
      Node node0 = new Node(105, assignment0, assignment0, assignment0);
      boolean boolean0 = node0.hasSideEffects();
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
      assertEquals("105", node0.toString());
      assertEquals((-1), assignment0.getOperator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Assignment assignment0 = new Assignment(103);
      Node node0 = new Node(103, assignment0, assignment0, assignment0);
      node0.addChildToBack(assignment0);
      boolean boolean0 = node0.hasSideEffects();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), assignment0.getType());
      assertEquals("103", node0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Assignment assignment0 = new Assignment(90);
      Node node0 = new Node(90, assignment0, assignment0, assignment0);
      assertTrue(node0.hasChildren());
      
      node0.removeChild(assignment0);
      boolean boolean0 = node0.hasSideEffects();
      assertFalse(node0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Assignment assignment0 = new Assignment(90);
      Node node0 = new Node(90, assignment0, assignment0, assignment0);
      boolean boolean0 = node0.hasSideEffects();
      assertEquals("90", node0.toString());
      assertEquals((-1), assignment0.getLineno());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
      assertTrue(node0.hasChildren());
      assertEquals((-1), assignment0.getOperator());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Assignment assignment0 = new Assignment(103);
      Node node0 = new Node(103, assignment0, assignment0, assignment0);
      // Undeclared exception!
      try { 
        node0.hasSideEffects();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Yield yield0 = new Yield();
      boolean boolean0 = yield0.hasChildren();
      assertFalse(boolean0);
      assertEquals((-1), yield0.getLineno());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Block block0 = new Block();
      block0.debugPrint();
      assertEquals((-1), block0.getLineno());
      assertEquals(130, block0.getType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      // Undeclared exception!
      try { 
        generatorExpressionLoop0.getString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.ast.GeneratorExpressionLoop cannot be cast to org.mozilla.javascript.ast.Name
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ForLoop forLoop0 = new ForLoop(115);
      // Undeclared exception!
      try { 
        forLoop0.getScope();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.ast.ForLoop cannot be cast to org.mozilla.javascript.ast.Name
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement();
      ifStatement0.getNext();
      assertEquals((-1), ifStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = Node.newTarget();
      int int0 = node0.getLineno();
      assertEquals("132", node0.toString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Yield yield0 = new Yield();
      yield0.getLastChild();
      assertEquals((-1), yield0.getLineno());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = new Node(1021);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(2, 1, token_CommentType0, "");
      node0.setJsDocNode(comment0);
      String string0 = node0.getJsDoc();
      assertNotNull(string0);
      assertEquals("1021", node0.toString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Assignment assignment0 = new Assignment();
      assignment0.getJsDoc();
      assertEquals((-1), assignment0.getLineno());
      assertEquals((-1), assignment0.getType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement(2410, 2410);
      expressionStatement0.putIntProp(2410, 2410);
      int int0 = expressionStatement0.getIntProp(2410, (-36));
      assertEquals(2410, int0);
      assertEquals((-1), expressionStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ForLoop forLoop0 = new ForLoop(0, 20);
      forLoop0.getFirstChild();
      assertEquals((-1), forLoop0.getLineno());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Assignment assignment0 = new Assignment();
      assignment0.putProp(157, assignment0);
      int int0 = assignment0.getExistingIntProp(157);
      assertEquals(0, int0);
      assertEquals((-1), assignment0.getLineno());
      assertEquals("-1", assignment0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InfixExpression infixExpression0 = new InfixExpression();
      // Undeclared exception!
      try { 
        infixExpression0.getDouble();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Block block0 = new Block();
      Node node0 = new Node(81, block0);
      Node node1 = Node.newString(113, "Block");
      node0.first.addChildToFront(node1);
      // Undeclared exception!
      try { 
        block0.removeChild(node0.first);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Block block0 = new Block();
      Node node0 = new Node(81, block0);
      Node node1 = Node.newString(113, "Block");
      node0.first.addChildToFront(node1);
      assertEquals("113", node1.toString());
      
      boolean boolean0 = node0.first.hasConsistentReturnUsage();
      assertEquals("81", node0.toString());
      assertTrue(boolean0);
      assertEquals((-1), block0.getLineno());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Node node0 = Node.newTarget();
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      Node node1 = new Node(8, node0, regExpLiteral0, regExpLiteral0);
      assertEquals(8, node1.getType());
      assertEquals((-1), node1.getLineno());
      
      boolean boolean0 = node0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals(132, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = Node.newTarget();
      boolean boolean0 = node0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ReturnStatement returnStatement0 = new ReturnStatement(0);
      boolean boolean0 = returnStatement0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals((-1), returnStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement((Name) null);
      boolean boolean0 = continueStatement0.hasConsistentReturnUsage();
      assertEquals((-1), continueStatement0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Yield yield0 = new Yield();
      boolean boolean0 = yield0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals((-1), yield0.getLineno());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement(2410, 2410);
      ForInLoop forInLoop0 = new ForInLoop((-1366), 117);
      expressionStatement0.addChildToBack(forInLoop0);
      boolean boolean0 = expressionStatement0.hasConsistentReturnUsage();
      assertTrue(expressionStatement0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement(2410, 2410);
      boolean boolean0 = expressionStatement0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals((-1), expressionStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BreakStatement breakStatement0 = new BreakStatement();
      // Undeclared exception!
      try { 
        breakStatement0.hasConsistentReturnUsage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Block block0 = new Block();
      Node node0 = new Node(78, block0);
      assertTrue(node0.hasChildren());
      
      boolean boolean0 = node0.first.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals(78, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), block0.getLineno());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FunctionCall functionCall0 = new FunctionCall(136);
      functionCall0.addChildrenToFront(functionCall0);
      // Undeclared exception!
      functionCall0.addChildrenToBack(functionCall0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConditionalExpression conditionalExpression0 = new ConditionalExpression();
      Node node0 = Node.newNumber(8);
      Yield yield0 = new Yield(1, 27);
      conditionalExpression0.addChildToBack(node0);
      assertTrue(conditionalExpression0.hasChildren());
      
      conditionalExpression0.addChildrenToBack(yield0);
      conditionalExpression0.addChildBefore(yield0, yield0);
      assertEquals((-1), conditionalExpression0.getLineno());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConditionalExpression conditionalExpression0 = new ConditionalExpression();
      Yield yield0 = new Yield(93, 27);
      conditionalExpression0.addChildrenToBack(yield0);
      conditionalExpression0.addChildBefore(yield0, yield0);
      // Undeclared exception!
      try { 
        conditionalExpression0.addChildBefore(yield0, yield0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // newChild had siblings in addChildBefore
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TryStatement tryStatement0 = new TryStatement();
      Node node0 = new Node(0, tryStatement0, tryStatement0, tryStatement0, 13);
      assertTrue(node0.hasChildren());
      assertEquals(13, node0.getLineno());
      assertEquals("0", node0.toString());
      assertEquals((-1), tryStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      Node node0 = new Node(23, regExpLiteral0, regExpLiteral0, (-1988));
      assertTrue(node0.hasChildren());
      assertEquals((-1), regExpLiteral0.getLineno());
      assertEquals((-1988), node0.getLineno());
      assertEquals(23, node0.getType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      InfixExpression infixExpression0 = new InfixExpression();
      Node node0 = new Node((-174), infixExpression0, 1);
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), infixExpression0.getLineno());
      assertEquals("-1", infixExpression0.toString());
      assertEquals((-174), node0.getType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Block block0 = new Block();
      Node node0 = new Node(78, block0);
      node0.addChildBefore(block0, block0);
      NumberLiteral numberLiteral0 = new NumberLiteral((double) 1);
      // Undeclared exception!
      try { 
        numberLiteral0.addChildAfter(block0, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // newChild had siblings in addChildAfter
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Node node0 = new Node(57, 57);
      assertEquals(57, node0.getLineno());
      assertEquals("57", node0.toString());
  }
}
