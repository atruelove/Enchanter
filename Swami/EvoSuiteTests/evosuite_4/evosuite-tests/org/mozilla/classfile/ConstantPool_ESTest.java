/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 05:29:58 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ClassFileWriter;
import org.mozilla.classfile.ConstantPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPool_ESTest extends ConstantPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org/mozilla/classfile/ClassFileWriter/org/mozilla/classfile/ClassFileWriterorg/mozilla/classfile/ClassFileWriter (-13)", "org/mozilla/classfile/ClassFileWriter/org/mozilla/classfile/ClassFileWriterorg/mozilla/classfile/ClassFileWriter (-13)", "org/mozilla/classfile/ClassFileWriter/org/mozilla/classfile/ClassFileWriterorg/mozilla/classfile/ClassFileWriter (-13)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      boolean boolean0 = constantPool0.isUnderUtfEncodingLimit("Lorg/mozilla/classfile/ClassFileWriter/org/mozilla/classfile/ClassFileWriterorg/mozilla/classfile/ClassFileWriter (-13);");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("(I)V", "(I)V", "(I)V");
      // Undeclared exception!
      try { 
        classFileWriter0.write((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org/mozilla/classfile/ClassFileWriter/org/mozilla/classfile/ClassFileWriterorg/mozilla/classfile/ClassFileWriter (-13)", "org/mozilla/classfile/ClassFileWriter/org/mozilla/classfile/ClassFileWriterorg/mozilla/classfile/ClassFileWriter (-13)", "org/mozilla/classfile/ClassFileWriter/org/mozilla/classfile/ClassFileWriterorg/mozilla/classfile/ClassFileWriter (-13)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.getUtfEncodingLimit("org/mozilla/classfile/ClassFileWriter/org/mozilla/classfile/ClassFileWriterorg/mozilla/classfile/ClassFileWriter (-13)", (-1640531527), (-889275667));
      assertEquals((-889275667), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("[jOA{;;0,", "[jOA{;;0,", "[jOA{;;0,");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        constantPool0.getUtfEncodingLimit("[jOA{;;0,", (short)256, 32224);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "", "");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      byte byte0 = constantPool0.getConstantType((short)256);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Bad bounds: ", "Bad bounds: ", "");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Object object0 = constantPool0.getConstantData(275);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("", "org.mozilla.javascript.ObjToIntMap", "10k[T#~Q");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.addConstant((short)32);
      //  // Unstable assertion: assertEquals(1, int0);
      
      constantPool0.addUtf8("org.mozilla.classfile.ConstantPool");
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte) (-104), "org.mozilla.javascript.ObjToIntMap", "org.mozilla.javascript.ObjToIntMap", "org.mozilla.javascript.ObjToIntMap");
      constantPool0.addConstant(classFileWriter_MHandle0);
      short short0 = constantPool0.addMethodRef("org.mozilla.classfile.ConstantPool", "org.mozilla.javascript.ObjToIntMap", "org.mozilla.javascript.ObjToIntMap");
      //  // Unstable assertion: assertEquals((short)14, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("-{F=yX3,6yZC\u0000ne5w:", "8DO8/I[BF]M\u0002se", "8DO8/I[BF]M\u0002se");
      assertEquals((short)2, ClassFileWriter.ACC_PRIVATE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter(",XW2C#", ",XW2C#", ",XW2C#");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)9, ",XW2C#", ",XW2C#", ",XW2C#");
      short short0 = constantPool0.addMethodHandle(classFileWriter_MHandle0);
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileWriter", "org.mozilla.classfile.ClassFileWriter", "org.mozilla.classfile.ClassFileWriter");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      ClassFileWriter.MHandle classFileWriter_MHandle0 = new ClassFileWriter.MHandle((byte)11, "org.mozilla.classfile.ClassFileWriter", "org.mozilla.classfile.ClassFileWriter", "org.mozilla.classfile.ClassFileWriter");
      short short0 = constantPool0.addMethodHandle(classFileWriter_MHandle0);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileWriter", "org.mozilla.classfile.ClassFileWriter", "org.mozilla.classfile.ClassFileWriter");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      short short0 = constantPool0.addInvokeDynamic("org.mozilla.classfile.ClassFileWriter", "o>g.mozilla.clasvfile.Consta)tP\"ol", (short)32);
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("T8o big string", "T8o big string", "T8o big string");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        constantPool0.addConstant(constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mozilla.classfile.ConstantPool@17
         //
         verifyException("org.mozilla.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Bad jump target: ", "Bad jump target: ", "Bad jump target: ");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Boolean boolean0 = new Boolean(false);
      int int0 = constantPool0.addConstant(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("Too big string", "Too big string", "Too big string");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Character character0 = Character.valueOf('8');
      int int0 = constantPool0.addConstant(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((ClassFileWriter) null);
      Long long0 = new Long(635L);
      int int0 = constantPool0.addConstant(long0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileWriter", "org.mozilla.classfile.ClassFileWriter", "org.mozilla.classfile.ClassFileWriter");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.addConstant((short)64);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("org.mozilla.classfile.ClassFileWriter.org.mozilla.classfile.ClassFileWriterorg.mozilla.classfile.ClassFileWriter (-13)", "org.mozilla.classfile.ClassFileWriter.org.mozilla.classfile.ClassFileWriterorg.mozilla.classfile.ClassFileWriter (-13)", "org.mozilla.classfile.ClassFileWriter.org.mozilla.classfile.ClassFileWriterorg.mozilla.classfile.ClassFileWriter (-13)");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Float float0 = new Float((float) (short)2);
      int int0 = constantPool0.addConstant(float0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("T8o big string", "T8o big string", "T8o big string");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      Double double0 = new Double((short)32);
      int int0 = constantPool0.addConstant(double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("W7.qG]|\"j", "ICU\u2209[,knmd ", "W7.qG]|\"j");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        constantPool0.getUtfEncodingLimit("ICU\u2209[,knmd ", (short)2, 65535);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("%uZ~}w9|-HET2L+", "%uZ~}w9|-HET2L+", "%uZ~}w9|-HET2L+");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = constantPool0.addConstant("%uZ~}w9|-HET2L+");
      assertEquals(2, int0);
  }
}
