/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 05:17:19 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ClassFileWriter;
import org.mozilla.classfile.ConstantPool;
import org.mozilla.classfile.TypeInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeInfo_ESTest extends TypeInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("`k.*wK!d8XTq/zU", "`k.*wK!d8XTq/zU", "`k.*wK!d8XTq/zU");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      String string0 = TypeInfo.toString(6, constantPool0);
      assertNotNull(string0);
      assertEquals("uninitialized_this", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("%4ID[O*Q}n QY&Z|!", "%4ID[O*Q}n QY&Z|!", "%4ID[O*Q}n QY&Z|!");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        TypeInfo.merge(519, (short)4, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad merge attempt between null and long
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.merge(3, 75, (ConstantPool) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad type
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("`k.*wK!d8XTq/zU", "`k.*wK!d8XTq/zU", "`k.*wK!d8XTq/zU");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        TypeInfo.merge(5, (short)2, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad merge attempt between null and float
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[11];
      TypeInfo.print(intArray0, intArray0, (ConstantPool) null);
      assertEquals(11, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("K.*_7EdX4T/N{U", "K.*_7EdX4T/N{U", "K.*_7EdX4T/N{U");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        TypeInfo.merge((short)8, (short)1, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad merge attempt between uninitialized and int
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("`Yk.*_7EdX4T/NzU", "`Yk.*_7EdX4T/NzU", "`Yk.*_7EdX4T/NzU");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      TypeInfo.fromType("`Yk.*_7EdX4T/NzU", constantPool0);
      int int0 = TypeInfo.fromType("org.mozilla.classfile.TypeInfo", constantPool0);
      int int1 = TypeInfo.merge(1031, 519, constantPool0);
      assertTrue(int1 == int0);
      assertEquals(1031, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("~yD;?-", "~yD;?-", "~yD;?-");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      TypeInfo.fromType("~yD;?-", constantPool0);
      // Undeclared exception!
      try { 
        TypeInfo.merge(519, 3079, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("%4ID[O*Q}n QY&Z|!", "%4ID[O*Q}n QY&Z|!", "%4ID[O*Q}n QY&Z|!");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = TypeInfo.merge(5, 519, constantPool0);
      assertEquals(519, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("F", "F", "F");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = TypeInfo.merge((short)8, (short)256, constantPool0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("`Yk.*_7EdX4T/NzU", "`Yk.*_7EdX4T/NzU", "`Yk.*_7EdX4T/NzU");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = TypeInfo.merge(1031, 5, constantPool0);
      assertEquals(1031, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = TypeInfo.isTwoWords(73);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.getPayloadAsType(0, (ConstantPool) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expecting object type
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("`k.*wK7EdX4T/NzU", "`k.*wK7EdX4T/NzU", "`k.*wK7EdX4T/NzU");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      TypeInfo.fromType("`k.*wK7EdX4T/NzU", constantPool0);
      TypeInfo.fromType("Bad endLabel", constantPool0);
      // Undeclared exception!
      try { 
        TypeInfo.merge(1031, 519, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'Bad endLabel.class' should be in target project, but could not be found!
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("~yD;?-", "~yD;?-", "~yD;?-");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      TypeInfo.fromType("~yD;?-", constantPool0);
      constantPool0.addFieldRef("org.mozilla.classfile.ClassFileWriter$ClassFileFormatException", "org.mozilla.classfile.TypeInfo", "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException");
      TypeInfo.fromType("org.mozilla.classfile.TypeInfo", constantPool0);
      int int0 = TypeInfo.merge(2567, 519, constantPool0);
      assertEquals(3079, int0);
      
      int int1 = TypeInfo.merge(519, 3079, constantPool0);
      assertEquals(3079, int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("6", "6", "6");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      // Undeclared exception!
      try { 
        TypeInfo.fromType("6", constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad type
         //
         verifyException("org.mozilla.classfile.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("J", "J", "J");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = TypeInfo.fromType("J", constantPool0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = TypeInfo.fromType("D", (ConstantPool) null);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = TypeInfo.fromType("B", (ConstantPool) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassFileWriter classFileWriter0 = new ClassFileWriter("F", "F", "F");
      ConstantPool constantPool0 = new ConstantPool(classFileWriter0);
      int int0 = TypeInfo.fromType("F", constantPool0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = TypeInfo.UNINITIALIZED_VARIABLE(0);
      assertEquals(8, int0);
  }
}
