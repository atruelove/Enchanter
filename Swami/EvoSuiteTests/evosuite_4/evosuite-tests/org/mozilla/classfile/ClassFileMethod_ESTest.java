/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 05:17:34 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ClassFileMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassFileMethod_ESTest extends ClassFileMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassFileMethod classFileMethod0 = new ClassFileMethod("org.mozilla.classfile.ClassFileMethod", (short)1, "org.mozilla.classfile.ClassFileMethod", (short)1, (short)1);
      byte[] byteArray0 = new byte[19];
      // Undeclared exception!
      try { 
        classFileMethod0.write(byteArray0, (short)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassFileMethod classFileMethod0 = new ClassFileMethod((String) null, (short)1, (String) null, (short)1, (short)1);
      // Undeclared exception!
      try { 
        classFileMethod0.getWriteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.classfile.ClassFileMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassFileMethod classFileMethod0 = new ClassFileMethod("@I[0P$", (short)1, "@I[0P$", (short)1, (short)1);
      String string0 = classFileMethod0.getType();
      assertEquals("@I[0P$", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassFileMethod classFileMethod0 = new ClassFileMethod("T", (short)0, "T", (short)0, (short)0);
      String string0 = classFileMethod0.getName();
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassFileMethod classFileMethod0 = new ClassFileMethod("", (short)0, "", (short)0, (short) (-494));
      short short0 = classFileMethod0.getFlags();
      assertEquals((short) (-494), short0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassFileMethod classFileMethod0 = new ClassFileMethod("org.mozilla.classfile.ClassFileMethod", (short)1, "org.mozilla.classfile.ClassFileMethod", (short)1, (short)1);
      byte[] byteArray0 = new byte[2];
      classFileMethod0.setCodeAttribute(byteArray0);
      byte[] byteArray1 = new byte[19];
      int int0 = classFileMethod0.write(byteArray1, (short)1);
      assertEquals(11, int0);
  }
}
