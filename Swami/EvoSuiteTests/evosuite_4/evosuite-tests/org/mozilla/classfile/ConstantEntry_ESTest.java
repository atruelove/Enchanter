/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 05:22:42 GMT 2018
 */

package org.mozilla.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.classfile.ConstantEntry;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantEntry_ESTest extends ConstantEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantEntry constantEntry0 = new ConstantEntry(3, 3, "unsupported constant type", "unsupported constant type");
      constantEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantEntry constantEntry0 = new ConstantEntry(7, 7, "rd$<*0%", "rd$<*0%");
      // Undeclared exception!
      try { 
        constantEntry0.equals(constantEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported constant type
         //
         verifyException("org.mozilla.classfile.ConstantEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantEntry constantEntry0 = new ConstantEntry(18, 18, "L1IXt", "46<#:_LE(RZ");
      boolean boolean0 = constantEntry0.equals(constantEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantEntry constantEntry0 = new ConstantEntry(5, 5, "au%E57]9W8sD |Ve", "au%E57]9W8sD |Ve");
      boolean boolean0 = constantEntry0.equals(constantEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantEntry constantEntry0 = new ConstantEntry(3, 3, "iL`@^Eu", "iL`@^Eu");
      boolean boolean0 = constantEntry0.equals(constantEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantEntry constantEntry0 = new ConstantEntry(5, 5, "au%E57]9W8sD |Ve", "au%E57]9W8sD |Ve");
      ConstantEntry constantEntry1 = new ConstantEntry(3290, 5, "au%E57]9W8sD |Ve", "au%E57]9W8sD |Ve");
      boolean boolean0 = constantEntry0.equals(constantEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantEntry constantEntry0 = new ConstantEntry(3, 3, "iL`@^Eu", "iL`@^Eu");
      boolean boolean0 = constantEntry0.equals("iL`@^Eu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConstantEntry constantEntry0 = new ConstantEntry(12, 12, "DQ.N>>#$#%y'", "DQ.N>>#$#%y'");
      boolean boolean0 = constantEntry0.equals(constantEntry0);
      assertTrue(boolean0);
  }
}
