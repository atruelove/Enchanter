/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 22:01:22 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArrayIterator;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeStringIterator;
import org.mozilla.javascript.Scriptable;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeJavaClass_ESTest extends NativeJavaClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      boolean boolean0 = nativeJavaClass0.hasInstance(nativeJavaClass0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        nativeJavaClass0.getIds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      double double0 = Context.toNumber(nativeJavaClass0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeStringIterator nativeStringIterator0 = null;
      try {
        nativeStringIterator0 = new NativeStringIterator(nativeJavaClass0, nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeStringIterator nativeStringIterator0 = new NativeStringIterator(importerTopLevel0, importerTopLevel0);
      Class<Annotation> class0 = Annotation.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(nativeStringIterator0, class0);
      Class<NativeArrayIterator> class1 = NativeArrayIterator.class;
      NativeJavaClass nativeJavaClass1 = (NativeJavaClass)nativeJavaClass0.getDefaultValue(class1);
      assertEquals("JavaClass", nativeJavaClass1.getClassName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      String string0 = nativeJavaClass0.getClassName();
      assertEquals("JavaClass", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object object0 = nativeJavaClass0.get("prototype", (Scriptable) nativeJavaClass0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeStringIterator nativeStringIterator0 = new NativeStringIterator(importerTopLevel0, importerTopLevel0);
      Class<Annotation> class0 = Annotation.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(nativeStringIterator0, class0);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        nativeJavaClass0.construct(context0, importerTopLevel0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error instantiating (TypeError: Expected argument of type object, but instead had type object): class java.lang.annotation.Annotation is interface or abstract
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }
}
