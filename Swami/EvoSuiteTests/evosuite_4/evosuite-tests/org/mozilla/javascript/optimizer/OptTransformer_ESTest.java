/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 03:28:16 GMT 2018
 */

package org.mozilla.javascript.optimizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ObjArray;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.Jump;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.optimizer.OptFunctionNode;
import org.mozilla.javascript.optimizer.OptTransformer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptTransformer_ESTest extends OptTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      NumberLiteral numberLiteral0 = new NumberLiteral(15, 15);
      ScriptNode scriptNode0 = new ScriptNode(2);
      optTransformer0.visitNew(numberLiteral0, scriptNode0);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      NumberLiteral numberLiteral0 = new NumberLiteral(33);
      numberLiteral0.setType(34);
      Jump jump0 = new Jump(33, numberLiteral0, 13);
      AstRoot astRoot0 = new AstRoot();
      FunctionNode functionNode0 = new FunctionNode(18);
      jump0.addChildToBack(astRoot0);
      // Undeclared exception!
      try { 
        optTransformer0.visitCall(jump0, functionNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      NumberLiteral numberLiteral0 = new NumberLiteral(33);
      numberLiteral0.setType(33);
      Jump jump0 = new Jump(33, numberLiteral0, 2);
      AstRoot astRoot0 = new AstRoot(4);
      FunctionNode functionNode0 = new FunctionNode();
      jump0.addChildToBack(astRoot0);
      // Undeclared exception!
      try { 
        optTransformer0.visitCall(jump0, functionNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      NumberLiteral numberLiteral0 = new NumberLiteral(3, 3);
      numberLiteral0.setType(39);
      Jump jump0 = new Jump(3, numberLiteral0, 7);
      AstRoot astRoot0 = new AstRoot();
      FunctionNode functionNode0 = new FunctionNode(2);
      jump0.addChildToBack(astRoot0);
      // Undeclared exception!
      try { 
        optTransformer0.visitCall(jump0, functionNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mozilla.javascript.ast.NumberLiteral cannot be cast to org.mozilla.javascript.ast.Name
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      NumberLiteral numberLiteral0 = new NumberLiteral();
      Jump jump0 = new Jump(1790, numberLiteral0, 2);
      AstRoot astRoot0 = new AstRoot(1);
      FunctionNode functionNode0 = new FunctionNode();
      jump0.addChildToBack(astRoot0);
      optTransformer0.visitCall(jump0, functionNode0);
      assertEquals((-1), functionNode0.getBaseLineno());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, OptFunctionNode> hashMap0 = new HashMap<String, OptFunctionNode>();
      ObjArray objArray0 = new ObjArray();
      OptTransformer optTransformer0 = new OptTransformer(hashMap0, objArray0);
      NumberLiteral numberLiteral0 = new NumberLiteral();
      Jump jump0 = new Jump(1790, numberLiteral0, 2);
      FunctionNode functionNode0 = new FunctionNode();
      // Undeclared exception!
      try { 
        optTransformer0.visitCall(jump0, functionNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.optimizer.OptTransformer", e);
      }
  }
}
