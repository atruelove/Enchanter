/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 18:19:47 GMT 2018
 */

package org.mozilla.javascript.v8dtoa;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.v8dtoa.FastDtoa;
import org.mozilla.javascript.v8dtoa.FastDtoaBuilder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDtoa_ESTest extends FastDtoa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FastDtoa.numberToString((-63.451856470308655));
      assertNotNull(string0);
      assertEquals("-63.451856470308655", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(94, 1);
      assertEquals(4294967296L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen((-2147051180), 4);
      assertEquals(4294967295L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(10, 10);
      assertEquals(42949672961L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = FastDtoa.numberToString((double) 1000000);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(3605, 14);
      assertEquals(4294967296003L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDtoaBuilder fastDtoaBuilder0 = new FastDtoaBuilder();
      boolean boolean0 = FastDtoa.grisu3((-5), fastDtoaBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDtoaBuilder fastDtoaBuilder0 = new FastDtoaBuilder();
      boolean boolean0 = FastDtoa.numberToString((double) (-7236L), fastDtoaBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(2127813535, 29);
      assertEquals(429496729600000008L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(1000000, 30);
      assertEquals(4294967296000006L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen(2120640064, 32);
      assertEquals(4294967296000000009L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = FastDtoa.biggestPowerTen((-1907), (-1907));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDtoa fastDtoa0 = new FastDtoa();
  }
}
