/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 19:10:53 GMT 2018
 */

package org.mozilla.javascript.tools.shell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.StringReader;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.mozilla.javascript.tools.shell.ConsoleTextArea;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConsoleTextArea_ESTest extends ConsoleTextArea_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.REMOVE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0.new DefaultDocumentEvent((-1324), (-1324), documentEvent_EventType0);
      consoleTextArea0.removeUpdate(abstractDocument_DefaultDocumentEvent0);
      // Undeclared exception!
      try { 
        consoleTextArea0.returnPressed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      consoleTextArea0.write("Nc%BG'<H`Cn>#nb");
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.INSERT;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent(12, 1984, documentEvent_EventType0);
      consoleTextArea0.removeUpdate(abstractDocument_DefaultDocumentEvent0);
      assertFalse(consoleTextArea0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea((String[]) null);
      consoleTextArea0.postUpdateUI();
      assertTrue(consoleTextArea0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      MenuElement[] menuElementArray0 = new MenuElement[20];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, 36, 36, 36, 36, 'X', menuElementArray0, menuSelectionManager0);
      consoleTextArea0.returnPressed();
      consoleTextArea0.keyTyped(menuKeyEvent0);
      assertEquals('X', menuKeyEvent0.getKeyChar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      KeyEvent keyEvent0 = new KeyEvent(consoleTextArea0, 0, 0, 0, 0, '\b');
      consoleTextArea0.keyTyped(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      KeyEvent keyEvent0 = new KeyEvent(consoleTextArea0, 0, 292, 10, 10, '\"');
      consoleTextArea0.keyReleased(keyEvent0);
      assertTrue(consoleTextArea0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      StringReader stringReader0 = new StringReader("A3@9fl@3m_ow");
      consoleTextArea0.read(stringReader0, (Object) null);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, 40, 1, (byte) (-81), 40, '0', menuElementArray0, menuSelectionManager0);
      consoleTextArea0.returnPressed();
      consoleTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      StringReader stringReader0 = new StringReader("A3@fl@3m_ow");
      consoleTextArea0.read(stringReader0, (Object) null);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, 38, (-13), (-13), 38, '=', menuElementArray0, menuSelectionManager0);
      consoleTextArea0.returnPressed();
      consoleTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, 38, (-13), (-13), 38, '=', menuElementArray0, menuSelectionManager0);
      consoleTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      consoleTextArea0.write("jMC{O(c#=1o,&kR@Kd");
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.INSERT;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0.new DefaultDocumentEvent((-12), (-12), documentEvent_EventType0);
      consoleTextArea0.insertUpdate(abstractDocument_DefaultDocumentEvent0);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, (-12), (-12), (-12), 36, 'M', menuElementArray0, (MenuSelectionManager) null);
      consoleTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, (-3715), (-3715), (-3715), 36, 'M', menuElementArray0, (MenuSelectionManager) null);
      consoleTextArea0.keyPressed(menuKeyEvent0);
      assertTrue(menuKeyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      KeyEvent keyEvent0 = new KeyEvent(consoleTextArea0, 8, 8, 8, 8, 'I');
      consoleTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.INSERT;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0.new DefaultDocumentEvent((-12), (-12), documentEvent_EventType0);
      consoleTextArea0.insertUpdate(abstractDocument_DefaultDocumentEvent0);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(consoleTextArea0, (-3715), (-3715), (-3715), 36, 'M', menuElementArray0, (MenuSelectionManager) null);
      // Undeclared exception!
      try { 
        consoleTextArea0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad position: -12
         //
         verifyException("javax.swing.text.JTextComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      KeyEvent keyEvent0 = new KeyEvent(consoleTextArea0, 292, 292, 10, 10, '(');
      consoleTextArea0.keyPressed(keyEvent0);
      assertTrue(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      PrintStream printStream0 = consoleTextArea0.getOut();
      assertNotNull(printStream0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      InputStream inputStream0 = consoleTextArea0.getIn();
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      PrintStream printStream0 = consoleTextArea0.getErr();
      assertNotNull(printStream0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea(stringArray0);
      consoleTextArea0.eval("");
      assertFalse(consoleTextArea0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConsoleTextArea consoleTextArea0 = new ConsoleTextArea((String[]) null);
      GapContent gapContent0 = new GapContent((-2478));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.CHANGE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0.new DefaultDocumentEvent((-2478), (-2478), documentEvent_EventType0);
      consoleTextArea0.changedUpdate(abstractDocument_DefaultDocumentEvent0);
      assertFalse(consoleTextArea0.getIgnoreRepaint());
  }
}
