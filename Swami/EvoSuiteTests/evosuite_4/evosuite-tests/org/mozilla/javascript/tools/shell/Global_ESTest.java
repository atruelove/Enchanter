/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 19:50:25 GMT 2018
 */

package org.mozilla.javascript.tools.shell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.MalformedURLException;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.commonjs.module.Require;
import org.mozilla.javascript.tools.shell.Global;
import org.mozilla.javascript.tools.shell.QuitAction;
import org.mozilla.javascript.tools.shell.ShellConsole;
import org.mozilla.javascript.tools.shell.ShellContextFactory;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Global_ESTest extends Global_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      Synchronizer synchronizer0 = new Synchronizer(global0, global0);
      Object[] objectArray0 = new Object[1];
      double double0 = Global.version(context0, global0, objectArray0, synchronizer0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = Context.enter();
      double double0 = Global.version(context0, (Scriptable) null, context0.emptyArgs, (Function) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object object0 = Global.toint32(context0, nativeArrayBuffer0, context0.emptyArgs, nativeJavaClass0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Global global0 = new Global(context0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, false);
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array();
      // Undeclared exception!
      try { 
        Global.sync(context0, nativeInt16Array0, context0.emptyArgs, require0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.sync.args
         //
         verifyException("org.mozilla.javascript.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Global global0 = new Global();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Require require0 = global0.installRequire(context0, (List<String>) null, true);
      // Undeclared exception!
      try { 
        Global.spawn(context0, global0, context0.emptyArgs, require0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Argument to spawn() must be a function or script.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Global global0 = new Global();
      global0.setSealedStdLib(false);
      assertEquals("object", global0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Global global0 = new Global();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      global0.setIn(pipedInputStream0);
      assertEquals("JavaImporter", global0.getClassName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(22);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.mozilla.javascript.ast.ArrayComprehension");
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeInt32Array0, mockPrintStream0, 8, "org.mozilla.javascript.ast.ArrayComprehension", 19, nativeInt32Array0);
      Object[] objectArray0 = new Object[3];
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        Global.serialize(context0, idFunctionObjectES6_0, objectArray0, idFunctionObjectES6_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object for excluded name Object not found.
         //
         verifyException("org.mozilla.javascript.serialize.ScriptableOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Global global0 = new Global();
      Object[] objectArray0 = ScriptableObject.getPropertyIds(global0);
      Context context0 = Context.enter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Require require0 = global0.installRequire(context0, linkedList0, true);
      // Undeclared exception!
      try { 
        Global.serialize(context0, require0, objectArray0, require0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected an object to serialize and a filename to write the serialization to
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      Scriptable scriptable0 = global0.getPrototype();
      // Undeclared exception!
      try { 
        global0.runDoctest(context0, scriptable0, "js>language version", "decodeURIComponent", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // doctest failure running:
         // language version
         // expected: actual: js: \"doctest input\", line 1: missing ; before statement
         // js: language version
         // js: ...............^
         // js: \"doctest input\", line 1: Compilation produced 1 syntax errors.
         // 
         // 
         //  (decodeURIComponent#13)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      NativeObject nativeObject0 = (NativeObject)global0.getPrototype();
      int int0 = global0.runDoctest(context0, nativeObject0, "env", "decodeURIComponent", 13);
      assertFalse(nativeObject0.isSealed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(22);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.mozilla.javascript.ast.ArrayComprehension");
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeInt32Array0, mockPrintStream0, 8, "org.mozilla.javascript.ast.ArrayComprehension", 19, nativeInt32Array0);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) idFunctionObjectES6_0;
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        Global.runCommand(context0, nativeInt32Array0, objectArray0, idFunctionObjectES6_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.bad.shell.function.scope
         //
         verifyException("org.mozilla.javascript.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(10);
      BaseFunction baseFunction0 = new BaseFunction(nativeUint16Array0, nativeUint16Array0);
      // Undeclared exception!
      try { 
        Global.runCommand(context0, nativeUint16Array0, context0.emptyArgs, baseFunction0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // The first argument to runCommand must be a command name.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.enter();
      String[] stringArray0 = global0.getPrompts(context0);
      Global global1 = new Global(context0);
      IdFunctionObject idFunctionObject0 = global0.exportAsJSClass(11, global1, true);
      // Undeclared exception!
      try { 
        Global.readline(context0, global0, stringArray0, idFunctionObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      Object[] objectArray0 = new Object[4];
      try { 
        Global.readFile(context0, baseFunction0, objectArray0, baseFunction0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File not found: null
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        Global.readFile(context0, baseFunction0, context0.emptyArgs, baseFunction0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // readFile require at least file path to be specified
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(global0, global0, 61, "}/cD=ffEZ", 2634, global0);
      Global.quit(context0, global0, context0.emptyArgs, idFunctionObject0);
      assertEquals(120, Context.VERSION_1_2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        Global.print(context0, baseFunction0, context0.emptyArgs, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.bad.shell.function.scope
         //
         verifyException("org.mozilla.javascript.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        Global.pipe(true, byteArrayInputStream0, pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemInUtil.addInputLine(" |/@JEv^O)2!QwEY<%");
      Global global0 = new Global();
      InputStream inputStream0 = global0.getIn();
      PrintStream printStream0 = global0.getErr();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0, false);
      Global.pipe(true, inputStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Global global0 = new Global();
      PrintStream printStream0 = global0.getErr();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Global.pipe(false, byteArrayInputStream0, printStream0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShellContextFactory shellContextFactory0 = new ShellContextFactory();
      Context context0 = shellContextFactory0.enterContext();
      Delegator delegator0 = new Delegator();
      Global.load(context0, delegator0, context0.emptyArgs, delegator0);
      assertEquals(110, Context.VERSION_1_1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Global global0 = new Global();
      boolean boolean0 = global0.isInitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Global global0 = new Global();
      ShellContextFactory shellContextFactory0 = new ShellContextFactory();
      Context context0 = shellContextFactory0.enterContext();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("'SRBfn%%IT_");
      // Undeclared exception!
      try { 
        global0.installRequire(context0, linkedList0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Malformed escape pair at index 6: 'SRBfn%%IT_
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Global global0 = new Global();
      // Undeclared exception!
      try { 
        global0.initQuitAction((QuitAction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // quitAction is null
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      QuitAction quitAction0 = mock(QuitAction.class, new ViolatedAssumptionAnswer());
      global0.initQuitAction(quitAction0);
      QuitAction quitAction1 = mock(QuitAction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        global0.initQuitAction(quitAction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method is once-call.
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Global global0 = new Global();
      ContextFactory contextFactory0 = new ContextFactory();
      global0.init(contextFactory0);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      String[] stringArray0 = global0.getPrompts(context0);
      Delegator delegator0 = new Delegator(global0);
      try { 
        Global.readUrl(context0, delegator0, stringArray0, delegator0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: js> 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Global global0 = new Global();
      Charset charset0 = Charset.defaultCharset();
      ShellConsole shellConsole0 = global0.getConsole(charset0);
      assertNotNull(shellConsole0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Global global0 = new Global();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) nativeJavaClass0;
      // Undeclared exception!
      try { 
        Global.defineClass(context0, (Scriptable) global0, objectArray0, (Function) nativeJavaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Global global0 = new Global();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Global.defineClass(context0, (Scriptable) global0, objectArray0, (Function) nativeJavaClass0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Class \"null\" not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      NativeObject nativeObject0 = (NativeObject)global0.getPrototype();
      Delegator delegator0 = new Delegator();
      Global.gc(context0, nativeObject0, context0.emptyArgs, delegator0);
      assertFalse(nativeObject0.isSealed());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      BaseFunction baseFunction0 = new BaseFunction();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Global.doctest(context0, baseFunction0, objectArray0, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.bad.shell.function.scope
         //
         verifyException("org.mozilla.javascript.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      try { 
        Global.deserialize((Context) null, (Scriptable) null, objectArray0, nativeContinuation0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      NativeObject nativeObject0 = (NativeObject)global0.getPrototype();
      Synchronizer synchronizer0 = new Synchronizer(global0, (Object) null);
      Global.doctest(context0, nativeObject0, context0.emptyArgs, synchronizer0);
      assertFalse(nativeObject0.isSealed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Global global0 = new Global();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        Global.write(context0, global0, context0.emptyArgs, (Function) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.tools.shell.Global", e);
      }
  }
}
