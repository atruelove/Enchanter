/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 18:43:17 GMT 2018
 */

package org.mozilla.javascript.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.regexp.NativeRegExp;
import org.mozilla.javascript.regexp.NativeRegExpCtor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeRegExpCtor_ESTest extends NativeRegExpCtor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdValue(2, (Object) null);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      Class<String> class0 = String.class;
      nativeRegExpCtor0.setInstanceIdValue(26, class0);
      assertEquals(2, nativeRegExpCtor0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      Context context0 = Context.getCurrentContext();
      nativeRegExpCtor0.setInstanceIdValue(10, context0);
      assertEquals(2, nativeRegExpCtor0.getArity());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(4, 0);
      assertEquals("RegExp", nativeRegExpCtor0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(26, 4);
      assertEquals("RegExp", nativeRegExpCtor0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      // Undeclared exception!
      try { 
        nativeRegExpCtor0.setInstanceIdAttributes(126, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 126
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(16, 0);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(9, 8);
      assertEquals(2, nativeRegExpCtor0.getArity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(8, 72);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(6, 8);
      assertFalse(nativeRegExpCtor0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      nativeRegExpCtor0.setInstanceIdAttributes(7, 5);
      assertFalse(nativeRegExpCtor0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      Object object0 = nativeRegExpCtor0.getInstanceIdValue(2);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeRegExpCtor0, "leftContext", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000005 is not a function, it is function.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      String string0 = nativeRegExpCtor0.getFunctionName();
      assertEquals("RegExp", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      // Undeclared exception!
      try { 
        nativeRegExpCtor0.getAttributes("5]");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Property 5] not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      Object[] objectArray0 = nativeRegExpCtor0.getIds();
      assertEquals(21, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeRegExpCtor nativeRegExpCtor0 = new NativeRegExpCtor();
      Context context0 = Context.enter();
      Scriptable scriptable0 = context0.newObject((Scriptable) nativeRegExpCtor0);
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeRegExp0;
      Object object0 = nativeRegExpCtor0.call(context0, scriptable0, scriptable0, objectArray0);
      assertSame(object0, nativeRegExp0);
  }
}
