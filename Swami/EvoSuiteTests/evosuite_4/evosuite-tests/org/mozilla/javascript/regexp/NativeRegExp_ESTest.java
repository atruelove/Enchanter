/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 18:31:33 GMT 2018
 */

package org.mozilla.javascript.regexp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.TopLevel;
import org.mozilla.javascript.WrapFactory;
import org.mozilla.javascript.regexp.NativeRegExp;
import org.mozilla.javascript.regexp.RECompiled;
import org.mozilla.javascript.regexp.RegExpImpl;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeRegExp_ESTest extends NativeRegExp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      RECompiled rECompiled0 = new RECompiled("S+]t.a");
      NativeRegExp nativeRegExp0 = new NativeRegExp(topLevel0, rECompiled0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)46;
      rECompiled0.program = byteArray0;
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, topLevel0, regExpImpl0, "error reporter", intArray0, 16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: invalid bytecode
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      RECompiled rECompiled0 = new RECompiled("S+]t.a");
      rECompiled0.flags = 161;
      NativeRegExp nativeRegExp0 = new NativeRegExp(topLevel0, rECompiled0);
      String string0 = nativeRegExp0.toString();
      assertEquals("/S+]t.a/g", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      Context context0 = Context.getCurrentContext();
      RECompiled rECompiled0 = NativeRegExp.compileRE(context0, "error reporter", "", true);
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint8Array0, rECompiled0);
      String string0 = nativeRegExp0.toString();
      assertEquals("/error reporter/", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      NativeObject nativeObject0 = new NativeObject();
      // Undeclared exception!
      try { 
        nativeRegExp0.setInstanceIdValue(0, nativeObject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, nativeUint32Array0, 2, "<bWWe*T|", 13, nativeUint32Array0);
      NativeRegExp nativeRegExp0 = new NativeRegExp(idFunctionObject0, (RECompiled) null);
      nativeRegExp0.setInstanceIdValue(1, idFunctionObject0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      nativeRegExp0.setInstanceIdValue(2, nativeRegExp0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      nativeRegExp0.setInstanceIdAttributes(1, (-648));
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = NativeRegExp.isDigit('_');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      Context context0 = Context.getCurrentContext();
      RECompiled rECompiled0 = NativeRegExp.compileRE(context0, "error reporter", "", true);
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint8Array0, rECompiled0);
      // Undeclared exception!
      try { 
        nativeRegExp0.initPrototypeId((-1187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1187
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      NativeRegExp.init(context0, scriptableObject0, true);
      assertEquals(150, Context.VERSION_1_5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      String string0 = nativeRegExp0.getTypeOf();
      assertEquals("object", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      RECompiled rECompiled0 = new RECompiled("Vw(80");
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint8ClampedArray0, rECompiled0);
      Object object0 = nativeRegExp0.getInstanceIdValue(4);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(105);
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(nativeArrayBuffer0, 105, 13);
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeInt8Array0, (RECompiled) null);
      Object object0 = nativeRegExp0.getInstanceIdValue(1);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(33);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 33
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array((NativeArrayBuffer) null, 173, 173);
      Context context0 = Context.getCurrentContext();
      RECompiled rECompiled0 = NativeRegExp.compileRE(context0, "error reporter", "", true);
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint8Array0, rECompiled0);
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdName(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      Class<NativeArray> class0 = NativeArray.class;
      Scriptable scriptable0 = wrapFactory0.wrapJavaClass(context0, scriptableObject0, class0);
      RECompiled rECompiled0 = new RECompiled("language version");
      NativeRegExp nativeRegExp0 = new NativeRegExp(scriptable0, rECompiled0);
      int int0 = nativeRegExp0.getFlags();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeUint32Array0, nativeUint32Array0, 2, "<bWWe*T|", 13, nativeUint32Array0);
      NativeRegExp nativeRegExp0 = new NativeRegExp(idFunctionObject0, (RECompiled) null);
      int int0 = nativeRegExp0.findPrototypeId("<bWWe*T|");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      RECompiled rECompiled0 = new RECompiled("S+]t.a");
      NativeRegExp nativeRegExp0 = new NativeRegExp(topLevel0, rECompiled0);
      int int0 = nativeRegExp0.findPrototypeId("S+]t.a");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      int int0 = nativeRegExp0.findPrototypeId("szin");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Object[] objectArray0 = nativeRegExp0.getAllIds();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      RECompiled rECompiled0 = new RECompiled("S+]t.a");
      NativeRegExp nativeRegExp0 = new NativeRegExp(topLevel0, rECompiled0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      rECompiled0.program = byteArray0;
      rECompiled0.parenCount = 3207;
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[1];
      Object object0 = nativeRegExp0.executeRegExp(context0, topLevel0, regExpImpl0, "error reporter", intArray0, 16);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(109);
      RECompiled rECompiled0 = new RECompiled("ignoreCase");
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint16Array0, rECompiled0);
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[3];
      intArray0[0] = 57;
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, nativeUint16Array0, regExpImpl0, "+o{}#~Q6", intArray0, 163);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      RECompiled rECompiled0 = new RECompiled("S+]t.a");
      NativeRegExp nativeRegExp0 = new NativeRegExp(topLevel0, rECompiled0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      rECompiled0.program = byteArray0;
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[1];
      Object object0 = nativeRegExp0.executeRegExp(context0, topLevel0, regExpImpl0, "error reporter", intArray0, 16);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      RECompiled rECompiled0 = new RECompiled("S+]t.a");
      NativeRegExp nativeRegExp0 = new NativeRegExp(topLevel0, rECompiled0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      rECompiled0.program = byteArray0;
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, topLevel0, regExpImpl0, "error reporter", intArray0, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      RECompiled rECompiled0 = new RECompiled("S+]t.a");
      NativeRegExp nativeRegExp0 = new NativeRegExp(topLevel0, rECompiled0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[3] = (byte)19;
      rECompiled0.program = byteArray0;
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, topLevel0, regExpImpl0, "error reporter", intArray0, 16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: invalid bytecode
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      RECompiled rECompiled0 = new RECompiled("S+]t.a");
      NativeRegExp nativeRegExp0 = new NativeRegExp(topLevel0, rECompiled0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      rECompiled0.program = byteArray0;
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, topLevel0, regExpImpl0, "error reporter", intArray0, 16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: invalid bytecode
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      RECompiled rECompiled0 = new RECompiled("S+]t.a");
      NativeRegExp nativeRegExp0 = new NativeRegExp(importerTopLevel0, rECompiled0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      rECompiled0.program = byteArray0;
      Context context0 = Context.enter();
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, importerTopLevel0, regExpImpl0, "error reporter", intArray0, 16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Context context0 = Context.getCurrentContext();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 108, 0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) context0;
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeUint8Array0, objectArray0);
      RegExpImpl regExpImpl0 = new RegExpImpl();
      int[] intArray0 = new int[7];
      NativeArray nativeArray0 = (NativeArray)nativeRegExp1.executeRegExp(context0, nativeArrayBuffer0, regExpImpl0, "error reporter", intArray0, 171);
      assertNull(nativeArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      Object[] objectArray0 = nativeArrayBuffer0.getIds();
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(nativeArrayBuffer0, 13, 4);
      RECompiled rECompiled0 = new RECompiled("error reporter");
      rECompiled0.flags = (-397);
      NativeRegExp nativeRegExp0 = new NativeRegExp(nativeUint16Array0, rECompiled0);
      Synchronizer synchronizer0 = new Synchronizer(nativeRegExp0, nativeArrayBuffer0);
      // Undeclared exception!
      try { 
        synchronizer0.construct(context0, nativeUint16Array0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeRegExp0, nativeRegExp0, 2, "", 4, nativeRegExp0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        nativeRegExp0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      RECompiled rECompiled0 = NativeRegExp.compileRE(context0, "\"", (String) null, false);
      assertNotNull(rECompiled0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE((Context) null, "msg.trail.backslash", "msg.trail.backslash", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "PT0QvexZ", "ignoreCase", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(nativeArrayBuffer0, 0, 0);
      Object[] objectArray0 = new Object[18];
      // Undeclared exception!
      try { 
        nativeRegExp0.compile(context0, nativeUint8Array0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Context context0 = Context.enter();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 1, 2);
      // Undeclared exception!
      try { 
        nativeRegExp0.call(context0, nativeUint8ClampedArray0, nativeArrayBuffer0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      Class<NativeArray> class0 = NativeArray.class;
      Scriptable scriptable0 = wrapFactory0.wrapJavaClass(context0, scriptableObject0, class0);
      RECompiled rECompiled0 = new RECompiled("language version");
      NativeRegExp nativeRegExp0 = new NativeRegExp(scriptable0, rECompiled0);
      // Undeclared exception!
      try { 
        nativeRegExp0.setInstanceIdAttributes(2, 56319);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InternalError: Changing attributes not supported for RegExp source property
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }
}
