/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 23:08:26 GMT 2018
 */

package org.mozilla.javascript.commonjs.module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.Script;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.WrapFactory;
import org.mozilla.javascript.commonjs.module.ModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.Require;
import org.mozilla.javascript.commonjs.module.provider.DefaultUrlConnectionExpiryCalculator;
import org.mozilla.javascript.commonjs.module.provider.MultiModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.provider.SoftCachingModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.provider.StrongCachingModuleScriptProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlConnectionSecurityDomainProvider;
import org.mozilla.javascript.commonjs.module.provider.UrlModuleSourceProvider;
import org.mozilla.javascript.typedarrays.NativeFloat32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Require_ESTest extends Require_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Context context0 = Context.enter();
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      Scriptable scriptable0 = wrapFactory0.wrapNewObject(context0, scriptableObject0, context0);
      Require require0 = new Require(context0, scriptable0, (ModuleScriptProvider) null, (Script) null, (Script) null, false);
      // Undeclared exception!
      try { 
        require0.requireMain(context0, "language version");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.commonjs.module.Require", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SoftCachingModuleScriptProvider> treeSet0 = new TreeSet<SoftCachingModuleScriptProvider>(comparator0);
      MultiModuleScriptProvider multiModuleScriptProvider0 = new MultiModuleScriptProvider(treeSet0);
      Require require0 = new Require(context0, scriptableObject0, multiModuleScriptProvider0, (Script) null, (Script) null, false);
      // Undeclared exception!
      try { 
        require0.requireMain(context0, "error reporter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.mozilla.javascript.NativeError@0000000017
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Context context0 = Context.enter();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(0);
      Stack<URI> stack0 = new Stack<URI>();
      HashSet<URI> hashSet0 = new HashSet<URI>(stack0);
      DefaultUrlConnectionExpiryCalculator defaultUrlConnectionExpiryCalculator0 = new DefaultUrlConnectionExpiryCalculator();
      UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider0 = mock(UrlConnectionSecurityDomainProvider.class, new ViolatedAssumptionAnswer());
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(hashSet0, hashSet0, defaultUrlConnectionExpiryCalculator0, urlConnectionSecurityDomainProvider0);
      StrongCachingModuleScriptProvider strongCachingModuleScriptProvider0 = new StrongCachingModuleScriptProvider(urlModuleSourceProvider0);
      Require require0 = new Require(context0, nativeFloat32Array0, strongCachingModuleScriptProvider0, (Script) null, (Script) null, false);
      Object[] objectArray0 = new Object[2];
      URI uRI0 = MockURI.aHttpURI;
      hashSet0.add(uRI0);
      objectArray0[0] = (Object) 120;
      // Undeclared exception!
      try { 
        require0.call(context0, nativeFloat32Array0, nativeFloat32Array0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: foo.bar120.js
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Context context0 = Context.enter();
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      Scriptable scriptable0 = wrapFactory0.wrapNewObject(context0, scriptableObject0, context0);
      Require require0 = new Require(context0, scriptable0, (ModuleScriptProvider) null, (Script) null, (Script) null, false);
      int int0 = require0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Context context0 = Context.enter();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array(0);
      Stack<URI> stack0 = new Stack<URI>();
      HashSet<URI> hashSet0 = new HashSet<URI>(stack0);
      DefaultUrlConnectionExpiryCalculator defaultUrlConnectionExpiryCalculator0 = new DefaultUrlConnectionExpiryCalculator();
      UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider0 = mock(UrlConnectionSecurityDomainProvider.class, new ViolatedAssumptionAnswer());
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(hashSet0, hashSet0, defaultUrlConnectionExpiryCalculator0, urlConnectionSecurityDomainProvider0);
      StrongCachingModuleScriptProvider strongCachingModuleScriptProvider0 = new StrongCachingModuleScriptProvider(urlModuleSourceProvider0);
      Require require0 = new Require(context0, nativeFloat32Array0, strongCachingModuleScriptProvider0, (Script) null, (Script) null, false);
      int int0 = require0.getArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      TreeSet<URI> treeSet0 = new TreeSet<URI>();
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(treeSet0, treeSet0);
      StrongCachingModuleScriptProvider strongCachingModuleScriptProvider0 = new StrongCachingModuleScriptProvider(urlModuleSourceProvider0);
      Require require0 = new Require(context0, nativeObject0, strongCachingModuleScriptProvider0, (Script) null, (Script) null, false);
      // Undeclared exception!
      try { 
        require0.construct(context0, nativeObject0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"Error\" not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      LinkedHashSet<URI> linkedHashSet0 = new LinkedHashSet<URI>(1000000000);
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(linkedHashSet0, linkedHashSet0);
      SoftCachingModuleScriptProvider softCachingModuleScriptProvider0 = new SoftCachingModuleScriptProvider(urlModuleSourceProvider0);
      Require require0 = new Require(context0, scriptableObject0, softCachingModuleScriptProvider0, (Script) null, (Script) null, true);
      Scriptable scriptable0 = require0.requireMain(context0, "error reporter");
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Context context0 = Context.enter();
      NativeFloat32Array nativeFloat32Array0 = new NativeFloat32Array();
      Stack<URI> stack0 = new Stack<URI>();
      HashSet<URI> hashSet0 = new HashSet<URI>(stack0);
      DefaultUrlConnectionExpiryCalculator defaultUrlConnectionExpiryCalculator0 = new DefaultUrlConnectionExpiryCalculator();
      UrlConnectionSecurityDomainProvider urlConnectionSecurityDomainProvider0 = mock(UrlConnectionSecurityDomainProvider.class, new ViolatedAssumptionAnswer());
      UrlModuleSourceProvider urlModuleSourceProvider0 = new UrlModuleSourceProvider(hashSet0, hashSet0, defaultUrlConnectionExpiryCalculator0, urlConnectionSecurityDomainProvider0);
      StrongCachingModuleScriptProvider strongCachingModuleScriptProvider0 = new StrongCachingModuleScriptProvider(urlModuleSourceProvider0);
      Require require0 = new Require(context0, nativeFloat32Array0, strongCachingModuleScriptProvider0, (Script) null, (Script) null, false);
      // Undeclared exception!
      try { 
        require0.call(context0, nativeFloat32Array0, nativeFloat32Array0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constructor for \"Error\" not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }
}
