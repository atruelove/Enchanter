/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 15:56:29 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.ArrayComprehension;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.Block;
import org.mozilla.javascript.ast.DoLoop;
import org.mozilla.javascript.ast.ForInLoop;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.GeneratorExpressionLoop;
import org.mozilla.javascript.ast.LetNode;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.Scope;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.StringLiteral;
import org.mozilla.javascript.ast.Symbol;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scope scope0 = new Scope();
      StringBuilder stringBuilder0 = new StringBuilder(18);
      StringLiteral stringLiteral0 = new StringLiteral(2);
      scope0.addChildToFront(stringLiteral0);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      scope0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tBLOCK -1 1\n2\tSTRING 2 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(130, scope0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      Block block0 = new Block();
      scriptNode0.addChildrenToBack(block0);
      String string0 = scriptNode0.toSource(110);
      assertEquals("                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                              {\n                                                                                                                                                                                                                              }\n                                                                                                                                                                                                                            }\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Scope scope0 = new Scope(0);
      scope0.setParentScope(scope0);
      Scope.splitScope(scope0);
      assertEquals(1, scope0.depth());
      assertEquals(130, scope0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayComprehension arrayComprehension0 = new ArrayComprehension(0);
      arrayComprehension0.setTop((ScriptNode) null);
      assertEquals(0, arrayComprehension0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      generatorExpressionLoop0.addChildScope(arrayComprehension0);
      GeneratorExpressionLoop generatorExpressionLoop1 = new GeneratorExpressionLoop();
      generatorExpressionLoop0.replaceWith(generatorExpressionLoop1);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      Symbol symbol0 = new Symbol();
      // Undeclared exception!
      try { 
        generatorExpressionLoop0.putSymbol(symbol0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null symbol name
         //
         verifyException("org.mozilla.javascript.ast.Scope", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      ScriptNode scriptNode0 = forInLoop0.getTop();
      assertNull(scriptNode0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      Symbol symbol0 = doLoop0.getSymbol("cqju");
      assertNull(symbol0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      List<AstNode> list0 = generatorExpressionLoop0.getStatements();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Symbol symbol0 = new Symbol();
      symbol0.setName("%H");
      FunctionNode functionNode0 = new FunctionNode(1);
      functionNode0.putSymbol(symbol0);
      Scope scope0 = functionNode0.getDefiningScope("%H");
      assertNotNull(scope0);
      assertEquals(1, scope0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode(1);
      functionNode0.getDefiningScope("%H");
      assertEquals(1, functionNode0.getPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop((-267));
      doLoop0.getChildScopes();
      assertEquals((-267), doLoop0.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      Symbol symbol0 = new Symbol();
      hashMap0.put("J;pXKdsmkv\"1*T", symbol0);
      generatorExpressionLoop0.setSymbolTable(hashMap0);
      GeneratorExpressionLoop generatorExpressionLoop1 = new GeneratorExpressionLoop(1);
      generatorExpressionLoop0.replaceWith(generatorExpressionLoop1);
      assertEquals(1, generatorExpressionLoop1.getAbsolutePosition());
      assertEquals(1, generatorExpressionLoop1.getPosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      Symbol symbol0 = new Symbol();
      hashMap0.put("J;pXKdsmkv\"1*T", symbol0);
      generatorExpressionLoop0.setSymbolTable(hashMap0);
      // Undeclared exception!
      try { 
        generatorExpressionLoop0.replaceWith(generatorExpressionLoop0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LetNode letNode0 = new LetNode();
      letNode0.clearParentScope();
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      ArrayComprehension arrayComprehension0 = new ArrayComprehension(21, 2);
      generatorExpressionLoop0.addChildScope(arrayComprehension0);
      assertEquals(2, arrayComprehension0.getLength());
      assertEquals(21, arrayComprehension0.getPosition());
      assertEquals(21, arrayComprehension0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      Name name0 = new Name();
      doLoop0.addChildToBack(name0);
      List<AstNode> list0 = doLoop0.getStatements();
      assertFalse(list0.isEmpty());
  }
}
