/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 17:25:10 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.ErrorCollector;
import org.mozilla.javascript.ast.ParseProblem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ErrorCollector_ESTest extends ErrorCollector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        errorCollector0.warning("0lvBo%%^^El>W:;>>", ":offset=-1,length=100,error: %-\n", 100, ":offset=-1,length=100,error: %-\n", (-826));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      errorCollector0.warning("%-", "", 100, 100);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      String string0 = errorCollector0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        errorCollector0.runtimeError("", "", (-2045), "", 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      List<ParseProblem> list0 = errorCollector0.getErrors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        errorCollector0.error("", "", 35, "8DO8/I[BF]M\u0002se", 35);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      errorCollector0.error("%-", "", (-1), 100);
      String string0 = errorCollector0.toString();
      assertEquals(":offset=-1,length=100,error: %-\n", string0);
  }
}
