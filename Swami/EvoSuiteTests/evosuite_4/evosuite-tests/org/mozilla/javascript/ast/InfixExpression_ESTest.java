/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 17:36:09 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.Assignment;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.Block;
import org.mozilla.javascript.ast.InfixExpression;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NewExpression;
import org.mozilla.javascript.ast.ObjectProperty;
import org.mozilla.javascript.ast.StringLiteral;
import org.mozilla.javascript.ast.XmlMemberGet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InfixExpression_ESTest extends InfixExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Block block0 = new Block();
      InfixExpression infixExpression0 = new InfixExpression(0, 0, block0, block0);
      StringBuilder stringBuilder0 = new StringBuilder(1);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      infixExpression0.visit(astNode_DebugPrintVisitor0);
      assertEquals("0\tERROR 0 0\n-1\t  BLOCK -1 1\n-1\t  BLOCK -1 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals((-1), infixExpression0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet();
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      // Undeclared exception!
      try { 
        xmlMemberGet0.visit(astNode_DebugPrintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.InfixExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet();
      // Undeclared exception!
      try { 
        xmlMemberGet0.setOperator(2564);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid token: 2564
         //
         verifyException("org.mozilla.javascript.ast.InfixExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      NewExpression newExpression0 = new NewExpression();
      objectProperty0.setRight(newExpression0);
      objectProperty0.setOperator(105);
      boolean boolean0 = objectProperty0.hasSideEffects();
      assertEquals(105, objectProperty0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet();
      XmlMemberGet xmlMemberGet1 = (XmlMemberGet)xmlMemberGet0.setType(90);
      boolean boolean0 = xmlMemberGet1.hasSideEffects();
      assertEquals((-1), xmlMemberGet1.getOperatorPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InfixExpression infixExpression0 = new InfixExpression((-1614));
      int int0 = infixExpression0.getOperatorPosition();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InfixExpression infixExpression0 = new InfixExpression();
      infixExpression0.getOperator();
      assertEquals((-1), infixExpression0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InfixExpression infixExpression0 = new InfixExpression(145, 145);
      infixExpression0.getLeft();
      assertEquals((-1), infixExpression0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral(0);
      InfixExpression infixExpression0 = new InfixExpression(stringLiteral0, stringLiteral0);
      assertEquals(1, infixExpression0.getLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name name0 = (Name)Node.newString(10, "^)6h-rN;_z &S}f");
      Assignment assignment0 = new Assignment(26, name0, name0, 14);
      String string0 = assignment0.toSource((-5037));
      assertEquals(0, name0.getPosition());
      assertEquals("^)6h-rN;_z &S}f ! ^)6h-rN;_z &S}f", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Block block0 = new Block();
      InfixExpression infixExpression0 = new InfixExpression(0, 0, block0, block0);
      AstNode astNode0 = infixExpression0.getRight();
      assertNotNull(astNode0);
      assertEquals((-1), infixExpression0.getOperatorPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      objectProperty0.hasSideEffects();
      assertEquals((-1), objectProperty0.getOperatorPosition());
  }
}
