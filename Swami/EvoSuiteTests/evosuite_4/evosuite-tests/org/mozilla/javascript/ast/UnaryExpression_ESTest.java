/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 16:09:22 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.RegExpLiteral;
import org.mozilla.javascript.ast.UnaryExpression;
import org.mozilla.javascript.ast.XmlLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnaryExpression_ESTest extends UnaryExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(0);
      UnaryExpression unaryExpression0 = new UnaryExpression(0, 0, astRoot0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      unaryExpression0.visit(astNode_DebugPrintVisitor0);
      assertEquals("0\tEOF 0 1\n0\t  SCRIPT 0 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals(0, astRoot0.getPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(19, 19);
      UnaryExpression unaryExpression0 = new UnaryExpression(19, 31, regExpLiteral0, true);
      String string0 = unaryExpression0.toSource(2);
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals("    /null/>>", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlLiteral xmlLiteral0 = new XmlLiteral((-527));
      UnaryExpression unaryExpression0 = new UnaryExpression(31, 2, xmlLiteral0, false);
      String string0 = unaryExpression0.toSource(100);
      assertEquals((-529), xmlLiteral0.getPosition());
      assertEquals("                                                                                                                                                                                                        delete ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      // Undeclared exception!
      try { 
        unaryExpression0.setOperator(3416);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid token: 3416
         //
         verifyException("org.mozilla.javascript.ast.UnaryExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      unaryExpression0.setIsPostfix(true);
      assertFalse(unaryExpression0.isPrefix());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      boolean boolean0 = unaryExpression0.isPrefix();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(0);
      UnaryExpression unaryExpression0 = new UnaryExpression(0, 0, astRoot0);
      boolean boolean0 = unaryExpression0.isPostfix();
      assertEquals(0, unaryExpression0.getType());
      assertEquals(1, unaryExpression0.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlLiteral xmlLiteral0 = new XmlLiteral((-527));
      UnaryExpression unaryExpression0 = new UnaryExpression(31, 2, xmlLiteral0, false);
      int int0 = unaryExpression0.getOperator();
      assertEquals((-529), xmlLiteral0.getPosition());
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression(0, 0);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression((-812));
      assertEquals((-1), unaryExpression0.getLineno());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnaryExpression unaryExpression0 = new UnaryExpression();
      AstNode astNode0 = unaryExpression0.getOperand();
      assertNull(astNode0);
  }
}
