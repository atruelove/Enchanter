/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 17:24:44 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.ErrorNode;
import org.mozilla.javascript.ast.WithStatement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WithStatement_ESTest extends WithStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      ErrorNode errorNode0 = new ErrorNode(0, 6);
      withStatement0.setStatement(errorNode0);
      withStatement0.setExpression(errorNode0);
      String string0 = withStatement0.debugPrint();
      assertEquals("-1\tWITH -1 1\n0\t  ERROR 1 6\n0\t  ERROR 1 6\n", string0);
      assertEquals((-1), withStatement0.getRp());
      assertEquals((-1), withStatement0.getLp());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      ErrorNode errorNode0 = new ErrorNode(0, 6);
      withStatement0.setExpression(errorNode0);
      AstRoot astRoot0 = new AstRoot();
      withStatement0.setStatement(astRoot0);
      astRoot0.setType(130);
      String string0 = withStatement0.toSource();
      assertEquals((-1), withStatement0.getLp());
      assertEquals("with () \n", string0);
      assertEquals("124", withStatement0.toString());
      assertEquals((-1), withStatement0.getRp());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      ErrorNode errorNode0 = new ErrorNode(0, 6);
      withStatement0.setStatement(errorNode0);
      withStatement0.setExpression(errorNode0);
      String string0 = withStatement0.toSource();
      assertEquals((-1), withStatement0.getRp());
      assertEquals((-1), withStatement0.getLp());
      assertEquals(124, withStatement0.getType());
      assertEquals("with () \n", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      withStatement0.setRp((-2156));
      assertEquals((-2156), withStatement0.getRp());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      withStatement0.setParens(0, 0);
      assertEquals(0, withStatement0.getRp());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement(0, 0);
      withStatement0.setLp((-859));
      assertEquals((-859), withStatement0.getLp());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      withStatement0.getStatement();
      assertEquals((-1), withStatement0.getLp());
      assertEquals((-1), withStatement0.getRp());
      assertEquals("124", withStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement(34);
      int int0 = withStatement0.getRp();
      assertEquals((-1), withStatement0.getLp());
      assertEquals((-1), int0);
      assertEquals("124", withStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      int int0 = withStatement0.getLp();
      assertEquals((-1), withStatement0.getRp());
      assertEquals((-1), int0);
      assertEquals("124", withStatement0.toString());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      withStatement0.getExpression();
      assertEquals((-1), withStatement0.getLp());
      assertEquals(124, withStatement0.getType());
      assertEquals((-1), withStatement0.getRp());
  }
}
