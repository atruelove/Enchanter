/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 17:30:38 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.ParenthesizedExpression;
import org.mozilla.javascript.ast.RegExpLiteral;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.Symbol;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScriptNode_ESTest extends ScriptNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      NumberLiteral numberLiteral0 = new NumberLiteral();
      scriptNode0.addChildrenToBack(numberLiteral0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      scriptNode0.visit(astNode_DebugPrintVisitor0);
      assertEquals("-1\tSCRIPT -1 1\n-1\tNUMBER -1 1\n", astNode_DebugPrintVisitor0.toString());
      assertEquals((-1), scriptNode0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode(87);
      scriptNode0.setSourceName("6]^g3 }c/iG1,");
      assertEquals(0, scriptNode0.getParamCount());
      assertEquals((-1), scriptNode0.getEncodedSourceEnd());
      assertEquals((-1), scriptNode0.getEndLineno());
      assertEquals((-1), scriptNode0.getEncodedSourceStart());
      assertEquals("137", scriptNode0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      astRoot0.setInStrictMode(false);
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals((-1), astRoot0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      scriptNode0.setEndLineno(0);
      assertEquals(0, scriptNode0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode((-1945));
      functionNode0.setEncodedSourceStart(23);
      assertEquals(23, functionNode0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode((-1392));
      functionNode0.setEncodedSourceEnd((-1392));
      assertEquals((-1392), functionNode0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode(87);
      scriptNode0.setEncodedSourceBounds(87, 87);
      assertEquals(87, scriptNode0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode(87);
      scriptNode0.setEncodedSource("O,");
      assertEquals((-1), scriptNode0.getEndLineno());
      assertEquals((-1), scriptNode0.getEncodedSourceStart());
      assertEquals((-1), scriptNode0.getEncodedSourceEnd());
      assertEquals(0, scriptNode0.getParamCount());
      assertEquals(137, scriptNode0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(1, 2);
      astRoot0.setCompilerData(parenthesizedExpression0);
      // Undeclared exception!
      try { 
        astRoot0.setCompilerData(parenthesizedExpression0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ScriptNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode(1342);
      scriptNode0.setBaseLineno(1342);
      assertEquals(1342, scriptNode0.getBaseLineno());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode(87);
      scriptNode0.isInStrictMode();
      assertEquals((-1), scriptNode0.getEncodedSourceEnd());
      assertEquals((-1), scriptNode0.getEncodedSourceStart());
      assertEquals(0, scriptNode0.getParamCount());
      assertEquals((-1), scriptNode0.getEndLineno());
      assertEquals(137, scriptNode0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(0);
      List<Symbol> list0 = astRoot0.getSymbols();
      astRoot0.setSymbols(list0);
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals((-1), astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode((-1945));
      functionNode0.getSourceName();
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode(2664);
      // Undeclared exception!
      try { 
        functionNode0.getRegexpString(27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ScriptNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      // Undeclared exception!
      try { 
        scriptNode0.getRegexpFlags(22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ScriptNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      int int0 = functionNode0.getRegexpCount();
      assertEquals((-1), functionNode0.getEncodedSourceStart());
      assertEquals(0, int0);
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), functionNode0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.flattenSymbolTable(true);
      // Undeclared exception!
      try { 
        functionNode0.getParamOrVarName(2053);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2053
         //
         verifyException("org.mozilla.javascript.ast.ScriptNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      int int0 = scriptNode0.getParamCount();
      assertEquals((-1), scriptNode0.getEncodedSourceEnd());
      assertEquals(0, int0);
      assertEquals((-1), scriptNode0.getEncodedSourceStart());
      assertEquals(137, scriptNode0.getType());
      assertEquals((-1), scriptNode0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      // Undeclared exception!
      try { 
        scriptNode0.getParamAndVarNames();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Name name0 = new Name();
      FunctionNode functionNode0 = new FunctionNode(918, name0);
      functionNode0.flattenSymbolTable(false);
      functionNode0.getParamAndVarCount();
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), functionNode0.getEncodedSourceStart());
      assertEquals((-1), functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Name name0 = new Name();
      FunctionNode functionNode0 = new FunctionNode(918, name0);
      functionNode0.flattenSymbolTable(false);
      functionNode0.getParamAndVarConst();
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getEncodedSourceEnd());
      assertEquals((-1), functionNode0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      String string0 = astRoot0.getNextTempName();
      assertEquals("$0", string0);
      assertEquals((-1), astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Name name0 = new Name();
      FunctionNode functionNode0 = new FunctionNode(3);
      functionNode0.flattenSymbolTable(true);
      int int0 = functionNode0.getIndexForNameNode(name0);
      assertEquals((-1), functionNode0.getEncodedSourceStart());
      assertEquals((-1), functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), int0);
      assertEquals((-1), functionNode0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode(7);
      List<FunctionNode> list0 = scriptNode0.getFunctions();
      assertEquals((-1), scriptNode0.getEncodedSourceEnd());
      assertEquals(0, scriptNode0.getParamCount());
      assertEquals("137", scriptNode0.toString());
      assertEquals((-1), scriptNode0.getEncodedSourceStart());
      assertEquals((-1), scriptNode0.getEndLineno());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      // Undeclared exception!
      try { 
        scriptNode0.getFunctionNode((-673));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ScriptNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode(0);
      int int0 = scriptNode0.getEndLineno();
      assertEquals((-1), int0);
      assertEquals(0, scriptNode0.getParamCount());
      assertEquals((-1), scriptNode0.getEncodedSourceStart());
      assertEquals((-1), scriptNode0.getEncodedSourceEnd());
      assertEquals(137, scriptNode0.getType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode((-1945));
      int int0 = functionNode0.getEncodedSourceStart();
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), int0);
      assertEquals((-1), functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode(0, (Name) null);
      int int0 = functionNode0.getEncodedSourceEnd();
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), functionNode0.getEncodedSourceStart());
      assertEquals((-1), int0);
      assertEquals(0, functionNode0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      scriptNode0.getEncodedSource();
      assertEquals((-1), scriptNode0.getEndLineno());
      assertEquals(0, scriptNode0.getParamCount());
      assertEquals(137, scriptNode0.getType());
      assertEquals((-1), scriptNode0.getEncodedSourceStart());
      assertEquals((-1), scriptNode0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      scriptNode0.getCompilerData();
      assertEquals((-1), scriptNode0.getEncodedSourceEnd());
      assertEquals((-1), scriptNode0.getEndLineno());
      assertEquals((-1), scriptNode0.getEncodedSourceStart());
      assertEquals("137", scriptNode0.toString());
      assertEquals(0, scriptNode0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(0);
      int int0 = astRoot0.getBaseLineno();
      assertEquals((-1), int0);
      assertEquals((-1), astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      Symbol symbol0 = new Symbol();
      symbol0.setName("ngPcl<Ut");
      scriptNode0.putSymbol(symbol0);
      scriptNode0.flattenSymbolTable(false);
      assertEquals((-1), scriptNode0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      astRoot0.flattenSymbolTable(true);
      astRoot0.getParamAndVarNames();
      assertEquals((-1), astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Symbol symbol0 = new Symbol(88, "TO_DOUBLE");
      astRoot0.addSymbol(symbol0);
      assertEquals(1, astRoot0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode();
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      functionNode0.addRegExp(regExpLiteral0);
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FunctionNode functionNode0 = new FunctionNode(3);
      int int0 = functionNode0.addFunction(functionNode0);
      assertTrue(functionNode0.requiresActivation());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Name name0 = new Name();
      FunctionNode functionNode0 = new FunctionNode(15, name0);
      functionNode0.flattenSymbolTable(true);
      name0.setScope(functionNode0);
      int int0 = functionNode0.getIndexForNameNode(name0);
      assertEquals((-1), int0);
      assertEquals((-1), functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), functionNode0.getEncodedSourceStart());
  }
}
