/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 16:28:26 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.ast.ArrayComprehensionLoop;
import org.mozilla.javascript.ast.AstNode;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.ForInLoop;
import org.mozilla.javascript.ast.RegExpLiteral;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForInLoop_ESTest extends ForInLoop_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(120);
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(3, 18);
      forInLoop0.setBody(regExpLiteral0);
      AstRoot astRoot0 = new AstRoot();
      forInLoop0.setIteratedObject(astRoot0);
      assertEquals((-121), astRoot0.getPosition());
      
      forInLoop0.setIterator(regExpLiteral0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AstNode.DebugPrintVisitor astNode_DebugPrintVisitor0 = new AstNode.DebugPrintVisitor(stringBuilder0);
      forInLoop0.visit(astNode_DebugPrintVisitor0);
      assertEquals("120\tFOR 120 -99\n3\t  REGEXP -117 18\n-1\t  SCRIPT -121 1\n3\t  REGEXP -117 18\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(751);
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(0);
      forInLoop0.setBody(regExpLiteral0);
      AstRoot astRoot0 = new AstRoot(1);
      forInLoop0.setIteratedObject(astRoot0);
      forInLoop0.setIterator(regExpLiteral0);
      forInLoop0.toSource(336);
      assertEquals((-1), forInLoop0.getInPosition());
      assertEquals("120", forInLoop0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(120);
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(3, 18);
      regExpLiteral0.setType(130);
      forInLoop0.setBody(regExpLiteral0);
      AstRoot astRoot0 = new AstRoot();
      forInLoop0.setIteratedObject(astRoot0);
      assertEquals(1, astRoot0.depth());
      
      forInLoop0.setIterator(regExpLiteral0);
      String string0 = forInLoop0.toSource(26);
      assertEquals("                                                    for (/null/ in ) /null/\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(120);
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(3, 18);
      forInLoop0.setIsForOf(true);
      forInLoop0.setIterator(regExpLiteral0);
      // Undeclared exception!
      try { 
        forInLoop0.toSource(26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ForInLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(120);
      forInLoop0.setIsForEach(true);
      // Undeclared exception!
      try { 
        forInLoop0.toSource(26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.ForInLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(751);
      forInLoop0.setInPosition(120);
      assertEquals(120, forInLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(1);
      forInLoop0.setEachPosition(3);
      assertEquals(3, forInLoop0.getEachPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      forInLoop0.isForOf();
      assertEquals((-1), forInLoop0.getEachPosition());
      assertEquals(120, forInLoop0.getType());
      assertEquals((-1), forInLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(0, 0);
      forInLoop0.getIterator();
      assertEquals(120, forInLoop0.getType());
      assertEquals((-1), forInLoop0.getEachPosition());
      assertEquals((-1), forInLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop(751);
      int int0 = forInLoop0.getInPosition();
      assertEquals((-1), int0);
      assertEquals((-1), forInLoop0.getEachPosition());
      assertEquals(120, forInLoop0.getType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop((-175), (-178));
      int int0 = arrayComprehensionLoop0.getEachPosition();
      assertEquals((-1), int0);
      assertEquals("120", arrayComprehensionLoop0.toString());
      assertEquals((-1), arrayComprehensionLoop0.getInPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      forInLoop0.getIteratedObject();
      assertEquals((-1), forInLoop0.getEachPosition());
      assertEquals((-1), forInLoop0.getInPosition());
      assertEquals("120", forInLoop0.toString());
  }
}
