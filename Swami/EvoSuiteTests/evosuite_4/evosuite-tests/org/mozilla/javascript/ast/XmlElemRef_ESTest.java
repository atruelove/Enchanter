/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 15:37:51 GMT 2018
 */

package org.mozilla.javascript.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.NumberLiteral;
import org.mozilla.javascript.ast.XmlElemRef;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlElemRef_ESTest extends XmlElemRef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(0);
      Name name0 = (Name)Node.newString(4, "::");
      xmlElemRef0.setNamespace(name0);
      // Undeclared exception!
      try { 
        xmlElemRef0.debugPrint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.XmlElemRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(0);
      Name name0 = new Name(1, "]hy");
      xmlElemRef0.setExpression(name0);
      String string0 = xmlElemRef0.toSource();
      assertEquals((-1), xmlElemRef0.getLb());
      assertEquals("[]hy]", string0);
      assertEquals((-1), xmlElemRef0.getRb());
      assertEquals("78", xmlElemRef0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      Name name0 = new Name(2, 11);
      xmlElemRef0.namespace = name0;
      // Undeclared exception!
      try { 
        xmlElemRef0.toSource(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.XmlElemRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(0);
      xmlElemRef0.atPos = 0;
      // Undeclared exception!
      try { 
        xmlElemRef0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ast.XmlElemRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(0);
      xmlElemRef0.setRb(13);
      assertEquals(13, xmlElemRef0.getRb());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(0);
      xmlElemRef0.setLb(95);
      assertEquals(95, xmlElemRef0.getLb());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(0);
      xmlElemRef0.setBrackets(107, 107);
      assertEquals(107, xmlElemRef0.getRb());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(462);
      int int0 = xmlElemRef0.getRb();
      assertEquals(78, xmlElemRef0.getType());
      assertEquals((-1), xmlElemRef0.getLb());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(462);
      int int0 = xmlElemRef0.getLb();
      assertEquals((-1), int0);
      assertEquals((-1), xmlElemRef0.getRb());
      assertEquals("78", xmlElemRef0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(0);
      xmlElemRef0.getExpression();
      assertEquals((-1), xmlElemRef0.getLb());
      assertEquals((-1), xmlElemRef0.getRb());
      assertEquals(78, xmlElemRef0.getType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef((-1749), (-1749));
      NumberLiteral numberLiteral0 = new NumberLiteral(27, 1);
      xmlElemRef0.setExpression(numberLiteral0);
      String string0 = xmlElemRef0.debugPrint();
      assertEquals((-1), xmlElemRef0.getLb());
      assertEquals((-1), xmlElemRef0.getRb());
      assertEquals("-1749\tREF_MEMBER -1749 -1749\n27\t  NUMBER 1776 1\n", string0);
  }
}
