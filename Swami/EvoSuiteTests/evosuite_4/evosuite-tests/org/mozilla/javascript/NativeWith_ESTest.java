/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 03:22:21 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeBoolean;
import org.mozilla.javascript.NativeError;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeWith_ESTest extends NativeWith_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 13, 13);
      NativeWith nativeWith0 = new NativeWith(nativeInt32Array0, nativeArrayBuffer0);
      // Undeclared exception!
      try { 
        nativeWith0.updateDotQuery(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeWith", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = Context.enter();
      NativeWith nativeWith0 = (NativeWith)context0.scratchScriptable;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeWith nativeWith0 = new NativeWith(nativeBoolean0, nativeBoolean0);
      nativeWith0.put(4, (Scriptable) nativeBoolean0, (Object) "");
      assertFalse(nativeBoolean0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-849L));
      Context context0 = Context.enter();
      Object[] objectArray0 = new Object[12];
      // Undeclared exception!
      try { 
        NativeWith.newWithSpecial(context0, nativeArray0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot convert null to an object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array((NativeArrayBuffer) null, 8, 0);
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeInt8Array0, (Object) null, 2, "O{KMFdSi", 8, nativeInt32Array0);
      boolean boolean0 = NativeWith.isWithFunction(idFunctionObjectES6_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(nativeArrayBuffer0, 13, 13);
      NativeWith nativeWith0 = new NativeWith(nativeInt32Array0, nativeArrayBuffer0);
      NativeWith.init(nativeWith0, true);
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      NativeWith nativeWith0 = new NativeWith(nativeBoolean0, nativeBoolean0);
      boolean boolean0 = nativeWith0.hasInstance(nativeBoolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      NativeWith nativeWith0 = new NativeWith(nativeUint32Array0, nativeUint32Array0);
      boolean boolean0 = nativeWith0.has(0, (Scriptable) nativeUint32Array0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeWith nativeWith0 = new NativeWith(nativeBoolean0, nativeBoolean0);
      Object[] objectArray0 = nativeWith0.getIds();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(1);
      NativeWith nativeWith0 = new NativeWith(nativeUint16Array0, nativeUint16Array0);
      String string0 = nativeWith0.getClassName();
      assertEquals("With", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeWith nativeWith0 = new NativeWith(nativeBoolean0, nativeBoolean0);
      Object object0 = nativeWith0.get("", (Scriptable) nativeBoolean0);
      boolean boolean0 = NativeWith.isWithFunction(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeWith nativeWith0 = new NativeWith(nativeBoolean0, nativeBoolean0);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeWith0, 130);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeWith nativeWith0 = new NativeWith(nativeBoolean0, nativeBoolean0);
      Context context0 = Context.enter();
      NativeError nativeError0 = new NativeError();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeBoolean0, "With", 1, "language version", 2510, nativeError0);
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      // Undeclared exception!
      try { 
        nativeWith0.execIdCall(idFunctionObjectES6_0, context0, nativeUint8Array0, nativeBoolean0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Function \"With\" must be called directly, and not by way of a function of another name.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeWith nativeWith0 = new NativeWith(nativeBoolean0, nativeBoolean0);
      nativeWith0.delete("E&:^)C9~2W");
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeWith nativeWith0 = new NativeWith(nativeBoolean0, nativeBoolean0);
      nativeWith0.delete((-3891));
      assertEquals("With", nativeWith0.getClassName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, (Scriptable) null);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        NativeWith.newWithSpecial(context0, nativeWith0, context0.emptyArgs);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeWith", e);
      }
  }
}
