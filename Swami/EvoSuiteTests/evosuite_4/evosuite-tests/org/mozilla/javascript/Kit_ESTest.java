/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 23:19:48 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Kit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Kit_ESTest extends Kit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, ObjectInputStream> hashMap0 = new HashMap<Integer, ObjectInputStream>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, (ObjectInputStream) null);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      Object object0 = Kit.makeHashKeyFromPair(hashMap0, hashMap1);
      Object object1 = hashMap1.put(object0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = Kit.xDigitToInt(65, 65);
      assertEquals(1050, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Kit.xDigitToInt(58, 58);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Kit.xDigitToInt((-115), (-115));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Kit.xDigitToInt(102, 102);
      assertEquals(1647, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      Object object1 = new Object();
      Object object2 = Kit.addListener(object0, object1);
      Object object3 = Kit.addListener(object2, object1);
      Object object4 = Kit.removeListener(object3, object0);
      assertNotSame(object3, object2);
      assertNotNull(object4);
      assertNotSame(object4, object3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      Object object1 = new Object();
      Object object2 = Kit.addListener(object0, object1);
      Object object3 = Kit.removeListener(object2, object0);
      assertNotSame(object3, object0);
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      Object object1 = Kit.addListener(object0, object0);
      Object object2 = Kit.removeListener(object1, object0);
      assertSame(object0, object2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      Object object1 = Kit.removeListener(object0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        Kit.readStream(sequenceInputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad initialBufferCapacity: -1
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = Kit.readStream(byteArrayInputStream0, (byte)1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(21, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("securityDomain should be null if setSecurityController() was never called");
      String string0 = Kit.readReader(stringReader0);
      assertEquals("securityDomain should be null if setSecurityController() was never called", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, ObjectInputStream> hashMap0 = new HashMap<Integer, ObjectInputStream>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      Object object0 = Kit.makeHashKeyFromPair(hashMap0, hashMap1);
      hashMap1.put(object0, object0);
      Object object1 = Kit.initHash(hashMap1, object0, (Object) null);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, ObjectInputStream> hashMap0 = new HashMap<Integer, ObjectInputStream>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      Object object0 = hashMap1.put(hashMap0, hashMap0);
      Kit.initHash(hashMap1, object0, (Object) null);
      assertEquals(2, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockThrowable mockThrowable0 = new MockThrowable();
      RuntimeException runtimeException0 = Kit.initCause(mockRuntimeException0, mockThrowable0);
      assertSame(mockRuntimeException0, runtimeException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      RuntimeException runtimeException0 = Kit.initCause(mockRuntimeException0, mockThrowable0);
      assertSame(mockRuntimeException0, runtimeException0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = Kit.addListener("org.mozilla.javascript.4it", "org.mozilla.javascript.4it");
      Object object1 = Kit.getListener(object0, 2);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      Object object1 = Kit.addListener(object0, object0);
      // Undeclared exception!
      try { 
        Kit.getListener(object1, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Kit.addListener(object0, object0);
      Object object2 = Kit.getListener(object1, 1);
      assertSame(object0, object2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      Object object1 = Kit.addListener(object0, object0);
      Object object2 = Kit.getListener(object1, 0);
      assertSame(object0, object2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = Kit.getListener((Object) null, 0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Kit.newInstanceOrNull(class0);
      Object object1 = Kit.getListener(object0, 0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Kit.getListener(object0, 1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        Kit.codeBug("FAILED ASSERTION");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        Kit.codeBug();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<?> class0 = Kit.classOrNull("securityDomain should be null if setSecurityController() was never called");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = Kit.classOrNull(classLoader0, "org/mozilla/javascript/RegExpProxy");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = Kit.classOrNull(classLoader0, ";D(S");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = Kit.testIfCanLoadRhinoClasses(classLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Kit.addListener((Object) null, object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Kit kit0 = new Kit();
  }
}
