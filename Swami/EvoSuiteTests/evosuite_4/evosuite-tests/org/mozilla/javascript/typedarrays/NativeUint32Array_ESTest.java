/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 21:39:05 GMT 2018
 */

package org.mozilla.javascript.typedarrays;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeTypedArrayView;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeUint32Array_ESTest extends NativeUint32Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(5);
      Long long0 = new Long((-23L));
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeUint32Array0, long0, 130, "language version", 10, nativeUint32Array0);
      NativeTypedArrayView nativeTypedArrayView0 = nativeUint32Array0.realThis(nativeUint32Array0, idFunctionObjectES6_0);
      assertEquals(5, nativeTypedArrayView0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(5);
      Long long0 = new Long(1171L);
      Object object0 = nativeUint32Array0.js_set((-435), long0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(5);
      Long long0 = new Long(1171L);
      Long long1 = nativeUint32Array0.set(4, long0);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(5);
      Object object0 = nativeUint32Array0.js_get(5);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(5);
      Context context0 = Context.enter();
      NativeUint32Array.init(context0, nativeUint32Array0, false);
      assertEquals("Uint32Array", nativeUint32Array0.getClassName());
      assertEquals(4, nativeUint32Array0.getBytesPerElement());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 4, (-3135));
      // Undeclared exception!
      try { 
        nativeUint32Array0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint32Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 2, 8);
      // Undeclared exception!
      try { 
        nativeUint32Array0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.mozilla.javascript.typedarrays.ByteIo", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(5);
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeTypedArrayView nativeTypedArrayView0 = nativeUint32Array0.construct(nativeArrayBuffer0, (-1), 5);
      assertEquals(5, nativeTypedArrayView0.getArrayLength());
      assertEquals((-1), nativeTypedArrayView0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(85);
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array(0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeInt32Array0, nativeInt32Array0, 85, 2600);
      // Undeclared exception!
      try { 
        nativeUint32Array0.realThis((Scriptable) null, idFunctionObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      Long long0 = new Long(2);
      // Undeclared exception!
      try { 
        nativeUint32Array0.set(0, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.typedarrays.NativeUint32Array", e);
      }
  }
}
