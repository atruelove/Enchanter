/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 02:37:59 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.EmbeddedSlotMap;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.typedarrays.NativeUint8Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedSlotMap_ESTest extends EmbeddedSlotMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      embeddedSlotMap0.get(object0, 629, scriptableObject_SlotAccess0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      embeddedSlotMap0.forEach(consumer0);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get((Object) null, 0, scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(scriptableObject_SlotAccess0, (-857), scriptableObject_SlotAccess1);
      embeddedSlotMap0.get((Object) null, (-857), scriptableObject_SlotAccess1);
      embeddedSlotMap0.remove((Object) null, (-857));
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get((Object) null, (-857), scriptableObject_SlotAccess0);
      assertEquals(1, embeddedSlotMap0.size());
      
      embeddedSlotMap0.remove((Object) null, (-857));
      assertTrue(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get(object0, 349, scriptableObject_SlotAccess0);
      // Undeclared exception!
      try { 
        embeddedSlotMap0.remove(object0, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY;
      embeddedSlotMap0.get(object0, 629, scriptableObject_SlotAccess0);
      embeddedSlotMap0.get((Object) null, 2, scriptableObject_SlotAccess0);
      embeddedSlotMap0.remove(object0, 629);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      embeddedSlotMap0.remove("~6l?%x]j)GSam+\"6>", 3);
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(embeddedSlotMap0, 3, 3);
      embeddedSlotMap0.addSlot(scriptableObject_GetterSlot0);
      embeddedSlotMap0.query(scriptableObject_GetterSlot0, 3);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      boolean boolean0 = embeddedSlotMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(object0, (-374), scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(object0, (-374), scriptableObject_SlotAccess0);
      assertEquals(1, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array();
      // Undeclared exception!
      try { 
        Context.getContext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("org.mozilla.javascript.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get((Object) null, (-857), scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.QUERY;
      embeddedSlotMap0.get(scriptableObject_Slot0, (-857), scriptableObject_SlotAccess1);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.QUERY;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get((Object) null, 629, scriptableObject_SlotAccess0);
      assertNull(scriptableObject_Slot0);
      assertEquals(0, embeddedSlotMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      ScriptableObject.Slot scriptableObject_Slot0 = embeddedSlotMap0.get((Object) null, (-857), scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(scriptableObject_SlotAccess0, (-857), scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(scriptableObject_Slot0, (-857), scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get(scriptableObject_Slot0, (-857), scriptableObject_SlotAccess1);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_CONST;
      embeddedSlotMap0.get((Object) null, (-857), scriptableObject_SlotAccess0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      embeddedSlotMap0.get((Object) null, (-857), scriptableObject_SlotAccess1);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      embeddedSlotMap0.forEach(consumer0);
      Object object0 = new Object();
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.MODIFY_GETTER_SETTER;
      Object object1 = new Object();
      embeddedSlotMap0.get(object1, (-1143), scriptableObject_SlotAccess0);
      embeddedSlotMap0.get(object0, (-1143), scriptableObject_SlotAccess0);
      ScriptableObject.Slot scriptableObject_Slot0 = new ScriptableObject.Slot(object0, 5, (-1143));
      scriptableObject_Slot0.name = (Object) "~&PA8gXb#A[H}l}m-E";
      embeddedSlotMap0.addSlot(scriptableObject_Slot0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess1 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      embeddedSlotMap0.get(object0, (-1143), scriptableObject_SlotAccess1);
      assertFalse(embeddedSlotMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmbeddedSlotMap embeddedSlotMap0 = new EmbeddedSlotMap();
      ScriptableObject.GetterSlot scriptableObject_GetterSlot0 = new ScriptableObject.GetterSlot(embeddedSlotMap0, 3, 3);
      embeddedSlotMap0.addSlot(scriptableObject_GetterSlot0);
      ScriptableObject.SlotAccess scriptableObject_SlotAccess0 = ScriptableObject.SlotAccess.CONVERT_ACCESSOR_TO_DATA;
      embeddedSlotMap0.get("~6l?%x]j)GSam+\"6>", 3, scriptableObject_SlotAccess0);
      assertEquals(1, embeddedSlotMap0.size());
  }
}
