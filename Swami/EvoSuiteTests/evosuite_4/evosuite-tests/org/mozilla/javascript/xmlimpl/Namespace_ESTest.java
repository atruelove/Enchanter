/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 14:14:01 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.NativeContinuation;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Synchronizer;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeInt16Array;
import org.mozilla.javascript.typedarrays.NativeInt32Array;
import org.mozilla.javascript.typedarrays.NativeInt8Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.Namespace;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Namespace_ESTest extends Namespace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Unreachable.");
      Namespace.toSourceImpl("Unreachable.", "Unreachable.", stringBuilder0);
      assertEquals("Unreachable.new Namespace('Unreachable.', 'Unreachable.')", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      Namespace.toSourceImpl("", "", stringBuilder0);
      assertEquals("new Namespace()", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeUint8Array nativeUint8Array0 = new NativeUint8Array(8255);
      Namespace namespace0 = Namespace.create(nativeUint8Array0, (Namespace) null, (XmlNode.Namespace) null);
      // Undeclared exception!
      try { 
        namespace0.toLocaleString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeInt8Array nativeInt8Array0 = new NativeInt8Array(1);
      Synchronizer synchronizer0 = new Synchronizer(nativeInt8Array0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("\">", "\">");
      Namespace namespace0 = Namespace.create(synchronizer0, (Namespace) null, xmlNode_Namespace0);
      namespace0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      // Undeclared exception!
      try { 
        namespace0.getInstanceIdValue((-1151));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1151
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      Object object0 = namespace0.getInstanceIdValue(2);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      Object object0 = namespace0.getInstanceIdValue(1);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeInt32Array nativeInt32Array0 = new NativeInt32Array();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("rl!2l", "rl!2l");
      Namespace namespace0 = Namespace.create(nativeInt32Array0, (Namespace) null, xmlNode_Namespace0);
      // Undeclared exception!
      try { 
        namespace0.getInstanceIdName(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create((String) null);
      Namespace namespace0 = Namespace.create(nativeUint16Array0, (Namespace) null, xmlNode_Namespace0);
      Class<Namespace> class0 = Namespace.class;
      Object object0 = namespace0.getDefaultValue(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = Context.enter();
      NativeInt16Array nativeInt16Array0 = new NativeInt16Array(160);
      Scriptable scriptable0 = context0.newObject((Scriptable) nativeInt16Array0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create(scriptable0, (Namespace) null, xmlNode_Namespace0);
      namespace0.exportAsJSClass(2, nativeInt16Array0, false);
      Class<Integer> class0 = Integer.class;
      Object object0 = ScriptableObject.getDefaultValue((Scriptable) namespace0, (Class<?>) class0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("Ss5\"Kn+Yrir9{X!;)olU");
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(namespace0, "Ss5\"Kn+Yrir9{X!;)olU", 2, "Ss5\"Kn+Yrir9{X!;)olU", 2, namespace0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      // Undeclared exception!
      try { 
        namespace0.execIdCall(idFunctionObject0, context0, namespace0, namespace0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=2 MASTER=Ss5\"Kn+Yrir9{X!;)olU
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      Object object0 = namespace0.equivalentValues(namespace0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("prefix");
      Namespace namespace0 = Namespace.create(nativeContinuation0, (Namespace) null, xmlNode_Namespace0);
      Namespace namespace1 = namespace0.newNamespace("prefix", "prefix");
      boolean boolean0 = namespace0.hasInstance(namespace1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(1820);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("ArrayBuffer", "ArrayBuffer");
      Namespace namespace0 = Namespace.create(nativeUint32Array0, (Namespace) null, xmlNode_Namespace0);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArrayBuffer0, (QName) null, xmlNode_QName0);
      Namespace namespace1 = namespace0.castToNamespace(qName0);
      assertTrue(namespace1.equals((Object)namespace0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      Namespace namespace0 = Namespace.create(nativeArrayBuffer0, (Namespace) null, (XmlNode.Namespace) null);
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XMLList xMLList0 = new XMLList(xMLLibImpl1, namespace0, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "ArrayBuffer");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "ArrayBuffer");
      XML xML0 = new XML(xMLLibImpl0, namespace0, xMLList0, xmlNode0);
      QName qName0 = xML0.newQName(xmlNode_QName0);
      Namespace namespace1 = namespace0.constructNamespace(qName0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createEmpty(xmlProcessor0);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespace();
      Namespace namespace0 = Namespace.create(importerTopLevel0, (Namespace) null, xmlNode_Namespace0);
      Namespace namespace1 = namespace0.constructNamespace(namespace0);
      assertEquals("", namespace1.prefix());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("Ss5\"Kn+Yrir9{X!;)olU");
      Namespace namespace0 = Namespace.create((Scriptable) null, (Namespace) null, xmlNode_Namespace0);
      Namespace namespace1 = namespace0.castToNamespace(namespace0);
      assertSame(namespace1, namespace0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("language version");
      Namespace namespace0 = Namespace.create(importerTopLevel0, (Namespace) null, xmlNode_Namespace0);
      assertNotNull(namespace0);
      
      Object[] objectArray0 = namespace0.getAllIds();
      IdFunctionObject idFunctionObject0 = namespace0.exportAsJSClass(15, (Scriptable) null, false);
      Namespace namespace1 = (Namespace)namespace0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, objectArray0);
      assertEquals("uri", namespace1.prefix());
      assertEquals(2, objectArray0.length);
      assertEquals(2, idFunctionObject0.getArity());
      assertEquals("prefix", namespace1.toLocaleString());
  }
}
