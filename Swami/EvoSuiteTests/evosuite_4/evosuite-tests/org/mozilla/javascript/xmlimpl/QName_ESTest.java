/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 15:07:46 GMT 2018
 */

package org.mozilla.javascript.xmlimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeFloat64Array;
import org.mozilla.javascript.typedarrays.NativeUint16Array;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.xml.XMLObject;
import org.mozilla.javascript.xmlimpl.Namespace;
import org.mozilla.javascript.xmlimpl.QName;
import org.mozilla.javascript.xmlimpl.XML;
import org.mozilla.javascript.xmlimpl.XMLLibImpl;
import org.mozilla.javascript.xmlimpl.XMLList;
import org.mozilla.javascript.xmlimpl.XmlNode;
import org.mozilla.javascript.xmlimpl.XmlProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QName_ESTest extends QName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      XmlNode.QName xmlNode_QName1 = qName0.toNodeQname();
      assertSame(xmlNode_QName1, xmlNode_QName0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[12];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      String string0 = qName0.prefix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, (String) null);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespace();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.newQName(xMLLibImpl1, "JCJ", (String) null, (String) null);
      String string0 = qName1.toString();
      assertEquals("JCJ::*", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      qName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeFloat64Array nativeFloat64Array0 = new NativeFloat64Array();
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.create("factory.makeContext() returned Context instance already associated with some thread");
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "factory.makeContext() returned Context instance already associated with some thread");
      QName qName0 = QName.create(xMLLibImpl0, nativeFloat64Array0, (QName) null, xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.getInstanceIdValue(13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 13
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "ArrayBuffer");
      QName qName0 = QName.create(xMLLibImpl0, nativeArrayBuffer0, (QName) null, xmlNode_QName0);
      Object object0 = qName0.getInstanceIdValue(2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[12];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      Object object0 = qName0.getInstanceIdValue(1);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, (String) null);
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      // Undeclared exception!
      try { 
        qName0.getInstanceIdName(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      XmlNode.QName xmlNode_QName1 = qName0.getDelegate();
      assertSame(xmlNode_QName0, xmlNode_QName1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "ArrayBuffer");
      QName qName0 = QName.create(xMLLibImpl0, nativeArrayBuffer0, (QName) null, xmlNode_QName0);
      Object[] objectArray0 = qName0.getAllIds();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 13, 1);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, "ArrayBuffer", "ArrayBuffer");
      XML xML0 = new XML(xMLLibImpl0, nativeUint32Array0, (XMLObject) null, xmlNode0);
      XmlNode.QName xmlNode_QName0 = xmlNode0.getQname();
      QName qName0 = xML0.newQName(xmlNode_QName0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArrayBuffer0, context0, 2, "constructor", 305, nativeUint32Array0);
      // Undeclared exception!
      try { 
        qName0.execIdCall(idFunctionObject0, context0, xML0, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=2 MASTER=org.mozilla.javascript.typedarrays.NativeArrayBuffer@14
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[12];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, (String) null);
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      Object object0 = qName0.equivalentValues(qName0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      boolean boolean0 = qName0.equals(qName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, (String) null);
      XmlNode.Namespace xmlNode_Namespace0 = xmlNode0.getNamespace();
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        qName0.constructQName(xMLLibImpl1, context0, context0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.xmlimpl.XMLLibImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[12];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createElement(xmlProcessor0, (String) null, (String) null);
      XML xML0 = new XML(xMLLibImpl1, nativeArray0, (XMLObject) null, xmlNode0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl2 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Namespace namespace0 = Namespace.create(xML0, (Namespace) null, xmlNode_Namespace0);
      QName qName1 = qName0.constructQName(xMLLibImpl2, context0, namespace0, (Object) null);
      assertEquals("null", qName1.localName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[12];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.constructQName(xMLLibImpl1, context0, (Object) null, qName0);
      assertEquals("", qName1.localName());
      assertEquals("", qName0.localName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      NativeUint16Array nativeUint16Array0 = new NativeUint16Array(11);
      XMLList xMLList0 = new XMLList(xMLLibImpl0, nativeUint16Array0, (XMLObject) null);
      XmlProcessor xmlProcessor0 = new XmlProcessor();
      XmlNode xmlNode0 = XmlNode.createText(xmlProcessor0, "language version");
      XML xML0 = new XML(xMLLibImpl0, nativeUint16Array0, xMLList0, xmlNode0);
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create((XmlNode.Namespace) null, "language version");
      QName qName0 = xML0.newQName(xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      QName qName1 = qName0.constructQName(xMLLibImpl1, context0, qName0);
      assertFalse(qName1.isSealed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLLibImpl xMLLibImpl0 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      XmlNode.Namespace xmlNode_Namespace0 = XmlNode.Namespace.GLOBAL;
      XmlNode.QName xmlNode_QName0 = XmlNode.QName.create(xmlNode_Namespace0, "");
      QName qName0 = QName.create(xMLLibImpl0, nativeArray0, (QName) null, xmlNode_QName0);
      XMLLibImpl xMLLibImpl1 = mock(XMLLibImpl.class, new ViolatedAssumptionAnswer());
      Context context0 = Context.enter();
      QName qName1 = qName0.castToQName(xMLLibImpl1, context0, qName0);
      assertFalse(qName1.avoidObjectDetection());
  }
}
