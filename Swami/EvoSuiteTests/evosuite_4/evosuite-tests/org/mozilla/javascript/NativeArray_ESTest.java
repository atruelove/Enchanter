/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 01 15:20:07 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.NativeArrayIterator;
import org.mozilla.javascript.NativeCall;
import org.mozilla.javascript.NativeCallSite;
import org.mozilla.javascript.NativeJavaConstructor;
import org.mozilla.javascript.NativeJavaTopPackage;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.SymbolKey;
import org.mozilla.javascript.Synchronizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Object object0 = nativeCall0.defaultGet("<?]3z\"fa6@),");
      NativeArray.ElementComparator nativeArray_ElementComparator0 = new NativeArray.ElementComparator();
      int int0 = nativeArray_ElementComparator0.compare(nativeCall0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Object object0 = nativeCall0.defaultGet("<?]3z\"fa6@),");
      NativeArray.ElementComparator nativeArray_ElementComparator0 = new NativeArray.ElementComparator();
      int int0 = nativeArray_ElementComparator0.compare(object0, "Symbol(Symbol.iterator)");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeArray.ElementComparator nativeArray_ElementComparator0 = new NativeArray.ElementComparator();
      int int0 = nativeArray_ElementComparator0.compare(nativeJavaTopPackage0, nativeJavaTopPackage0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeArray.ElementComparator nativeArray_ElementComparator0 = new NativeArray.ElementComparator();
      NativeArray.ElementComparator nativeArray_ElementComparator1 = new NativeArray.ElementComparator(nativeArray_ElementComparator0);
      assertFalse(nativeArray_ElementComparator1.equals((Object)nativeArray_ElementComparator0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, "gd\"-@['ELm=(We!");
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(10L);
      Context context0 = Context.enter();
      Double double0 = new Double(0);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, double0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483648L);
      // Undeclared exception!
      try { 
        nativeArray0.toArray((Object[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1));
      // Undeclared exception!
      try { 
        nativeArray0.subList(177, 10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4294967295L);
      // Undeclared exception!
      try { 
        nativeArray0.size();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      int int0 = nativeArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483664L);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext((Context) null);
      NativeArray nativeArray1 = (NativeArray)context0.initSafeStandardObjects((ScriptableObject) nativeArray0);
      assertFalse(nativeArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      // Undeclared exception!
      try { 
        nativeArray0.setInstanceIdValue((-1), "SyntaxError");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1540L));
      nativeArray0.setInstanceIdAttributes(1, 0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1L));
      nativeArray0.setDenseOnly(false);
      // Undeclared exception!
      try { 
        nativeArray0.setDenseOnly(true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1968L));
      NativeObject nativeObject0 = new NativeObject();
      // Undeclared exception!
      try { 
        nativeArray0.set((-71), nativeObject0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      LinkedList<NativeCallSite> linkedList0 = new LinkedList<NativeCallSite>();
      // Undeclared exception!
      try { 
        nativeArray0.retainAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1915L);
      LinkedList<NativeJavaConstructor> linkedList0 = new LinkedList<NativeJavaConstructor>();
      // Undeclared exception!
      try { 
        nativeArray0.removeAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Double double0 = new Double(2000.0);
      // Undeclared exception!
      try { 
        nativeArray0.remove((Object) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      // Undeclared exception!
      try { 
        nativeArray0.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2912L));
      ScriptableObject.putProperty((Scriptable) nativeArray0, 8, (Object) "ly^");
      assertEquals(9L, nativeArray0.jsGet_length());
      assertEquals(9L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.listIterator(20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483648L);
      // Undeclared exception!
      try { 
        nativeArray0.listIterator((-692));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2732L);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        nativeArray0.replaceAll(unaryOperator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.lastIndexOf((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      int int0 = nativeArray0.lastIndexOf("Symbol(Symbol.replace)");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      long long0 = nativeArray0.jsGet_length();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1));
      boolean boolean0 = nativeArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      // Undeclared exception!
      try { 
        nativeArray0.initPrototypeId(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeArray.ElementComparator nativeArray_ElementComparator0 = new NativeArray.ElementComparator();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) nativeArray_ElementComparator0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      boolean boolean0 = nativeArray0.contains(nativeArray_ElementComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      Byte byte0 = new Byte((byte)120);
      int int0 = nativeArray0.indexOf(byte0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483664L);
      boolean boolean0 = nativeArray0.has(0, (Scriptable) nativeArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeArray.StringLikeComparator nativeArray_StringLikeComparator0 = new NativeArray.StringLikeComparator();
      NativeArray nativeArray0 = new NativeArray(1L);
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, nativeArray_StringLikeComparator0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = NativeArray.getMaximumInitialCapacity();
      assertEquals(10000, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4294967295L);
      NativeArrayIterator nativeArrayIterator0 = new NativeArrayIterator(nativeArray0, nativeArray0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      long long0 = NativeArray.getLengthProperty(context0, nativeArrayIterator0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2604L));
      Synchronizer synchronizer0 = new Synchronizer(nativeArray0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      long long0 = NativeArray.getLengthProperty(context0, synchronizer0);
      assertEquals(4294964692L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2464L);
      // Undeclared exception!
      try { 
        nativeArray0.getInstanceIdValue(2147483645);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2147483645
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      // Undeclared exception!
      try { 
        nativeArray0.getInstanceIdName(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("org.mozilla.javascript.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1894L));
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(9);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Property 9 not found.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object[] objectArray1 = nativeArray0.toArray();
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      // Undeclared exception!
      try { 
        nativeArray0.get(0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeCall nativeCall0 = new NativeCall();
      Object object0 = nativeArray0.get(1575, (Scriptable) nativeCall0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      SymbolKey symbolKey0 = SymbolKey.REPLACE;
      int int0 = nativeArray0.findPrototypeId(symbolKey0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      SymbolKey symbolKey0 = SymbolKey.ITERATOR;
      int int0 = nativeArray0.findPrototypeId(symbolKey0);
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      int int0 = nativeArray0.findPrototypeId("SyntaxError");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2847L);
      int int0 = nativeArray0.findPrototypeId("prototype");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      int int0 = nativeArray0.findPrototypeId("reverse");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2624L));
      int int0 = nativeArray0.findPrototypeId("PKc0l{");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2796L);
      int int0 = nativeArray0.findPrototypeId("xuvu(");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2854L);
      int int0 = nativeArray0.findPrototypeId("xuvu");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1894L));
      int int0 = nativeArray0.findPrototypeId("pop");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      NativeArray nativeArray0 = new NativeArray(0L);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArray0, nativeArray0, 292, "map", 0, nativeArray0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=292 MASTER=org.mozilla.javascript.NativeArray@3
         //
         verifyException("org.mozilla.javascript.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1894L));
      nativeArray0.delete(7);
      assertEquals("object", nativeArray0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1894L));
      nativeArray0.delete(22);
      assertEquals((-1894L), nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray((-1));
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      nativeArray1.defineOwnProperty(context0, (Object) null, (ScriptableObject) nativeArray0, true);
      assertEquals(5L, nativeArray1.getLength());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      NativeArray nativeArray1 = new NativeArray(13);
      boolean boolean0 = nativeArray0.containsAll(nativeArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      assertEquals(1L, nativeArray0.jsGet_length());
      
      boolean boolean0 = nativeArray0.containsAll(nativeArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2405L);
      // Undeclared exception!
      try { 
        nativeArray0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(521L);
      // Undeclared exception!
      try { 
        nativeArray0.addAll((Collection) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.addAll(0, (Collection) nativeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      Double double0 = new Double(0L);
      // Undeclared exception!
      try { 
        nativeArray0.add((Object) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-3452L));
      Synchronizer synchronizer0 = new Synchronizer(nativeArray0);
      // Undeclared exception!
      try { 
        nativeArray0.add(3, (Object) synchronizer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeArray", e);
      }
  }
}
