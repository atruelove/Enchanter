/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 01:32:19 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.Node;
import org.mozilla.javascript.NodeTransformer;
import org.mozilla.javascript.ast.AstRoot;
import org.mozilla.javascript.ast.ConditionalExpression;
import org.mozilla.javascript.ast.ErrorNode;
import org.mozilla.javascript.ast.ForLoop;
import org.mozilla.javascript.ast.FunctionNode;
import org.mozilla.javascript.ast.Name;
import org.mozilla.javascript.ast.ObjectLiteral;
import org.mozilla.javascript.ast.ObjectProperty;
import org.mozilla.javascript.ast.ParenthesizedExpression;
import org.mozilla.javascript.ast.ScriptNode;
import org.mozilla.javascript.ast.StringLiteral;
import org.mozilla.javascript.ast.Yield;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeTransformer_ESTest extends NodeTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      AstRoot astRoot0 = new AstRoot(0);
      ForLoop forLoop0 = new ForLoop();
      nodeTransformer0.visitNew(forLoop0, astRoot0);
      assertEquals(8, Node.END_YIELDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      StringLiteral stringLiteral0 = new StringLiteral();
      FunctionNode functionNode0 = new FunctionNode();
      nodeTransformer0.visitCall(stringLiteral0, functionNode0);
      assertEquals(24, Node.JSDOC_PROP);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      Name name0 = new Name(93);
      FunctionNode functionNode0 = new FunctionNode(93, name0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(12, 2);
      objectLiteral0.addChildrenToFront(functionNode0);
      objectLiteral0.setType(8);
      functionNode0.addChild(objectLiteral0);
      // Undeclared exception!
      try { 
        nodeTransformer0.transform((ScriptNode) functionNode0, compilerEnvirons0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      Name name0 = new Name((-1686), "");
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.addChild(name0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      nodeTransformer0.transform((ScriptNode) functionNode0, false, compilerEnvirons0);
      assertEquals(10, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Name name0 = new Name(2920, "");
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.addChild(name0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      functionNode0.addFunction(functionNode0);
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      // Undeclared exception!
      nodeTransformer0.transform((ScriptNode) functionNode0, false, compilerEnvirons0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      Name name0 = new Name(93);
      FunctionNode functionNode0 = new FunctionNode(93, name0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(12, 2);
      objectLiteral0.addChildrenToFront(functionNode0);
      objectLiteral0.setType(7);
      functionNode0.addChild(objectLiteral0);
      // Undeclared exception!
      try { 
        nodeTransformer0.transform((ScriptNode) functionNode0, compilerEnvirons0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      Name name0 = new Name((-755));
      FunctionNode functionNode0 = new FunctionNode(93, name0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(12, 2);
      objectLiteral0.setType(4);
      functionNode0.addChild(objectLiteral0);
      nodeTransformer0.transform((ScriptNode) functionNode0, compilerEnvirons0);
      assertEquals(7, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      Yield yield0 = new Yield(8, 6);
      objectProperty0.addChildrenToFront(yield0);
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.addChildToFront(objectProperty0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      nodeTransformer0.transform((ScriptNode) functionNode0, true, compilerEnvirons0);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      Name name0 = new Name(93);
      FunctionNode functionNode0 = new FunctionNode(93, name0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(12, 2);
      objectLiteral0.setType(3);
      functionNode0.addChild(objectLiteral0);
      nodeTransformer0.transform((ScriptNode) functionNode0, compilerEnvirons0);
      assertTrue(compilerEnvirons0.isStrictMode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty();
      Yield yield0 = new Yield(8, 6);
      objectProperty0.addChildrenToFront(yield0);
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(objectProperty0);
      objectProperty0.addChildrenToBack(parenthesizedExpression0);
      // Undeclared exception!
      try { 
        nodeTransformer0.visitLet(true, yield0, (Node) null, objectProperty0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NodeTransformer nodeTransformer0 = new NodeTransformer();
      AstRoot astRoot0 = new AstRoot(0);
      ErrorNode errorNode0 = new ErrorNode();
      astRoot0.addChildToFront(errorNode0);
      ForLoop forLoop0 = new ForLoop();
      Node node0 = new Node(6, errorNode0, forLoop0, forLoop0);
      ConditionalExpression conditionalExpression0 = new ConditionalExpression();
      // Undeclared exception!
      try { 
        nodeTransformer0.visitLet(false, forLoop0, conditionalExpression0, astRoot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Node", e);
      }
  }
}
