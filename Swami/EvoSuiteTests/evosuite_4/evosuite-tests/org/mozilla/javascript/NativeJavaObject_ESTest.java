/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 05:06:56 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BoundFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.FieldAndMethods;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.InterpretedFunction;
import org.mozilla.javascript.MemberBox;
import org.mozilla.javascript.NativeBoolean;
import org.mozilla.javascript.NativeGenerator;
import org.mozilla.javascript.NativeIterator;
import org.mozilla.javascript.NativeJavaArray;
import org.mozilla.javascript.NativeJavaClass;
import org.mozilla.javascript.NativeJavaConstructor;
import org.mozilla.javascript.NativeJavaMethod;
import org.mozilla.javascript.NativeJavaObject;
import org.mozilla.javascript.NativeJavaTopPackage;
import org.mozilla.javascript.NativeNumber;
import org.mozilla.javascript.NativeObject;
import org.mozilla.javascript.NativeScript;
import org.mozilla.javascript.NativeStringIterator;
import org.mozilla.javascript.NativeSymbol;
import org.mozilla.javascript.NativeWith;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.UniqueTag;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;
import org.mozilla.javascript.typedarrays.NativeUint32Array;
import org.mozilla.javascript.typedarrays.NativeUint8ClampedArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeJavaObject_ESTest extends NativeJavaObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Long long0 = new Long(1251L);
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceTypeImpl(class0, long0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot convert 1251 to java.lang.Byte
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      nativeJavaClass0.setPrototype(nativeJavaConstructor0);
      assertTrue(nativeJavaConstructor0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      nativeJavaObject0.setParentScope(nativeUint8ClampedArray0);
      assertTrue(nativeUint8ClampedArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(nativeArrayBuffer0, 0, 0);
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      // Undeclared exception!
      try { 
        nativeJavaObject0.put("dW+X!$`nZ#j8J", (Scriptable) nativeUint32Array0, (Object) uniqueTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeArrayBuffer0, false);
      // Undeclared exception!
      try { 
        nativeJavaClass0.put((-4920), (Scriptable) nativeGenerator0, (Object) nativeGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      Class<ImporterTopLevel> class1 = ImporterTopLevel.class;
      NativeJavaObject nativeJavaObject0 = null;
      try {
        nativeJavaObject0 = new NativeJavaObject(nativeJavaConstructor0, class1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("org.mozilla.javascript.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      boolean boolean0 = nativeJavaObject0.hasInstance(nativeArrayBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      Delegator delegator0 = new Delegator(nativeJavaObject0);
      // Undeclared exception!
      try { 
        nativeJavaObject0.has("", (Scriptable) delegator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      boolean boolean0 = nativeJavaObject0.has(0, (Scriptable) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      int int0 = NativeJavaObject.getSizeRank(class0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      int int0 = NativeJavaObject.getSizeRank(class0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, (Scriptable) null);
      int int0 = NativeJavaObject.getConversionWeight(nativeWith0, class0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      Scriptable scriptable0 = nativeJavaObject0.getPrototype();
      assertNull(scriptable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      // Undeclared exception!
      try { 
        nativeJavaObject0.getIds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        nativeJavaObject0.getDefaultValue(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        nativeJavaObject0.getDefaultValue(class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      // Undeclared exception!
      try { 
        nativeJavaObject0.getDefaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      NativeArrayBuffer nativeArrayBuffer0 = new NativeArrayBuffer(0);
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray(nativeArrayBuffer0, 1, 1);
      Delegator delegator0 = new Delegator(nativeUint8ClampedArray0);
      Context context0 = Context.getCurrentContext();
      BoundFunction boundFunction0 = null;
      try {
        boundFunction0 = new BoundFunction(context0, delegator0, delegator0, delegator0, context0.emptyArgs);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Class<String> class0 = String.class;
      int int0 = NativeJavaObject.getConversionWeight(nativeBoolean0, class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      int int0 = NativeJavaObject.getConversionWeight(uniqueTag0, class0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Class<String> class0 = String.class;
      int int0 = NativeJavaObject.getConversionWeight(object0, class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      Class<NativeSymbol> class0 = NativeSymbol.class;
      boolean boolean0 = NativeJavaObject.canConvert(nativeJavaObject0, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      Class<String> class1 = String.class;
      int int0 = NativeJavaObject.getConversionWeight(class0, class1);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Class<Object> class1 = Object.class;
      int int0 = NativeJavaObject.getConversionWeight(class0, class1);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      int int0 = NativeJavaObject.getConversionWeight("JavaObject", class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      int int0 = NativeJavaObject.getConversionWeight("&S<f$UcY.J", class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<String> class0 = String.class;
      int int0 = NativeJavaObject.getConversionWeight("java.lang.Class@0000000001", class0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Byte byte0 = new Byte((byte)14);
      Class<String> class0 = String.class;
      int int0 = NativeJavaObject.getConversionWeight(byte0, class0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Double double0 = new Double((-2.147483648E9));
      Class<Float> class0 = Float.class;
      boolean boolean0 = NativeJavaObject.canConvert(double0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Double double0 = new Double((-2.147483648E9));
      Class<Float> class0 = Float.TYPE;
      boolean boolean0 = NativeJavaObject.canConvert(double0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Class<NativeGenerator> class0 = NativeGenerator.class;
      int int0 = NativeJavaObject.getConversionWeight(boolean0, class0);
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      int int0 = NativeJavaObject.getConversionWeight((Object) null, class0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      String string0 = nativeJavaObject0.getClassName();
      assertEquals("JavaObject", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      // Undeclared exception!
      try { 
        nativeJavaClass0.get(15, (Scriptable) scriptableObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.NativeJavaObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      nativeJavaClass0.delete("next");
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      nativeJavaClass0.delete(8);
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = (NativeIterator.StopIteration)NativeJavaObject.coerceTypeImpl(class0, nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceType(class0, nativeJavaTopPackage0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot convert [JavaPackage ] to org.mozilla.javascript.InterpretedFunction
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<String> class0 = String.class;
      NativeNumber nativeNumber0 = new NativeNumber(13);
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceTypeImpl(class0, nativeNumber0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      NativeObject nativeObject0 = new NativeObject();
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceTypeImpl(class0, nativeObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = NativeJavaObject.coerceTypeImpl(class0, class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class class1 = (Class)NativeJavaObject.coerceTypeImpl(class0, class0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initSafeStandardObjects();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(scriptableObject0, class0, false);
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceTypeImpl(class0, nativeJavaClass0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot convert class java.nio.CharBuffer to java.nio.CharBuffer
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<NativeGenerator> class0 = NativeGenerator.class;
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceTypeImpl(class0, "");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot convert  to org.mozilla.javascript.NativeGenerator
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<NativeScript> class0 = NativeScript.class;
      Double double0 = new Double((-3253.894));
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceTypeImpl(class0, double0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot convert -3253.894 to org.mozilla.javascript.NativeScript
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Float float0 = new Float(1000000.0);
      Object object0 = NativeJavaObject.coerceTypeImpl(class0, float0);
      assertEquals(1000000, object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Byte byte0 = new Byte((byte)14);
      Class<String> class0 = String.class;
      Object object0 = NativeJavaObject.coerceTypeImpl(class0, byte0);
      assertEquals("14", object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceType(class0, context0.generateObserverCount);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot convert false to java.lang.Byte
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Class<String> class0 = String.class;
      Object object0 = NativeJavaObject.coerceTypeImpl(class0, boolean0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NativeUint8ClampedArray nativeUint8ClampedArray0 = new NativeUint8ClampedArray();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getTypedProperty((Scriptable) nativeUint8ClampedArray0, 0, class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot convert undefined to java.lang.Integer
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = NativeJavaObject.coerceType(class0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceType(class0, (Object) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot convert null to short
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Object object0 = NativeJavaObject.coerceType(class0, "");
      Object object1 = NativeJavaObject.coerceTypeImpl(class0, object0);
      assertEquals((short)0, object1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Double double0 = new Double((-2.147483648E9));
      Class<Float> class0 = Float.TYPE;
      Object object0 = NativeJavaObject.coerceType(class0, double0);
      assertEquals((-2.14748365E9F), object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object object0 = NativeJavaObject.coerceType(class0, charBuffer0);
      Object object1 = NativeJavaObject.coerceTypeImpl(class0, object0);
      assertEquals(Float.NaN, object1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Object object0 = NativeJavaObject.coerceTypeImpl(class0, "kY");
      assertEquals(Double.NaN, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Float> class0 = Float.class;
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object object0 = NativeJavaObject.coerceType(class0, charBuffer0);
      assertNotNull(object0);
      
      Object object1 = NativeJavaObject.coerceTypeImpl(class0, object0);
      assertEquals(Float.NaN, object1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeStringIterator nativeStringIterator0 = new NativeStringIterator(importerTopLevel0, importerTopLevel0);
      NativeJavaArray nativeJavaArray0 = null;
      try {
        nativeJavaArray0 = new NativeJavaArray(importerTopLevel0, nativeStringIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Array expected
         //
         verifyException("org.mozilla.javascript.NativeJavaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      Class<NativeJavaMethod> class0 = NativeJavaMethod.class;
      // Undeclared exception!
      try { 
        NativeJavaObject.coerceTypeImpl(class0, nativeJavaObject0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot convert null to org.mozilla.javascript.NativeJavaMethod
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }
}
