/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 00:58:36 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.IdFunctionObject;
import org.mozilla.javascript.IdFunctionObjectES6;
import org.mozilla.javascript.NativeNumber;
import org.mozilla.javascript.typedarrays.NativeUint32Array;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeNumber_ESTest extends NativeNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.0));
      // Undeclared exception!
      try { 
        nativeNumber0.initPrototypeId(17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 17
         //
         verifyException("org.mozilla.javascript.NativeNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", 15, 140);
      // Undeclared exception!
      try { 
        nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, nativeNumber0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 15
         //
         verifyException("org.mozilla.javascript.NativeNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      Context context0 = Context.enter();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", 6, 140);
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, nativeNumber0, context0.emptyArgs);
      assertEquals("0", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      Context context0 = Context.enter();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", 6, 140);
      // Undeclared exception!
      try { 
        nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"\" called on incompatible object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(52.30716907636);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", 0, 140);
      // Undeclared exception!
      try { 
        nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("org.mozilla.javascript.NativeNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(78.2439868423806);
      Context context0 = Context.enter();
      IdFunctionObjectES6 idFunctionObjectES6_0 = new IdFunctionObjectES6(nativeNumber0, "Number", (-6), "error reporter", 4, nativeNumber0);
      Object object0 = nativeNumber0.execIdCall(idFunctionObjectES6_0, context0, idFunctionObjectES6_0, idFunctionObjectES6_0, context0.emptyArgs);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.7071067811865476);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-4), "Number", 1, nativeNumber0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 13;
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, idFunctionObject0, objectArray0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.7071067811865476);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-4), "Number", 1, nativeNumber0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(160);
      Object[] objectArray0 = new Object[4];
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeUint32Array0, objectArray0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.7071067811865476);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-4), "Number", 1, nativeNumber0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(160);
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeUint32Array0, idFunctionObject0, context0.emptyArgs);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.5206171881417074));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-3), "Number", 13, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 13;
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, idFunctionObject0, objectArray0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.5206171881417074));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-3), "Number", 13, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Object[] objectArray0 = new Object[4];
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, idFunctionObject0, objectArray0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.5206171881417074));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-3), "Number", 13, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(160);
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeUint32Array0, idFunctionObject0, context0.emptyArgs);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.5206171881417074));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-2), "Number", 1, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      Object[] objectArray0 = new Object[7];
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeUint32Array0, objectArray0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.5206171881417074));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-2), "Number", 1, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array();
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeUint32Array0, idFunctionObject0, context0.emptyArgs);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.5206171881417074));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-1), "Number", 1, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) 4;
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, idFunctionObject0, objectArray0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.5206171881417074));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-1), "Number", 1, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(160);
      Object[] objectArray0 = new Object[19];
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeUint32Array0, objectArray0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.5206171881417074));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-1), "Number", 1, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeUint32Array nativeUint32Array0 = new NativeUint32Array(160);
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeUint32Array0, idFunctionObject0, context0.emptyArgs);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1.5206171881417074));
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "Number", (-2), "Number", 1, nativeNumber0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) 4;
      Object object0 = nativeNumber0.execIdCall(idFunctionObject0, context0, nativeNumber0, idFunctionObject0, objectArray0);
      assertEquals(false, object0);
  }
}
