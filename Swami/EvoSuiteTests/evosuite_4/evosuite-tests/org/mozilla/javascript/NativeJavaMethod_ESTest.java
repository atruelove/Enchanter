/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 02 01:53:41 GMT 2018
 */

package org.mozilla.javascript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.BaseFunction;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.Delegator;
import org.mozilla.javascript.ImporterTopLevel;
import org.mozilla.javascript.JavaMembers;
import org.mozilla.javascript.MemberBox;
import org.mozilla.javascript.NativeArrayIterator;
import org.mozilla.javascript.NativeJavaMethod;
import org.mozilla.javascript.typedarrays.NativeArrayBuffer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeJavaMethod_ESTest extends NativeJavaMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Delegator> class0 = Delegator.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) class0;
      String string0 = NativeJavaMethod.scriptSignature(objectArray0);
      assertEquals("null,null,java.lang.Class,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeArrayBuffer nativeArrayBuffer0 = NativeArrayBuffer.EMPTY_BUFFER;
      Object[] objectArray0 = new Object[15];
      objectArray0[8] = (Object) nativeArrayBuffer0;
      String string0 = NativeJavaMethod.scriptSignature(objectArray0);
      assertEquals("null,null,null,null,null,null,null,null,object,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      BaseFunction baseFunction0 = new BaseFunction();
      objectArray0[2] = (Object) baseFunction0;
      String string0 = NativeJavaMethod.scriptSignature(objectArray0);
      assertEquals("null,null,function,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      objectArray0[2] = (Object) "ArrayBuffer";
      String string0 = NativeJavaMethod.scriptSignature(objectArray0);
      assertEquals("null,null,string,null,null,null,null,null,null,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[14];
      objectArray0[1] = (Object) 1;
      String string0 = NativeJavaMethod.scriptSignature(objectArray0);
      assertEquals("null,number,null,null,null,null,null,null,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<Integer> class0 = Integer.class;
      JavaMembers javaMembers0 = new JavaMembers(importerTopLevel0, class0, true);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        nativeJavaMethod0.call(context0, importerTopLevel0, importerTopLevel0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemberBox[] memberBoxArray0 = new MemberBox[0];
      Context context0 = Context.enter();
      int int0 = NativeJavaMethod.findFunction(context0, memberBoxArray0, memberBoxArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Context context0 = Context.enter();
      BaseFunction baseFunction0 = new BaseFunction();
      Class<Delegator> class0 = Delegator.class;
      JavaMembers javaMembers0 = new JavaMembers(baseFunction0, class0);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      nativeJavaMethod0.findCachedFunction(context0, objectArray0);
      // Undeclared exception!
      try { 
        nativeJavaMethod0.call(context0, baseFunction0, baseFunction0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.reflect.Constructor cannot be cast to java.lang.reflect.Method
         //
         verifyException("org.mozilla.javascript.MemberBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Context context0 = Context.enter();
      BaseFunction baseFunction0 = new BaseFunction();
      Class<Delegator> class0 = Delegator.class;
      JavaMembers javaMembers0 = new JavaMembers(baseFunction0, class0);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      int int0 = nativeJavaMethod0.findCachedFunction(context0, objectArray0);
      assertEquals((-1), int0);
      
      int int1 = nativeJavaMethod0.findCachedFunction(context0, context0.emptyArgs);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemberBox[] memberBoxArray0 = new MemberBox[0];
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(memberBoxArray0, "45W-");
      String string0 = nativeJavaMethod0.decompile(0, 0);
      assertEquals("function 45W-() {/*\n*/}\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeArrayIterator> class0 = NativeArrayIterator.class;
      JavaMembers javaMembers0 = new JavaMembers(importerTopLevel0, class0);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      String string0 = nativeJavaMethod0.decompile(11, (-1));
      assertEquals("/*\norg.mozilla.javascript.NativeArrayIterator(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable)\n*/\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<Integer> class0 = Integer.class;
      JavaMembers javaMembers0 = new JavaMembers(importerTopLevel0, class0, true);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) javaMembers0;
      // Undeclared exception!
      try { 
        nativeJavaMethod0.call(context0, importerTopLevel0, importerTopLevel0, objectArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemberBox[] memberBoxArray0 = new MemberBox[0];
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(memberBoxArray0, "45W-");
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        contextFactory0.doTopCall(nativeJavaMethod0, context0, nativeJavaMethod0, nativeJavaMethod0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No methods defined for call
         //
         verifyException("org.mozilla.javascript.NativeJavaMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod((MemberBox) null, "");
      assertEquals("function", nativeJavaMethod0.getTypeOf());
  }
}
